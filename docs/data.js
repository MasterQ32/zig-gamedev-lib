zigAnalysis={"typeKinds": ["Type","Void","Bool","NoReturn","Int","Float","Pointer","Array","Struct","ComptimeFloat","ComptimeInt","Undefined","Null","Optional","ErrorUnion","ErrorSet","Enum","Union","Fn","BoundFn","Opaque","Frame","AnyFrame","Vector","EnumLiteral"],"params": {"zigId": "Wez9N2Fbn3cDaZpY6ut0gVPu6CfYUttdBrBygNxOOU2PgcZ_z0Linc3sAwcVmLYO","zigVersion": "0.5.0+27b290f31","builds": [{"target": "x86_64-linux-gnu"}],"rootName": "test"},"rootPkg": 0,"calls": [{"fn": 746,"result": {"type": 546,"value": 547},"args": [{"type": 546,"value": 548},{"type": 549,"value": null}]},{"fn": 747,"result": {"type": 551,"value": null},"args": [{"type": 546,"value": 552}]},{"fn": 748,"result": {"type": 546,"value": 554},"args": [{"type": 546,"value": 555}]},{"fn": 749,"result": {"type": 546,"value": 557},"args": [{"type": 546,"value": 558}]},{"fn": 750,"result": {"type": 546,"value": 560},"args": [{"type": 546,"value": 561}]},{"fn": 751,"result": {"type": 546,"value": 563},"args": [{"type": 546,"value": 564}]},{"fn": 4,"result": {"type": 551,"value": null},"args": [{"type": 565,"value": null}]},{"fn": 189,"result": {"type": 565,"value": null},"args": [{"type": 566,"value": null}]},{"fn": 752,"result": {"type": 546,"value": 568},"args": [{"type": 546,"value": 569},{"type": 546,"value": 570},{"type": 522,"value": 715},{"type": 523,"value": 716}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 753,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 572},{"type": 573,"value": null},{"type": 573,"value": null}]},{"fn": 754,"result": {"type": 546,"value": 575},"args": [{"type": 546,"value": 572}]},{"fn": 749,"result": {"type": 546,"value": 576},"args": [{"type": 546,"value": 577}]},{"fn": 746,"result": {"type": 546,"value": 578},"args": [{"type": 546,"value": 579},{"type": 549,"value": null}]},{"fn": 755,"result": {"type": 546,"value": 581},"args": [{"type": 546,"value": 582}]},{"fn": 756,"result": {"type": 546,"value": 584},"args": [{"type": 546,"value": 585}]},{"fn": 754,"result": {"type": 546,"value": 586},"args": [{"type": 546,"value": 587}]},{"fn": 754,"result": {"type": 546,"value": 588},"args": [{"type": 546,"value": 589}]},{"fn": 757,"result": {"type": 522,"value": 715},"args": [{"type": 546,"value": 569}]},{"fn": 756,"result": {"type": 546,"value": 591},"args": [{"type": 546,"value": 592}]},{"fn": 758,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 564}]},{"fn": 746,"result": {"type": 546,"value": 594},"args": [{"type": 546,"value": 595},{"type": 549,"value": null}]},{"fn": 746,"result": {"type": 546,"value": 596},"args": [{"type": 546,"value": 597},{"type": 549,"value": null}]},{"fn": 759,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 555}]},{"fn": 760,"result": {"type": 523,"value": 716},"args": [{"type": 546,"value": 569}]},{"fn": 761,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 564}]},{"fn": 746,"result": {"type": 546,"value": 602},"args": [{"type": 546,"value": 603},{"type": 549,"value": null}]},{"fn": 762,"result": {"type": 546,"value": 605},"args": [{"type": 546,"value": 572}]},{"fn": 763,"result": {"type": 546,"value": 607},"args": [{"type": 546,"value": 607}]},{"fn": 749,"result": {"type": 546,"value": 608},"args": [{"type": 546,"value": 572}]},{"fn": 748,"result": {"type": 546,"value": 609},"args": [{"type": 546,"value": 564}]},{"fn": 746,"result": {"type": 546,"value": 557},"args": [{"type": 546,"value": 558},{"type": 549,"value": null}]},{"fn": 762,"result": {"type": 546,"value": 610},"args": [{"type": 546,"value": 587}]},{"fn": 764,"result": {"type": 546,"value": 612},"args": [{"type": 546,"value": 613}]},{"fn": 765,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 572}]},{"fn": 765,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 615}]},{"fn": 766,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 617}]},{"fn": 750,"result": {"type": 546,"value": 618},"args": [{"type": 546,"value": 582}]},{"fn": 767,"result": {"type": 607,"value": null},"args": [{"type": 607,"value": null}]},{"fn": 767,"result": {"type": 607,"value": null},"args": [{"type": 607,"value": null}]},{"fn": 767,"result": {"type": 607,"value": null},"args": [{"type": 607,"value": null}]},{"fn": 746,"result": {"type": 546,"value": 576},"args": [{"type": 546,"value": 577},{"type": 549,"value": null}]},{"fn": 768,"result": {"type": 546,"value": 621},"args": [{"type": 546,"value": 622}]},{"fn": 756,"result": {"type": 546,"value": 623},"args": [{"type": 546,"value": 624}]},{"fn": 749,"result": {"type": 546,"value": 625},"args": [{"type": 546,"value": 626}]},{"fn": 769,"result": {"type": 599,"value": null},"args": [{"type": 599,"value": null}]},{"fn": 770,"result": {"type": 546,"value": 609},"args": [{"type": 546,"value": 609},{"type": 546,"value": 609}]},{"fn": 763,"result": {"type": 546,"value": 629},"args": [{"type": 546,"value": 629}]},{"fn": 771,"result": {"type": 546,"value": 631},"args": [{"type": 546,"value": 548}]},{"fn": 772,"result": {"type": 546,"value": 633},"args": [{"type": 546,"value": 634}]},{"fn": 759,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 564}]},{"fn": 773,"result": {"type": 546,"value": 636},"args": [{"type": 546,"value": 624},{"type": 546,"value": 624}]},{"fn": 749,"result": {"type": 546,"value": 637},"args": [{"type": 546,"value": 638}]},{"fn": 774,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 609}]},{"fn": 746,"result": {"type": 546,"value": 608},"args": [{"type": 546,"value": 572},{"type": 549,"value": null}]},{"fn": 754,"result": {"type": 546,"value": 640},"args": [{"type": 546,"value": 641}]},{"fn": 766,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 609}]},{"fn": 768,"result": {"type": 546,"value": 642},"args": [{"type": 546,"value": 643}]},{"fn": 747,"result": {"type": 551,"value": null},"args": [{"type": 546,"value": 644}]},{"fn": 775,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 555}]},{"fn": 756,"result": {"type": 546,"value": 646},"args": [{"type": 546,"value": 647}]},{"fn": 746,"result": {"type": 546,"value": 625},"args": [{"type": 546,"value": 626},{"type": 549,"value": null}]},{"fn": 749,"result": {"type": 546,"value": 547},"args": [{"type": 546,"value": 548}]},{"fn": 765,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 617}]},{"fn": 775,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 609}]},{"fn": 190,"result": {"type": 648,"value": null},"args": [{"type": 566,"value": null}]},{"fn": 773,"result": {"type": 546,"value": 649},"args": [{"type": 546,"value": 650},{"type": 546,"value": 651}]},{"fn": 751,"result": {"type": 546,"value": 652},"args": [{"type": 546,"value": 555}]},{"fn": 390,"result": {"type": 565,"value": null},"args": [{"type": 566,"value": null}]},{"fn": 770,"result": {"type": 546,"value": 609},"args": [{"type": 546,"value": 615},{"type": 546,"value": 609}]},{"fn": 746,"result": {"type": 546,"value": 637},"args": [{"type": 546,"value": 638},{"type": 549,"value": null}]},{"fn": 762,"result": {"type": 546,"value": 653},"args": [{"type": 546,"value": 654}]},{"fn": 768,"result": {"type": 546,"value": 655},"args": [{"type": 546,"value": 656}]},{"fn": 755,"result": {"type": 546,"value": 657},"args": [{"type": 546,"value": 561}]},{"fn": 749,"result": {"type": 546,"value": 578},"args": [{"type": 546,"value": 579}]},{"fn": 776,"result": {"type": 599,"value": null},"args": [{"type": 599,"value": null},{"type": 599,"value": null}]},{"fn": 776,"result": {"type": 599,"value": null},"args": [{"type": 599,"value": null},{"type": 599,"value": null}]},{"fn": 747,"result": {"type": 551,"value": null},"args": [{"type": 546,"value": 659}]},{"fn": 758,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 555}]},{"fn": 749,"result": {"type": 546,"value": 594},"args": [{"type": 546,"value": 595}]},{"fn": 749,"result": {"type": 546,"value": 596},"args": [{"type": 546,"value": 597}]},{"fn": 777,"result": {"type": 546,"value": 661},"args": [{"type": 546,"value": 609}]},{"fn": 775,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 564}]},{"fn": 778,"result": {"type": 663,"value": 775},"args": [{"type": 664,"value": null}]},{"fn": 770,"result": {"type": 546,"value": 629},"args": [{"type": 546,"value": 629},{"type": 546,"value": 629}]},{"fn": 747,"result": {"type": 551,"value": null},"args": [{"type": 546,"value": 665}]},{"fn": 747,"result": {"type": 551,"value": null},"args": [{"type": 546,"value": 666}]},{"fn": 761,"result": {"type": 565,"value": null},"args": [{"type": 546,"value": 555}]},{"fn": 749,"result": {"type": 546,"value": 602},"args": [{"type": 546,"value": 603}]},{"fn": 766,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 572}]},{"fn": 765,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 609}]},{"fn": 766,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 615}]},{"fn": 766,"result": {"type": 599,"value": null},"args": [{"type": 546,"value": 667}]}],"packages": [{"name": "","file": 0,"main": 552,"table": {"builtin": 1,"std": 2,"root": 3}},{"name": "builtin","file": 1,"main": 668,"table": {"std": 2}},{"name": "std","file": 2,"main": 669,"table": {"builtin": 1,"std": 2,"root": 3}},{"name": "std.special","file": 3,"main": 670,"table": {"builtin": 1,"std": 2}}],"types": [{"kind": 18,"name": "fn([]const u8, ?*std.builtin.StackTrace) noreturn","generic": false,"ret": 671,"args": [573,672]},{"kind": 18,"name": "fn(f32, f32, f32) math3d.Vec3","generic": false,"ret": 622,"args": [629,629,629]},{"kind": 18,"name": "fn(f32, f32, f32, f32) math3d.Vec4","generic": false,"ret": 656,"args": [629,629,629,629]},{"kind": 18,"name": "fn(f32, f32) math3d.Vec2","generic": false,"ret": 643,"args": [629,629]},{"kind": 18,"name": "fn(bool) void","generic": false,"ret": 551,"args": [565]},{"kind": 18,"name": "fn() anyerror!void","generic": false,"ret": 673},{"kind": 18,"name": "fn(*netbpm.AnymapData(u1), *std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(netbpm.loadBinaryBitmap).ReturnType.ErrorSet!void","generic": false,"ret": 674,"args": [675,676]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) @TypeOf(netbpm.load).ReturnType.ErrorSet!netbpm.Anymap","generic": false,"ret": 677,"args": [678,573]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError), usize) @TypeOf(netbpm.readLinearizedValue).ReturnType.ErrorSet!u8","generic": false,"ret": 679,"args": [676,609]},{"kind": 18,"name": "fn(u8) bool","generic": false,"ret": 565,"args": [572]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(netbpm.readNextByte).ReturnType.ErrorSet!u8","generic": false,"ret": 680,"args": [676]},{"kind": 18,"name": "fn(*netbpm.AnymapData(u8), *std.io.in_stream.InStream(std.os.ReadError), usize) @TypeOf(netbpm.loadAsciiGraymap).ReturnType.ErrorSet!void","generic": false,"ret": 681,"args": [682,676,609]},{"kind": 18,"name": "fn(*netbpm.AnymapData(u1), *std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(netbpm.loadAsciiBitmap).ReturnType.ErrorSet!void","generic": false,"ret": 683,"args": [675,676]},{"kind": 18,"name": "fn(*netbpm.AnymapData(u8), *std.io.in_stream.InStream(std.os.ReadError), usize) @TypeOf(netbpm.loadBinaryGraymap).ReturnType.ErrorSet!void","generic": false,"ret": 684,"args": [682,676,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(netbpm.parseHeader).ReturnType.ErrorSet!netbpm.Header","generic": false,"ret": 685,"args": [678,676]},{"kind": 18,"name": "fn(*netbpm.AnymapData(netbpm.Color), *std.io.in_stream.InStream(std.os.ReadError), usize) @TypeOf(netbpm.loadBinaryRgbmap).ReturnType.ErrorSet!void","generic": false,"ret": 686,"args": [687,676,609]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError), []u8) @TypeOf(netbpm.parseNumber).ReturnType.ErrorSet!usize","generic": false,"ret": 688,"args": [676,548]},{"kind": 18,"name": "fn(*netbpm.AnymapData(netbpm.Color), *std.io.in_stream.InStream(std.os.ReadError), usize) @TypeOf(netbpm.loadAsciiRgbmap).ReturnType.ErrorSet!void","generic": false,"ret": 689,"args": [687,676,609]},{"kind": 18,"name": "fn() callconv(.Naked) noreturn","generic": false,"ret": 671},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace, ?usize, std.builtin.struct:461:79) noreturn","generic": false,"ret": 671,"args": [690,691,692]},{"kind": 18,"name": "fn(math3d.Vec2, math3d.Vec2) math3d.Vec2","generic": false,"ret": 643,"args": [643,643]},{"kind": 18,"name": "fn(math3d.Vec2, math3d.Vec2) bool","generic": false,"ret": 565,"args": [643,643]},{"kind": 18,"name": "fn(math3d.Vec2, f32) math3d.Vec2","generic": false,"ret": 643,"args": [643,629]},{"kind": 18,"name": "fn(math3d.Vec2, math3d.Vec2) f32","generic": false,"ret": 629,"args": [643,643]},{"kind": 18,"name": "fn(math3d.Vec2) f32","generic": false,"ret": 629,"args": [643]},{"kind": 18,"name": "fn(math3d.Vec3, math3d.Vec3) math3d.Vec3","generic": false,"ret": 622,"args": [622,622]},{"kind": 18,"name": "fn(math3d.Vec3, math3d.Vec3) bool","generic": false,"ret": 565,"args": [622,622]},{"kind": 18,"name": "fn(math3d.Vec3, f32) math3d.Vec3","generic": false,"ret": 622,"args": [622,629]},{"kind": 18,"name": "fn(math3d.Vec3, math3d.Vec3) f32","generic": false,"ret": 629,"args": [622,622]},{"kind": 18,"name": "fn(math3d.Vec3) f32","generic": false,"ret": 629,"args": [622]},{"kind": 18,"name": "fn(math3d.Vec4, math3d.Vec4) math3d.Vec4","generic": false,"ret": 656,"args": [656,656]},{"kind": 18,"name": "fn(math3d.Vec4, math3d.Vec4) bool","generic": false,"ret": 565,"args": [656,656]},{"kind": 18,"name": "fn(math3d.Vec4, f32) math3d.Vec4","generic": false,"ret": 656,"args": [656,629]},{"kind": 18,"name": "fn(math3d.Vec4, math3d.Vec4) f32","generic": false,"ret": 629,"args": [656,656]},{"kind": 18,"name": "fn(math3d.Vec4) f32","generic": false,"ret": 629,"args": [656]},{"kind": 18,"name": "fn(math3d.Vec3) math3d.Vec4","generic": false,"ret": 656,"args": [622]},{"kind": 18,"name": "fn(math3d.Vec4) math3d.Vec3","generic": false,"ret": 622,"args": [656]},{"kind": 18,"name": "fn(math3d.Mat4, math3d.Mat4) math3d.Mat4","generic": false,"ret": 693,"args": [693,693]},{"kind": 18,"name": "fn(math3d.Mat4, math3d.Mat4) bool","generic": false,"ret": 565,"args": [693,693]},{"kind": 18,"name": "fn(math3d.Mat4) math3d.Mat4","generic": false,"ret": 693,"args": [693]},{"kind": 18,"name": "fn(math3d.Vec4, math3d.Mat4) math3d.Vec4","generic": false,"ret": 656,"args": [656,693]},{"kind": 18,"name": "fn() std.fs.Dir","generic": false,"ret": 694},{"kind": 18,"name": "fn(std.fs.Dir, []const u8) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 695,"args": [694,573]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.fs.file.File) @TypeOf(pcx.load).ReturnType.ErrorSet!pcx.Image","generic": false,"ret": 696,"args": [678,697]},{"kind": 18,"name": "fn([]u8) std.heap.ThreadSafeFixedBufferAllocator","generic": false,"ret": 698,"args": [548]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @TypeOf(std.heap.ThreadSafeFixedBufferAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 699,"args": [678,548,700,609,700]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) @TypeOf(std.heap.ThreadSafeFixedBufferAllocator.alloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 701,"args": [678,609,700]},{"kind": 18,"name": "fn(usize, usize) usize","generic": false,"ret": 609,"args": [609,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) []u8","generic": false,"ret": 548,"args": [678,548,700,609,700]},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.InStream","generic": false,"ret": 702,"args": [703]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError), []u8) @TypeOf(std.io.in_stream.InStream(std.os.ReadError).readNoEof).ReturnType.ErrorSet!void","generic": false,"ret": 704,"args": [676,548]},{"kind": 18,"name": "fn(*pcx.Header) *[74]u8","generic": false,"ret": 652,"args": [555]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError), []u8) std.os.ReadError!usize","generic": false,"ret": 705,"args": [676,548]},{"kind": 18,"name": "fn(*std.mem.Allocator, pcx.Header, *std.fs.file.File, *std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(pcx.SubImage(u1).initLinear).ReturnType.ErrorSet!pcx.SubImage(u1)","generic": false,"ret": 706,"args": [678,554,697,676]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]u1","generic": false,"ret": 707,"args": [678,609]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) pcx.RLEDecoder","generic": false,"ret": 708,"args": [676]},{"kind": 18,"name": "fn(*pcx.RLEDecoder) @TypeOf(pcx.RLEDecoder.readByte).ReturnType.ErrorSet!u8","generic": false,"ret": 709,"args": [710]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(std.io.in_stream.InStream(std.os.ReadError).readByte).ReturnType.ErrorSet!u8","generic": false,"ret": 711,"args": [676]},{"kind": 18,"name": "fn(pcx.SubImage(u1)) void","generic": false,"ret": 551,"args": [586]},{"kind": 18,"name": "fn(pcx.RLEDecoder) @TypeOf(pcx.RLEDecoder.finish).ReturnType.ErrorSet!void","generic": false,"ret": 712,"args": [708]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*[2]pcx.RGB","generic": false,"ret": 713,"args": [678]},{"kind": 18,"name": "fn(*std.mem.Allocator, pcx.Header, *std.fs.file.File, *std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(pcx.SubImage(u4).initLinear).ReturnType.ErrorSet!pcx.SubImage(u4)","generic": false,"ret": 714,"args": [678,554,697,676]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]u4","generic": false,"ret": 715,"args": [678,609]},{"kind": 18,"name": "fn(pcx.SubImage(u4)) void","generic": false,"ret": 551,"args": [588]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*[16]pcx.RGB","generic": false,"ret": 716,"args": [678]},{"kind": 18,"name": "fn(*std.mem.Allocator, pcx.Header, *std.fs.file.File, *std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(pcx.SubImage(u8).initLinear).ReturnType.ErrorSet!pcx.SubImage(u8)","generic": false,"ret": 717,"args": [678,554,697,676]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]u8","generic": false,"ret": 718,"args": [678,609]},{"kind": 18,"name": "fn(pcx.SubImage(u8)) void","generic": false,"ret": 551,"args": [575]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*[256]pcx.RGB","generic": false,"ret": 719,"args": [678]},{"kind": 18,"name": "fn(std.fs.file.File, i64) std.os.SeekError!void","generic": false,"ret": 720,"args": [703,721]},{"kind": 18,"name": "fn(*std.mem.Allocator, *[256]pcx.RGB) void","generic": false,"ret": 551,"args": [678,722]},{"kind": 18,"name": "fn(*std.mem.Allocator, pcx.Header, *std.fs.file.File, *std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(pcx.SubImage(pcx.RGB).initLinear).ReturnType.ErrorSet!pcx.SubImage(pcx.RGB)","generic": false,"ret": 723,"args": [678,554,697,676]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]pcx.RGB","generic": false,"ret": 724,"args": [678,609]},{"kind": 18,"name": "fn(pcx.SubImage(pcx.RGB)) void","generic": false,"ret": 551,"args": [640]},{"kind": 18,"name": "fn(std.fs.file.File) void","generic": false,"ret": 551,"args": [703]},{"kind": 18,"name": "fn(*netbpm.AnymapData(u1), usize, usize, u1) @TypeOf(netbpm.AnymapData(u1).set).ReturnType.ErrorSet!void","generic": false,"ret": 725,"args": [675,609,609,587]},{"kind": 18,"name": "fn([]const u8) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 695,"args": [573]},{"kind": 18,"name": "fn([]const u8, []const u8) bool","generic": false,"ret": 565,"args": [573,573]},{"kind": 18,"name": "fn([]const u8, u8) @TypeOf(std.fmt.parseInt).ReturnType.ErrorSet!usize","generic": false,"ret": 726,"args": [573,572]},{"kind": 18,"name": "fn([]const u8, u8) std.fmt.ParseUnsignedError!usize","generic": false,"ret": 727,"args": [573,572]},{"kind": 18,"name": "fn(*netbpm.AnymapData(u8), usize, usize, u8) @TypeOf(netbpm.AnymapData(u8).set).ReturnType.ErrorSet!void","generic": false,"ret": 728,"args": [682,609,609,572]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) @TypeOf(std.io.in_stream.InStream(std.os.ReadError).readIntBig).ReturnType.ErrorSet!u16","generic": false,"ret": 729,"args": [676]},{"kind": 18,"name": "fn(*const [2]u8) u16","generic": false,"ret": 730,"args": [731]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]netbpm.Color","generic": false,"ret": 732,"args": [678,609]},{"kind": 18,"name": "fn(*netbpm.AnymapData(netbpm.Color), usize, usize, netbpm.Color) @TypeOf(netbpm.AnymapData(netbpm.Color).set).ReturnType.ErrorSet!void","generic": false,"ret": 733,"args": [687,609,609,654]},{"kind": 18,"name": "fn() noreturn","generic": false,"ret": 671},{"kind": 18,"name": "fn() void","generic": false,"ret": 551},{"kind": 18,"name": "fn() *std.io.out_stream.OutStream(std.os.WriteError)","generic": false,"ret": 734},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.builtin.struct:461:79) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,692]},{"kind": 18,"name": "fn(std.builtin.StackTrace) void","generic": false,"ret": 551,"args": [736]},{"kind": 18,"name": "fn(?usize) void","generic": false,"ret": 551,"args": [691]},{"kind": 18,"name": "fn(std.debug.struct:246:59) void","generic": false,"ret": 551,"args": [737]},{"kind": 18,"name": "fn(math3d.Vec2, math3d.Mat2) math3d.Vec2","generic": false,"ret": 643,"args": [643,738]},{"kind": 18,"name": "fn(math3d.Vec2) math3d.Vec2","generic": false,"ret": 643,"args": [643]},{"kind": 18,"name": "fn(f32, f32) bool","generic": false,"ret": 565,"args": [629,629]},{"kind": 18,"name": "fn(f32) f32","generic": false,"ret": 629,"args": [629]},{"kind": 18,"name": "fn(math3d.Vec3, math3d.Mat4) math3d.Vec3","generic": false,"ret": 622,"args": [622,693]},{"kind": 18,"name": "fn(math3d.Vec3, math3d.Mat3) math3d.Vec3","generic": false,"ret": 622,"args": [622,739]},{"kind": 18,"name": "fn(math3d.Vec3) math3d.Vec3","generic": false,"ret": 622,"args": [622]},{"kind": 18,"name": "fn(math3d.Vec4) math3d.Vec4","generic": false,"ret": 656,"args": [656]},{"kind": 18,"name": "fn(math3d.Vec3, f32) math3d.Mat4","generic": false,"ret": 693,"args": [622,629]},{"kind": 18,"name": "fn(math3d.Vec3) math3d.Mat4","generic": false,"ret": 693,"args": [622]},{"kind": 18,"name": "fn(f32) math3d.Mat4","generic": false,"ret": 693,"args": [629]},{"kind": 18,"name": "fn(math3d.Vec3, math3d.Vec3, math3d.Vec3) math3d.Mat4","generic": false,"ret": 693,"args": [622,622,622]},{"kind": 18,"name": "fn(f32, f32, f32, f32) math3d.Mat4","generic": false,"ret": 693,"args": [629,629,629,629]},{"kind": 18,"name": "fn(f32, f32, f32) math3d.Mat4","generic": false,"ret": 693,"args": [629,629,629]},{"kind": 18,"name": "fn(f32, f32, f32, f32, f32, f32) math3d.Mat4","generic": false,"ret": 693,"args": [629,629,629,629,629,629]},{"kind": 18,"name": "fn([4][4]f32, [4][4]f32) bool","generic": false,"ret": 565,"args": [740,740]},{"kind": 18,"name": "fn(std.fs.Dir, []const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 695,"args": [694,573,741]},{"kind": 18,"name": "fn(*std.mem.Allocator, *[2]pcx.RGB) void","generic": false,"ret": 551,"args": [678,742]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u1) void","generic": false,"ret": 551,"args": [678,743]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![][2]pcx.RGB","generic": false,"ret": 744,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, *[16]pcx.RGB) void","generic": false,"ret": 551,"args": [678,745]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u4) void","generic": false,"ret": 551,"args": [678,746]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![][16]pcx.RGB","generic": false,"ret": 747,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8) void","generic": false,"ret": 551,"args": [678,548]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![][256]pcx.RGB","generic": false,"ret": 748,"args": [678,609]},{"kind": 18,"name": "fn(i32, i64) std.os.SeekError!void","generic": false,"ret": 720,"args": [667,721]},{"kind": 18,"name": "fn(*std.mem.Allocator, *void) void","generic": false,"ret": 551,"args": [678,749]},{"kind": 18,"name": "fn(*std.mem.Allocator, []pcx.RGB) void","generic": false,"ret": 551,"args": [678,750]},{"kind": 18,"name": "fn(i32) void","generic": false,"ret": 551,"args": [667]},{"kind": 18,"name": "fn(u8, u8) std.fmt.error:1084:39!u8","generic": false,"ret": 751,"args": [572,572]},{"kind": 18,"name": "fn(u8) std.math.error:710:40!usize","generic": false,"ret": 752,"args": [572]},{"kind": 18,"name": "fn(usize, usize) std.math.error:306:43!usize","generic": false,"ret": 753,"args": [609,609]},{"kind": 18,"name": "fn(usize, usize) std.math.error:311:43!usize","generic": false,"ret": 754,"args": [609,609]},{"kind": 18,"name": "fn() ?*std.elf.Elf64_Phdr","generic": false,"ret": 755},{"kind": 18,"name": "fn(usize) usize","generic": false,"ret": 609,"args": [609]},{"kind": 18,"name": "fn(usize) void","generic": false,"ret": 551,"args": [609]},{"kind": 18,"name": "fn(u8) noreturn","generic": false,"ret": 671,"args": [572]},{"kind": 18,"name": "fn(usize, [*][*:0]u8, [][*:0]u8) u8","generic": false,"ret": 572,"args": [609,756,757]},{"kind": 18,"name": "fn(u6, *const std.os.bits.linux.Sigaction, ?*std.os.bits.linux.Sigaction) void","generic": false,"ret": 551,"args": [661,758,759]},{"kind": 18,"name": "fn() std.fs.file.File","generic": false,"ret": 703},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.OutStream","generic": false,"ret": 760,"args": [703]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.builtin.struct:461:79) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,692]},{"kind": 18,"name": "fn(u8) std.os.UnexpectedError!void","generic": false,"ret": 761,"args": [572]},{"kind": 18,"name": "fn() @TypeOf(std.debug.getSelfDebugInfo).ReturnType.ErrorSet!*std.debug.DwarfInfo","generic": false,"ret": 762},{"kind": 18,"name": "fn(*std.mem.Allocator) @TypeOf(std.debug.openSelfDebugInfo).ReturnType.ErrorSet!std.debug.DwarfInfo","generic": false,"ret": 763,"args": [678]},{"kind": 18,"name": "fn() *std.mem.Allocator","generic": false,"ret": 678},{"kind": 18,"name": "fn(std.target.Target) bool","generic": false,"ret": 565,"args": [566]},{"kind": 18,"name": "fn(std.target.Target) std.target.Os","generic": false,"ret": 648,"args": [566]},{"kind": 18,"name": "fn(*std.mem.Allocator) @TypeOf(std.debug.openSelfDebugInfoPosix).ReturnType.ErrorSet!std.debug.DwarfInfo","generic": false,"ret": 764,"args": [678]},{"kind": 18,"name": "fn() std.fs.OpenSelfExeError!std.fs.file.File","generic": false,"ret": 765},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.GetPosError!u64","generic": false,"ret": 766,"args": [703]},{"kind": 18,"name": "fn(u64) std.math.error:710:40!usize","generic": false,"ret": 767,"args": [615]},{"kind": 18,"name": "fn(?[*]align(4096) u8, usize, u32, u32, i32, u64) std.os.MMapError![]align(4096) u8","generic": false,"ret": 768,"args": [769,609,770,770,667,615]},{"kind": 18,"name": "fn([]const u8) std.io.seekable_stream.SliceSeekableInStream","generic": false,"ret": 771,"args": [573]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.seekable_stream.SeekableStream(anyerror,anyerror), *std.io.in_stream.InStream(anyerror)) @TypeOf(std.debug.openElfDebugInfo).ReturnType.ErrorSet!std.debug.DwarfInfo","generic": false,"ret": 772,"args": [678,773,774]},{"kind": 18,"name": "fn([]align(4096) u8) void","generic": false,"ret": 551,"args": [775]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.seekable_stream.SeekableStream(anyerror,anyerror), *std.io.in_stream.InStream(anyerror)) @TypeOf(std.elf.Elf.openStream).ReturnType.ErrorSet!std.elf.Elf","generic": false,"ret": 776,"args": [678,773,774]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), []u8) @TypeOf(std.io.in_stream.InStream(anyerror).readNoEof).ReturnType.ErrorSet!void","generic": false,"ret": 777,"args": [774,548]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), []u8) anyerror!usize","generic": false,"ret": 778,"args": [774,548]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.io.in_stream.InStream(anyerror).readByte).ReturnType.ErrorSet!u8","generic": false,"ret": 779,"args": [774]},{"kind": 18,"name": "fn(*std.io.seekable_stream.SeekableStream(anyerror,anyerror), i64) anyerror!void","generic": false,"ret": 673,"args": [773,721]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), std.builtin.Endian) @TypeOf(std.io.in_stream.InStream(anyerror).readEnum).ReturnType.ErrorSet!std.elf.ET","generic": false,"ret": 780,"args": [774,781]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), std.builtin.Endian) @TypeOf(std.io.in_stream.InStream(anyerror).readInt).ReturnType.ErrorSet!u16","generic": false,"ret": 782,"args": [774,781]},{"kind": 18,"name": "fn(*const [2]u8, std.builtin.Endian) u16","generic": false,"ret": 730,"args": [731,781]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), std.builtin.Endian) @TypeOf(std.io.in_stream.InStream(anyerror).readEnum).ReturnType.ErrorSet!std.elf.EM","generic": false,"ret": 783,"args": [774,781]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), std.builtin.Endian) @TypeOf(std.io.in_stream.InStream(anyerror).readInt).ReturnType.ErrorSet!u32","generic": false,"ret": 784,"args": [774,781]},{"kind": 18,"name": "fn(*const [4]u8, std.builtin.Endian) u32","generic": false,"ret": 770,"args": [785,781]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), std.builtin.Endian) @TypeOf(std.io.in_stream.InStream(anyerror).readInt).ReturnType.ErrorSet!u64","generic": false,"ret": 786,"args": [774,781]},{"kind": 18,"name": "fn(*const [8]u8, std.builtin.Endian) u64","generic": false,"ret": 615,"args": [787,781]},{"kind": 18,"name": "fn(u64, u64) std.math.error:311:43!u64","generic": false,"ret": 788,"args": [615,615]},{"kind": 18,"name": "fn(*std.io.seekable_stream.SeekableStream(anyerror,anyerror)) anyerror!u64","generic": false,"ret": 789,"args": [773]},{"kind": 18,"name": "fn(*std.io.seekable_stream.SeekableStream(anyerror,anyerror), u64) anyerror!void","generic": false,"ret": 673,"args": [773,615]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.elf.SectionHeader","generic": false,"ret": 790,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.elf.SectionHeader) void","generic": false,"ret": 551,"args": [678,791]},{"kind": 18,"name": "fn(*std.elf.Elf, []const u8) @TypeOf(std.debug.findDwarfSectionFromElf).ReturnType.ErrorSet!?std.debug.Section","generic": false,"ret": 792,"args": [793,573]},{"kind": 18,"name": "fn(*std.elf.Elf, []const u8) @TypeOf(std.elf.Elf.findSection).ReturnType.ErrorSet!?*std.elf.SectionHeader","generic": false,"ret": 794,"args": [793,573]},{"kind": 18,"name": "fn(*std.elf.Elf) void","generic": false,"ret": 551,"args": [793]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, *std.mem.Allocator) @TypeOf(std.debug.openDwarfDebugInfo).ReturnType.ErrorSet!void","generic": false,"ret": 795,"args": [796,678]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null)","generic": false,"ret": 576,"args": [678]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.CompileUnit,null)","generic": false,"ret": 625,"args": [678]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.Func,null)","generic": false,"ret": 637,"args": [678]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo) @TypeOf(std.debug.DwarfInfo.scanAllFunctions).ReturnType.ErrorSet!void","generic": false,"ret": 797,"args": [796]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), *bool) @TypeOf(std.debug.readInitialLength).ReturnType.ErrorSet!u64","generic": false,"ret": 798,"args": [774,799]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.io.in_stream.InStream(anyerror).readIntLittle).ReturnType.ErrorSet!u32","generic": false,"ret": 800,"args": [774]},{"kind": 18,"name": "fn(*const [4]u8) u32","generic": false,"ret": 770,"args": [785]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.io.in_stream.InStream(anyerror).readIntLittle).ReturnType.ErrorSet!u64","generic": false,"ret": 801,"args": [774]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, u64) @TypeOf(std.debug.DwarfInfo.getAbbrevTable).ReturnType.ErrorSet!*const std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null)","generic": false,"ret": 802,"args": [796,615]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null)) []std.debug.AbbrevTableHeader","generic": false,"ret": 803,"args": [576]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null), std.debug.AbbrevTableHeader) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 804,"args": [805,577]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo) @TypeOf(std.debug.DwarfInfo.parseAbbrevTable).ReturnType.ErrorSet!std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null)","generic": false,"ret": 806,"args": [796]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null)","generic": false,"ret": 557,"args": [678]},{"kind": 18,"name": "fn(std.debug.DwarfInfo) *std.mem.Allocator","generic": false,"ret": 678,"args": [807]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.debug.leb128.readULEB128).ReturnType.ErrorSet!u64","generic": false,"ret": 808,"args": [774]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null), std.debug.AbbrevTableEntry) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 809,"args": [810,558]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null)","generic": false,"ret": 594,"args": [678]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null)) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null).addOne).ReturnType.ErrorSet!*std.debug.AbbrevTableEntry","generic": false,"ret": 811,"args": [810]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null), usize) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 812,"args": [810,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null)) usize","generic": false,"ret": 609,"args": [557]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.AbbrevTableEntry, usize) std.mem.Error![]std.debug.AbbrevTableEntry","generic": false,"ret": 813,"args": [678,814,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null)) *std.debug.AbbrevTableEntry","generic": false,"ret": 815,"args": [810]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null), std.debug.AbbrevAttr) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 816,"args": [817,595]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null)) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null).addOne).ReturnType.ErrorSet!*std.debug.AbbrevAttr","generic": false,"ret": 818,"args": [817]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null), usize) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 819,"args": [817,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null)) usize","generic": false,"ret": 609,"args": [594]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.AbbrevAttr, usize) std.mem.Error![]std.debug.AbbrevAttr","generic": false,"ret": 820,"args": [678,821,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null)) *std.debug.AbbrevAttr","generic": false,"ret": 822,"args": [817]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null)) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null).addOne).ReturnType.ErrorSet!*std.debug.AbbrevTableHeader","generic": false,"ret": 823,"args": [805]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null), usize) @TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 824,"args": [805,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null)) usize","generic": false,"ret": 609,"args": [576]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.AbbrevTableHeader, usize) std.mem.Error![]std.debug.AbbrevTableHeader","generic": false,"ret": 825,"args": [678,803,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null)) *std.debug.AbbrevTableHeader","generic": false,"ret": 826,"args": [805]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, *const std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null), bool) @TypeOf(std.debug.DwarfInfo.parseDie).ReturnType.ErrorSet!?std.debug.Die","generic": false,"ret": 827,"args": [796,828,565]},{"kind": 18,"name": "fn(*const std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null), u64) ?*const std.debug.AbbrevTableEntry","generic": false,"ret": 829,"args": [828,615]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.Attr,null)","generic": false,"ret": 596,"args": [678]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Attr,null), usize) @TypeOf(std.array_list.AlignedArrayList(std.debug.Attr,null).resize).ReturnType.ErrorSet!void","generic": false,"ret": 830,"args": [831,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Attr,null), usize) @TypeOf(std.array_list.AlignedArrayList(std.debug.Attr,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 832,"args": [831,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.Attr,null)) usize","generic": false,"ret": 609,"args": [596]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.Attr, usize) std.mem.Error![]std.debug.Attr","generic": false,"ret": 833,"args": [678,834,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null)) []const std.debug.AbbrevAttr","generic": false,"ret": 835,"args": [594]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), u64, bool) anyerror!std.debug.FormValue","generic": false,"ret": 836,"args": [678,774,615,565]},{"kind": 18,"name": "fn(*const std.debug.Die, u64) ?*const std.debug.FormValue","generic": false,"ret": 837,"args": [838,615]},{"kind": 18,"name": "fn(*const std.debug.Die, *std.debug.DwarfInfo, u64) @TypeOf(std.debug.Die.getAttrString).ReturnType.ErrorSet![]u8","generic": false,"ret": 839,"args": [838,796,615]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, u64) @TypeOf(std.debug.DwarfInfo.getString).ReturnType.ErrorSet![]u8","generic": false,"ret": 840,"args": [796,615]},{"kind": 18,"name": "fn(*const std.debug.Die, u64) @TypeOf(std.debug.Die.getAttrRef).ReturnType.ErrorSet!u64","generic": false,"ret": 841,"args": [838,615]},{"kind": 18,"name": "fn(*const std.debug.Die, u64) @TypeOf(std.debug.Die.getAttrAddr).ReturnType.ErrorSet!u64","generic": false,"ret": 842,"args": [838,615]},{"kind": 18,"name": "fn(*const std.debug.Constant) @TypeOf(std.debug.Constant.asUnsignedLe).ReturnType.ErrorSet!u64","generic": false,"ret": 843,"args": [844]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Func,null), std.debug.Func) @TypeOf(std.array_list.AlignedArrayList(std.debug.Func,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 845,"args": [846,638]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Func,null)) @TypeOf(std.array_list.AlignedArrayList(std.debug.Func,null).addOne).ReturnType.ErrorSet!*std.debug.Func","generic": false,"ret": 847,"args": [846]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Func,null), usize) @TypeOf(std.array_list.AlignedArrayList(std.debug.Func,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 848,"args": [846,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.Func,null)) usize","generic": false,"ret": 609,"args": [637]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.Func, usize) std.mem.Error![]std.debug.Func","generic": false,"ret": 849,"args": [678,850,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Func,null)) *std.debug.Func","generic": false,"ret": 851,"args": [846]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo) @TypeOf(std.debug.DwarfInfo.scanAllCompileUnits).ReturnType.ErrorSet!void","generic": false,"ret": 852,"args": [796]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*std.debug.Die","generic": false,"ret": 853,"args": [678]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.CompileUnit,null), std.debug.CompileUnit) @TypeOf(std.array_list.AlignedArrayList(std.debug.CompileUnit,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 854,"args": [855,626]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.CompileUnit,null)) @TypeOf(std.array_list.AlignedArrayList(std.debug.CompileUnit,null).addOne).ReturnType.ErrorSet!*std.debug.CompileUnit","generic": false,"ret": 856,"args": [855]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.CompileUnit,null), usize) @TypeOf(std.array_list.AlignedArrayList(std.debug.CompileUnit,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 857,"args": [855,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.CompileUnit,null)) usize","generic": false,"ret": 609,"args": [625]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.CompileUnit, usize) std.mem.Error![]std.debug.CompileUnit","generic": false,"ret": 858,"args": [678,859,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.CompileUnit,null)) *std.debug.CompileUnit","generic": false,"ret": 860,"args": [855]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:191:86) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,861]},{"kind": 18,"name": "fn() bool","generic": false,"ret": 565},{"kind": 18,"name": "fn(std.builtin.StackTrace, *std.io.out_stream.OutStream(std.os.WriteError), *std.mem.Allocator, *std.debug.DwarfInfo, bool) @TypeOf(std.debug.writeStackTrace).ReturnType.ErrorSet!void","generic": false,"ret": 862,"args": [736,734,678,796,565]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, *std.io.out_stream.OutStream(std.os.WriteError), usize, bool) @TypeOf(std.debug.printSourceAtAddress).ReturnType.ErrorSet!void","generic": false,"ret": 863,"args": [796,734,609,565]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, *std.io.out_stream.OutStream(std.os.WriteError), usize, bool) @TypeOf(std.debug.printSourceAtAddressPosix).ReturnType.ErrorSet!void","generic": false,"ret": 864,"args": [796,734,609,565]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, *std.io.out_stream.OutStream(std.os.WriteError), usize, bool) @TypeOf(std.debug.DwarfInfo.printSourceAtAddress).ReturnType.ErrorSet!void","generic": false,"ret": 865,"args": [796,734,609,565]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, u64) @TypeOf(std.debug.DwarfInfo.findCompileUnit).ReturnType.ErrorSet!*const std.debug.CompileUnit","generic": false,"ret": 866,"args": [796,615]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.CompileUnit,null)) []std.debug.CompileUnit","generic": false,"ret": 859,"args": [625]},{"kind": 18,"name": "fn(*const std.debug.Die, u64) @TypeOf(std.debug.Die.getAttrSecOffset).ReturnType.ErrorSet!u64","generic": false,"ret": 867,"args": [838,615]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.io.in_stream.InStream(anyerror).readIntLittle).ReturnType.ErrorSet!usize","generic": false,"ret": 868,"args": [774]},{"kind": 18,"name": "fn(*const [8]u8) usize","generic": false,"ret": 609,"args": [787]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:1244:104) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,869]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:1246:76) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,870]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, std.debug.CompileUnit, usize) @TypeOf(std.debug.DwarfInfo.getLineNumberInfo).ReturnType.ErrorSet!std.debug.LineInfo","generic": false,"ret": 871,"args": [796,626,609]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.io.in_stream.InStream(anyerror).readByteSigned).ReturnType.ErrorSet!i8","generic": false,"ret": 872,"args": [774]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList([]u8,null)","generic": false,"ret": 547,"args": [678]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList([]u8,null), []u8) @TypeOf(std.array_list.AlignedArrayList([]u8,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 873,"args": [874,548]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList([]u8,null)) @TypeOf(std.array_list.AlignedArrayList([]u8,null).addOne).ReturnType.ErrorSet!*[]u8","generic": false,"ret": 875,"args": [874]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList([]u8,null), usize) @TypeOf(std.array_list.AlignedArrayList([]u8,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 876,"args": [874,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList([]u8,null)) usize","generic": false,"ret": 609,"args": [547]},{"kind": 18,"name": "fn(*std.mem.Allocator, [][]u8, usize) std.mem.Error![][]u8","generic": false,"ret": 877,"args": [678,878,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList([]u8,null)) *[]u8","generic": false,"ret": 879,"args": [874]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo) @TypeOf(std.debug.DwarfInfo.readString).ReturnType.ErrorSet![]u8","generic": false,"ret": 880,"args": [796]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror)) @TypeOf(std.debug.readStringRaw).ReturnType.ErrorSet![]u8","generic": false,"ret": 881,"args": [678,774]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(u8,null)","generic": false,"ret": 608,"args": [678]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null), u8) @TypeOf(std.array_list.AlignedArrayList(u8,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 882,"args": [883,572]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null)) @TypeOf(std.array_list.AlignedArrayList(u8,null).addOne).ReturnType.ErrorSet!*u8","generic": false,"ret": 884,"args": [883]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null), usize) @TypeOf(std.array_list.AlignedArrayList(u8,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 885,"args": [883,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(u8,null)) usize","generic": false,"ret": 609,"args": [608]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, usize) std.mem.Error![]u8","generic": false,"ret": 718,"args": [678,548,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null)) *u8","generic": false,"ret": 886,"args": [883]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(u8,null)) []u8","generic": false,"ret": 548,"args": [608]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.FileEntry,null)","generic": false,"ret": 602,"args": [678]},{"kind": 18,"name": "fn(bool, []const []const u8, *std.array_list.AlignedArrayList(std.debug.FileEntry,null), usize) std.debug.LineNumberProgram","generic": false,"ret": 887,"args": [565,888,889,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList([]u8,null)) []const []u8","generic": false,"ret": 890,"args": [547]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.debug.leb128.readULEB128).ReturnType.ErrorSet!usize","generic": false,"ret": 891,"args": [774]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.FileEntry,null), std.debug.FileEntry) @TypeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 892,"args": [889,603]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.FileEntry,null)) @TypeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).addOne).ReturnType.ErrorSet!*std.debug.FileEntry","generic": false,"ret": 893,"args": [889]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.FileEntry,null), usize) @TypeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 894,"args": [889,609]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.FileEntry,null)) usize","generic": false,"ret": 609,"args": [602]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.FileEntry, usize) std.mem.Error![]std.debug.FileEntry","generic": false,"ret": 895,"args": [678,896,609]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.FileEntry,null)) *std.debug.FileEntry","generic": false,"ret": 897,"args": [889]},{"kind": 18,"name": "fn(u64) std.math.error:710:40!isize","generic": false,"ret": 898,"args": [615]},{"kind": 18,"name": "fn(*std.debug.LineNumberProgram) @TypeOf(std.debug.LineNumberProgram.checkLineMatch).ReturnType.ErrorSet!?std.debug.LineInfo","generic": false,"ret": 899,"args": [900]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const []const u8) @TypeOf(std.fs.path.joinPosix).ReturnType.ErrorSet![]u8","generic": false,"ret": 901,"args": [678,888]},{"kind": 18,"name": "fn(*std.mem.Allocator, u8, []const []const u8) @TypeOf(std.fs.path.joinSep).ReturnType.ErrorSet![]u8","generic": false,"ret": 902,"args": [678,572,888]},{"kind": 18,"name": "fn([]u8, []const u8) void","generic": false,"ret": 551,"args": [548,573]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), std.builtin.Endian) @TypeOf(std.io.in_stream.InStream(anyerror).readInt).ReturnType.ErrorSet!usize","generic": false,"ret": 903,"args": [774,781]},{"kind": 18,"name": "fn(*const [8]u8, std.builtin.Endian) usize","generic": false,"ret": 609,"args": [787,781]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.debug.leb128.readILEB128).ReturnType.ErrorSet!i64","generic": false,"ret": 904,"args": [774]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo, u64) ?[]const u8","generic": false,"ret": 905,"args": [796,615]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.LineInfo, usize, []const u8, []const u8, bool) @TypeOf(std.debug.printLineInfo).ReturnType.ErrorSet!void","generic": false,"ret": 906,"args": [734,907,609,573,573,565]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:766:115) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,908]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.LineInfo) @TypeOf(std.debug.printLineFromFileAnyOs).ReturnType.ErrorSet!void","generic": false,"ret": 909,"args": [734,907]},{"kind": 18,"name": "fn(std.fs.file.File, []u8) std.os.ReadError!usize","generic": false,"ret": 705,"args": [703,548]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), u8) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,572]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,573]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:791:63) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,910]},{"kind": 18,"name": "fn(std.debug.LineInfo) void","generic": false,"ret": 551,"args": [907]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:1266:107) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,911]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:1270:79) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,912]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:195:59) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,913]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:99:86) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,914]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), *std.debug.DwarfInfo, bool, ?usize) @TypeOf(std.debug.writeCurrentStackTrace).ReturnType.ErrorSet!void","generic": false,"ret": 915,"args": [734,796,565,691]},{"kind": 18,"name": "fn(?usize) std.debug.StackIterator","generic": false,"ret": 916,"args": [691]},{"kind": 18,"name": "fn(*std.debug.StackIterator) ?usize","generic": false,"ret": 691,"args": [917]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:103:59) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,918]},{"kind": 18,"name": "fn() std.mutex.Mutex","generic": false,"ret": 919},{"kind": 18,"name": "fn(*std.mutex.Mutex) std.mutex.Held","generic": false,"ret": 920,"args": [921]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:246:59) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,737]},{"kind": 18,"name": "fn(std.mutex.Held) void","generic": false,"ret": 551,"args": [920]},{"kind": 18,"name": "fn(f32, f32) f32","generic": false,"ret": 629,"args": [629,629]},{"kind": 18,"name": "fn([4]f32, [4]f32) bool","generic": false,"ret": 565,"args": [922,922]},{"kind": 18,"name": "fn([]const u8) @TypeOf(std.os.toPosixPath).ReturnType.ErrorSet![4095:0]u8","generic": false,"ret": 923,"args": [573]},{"kind": 18,"name": "fn(std.fs.Dir, [*:0]const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 695,"args": [694,924,741]},{"kind": 18,"name": "fn(usize) u12","generic": false,"ret": 925,"args": [609]},{"kind": 18,"name": "fn(i32, i64, usize) usize","generic": false,"ret": 609,"args": [667,721,609]},{"kind": 18,"name": "fn(usize) std.os.UnexpectedError","generic": false,"ret": 926,"args": [609]},{"kind": 18,"name": "fn(i32) usize","generic": false,"ret": 609,"args": [667]},{"kind": 18,"name": "fn(usize, usize, usize) usize","generic": false,"ret": 609,"args": [609,609,609]},{"kind": 18,"name": "fn(i32) noreturn","generic": false,"ret": 671,"args": [667]},{"kind": 18,"name": "fn() u8","generic": false,"ret": 572},{"kind": 18,"name": "fn(u6, noalias *const std.os.bits.linux.Sigaction, noalias ?*std.os.bits.linux.Sigaction) usize","generic": false,"ret": 609,"args": [661,758,759]},{"kind": 18,"name": "fn(i32) std.fs.file.File","generic": false,"ret": 703,"args": [667]},{"kind": 18,"name": "fn() i32","generic": false,"ret": 667},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 735,"args": [573,927,734,288,609]},{"kind": 18,"name": "fn(u32, noalias ?*const [32]u32, noalias ?*[32]u32) usize","generic": false,"ret": 609,"args": [770,928,929]},{"kind": 18,"name": "fn(i32, i32) usize","generic": false,"ret": 609,"args": [667,667]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.heap.ArenaAllocator","generic": false,"ret": 930,"args": [678]},{"kind": 18,"name": "fn(std.target.Target) std.target.Arch","generic": false,"ret": 931,"args": [566]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @TypeOf(std.heap.PageAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 932,"args": [678,548,700,609,700]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) std.heap.error:57:63![]u8","generic": false,"ret": 933,"args": [678,609,700]},{"kind": 18,"name": "fn([*:0]const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 695,"args": [924,741]},{"kind": 18,"name": "fn(std.fs.file.File) std.os.FStatError!std.fs.file.Stat","generic": false,"ret": 934,"args": [703]},{"kind": 18,"name": "fn(?[*]u8, usize, usize, u32, i32, u64) usize","generic": false,"ret": 609,"args": [935,609,609,770,667,615]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.io.seekable_stream.Error), []u8) std.io.seekable_stream.Error!usize","generic": false,"ret": 936,"args": [937,548]},{"kind": 18,"name": "fn(*std.io.seekable_stream.SeekableStream(std.io.seekable_stream.SeekError,std.io.seekable_stream.GetSeekPosError), u64) std.io.seekable_stream.SeekError!void","generic": false,"ret": 938,"args": [939,615]},{"kind": 18,"name": "fn(*std.io.seekable_stream.SeekableStream(std.io.seekable_stream.SeekError,std.io.seekable_stream.GetSeekPosError), i64) std.io.seekable_stream.SeekError!void","generic": false,"ret": 938,"args": [939,721]},{"kind": 18,"name": "fn(*std.io.seekable_stream.SeekableStream(std.io.seekable_stream.SeekError,std.io.seekable_stream.GetSeekPosError)) std.io.seekable_stream.GetSeekPosError!u64","generic": false,"ret": 940,"args": [939]},{"kind": 18,"name": "fn([*]const u8, usize) usize","generic": false,"ret": 609,"args": [941,609]},{"kind": 18,"name": "fn(*const [8]u8) u64","generic": false,"ret": 615,"args": [787]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null)) []const std.debug.AbbrevTableEntry","generic": false,"ret": 942,"args": [557]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.debug.parseFormValueTargetAddrSize).ReturnType.ErrorSet!u64","generic": false,"ret": 943,"args": [774]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), usize) @TypeOf(std.debug.parseFormValueBlock).ReturnType.ErrorSet!std.debug.FormValue","generic": false,"ret": 944,"args": [678,774,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), usize) @TypeOf(std.debug.parseFormValueBlockLen).ReturnType.ErrorSet!std.debug.FormValue","generic": false,"ret": 945,"args": [678,774,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), bool) @TypeOf(std.debug.parseFormValueConstant).ReturnType.ErrorSet!std.debug.FormValue","generic": false,"ret": 946,"args": [678,774,565]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), bool) @TypeOf(std.debug.parseFormValueConstant).ReturnType.ErrorSet!std.debug.FormValue","generic": false,"ret": 947,"args": [678,774,565]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), bool) @TypeOf(std.debug.parseFormValueConstant).ReturnType.ErrorSet!std.debug.FormValue","generic": false,"ret": 948,"args": [678,774,565]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), bool) @TypeOf(std.debug.parseFormValueConstant).ReturnType.ErrorSet!std.debug.FormValue","generic": false,"ret": 949,"args": [678,774,565]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), bool) @TypeOf(std.debug.parseFormValueConstant).ReturnType.ErrorSet!std.debug.FormValue","generic": false,"ret": 950,"args": [678,774,565]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), usize) @TypeOf(std.debug.readAllocBytes).ReturnType.ErrorSet![]u8","generic": false,"ret": 951,"args": [678,774,609]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), bool) @TypeOf(std.debug.parseFormValueDwarfOffsetSize).ReturnType.ErrorSet!u64","generic": false,"ret": 952,"args": [774,565]},{"kind": 18,"name": "fn(*std.mem.Allocator, *std.io.in_stream.InStream(anyerror), i32) @TypeOf(std.debug.parseFormValueRef).ReturnType.ErrorSet!std.debug.FormValue","generic": false,"ret": 953,"args": [678,774,667]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*@Frame(std.debug.parseFormValue)","generic": false,"ret": 954,"args": [678]},{"kind": 18,"name": "fn(*std.mem.Allocator, *@Frame(std.debug.parseFormValue)) void","generic": false,"ret": 551,"args": [678,955]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.Attr,null)) []const std.debug.Attr","generic": false,"ret": 956,"args": [596]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.Die","generic": false,"ret": 957,"args": [678,609]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:191:86) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,861]},{"kind": 18,"name": "fn([]u8) std.heap.FixedBufferAllocator","generic": false,"ret": 958,"args": [548]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) std.process.GetEnvVarOwnedError![]u8","generic": false,"ret": 959,"args": [678,573]},{"kind": 18,"name": "fn(std.fs.file.File) bool","generic": false,"ret": 565,"args": [703]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:1244:104) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,869]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:1246:76) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,870]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.Func,null)) []const std.debug.Func","generic": false,"ret": 960,"args": [637]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:766:115) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,908]},{"kind": 18,"name": "fn(i32, []u8) std.os.ReadError!usize","generic": false,"ret": 705,"args": [667,548]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:791:63) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,910]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) void","generic": false,"ret": 551,"args": [678,573]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:1266:107) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,911]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:1270:79) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,912]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:195:59) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,913]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:99:86) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,914]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:103:59) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,918]},{"kind": 18,"name": "fn(*std.mutex.Mutex) ?std.mutex.Held","generic": false,"ret": 961,"args": [921]},{"kind": 18,"name": "fn(*std.mutex.Mutex) void","generic": false,"ret": 551,"args": [921]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:246:59) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,737]},{"kind": 18,"name": "fn(i32, [*:0]const u8, u32, usize) std.os.OpenError!i32","generic": false,"ret": 962,"args": [667,924,770,609]},{"kind": 18,"name": "fn(usize, usize, usize, usize) usize","generic": false,"ret": 609,"args": [609,609,609,609]},{"kind": 18,"name": "fn(std.os.struct:2828:51) void","generic": false,"ret": 551,"args": [963]},{"kind": 18,"name": "fn() callconv(.Naked) void","generic": false,"ret": 551},{"kind": 18,"name": "fn(usize, usize, usize, usize, usize) usize","generic": false,"ret": 609,"args": [609,609,609,609,609]},{"kind": 18,"name": "fn(std.fs.file.File, []const u8) std.os.WriteError!void","generic": false,"ret": 735,"args": [703,573]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 735,"args": [573,927,734,288]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @TypeOf(std.heap.ArenaAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 964,"args": [678,548,700,609,700]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) @TypeOf(std.heap.ArenaAllocator.alloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 965,"args": [678,609,700]},{"kind": 18,"name": "fn(*std.heap.ArenaAllocator, usize, usize) @TypeOf(std.heap.ArenaAllocator.createNode).ReturnType.ErrorSet!*std.linked_list.Node","generic": false,"ret": 966,"args": [967,609,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]align(8) u8","generic": false,"ret": 968,"args": [678,609]},{"kind": 18,"name": "fn(*std.linked_list.SinglyLinkedList([]u8), *std.linked_list.Node) void","generic": false,"ret": 551,"args": [969,970]},{"kind": 18,"name": "fn() std.linked_list.SinglyLinkedList([]u8)","generic": false,"ret": 631},{"kind": 18,"name": "fn([*:0]const u8) bool","generic": false,"ret": 565,"args": [924]},{"kind": 18,"name": "fn(i32) std.os.FStatError!std.os.bits.linux.x86_64.Stat","generic": false,"ret": 971,"args": [667]},{"kind": 18,"name": "fn(std.os.bits.linux.x86_64.Stat) std.os.bits.linux.x86_64.timespec","generic": false,"ret": 972,"args": [973]},{"kind": 18,"name": "fn(usize, usize, usize, usize, usize, usize, usize) usize","generic": false,"ret": 609,"args": [609,609,609,609,609,609,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.AbbrevTableEntry","generic": false,"ret": 813,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.AbbrevTableEntry) void","generic": false,"ret": 551,"args": [678,814]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.AbbrevAttr","generic": false,"ret": 820,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.AbbrevAttr) void","generic": false,"ret": 551,"args": [678,821]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.AbbrevTableHeader","generic": false,"ret": 825,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.AbbrevTableHeader) void","generic": false,"ret": 551,"args": [678,803]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.Attr","generic": false,"ret": 833,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.Attr) void","generic": false,"ret": 551,"args": [678,834]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror), std.builtin.Endian, usize) @TypeOf(std.io.in_stream.InStream(anyerror).readVarInt).ReturnType.ErrorSet!usize","generic": false,"ret": 974,"args": [774,781,609]},{"kind": 18,"name": "fn([]const u8, std.builtin.Endian) usize","generic": false,"ret": 609,"args": [573,781]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.io.in_stream.InStream(anyerror).readIntLittle).ReturnType.ErrorSet!u8","generic": false,"ret": 975,"args": [774]},{"kind": 18,"name": "fn(*const [1]u8) u8","generic": false,"ret": 572,"args": [976]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror)) @TypeOf(std.io.in_stream.InStream(anyerror).readIntLittle).ReturnType.ErrorSet!u16","generic": false,"ret": 977,"args": [774]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]@Frame(std.debug.parseFormValue)","generic": false,"ret": 978,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.Func","generic": false,"ret": 849,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.Func) void","generic": false,"ret": 551,"args": [678,850]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.CompileUnit","generic": false,"ret": 858,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.CompileUnit) void","generic": false,"ret": 551,"args": [678,859]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @TypeOf(std.heap.FixedBufferAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 979,"args": [678,548,700,609,700]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) @TypeOf(std.heap.FixedBufferAllocator.alloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 980,"args": [678,609,700]},{"kind": 18,"name": "fn([]const u8) ?[]const u8","generic": false,"ret": 905,"args": [573]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) @TypeOf(std.mem.dupe).ReturnType.ErrorSet![]u8","generic": false,"ret": 981,"args": [678,573]},{"kind": 18,"name": "fn(i32) bool","generic": false,"ret": 565,"args": [667]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 735,"args": [609,927,734,288,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![][]u8","generic": false,"ret": 877,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, [][]u8) void","generic": false,"ret": 551,"args": [678,878]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.FileEntry","generic": false,"ret": 895,"args": [678,609]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.FileEntry) void","generic": false,"ret": 551,"args": [678,896]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 735,"args": [615,927,734,288,609]},{"kind": 18,"name": "fn(i32, [*]u8, usize) usize","generic": false,"ret": 609,"args": [667,982,609]},{"kind": 18,"name": "fn([]u8, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 735,"args": [548,927,734,288,609]},{"kind": 18,"name": "fn() std.reset_event.ResetEvent","generic": false,"ret": 983},{"kind": 18,"name": "fn(*std.reset_event.ResetEvent) void","generic": false,"ret": 551,"args": [984]},{"kind": 18,"name": "fn(f32) bool","generic": false,"ret": 565,"args": [629]},{"kind": 18,"name": "fn() f32","generic": false,"ret": 629},{"kind": 18,"name": "fn(i32, [*:0]const u8, u32, usize) usize","generic": false,"ret": 609,"args": [667,924,770,609]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.os.struct:2828:51) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,963]},{"kind": 18,"name": "fn(i32, *const std.os.bits.linux.siginfo_t, *const c_void) callconv(.C) noreturn","generic": false,"ret": 671,"args": [667,985,986]},{"kind": 18,"name": "fn(std.start.struct:260:48) void","generic": false,"ret": 551,"args": [987]},{"kind": 18,"name": "fn(i32, []const u8) std.os.WriteError!void","generic": false,"ret": 735,"args": [667,573]},{"kind": 18,"name": "fn(i32, *std.os.bits.linux.x86_64.Stat) usize","generic": false,"ret": 609,"args": [667,988]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 735,"args": [609,927,734,288]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 735,"args": [615,927,734,288]},{"kind": 18,"name": "fn() std.os.SchedYieldError!void","generic": false,"ret": 989},{"kind": 18,"name": "fn() std.reset_event.AtomicEvent","generic": false,"ret": 990},{"kind": 18,"name": "fn(*std.reset_event.AtomicEvent) void","generic": false,"ret": 551,"args": [991]},{"kind": 18,"name": "fn(*std.reset_event.AtomicEvent, ?u64) @TypeOf(std.reset_event.AtomicEvent.wait).ReturnType.ErrorSet!void","generic": false,"ret": 992,"args": [991,993]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.os.struct:2828:51) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,963]},{"kind": 18,"name": "fn(std.debug.struct:2439:80) void","generic": false,"ret": 551,"args": [994]},{"kind": 18,"name": "fn(std.debug.struct:2440:80) void","generic": false,"ret": 551,"args": [995]},{"kind": 18,"name": "fn(usize, usize) void","generic": false,"ret": 551,"args": [609,609]},{"kind": 18,"name": "fn(*std.progress.Progress, []const u8, ?usize) @TypeOf(std.progress.Progress.start).ReturnType.ErrorSet!*std.progress.Node","generic": false,"ret": 996,"args": [997,573,691]},{"kind": 18,"name": "fn() std.time.Error!std.time.Timer","generic": false,"ret": 998},{"kind": 18,"name": "fn(*std.progress.Node, []const u8, ?usize) std.progress.Node","generic": false,"ret": 999,"args": [1000,573,691]},{"kind": 18,"name": "fn(*std.progress.Node) void","generic": false,"ret": 551,"args": [1000]},{"kind": 18,"name": "fn(*std.progress.Progress) void","generic": false,"ret": 551,"args": [997]},{"kind": 18,"name": "fn(std.special.struct:20:44) void","generic": false,"ret": 551,"args": [1001]},{"kind": 18,"name": "fn(std.special.struct:25:68) void","generic": false,"ret": 551,"args": [1002]},{"kind": 18,"name": "fn(*std.progress.Progress, std.special.struct:34:35) void","generic": false,"ret": 551,"args": [997,1003]},{"kind": 18,"name": "fn(*std.progress.Progress, std.special.struct:30:46) void","generic": false,"ret": 551,"args": [997,1004]},{"kind": 18,"name": "fn(std.special.struct:31:74) void","generic": false,"ret": 551,"args": [1005]},{"kind": 18,"name": "fn(std.special.struct:41:51) void","generic": false,"ret": 551,"args": [1006]},{"kind": 18,"name": "fn(std.special.struct:43:53) void","generic": false,"ret": 551,"args": [1007]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.start.struct:260:48) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,987]},{"kind": 18,"name": "fn(i32, [*]const u8, usize) usize","generic": false,"ret": 609,"args": [667,941,609]},{"kind": 18,"name": "fn() usize","generic": false,"ret": 609},{"kind": 18,"name": "fn(*u32, ?u64) @TypeOf(std.reset_event.LinuxFutex.wait).ReturnType.ErrorSet!void","generic": false,"ret": 1008,"args": [1009,993]},{"kind": 18,"name": "fn(*const i32, u32, i32, ?*std.os.bits.linux.x86_64.timespec) usize","generic": false,"ret": 609,"args": [1010,770,667,1011]},{"kind": 18,"name": "fn(*u32, u32) void","generic": false,"ret": 551,"args": [1009,770]},{"kind": 18,"name": "fn(f32) void","generic": false,"ret": 551,"args": [629]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:2439:80) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,994]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:2440:80) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,995]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.struct:118:86) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,1012]},{"kind": 18,"name": "fn([*:0]const u8) ?[]const u8","generic": false,"ret": 905,"args": [924]},{"kind": 18,"name": "fn(i32, *std.os.bits.linux.x86_64.timespec) std.os.ClockGetTimeError!void","generic": false,"ret": 1013,"args": [667,1014]},{"kind": 18,"name": "fn([]u8, std.progress.struct:133:78) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1016]},{"kind": 18,"name": "fn([]u8, std.progress.struct:137:77) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1017]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, std.progress.struct:145:49) void","generic": false,"ret": 551,"args": [997,1018,1019]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, std.progress.struct:150:52) void","generic": false,"ret": 551,"args": [997,1018,1020]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, std.progress.struct:154:69) void","generic": false,"ret": 551,"args": [997,1018,1021]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, std.progress.struct:155:58) void","generic": false,"ret": 551,"args": [997,1018,1022]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, std.progress.struct:158:69) void","generic": false,"ret": 551,"args": [997,1018,1023]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, std.progress.struct:159:55) void","generic": false,"ret": 551,"args": [997,1018,1024]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, std.progress.struct:166:45) void","generic": false,"ret": 551,"args": [997,1018,1025]},{"kind": 18,"name": "fn(*std.time.Timer) u64","generic": false,"ret": 615,"args": [1026]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.special.struct:20:44) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,1001]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.special.struct:25:68) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,1002]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.special.struct:34:35) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,1003]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.special.struct:30:46) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,1004]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.special.struct:31:74) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,1005]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.special.struct:41:51) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,1006]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.special.struct:43:53) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,1007]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.start.struct:260:48) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,987]},{"kind": 18,"name": "fn(usize, u8, bool, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 735,"args": [609,572,565,927,734,288]},{"kind": 18,"name": "fn(u64, u8, bool, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 735,"args": [615,572,565,927,734,288]},{"kind": 18,"name": "fn(*const i32, u32, i32) usize","generic": false,"ret": 609,"args": [1010,770,667]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:2439:80) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,994]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:2440:80) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,995]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.debug.struct:118:86) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,1012]},{"kind": 18,"name": "fn([*:0]const u8) [:0]const u8","generic": false,"ret": 1027,"args": [924]},{"kind": 18,"name": "fn(i32, *std.os.bits.linux.x86_64.timespec) usize","generic": false,"ret": 609,"args": [667,1014]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, []const u8) @TypeOf(std.fmt.bufPrintWrite).ReturnType.ErrorSet!void","generic": false,"ret": 1028,"args": [1029,573]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:133:78) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1016]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:137:77) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1017]},{"kind": 18,"name": "fn([]u8, std.progress.struct:145:49) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1019]},{"kind": 18,"name": "fn([]u8, std.progress.struct:150:52) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1020]},{"kind": 18,"name": "fn([]u8, std.progress.struct:154:69) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1021]},{"kind": 18,"name": "fn([]u8, std.progress.struct:155:58) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1022]},{"kind": 18,"name": "fn([]u8, std.progress.struct:158:69) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1023]},{"kind": 18,"name": "fn([]u8, std.progress.struct:159:55) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1024]},{"kind": 18,"name": "fn([]u8, std.progress.struct:166:45) std.fmt.BufPrintError![]u8","generic": false,"ret": 1015,"args": [548,1025]},{"kind": 18,"name": "fn() u64","generic": false,"ret": 615},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.special.struct:20:44) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,1001]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.special.struct:25:68) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,1002]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.special.struct:34:35) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,1003]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.special.struct:30:46) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,1004]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.special.struct:31:74) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,1005]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.special.struct:41:51) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,1006]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, std.special.struct:43:53) std.os.WriteError!void","generic": false,"ret": 735,"args": [734,288,1007]},{"kind": 18,"name": "fn([*:0]const u8) usize","generic": false,"ret": 609,"args": [924]},{"kind": 18,"name": "fn(i32, *std.os.bits.linux.x86_64.timespec) callconv(.C) usize","generic": false,"ret": 609,"args": [667,1014]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [609,927,1029,1031,609]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:145:49) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1019]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:150:52) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1020]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:154:69) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1021]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:155:58) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1022]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:158:69) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1023]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:159:55) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1024]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, std.progress.struct:166:45) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,1031,1025]},{"kind": 18,"name": "fn(u8, bool) u8","generic": false,"ret": 572,"args": [572,565]},{"kind": 18,"name": "fn([]u8, u8) void","generic": false,"ret": 551,"args": [548,572]},{"kind": 18,"name": "fn([]const u8, []const u8) usize","generic": false,"ret": 609,"args": [573,573]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [609,927,1029,1031]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [573,927,1029,1031,609]},{"kind": 18,"name": "fn(*std.elf.Elf64_Verdef, i32, []const u8, [*]u8) bool","generic": false,"ret": 565,"args": [1032,667,573,982]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [573,927,1029,1031]},{"kind": 18,"name": "fn(usize, u8, bool, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [609,572,565,927,1029,1031]},{"kind": 18,"name": "fn(*std.macho.nlist_64) u32","generic": false,"ret": 770,"args": [569]},{"kind": 18,"name": "fn(*std.macho.nlist_64, *std.macho.nlist_64) bool","generic": false,"ret": 565,"args": [569,569]},{"kind": 18,"name": "fn(*std.pdb.MsfStream, []u8) @TypeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet!usize","generic": false,"ret": 1033,"args": [1034,548]},{"kind": 18,"name": "fn() fn(usize) u32","generic": false,"ret": 528},{"kind": 18,"name": "fn(std.fs.file.File, u64) std.os.SeekError!void","generic": false,"ret": 720,"args": [703,615]},{"kind": 18,"name": "fn(u64, usize) usize","generic": false,"ret": 609,"args": [615,609]},{"kind": 18,"name": "fn(usize) u32","generic": false,"ret": 770,"args": [609]},{"kind": 18,"name": "fn(i32, u64) std.os.SeekError!void","generic": false,"ret": 720,"args": [667,615]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.Wyhash","generic": false,"ret": 1035,"args": [615]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, usize) void","generic": false,"ret": 551,"args": [1036,609]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash) u64","generic": false,"ret": 615,"args": [1036]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.WyhashStateless","generic": false,"ret": 1037,"args": [615]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) u64","generic": false,"ret": 615,"args": [1038,573]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, []const u8) void","generic": false,"ret": 551,"args": [1036,573]},{"kind": 18,"name": "fn(*const usize) *align(8) const [8]u8","generic": false,"ret": 563,"args": [564]},{"kind": 18,"name": "fn(u64, u64, u64) u64","generic": false,"ret": 615,"args": [615,615,615]},{"kind": 18,"name": "fn([]const u8) u64","generic": false,"ret": 615,"args": [573]},{"kind": 18,"name": "fn(u64, u64) u64","generic": false,"ret": 615,"args": [615,615]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) void","generic": false,"ret": 551,"args": [1038,573]},{"kind": 18,"name": "fn([]const u8) u8","generic": false,"ret": 572,"args": [573]},{"kind": 18,"name": "fn([]const u8) u16","generic": false,"ret": 730,"args": [573]},{"kind": 18,"name": "fn([]const u8) u32","generic": false,"ret": 770,"args": [573]},{"kind": 18,"name": "fn(u64, u64) u128","generic": false,"ret": 1039,"args": [615,615]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 0},{"kind": 8,"name": "std.array_list.AlignedArrayList([]u8,null)","src": 415,"pubDecls": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"privDecls": [29],"fields": [878,609,678]},{"kind": 6,"len": 2,"elem": 572},{"kind": 13,"child": 700},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 1,"name": "void"},{"kind": 8,"name": "(root)","src": 416,"pubDecls": [30,31,32,33,34],"privDecls": [],"file": 0},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "pcx.Header","src": 417,"pubDecls": [],"privDecls": [35],"fields": [572,572,572,572,730,730,730,730,730,730,1043,572,572,730,730,730,730]},{"kind": 6,"elem": 554},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null)","src": 415,"pubDecls": [36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"privDecls": [65],"fields": [814,609,678]},{"kind": 8,"name": "std.debug.AbbrevTableEntry","src": 418,"pubDecls": [],"privDecls": [],"fields": [565,615,615,594]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.atomic.queue.Queue(anyframe)","src": 419,"pubDecls": [66,67,68,69,70,71,72,73,74,75],"privDecls": [],"fields": [1046,1046,919]},{"kind": 22,"name": "anyframe"},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 6,"align": 8,"const": true,"elem": 1047},{"kind": 6,"const": true,"elem": 609},{"kind": 2},{"kind": 17,"name": "std.target.Target","src": 420,"pubDecls": [76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],"privDecls": [120],"fields": [551,1050]},{"kind": 18,"name": "fn(type,var,var,var) var","generic": true,"args": [546,null,null,null]},{"kind": 8,"name": "std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql)","src": 421,"pubDecls": [121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],"privDecls": [141,142,143,144,145,146,147,148,149,150,151,152],"fields": [1054,609,609,678,770]},{"kind": 6,"elem": 1055},{"kind": 8,"name": "std.debug.MachOFile","src": 422,"pubDecls": [],"privDecls": [],"fields": [1056,1057,1057]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 4,"u": 8},{"kind": 6,"len": 2,"const": true,"elem": 572},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "pcx.SubImage(u8)","src": 423,"pubDecls": [153,154],"privDecls": [155,156],"fields": [678,548,609,609,1059]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null)","src": 415,"pubDecls": [157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185],"privDecls": [186],"fields": [803,609,678]},{"kind": 8,"name": "std.debug.AbbrevTableHeader","src": 424,"pubDecls": [],"privDecls": [],"fields": [615,557]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.coff.Section,null)","src": 415,"pubDecls": [187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215],"privDecls": [216],"fields": [1060,609,678]},{"kind": 8,"name": "std.coff.Section","src": 425,"pubDecls": [],"privDecls": [],"fields": [1061]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.linked_list.TailQueue(std.event.fs.Request)","src": 426,"pubDecls": [217,218,219,220,221,222,223,224,225,226,227,228,229],"privDecls": [230],"fields": [1064,1064,609]},{"kind": 8,"name": "std.event.fs.Request","src": 427,"pubDecls": [231,232],"privDecls": [],"fields": [1067,1066]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.io.in_stream.InStream(std.os.ReadError)","src": 428,"pubDecls": [233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254],"privDecls": [255],"fields": [52]},{"kind": 15,"name": "std.os.ReadError","errors": [0,1,2,3,4,5,6,7]},{"kind": 8,"name": "pcx.SubImage(u1)","src": 423,"pubDecls": [256,257],"privDecls": [258,259],"fields": [678,743,609,609,1071]},{"kind": 4,"u": 1},{"kind": 8,"name": "pcx.SubImage(u4)","src": 423,"pubDecls": [260,261],"privDecls": [262,263],"fields": [678,746,609,609,1073]},{"kind": 4,"u": 4},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.io.in_stream.InStream(std.io.seekable_stream.Error)","src": 428,"pubDecls": [264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285],"privDecls": [286],"fields": [327]},{"kind": 15,"name": "std.io.seekable_stream.Error","errors": []},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null)","src": 415,"pubDecls": [287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315],"privDecls": [316],"fields": [821,609,678]},{"kind": 8,"name": "std.debug.AbbrevAttr","src": 429,"pubDecls": [],"privDecls": [],"fields": [615,615]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.Attr,null)","src": 415,"pubDecls": [317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345],"privDecls": [346],"fields": [834,609,678]},{"kind": 8,"name": "std.debug.Attr","src": 430,"pubDecls": [],"privDecls": [],"fields": [615,1074]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 10,"name": "comptime_int"},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.FileEntry,null)","src": 415,"pubDecls": [347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375],"privDecls": [376],"fields": [896,609,678]},{"kind": 8,"name": "std.debug.FileEntry","src": 431,"pubDecls": [],"privDecls": [],"fields": [573,609,609,609]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "netbpm.AnymapData(u8)","src": 432,"pubDecls": [377,378,379],"privDecls": [380],"fields": [678,548,609,609]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 9,"name": "comptime_float"},{"kind": 8,"name": "std.array_list.AlignedArrayList(u8,null)","src": 415,"pubDecls": [381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409],"privDecls": [410],"fields": [548,609,678]},{"kind": 4,"u": 64},{"kind": 8,"name": "netbpm.AnymapData(u1)","src": 432,"pubDecls": [411,412,413],"privDecls": [414],"fields": [678,743,609,609]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.io.out_stream.OutStream(std.os.WriteError)","src": 433,"pubDecls": [415,416,417,418,419,420,421,422,423,424,425],"privDecls": [426],"fields": [288]},{"kind": 15,"name": "std.os.WriteError","errors": [8,9,10,11,12,13,14,15,16,7]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 4,"u": 64},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 4,"i": 64},{"kind": 8,"name": "std.atomic.queue.Queue(std.event.fs.Request)","src": 419,"pubDecls": [427,428,429,430,431,432,433,434,435,436],"privDecls": [],"fields": [1064,1064,919]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "math3d.VectorMixin(math3d.Vec3)","src": 434,"pubDecls": [437,438,439,440,441,442,443,444,445,446,447,448],"privDecls": []},{"kind": 8,"name": "math3d.Vec3","src": 435,"pubDecls": [449,438,450,441,451,452,443,453,454,455,446,447,456,457,448,437,439,458,459,440,460,442,444,445,461,462],"privDecls": [463,464],"fields": [629,629,629]},{"kind": 8,"name": "std.io.in_stream.InStream(anyerror)","src": 428,"pubDecls": [465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486],"privDecls": [487],"fields": [150]},{"kind": 15},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.CompileUnit,null)","src": 415,"pubDecls": [488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516],"privDecls": [517],"fields": [859,609,678]},{"kind": 8,"name": "std.debug.CompileUnit","src": 436,"pubDecls": [],"privDecls": [],"fields": [730,565,1084,1085]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 5,"bits": 32},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.linked_list.SinglyLinkedList([]u8)","src": 437,"pubDecls": [518,519,520,521,522,523,524,525,526],"privDecls": [527],"fields": [1087]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.atomic.stack.Stack(std.event.loop.EventFd)","src": 438,"pubDecls": [528,529,530,531,532,533,534],"privDecls": [535],"fields": [1090,572]},{"kind": 8,"name": "std.event.loop.EventFd","src": 439,"pubDecls": [],"privDecls": [],"fields": [1091,770,667]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 8,"name": "std.io.seekable_stream.SeekableStream(anyerror,anyerror)","src": 440,"pubDecls": [536,537,538,539,540,541],"privDecls": [542],"fields": [163,152,162,162]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.Func,null)","src": 415,"pubDecls": [543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571],"privDecls": [572],"fields": [850,609,678]},{"kind": 8,"name": "std.debug.Func","src": 441,"pubDecls": [],"privDecls": [],"fields": [1085,1093]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "pcx.SubImage(pcx.RGB)","src": 423,"pubDecls": [573,574],"privDecls": [575,576],"fields": [678,750,609,609,1094]},{"kind": 8,"name": "pcx.RGB","src": 442,"pubDecls": [],"privDecls": [],"fields": [572,572,572]},{"kind": 8,"name": "math3d.VectorMixin(math3d.Vec2)","src": 434,"pubDecls": [577,578,579,580,581,582,583,584,585,586,587,588],"privDecls": []},{"kind": 8,"name": "math3d.Vec2","src": 443,"pubDecls": [578,581,589,583,590,591,586,587,592,588,577,579,593,580,582,584,585,594],"privDecls": [595,596],"fields": [629,629]},{"kind": 8,"name": "netbpm","src": 444,"pubDecls": [597,598,599,600,601],"privDecls": [602,603,604,605,606,607,608,609,610,611,612,613,614],"file": 4},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.io.in_stream.InStream(@TypeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)","src": 428,"pubDecls": [615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636],"privDecls": [637],"fields": [1101]},{"kind": 15,"name": "@TypeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet","fn": 717,"errors": [0,1,2,3,4,5,6,7,17]},{"kind": 16,"name": "std.target.Os","src": 445,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]},{"kind": 8,"name": "std.io.seekable_stream.SeekableStream(std.io.seekable_stream.SeekError,std.io.seekable_stream.GetSeekPosError)","src": 440,"pubDecls": [638,639,640,641,642,643],"privDecls": [644],"fields": [328,329,330,330]},{"kind": 15,"name": "std.io.seekable_stream.SeekError","errors": [18]},{"kind": 15,"name": "std.io.seekable_stream.GetSeekPosError","errors": []},{"kind": 6,"elem": 1102},{"kind": 8,"name": "netbpm.AnymapData(netbpm.Color)","src": 432,"pubDecls": [645,646,647],"privDecls": [648],"fields": [678,1103,609,609]},{"kind": 8,"name": "netbpm.Color","src": 446,"pubDecls": [],"privDecls": [],"fields": [572,572,572]},{"kind": 8,"name": "math3d.VectorMixin(math3d.Vec4)","src": 434,"pubDecls": [649,650,651,652,653,654,655,656,657,658,659,660],"privDecls": []},{"kind": 8,"name": "math3d.Vec4","src": 447,"pubDecls": [650,653,661,655,662,663,658,659,664,660,649,651,665,652,666,654,667,656,657,668],"privDecls": [669,670],"fields": [629,629,629,629]},{"kind": 8,"name": "std.linked_list.TailQueue(anyframe)","src": 426,"pubDecls": [671,672,673,674,675,676,677,678,679,680,681,682,683],"privDecls": [684],"fields": [1046,1046,609]},{"kind": 18,"name": "fn(var,var) var","generic": true,"args": [null,null]},{"kind": 8,"name": "math","src": 448,"pubDecls": [685,686],"privDecls": [687],"file": 5},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 4,"u": 6},{"kind": 18,"name": "fn(@TagType(std.builtin.TypeInfo)) var","generic": true,"args": [664]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 16,"name": "@TagType(std.builtin.TypeInfo)","src": 449,"pubDecls": [688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]},{"kind": 8,"name": "color","src": 450,"pubDecls": [708],"privDecls": [709],"file": 6},{"kind": 8,"name": "math3d","src": 451,"pubDecls": [710,711,712,713,714,715,716,717,718],"privDecls": [719,720,721,722],"file": 7},{"kind": 4,"i": 32},{"kind": 8,"name": "builtin","src": 452,"pubDecls": [723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763],"privDecls": [],"file": 1},{"kind": 8,"name": "std","src": 453,"pubDecls": [764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830],"privDecls": [],"file": 2},{"kind": 8,"name": "std.special","src": 454,"pubDecls": [831],"privDecls": [832,833,834],"file": 3},{"kind": 3,"name": "noreturn"},{"kind": 13,"child": 1166},{"kind": 14,"err": 624,"payload": 551},{"kind": 14,"err": 1167,"payload": 551},{"kind": 6,"elem": 610},{"kind": 6,"elem": 584},{"kind": 14,"err": 1168,"payload": 1099},{"kind": 6,"elem": 1169},{"kind": 14,"err": 1170,"payload": 572},{"kind": 14,"err": 1171,"payload": 572},{"kind": 14,"err": 1172,"payload": 551},{"kind": 6,"elem": 605},{"kind": 14,"err": 1173,"payload": 551},{"kind": 14,"err": 1174,"payload": 551},{"kind": 14,"err": 1175,"payload": 1100},{"kind": 14,"err": 1176,"payload": 551},{"kind": 6,"elem": 653},{"kind": 14,"err": 1177,"payload": 609},{"kind": 14,"err": 1178,"payload": 551},{"kind": 13,"child": 1179},{"kind": 13,"child": 609},{"kind": 8,"name": "std.builtin.struct:461:79","src": 455,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 8,"name": "math3d.Mat4","src": 456,"pubDecls": [835,836,837,838,839,840,841,842,843,844,845,846,847,848],"privDecls": [],"fields": [740]},{"kind": 8,"name": "std.fs.Dir","src": 457,"pubDecls": [849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888],"privDecls": [889,890,891],"fields": [667]},{"kind": 14,"err": 1181,"payload": 703},{"kind": 14,"err": 1182,"payload": 1183},{"kind": 6,"elem": 703},{"kind": 8,"name": "std.heap.ThreadSafeFixedBufferAllocator","src": 458,"pubDecls": [892],"privDecls": [893,894,895],"fields": [1169,609,548]},{"kind": 14,"err": 1184,"payload": 548},{"kind": 4,"u": 29},{"kind": 14,"err": 1185,"payload": 548},{"kind": 8,"name": "std.fs.file.InStream","src": 459,"pubDecls": [896,897],"privDecls": [898],"fields": [703,584]},{"kind": 8,"name": "std.fs.file.File","src": 460,"pubDecls": [899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945],"privDecls": [],"fields": [667]},{"kind": 14,"err": 1191,"payload": 551},{"kind": 14,"err": 585,"payload": 609},{"kind": 14,"err": 1192,"payload": 586},{"kind": 14,"err": 1193,"payload": 743},{"kind": 8,"name": "pcx.RLEDecoder","src": 461,"pubDecls": [],"privDecls": [946,947,948,949],"fields": [676,1195]},{"kind": 14,"err": 1196,"payload": 572},{"kind": 6,"elem": 708},{"kind": 14,"err": 1197,"payload": 572},{"kind": 14,"err": 1198,"payload": 551},{"kind": 14,"err": 1193,"payload": 742},{"kind": 14,"err": 1199,"payload": 588},{"kind": 14,"err": 1193,"payload": 746},{"kind": 14,"err": 1193,"payload": 745},{"kind": 14,"err": 1200,"payload": 575},{"kind": 14,"err": 1193,"payload": 548},{"kind": 14,"err": 1193,"payload": 722},{"kind": 14,"err": 1188,"payload": 551},{"kind": 4,"i": 64},{"kind": 6,"elem": 1058},{"kind": 14,"err": 1201,"payload": 640},{"kind": 14,"err": 1193,"payload": 750},{"kind": 14,"err": 1202,"payload": 551},{"kind": 14,"err": 1203,"payload": 609},{"kind": 14,"err": 1204,"payload": 609},{"kind": 14,"err": 1205,"payload": 551},{"kind": 14,"err": 1206,"payload": 730},{"kind": 4,"u": 16},{"kind": 6,"const": true,"elem": 1207},{"kind": 14,"err": 1193,"payload": 1103},{"kind": 14,"err": 1208,"payload": 551},{"kind": 6,"elem": 612},{"kind": 14,"err": 613,"payload": 551},{"kind": 8,"name": "std.builtin.StackTrace","src": 462,"pubDecls": [],"privDecls": [],"fields": [609,1209]},{"kind": 8,"name": "std.debug.struct:246:59","src": 463,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "math3d.Mat2","src": 464,"pubDecls": [950],"privDecls": [],"fields": [1210]},{"kind": 8,"name": "math3d.Mat3","src": 465,"pubDecls": [951],"privDecls": [],"fields": [1211]},{"kind": 7,"len": 4,"elem": 922},{"kind": 8,"name": "std.fs.file.OpenFlags","src": 466,"pubDecls": [],"privDecls": [],"fields": [565,565]},{"kind": 6,"elem": 1070},{"kind": 6,"len": 2,"elem": 587},{"kind": 14,"err": 1193,"payload": 1212},{"kind": 6,"elem": 1072},{"kind": 6,"len": 2,"elem": 589},{"kind": 14,"err": 1193,"payload": 1213},{"kind": 14,"err": 1193,"payload": 1214},{"kind": 6,"elem": 551},{"kind": 6,"len": 2,"elem": 641},{"kind": 14,"err": 1215,"payload": 572},{"kind": 14,"err": 1216,"payload": 609},{"kind": 14,"err": 1217,"payload": 609},{"kind": 14,"err": 1218,"payload": 609},{"kind": 13,"child": 1219},{"kind": 6,"len": 1,"elem": 1220},{"kind": 6,"len": 2,"elem": 1220},{"kind": 6,"const": true,"elem": 1221},{"kind": 13,"child": 1222},{"kind": 8,"name": "std.fs.file.OutStream","src": 467,"pubDecls": [952,953],"privDecls": [954],"fields": [703,612]},{"kind": 14,"err": 926,"payload": 551},{"kind": 14,"err": 1223,"payload": 796},{"kind": 14,"err": 1224,"payload": 807},{"kind": 14,"err": 1225,"payload": 807},{"kind": 14,"err": 1226,"payload": 703},{"kind": 14,"err": 1189,"payload": 615},{"kind": 14,"err": 1227,"payload": 609},{"kind": 14,"err": 1228,"payload": 775},{"kind": 13,"child": 1229},{"kind": 4,"u": 32},{"kind": 8,"name": "std.io.seekable_stream.SliceSeekableInStream","src": 468,"pubDecls": [955,956,957,958,959,960],"privDecls": [961,962,963,964,965,966],"fields": [591,649,609,573]},{"kind": 14,"err": 1230,"payload": 807},{"kind": 6,"elem": 636},{"kind": 6,"elem": 623},{"kind": 6,"len": 2,"align": 4096,"elem": 572},{"kind": 14,"err": 1231,"payload": 1232},{"kind": 14,"err": 1233,"payload": 551},{"kind": 14,"err": 624,"payload": 609},{"kind": 14,"err": 1234,"payload": 572},{"kind": 14,"err": 1235,"payload": 1236},{"kind": 16,"name": "std.builtin.Endian","src": 469,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 14,"err": 1237,"payload": 730},{"kind": 14,"err": 1238,"payload": 1239},{"kind": 14,"err": 1240,"payload": 770},{"kind": 6,"const": true,"elem": 1241},{"kind": 14,"err": 1242,"payload": 615},{"kind": 6,"const": true,"elem": 1047},{"kind": 14,"err": 1243,"payload": 615},{"kind": 14,"err": 624,"payload": 615},{"kind": 14,"err": 1193,"payload": 791},{"kind": 6,"len": 2,"elem": 1244},{"kind": 14,"err": 1245,"payload": 1246},{"kind": 6,"elem": 1232},{"kind": 14,"err": 1247,"payload": 1248},{"kind": 14,"err": 1249,"payload": 551},{"kind": 6,"elem": 807},{"kind": 14,"err": 1250,"payload": 551},{"kind": 14,"err": 1251,"payload": 615},{"kind": 6,"elem": 565},{"kind": 14,"err": 1252,"payload": 770},{"kind": 14,"err": 1253,"payload": 615},{"kind": 14,"err": 1254,"payload": 828},{"kind": 6,"len": 2,"elem": 577},{"kind": 14,"err": 1255,"payload": 551},{"kind": 6,"elem": 576},{"kind": 14,"err": 1256,"payload": 557},{"kind": 8,"name": "std.debug.DwarfInfo","src": 470,"pubDecls": [967,968,969,970],"privDecls": [971,972,973,974,975,976,977,978,979],"fields": [773,774,781,1258,1258,1258,1258,1246,576,625,637]},{"kind": 14,"err": 1259,"payload": 615},{"kind": 14,"err": 1260,"payload": 551},{"kind": 6,"elem": 557},{"kind": 14,"err": 1261,"payload": 815},{"kind": 14,"err": 1262,"payload": 551},{"kind": 14,"err": 1193,"payload": 814},{"kind": 6,"len": 2,"elem": 558},{"kind": 6,"elem": 558},{"kind": 14,"err": 1263,"payload": 551},{"kind": 6,"elem": 594},{"kind": 14,"err": 1264,"payload": 822},{"kind": 14,"err": 1265,"payload": 551},{"kind": 14,"err": 1193,"payload": 821},{"kind": 6,"len": 2,"elem": 595},{"kind": 6,"elem": 595},{"kind": 14,"err": 1266,"payload": 826},{"kind": 14,"err": 1267,"payload": 551},{"kind": 14,"err": 1193,"payload": 803},{"kind": 6,"elem": 577},{"kind": 14,"err": 1268,"payload": 1269},{"kind": 6,"const": true,"elem": 557},{"kind": 13,"child": 1270},{"kind": 14,"err": 1271,"payload": 551},{"kind": 6,"elem": 596},{"kind": 14,"err": 1272,"payload": 551},{"kind": 14,"err": 1193,"payload": 834},{"kind": 6,"len": 2,"elem": 597},{"kind": 6,"len": 2,"const": true,"elem": 595},{"kind": 14,"err": 624,"payload": 1074},{"kind": 13,"child": 1273},{"kind": 6,"const": true,"elem": 1274},{"kind": 14,"err": 1275,"payload": 548},{"kind": 14,"err": 1276,"payload": 548},{"kind": 14,"err": 1277,"payload": 615},{"kind": 14,"err": 1278,"payload": 615},{"kind": 14,"err": 1279,"payload": 615},{"kind": 6,"const": true,"elem": 1280},{"kind": 14,"err": 1281,"payload": 551},{"kind": 6,"elem": 637},{"kind": 14,"err": 1282,"payload": 851},{"kind": 14,"err": 1283,"payload": 551},{"kind": 14,"err": 1193,"payload": 850},{"kind": 6,"len": 2,"elem": 638},{"kind": 6,"elem": 638},{"kind": 14,"err": 1284,"payload": 551},{"kind": 14,"err": 1193,"payload": 1084},{"kind": 14,"err": 1285,"payload": 551},{"kind": 6,"elem": 625},{"kind": 14,"err": 1286,"payload": 860},{"kind": 14,"err": 1287,"payload": 551},{"kind": 14,"err": 1193,"payload": 859},{"kind": 6,"len": 2,"elem": 626},{"kind": 6,"elem": 626},{"kind": 8,"name": "std.debug.struct:191:86","src": 471,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 14,"err": 1288,"payload": 551},{"kind": 14,"err": 1289,"payload": 551},{"kind": 14,"err": 1290,"payload": 551},{"kind": 14,"err": 1291,"payload": 551},{"kind": 14,"err": 1292,"payload": 1293},{"kind": 14,"err": 1294,"payload": 615},{"kind": 14,"err": 1295,"payload": 609},{"kind": 8,"name": "std.debug.struct:1244:104","src": 472,"pubDecls": [],"privDecls": [],"fields": [609]},{"kind": 8,"name": "std.debug.struct:1246:76","src": 473,"pubDecls": [],"privDecls": [],"fields": [609]},{"kind": 14,"err": 1296,"payload": 907},{"kind": 14,"err": 1297,"payload": 1298},{"kind": 14,"err": 1299,"payload": 551},{"kind": 6,"elem": 547},{"kind": 14,"err": 1300,"payload": 879},{"kind": 14,"err": 1301,"payload": 551},{"kind": 14,"err": 1193,"payload": 878},{"kind": 6,"len": 2,"elem": 548},{"kind": 6,"elem": 548},{"kind": 14,"err": 1302,"payload": 548},{"kind": 14,"err": 1303,"payload": 548},{"kind": 14,"err": 1304,"payload": 551},{"kind": 6,"elem": 608},{"kind": 14,"err": 1305,"payload": 886},{"kind": 14,"err": 1306,"payload": 551},{"kind": 6,"elem": 572},{"kind": 8,"name": "std.debug.LineNumberProgram","src": 474,"pubDecls": [980,981],"privDecls": [],"fields": [609,609,721,615,565,565,565,609,888,889,609,609,721,615,565,565,565]},{"kind": 6,"len": 2,"const": true,"elem": 573},{"kind": 6,"elem": 602},{"kind": 6,"len": 2,"const": true,"elem": 548},{"kind": 14,"err": 1307,"payload": 609},{"kind": 14,"err": 1308,"payload": 551},{"kind": 14,"err": 1309,"payload": 897},{"kind": 14,"err": 1310,"payload": 551},{"kind": 14,"err": 1193,"payload": 896},{"kind": 6,"len": 2,"elem": 603},{"kind": 6,"elem": 603},{"kind": 14,"err": 1311,"payload": 617},{"kind": 14,"err": 1312,"payload": 1313},{"kind": 6,"elem": 887},{"kind": 14,"err": 1314,"payload": 548},{"kind": 14,"err": 1315,"payload": 548},{"kind": 14,"err": 1316,"payload": 609},{"kind": 14,"err": 1317,"payload": 721},{"kind": 13,"child": 573},{"kind": 14,"err": 1318,"payload": 551},{"kind": 8,"name": "std.debug.LineInfo","src": 475,"pubDecls": [],"privDecls": [982],"fields": [615,615,573,1319]},{"kind": 8,"name": "std.debug.struct:766:115","src": 476,"pubDecls": [],"privDecls": [],"fields": [573,615,615,609,573,573]},{"kind": 14,"err": 1320,"payload": 551},{"kind": 8,"name": "std.debug.struct:791:63","src": 477,"pubDecls": [],"privDecls": [],"fields": [573,615,615,609,573,573]},{"kind": 8,"name": "std.debug.struct:1266:107","src": 478,"pubDecls": [],"privDecls": [],"fields": [609,548]},{"kind": 8,"name": "std.debug.struct:1270:79","src": 479,"pubDecls": [],"privDecls": [],"fields": [609,548]},{"kind": 8,"name": "std.debug.struct:195:59","src": 480,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 8,"name": "std.debug.struct:99:86","src": 481,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 14,"err": 1321,"payload": 551},{"kind": 8,"name": "std.debug.StackIterator","src": 482,"pubDecls": [983],"privDecls": [984,985],"fields": [691,609]},{"kind": 6,"elem": 916},{"kind": 8,"name": "std.debug.struct:103:59","src": 483,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 8,"name": "std.mutex.Mutex","src": 484,"pubDecls": [986,987,988,989,990],"privDecls": [991,992,993,994,995,996,997],"fields": [609]},{"kind": 8,"name": "std.mutex.Held","src": 485,"pubDecls": [998],"privDecls": [],"fields": [921]},{"kind": 6,"elem": 919},{"kind": 7,"len": 4,"elem": 629},{"kind": 14,"err": 1324,"payload": 1325},{"kind": 6,"len": 1,"const": true,"elem": 572},{"kind": 4,"u": 12},{"kind": 15,"name": "std.os.UnexpectedError","errors": [7]},{"kind": 8,"name": "std.fmt.FormatOptions","src": 486,"pubDecls": [],"privDecls": [],"fields": [691,691,1326,572]},{"kind": 13,"child": 1327},{"kind": 13,"child": 1328},{"kind": 8,"name": "std.heap.ArenaAllocator","src": 487,"pubDecls": [999,1000],"privDecls": [1001,1002,1003,1004,1005],"fields": [1169,678,631,609]},{"kind": 17,"name": "std.target.Arch","src": 488,"pubDecls": [1006,1007,1008,1009,1010,1011],"privDecls": [],"fields": [1329,1329,1330,1330,1330,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,1329,1329,551,551,551,551,551,551,551,551,551,551,551,551,551,1331,551,551,551,551,551,551]},{"kind": 14,"err": 1332,"payload": 548},{"kind": 14,"err": 1333,"payload": 548},{"kind": 14,"err": 1190,"payload": 1187},{"kind": 13,"child": 982},{"kind": 14,"err": 592,"payload": 609},{"kind": 6,"elem": 591},{"kind": 14,"err": 650,"payload": 551},{"kind": 6,"elem": 649},{"kind": 14,"err": 651,"payload": 615},{"kind": 6,"len": 1,"const": true,"elem": 572},{"kind": 6,"len": 2,"const": true,"elem": 558},{"kind": 14,"err": 1334,"payload": 615},{"kind": 14,"err": 1335,"payload": 1074},{"kind": 14,"err": 1336,"payload": 1074},{"kind": 14,"err": 1337,"payload": 1074},{"kind": 14,"err": 1338,"payload": 1074},{"kind": 14,"err": 1339,"payload": 1074},{"kind": 14,"err": 1340,"payload": 1074},{"kind": 14,"err": 1341,"payload": 1074},{"kind": 14,"err": 1342,"payload": 548},{"kind": 14,"err": 1343,"payload": 615},{"kind": 14,"err": 1344,"payload": 1074},{"kind": 14,"err": 1193,"payload": 955},{"kind": 6,"elem": 1345},{"kind": 6,"len": 2,"const": true,"elem": 597},{"kind": 14,"err": 1193,"payload": 1346},{"kind": 8,"name": "std.heap.FixedBufferAllocator","src": 489,"pubDecls": [1012,1013],"privDecls": [1014,1015,1016],"fields": [1169,609,548]},{"kind": 14,"err": 1347,"payload": 548},{"kind": 6,"len": 2,"const": true,"elem": 638},{"kind": 13,"child": 920},{"kind": 14,"err": 1348,"payload": 667},{"kind": 8,"name": "std.os.struct:2828:51","src": 490,"pubDecls": [],"privDecls": [],"fields": [609]},{"kind": 14,"err": 1349,"payload": 548},{"kind": 14,"err": 1350,"payload": 548},{"kind": 14,"err": 1351,"payload": 970},{"kind": 6,"elem": 930},{"kind": 14,"err": 1193,"payload": 1352},{"kind": 6,"elem": 631},{"kind": 6,"elem": 1086},{"kind": 14,"err": 1190,"payload": 973},{"kind": 8,"name": "std.os.bits.linux.x86_64.timespec","src": 491,"pubDecls": [],"privDecls": [],"fields": [617,617]},{"kind": 8,"name": "std.os.bits.linux.x86_64.Stat","src": 492,"pubDecls": [1017,1018,1019],"privDecls": [],"fields": [615,615,609,770,770,770,770,615,721,617,721,972,972,972,1354]},{"kind": 14,"err": 1355,"payload": 609},{"kind": 14,"err": 1356,"payload": 572},{"kind": 6,"const": true,"elem": 1357},{"kind": 14,"err": 1358,"payload": 730},{"kind": 14,"err": 1193,"payload": 1359},{"kind": 14,"err": 1360,"payload": 548},{"kind": 14,"err": 1361,"payload": 548},{"kind": 14,"err": 1362,"payload": 548},{"kind": 6,"len": 1,"elem": 572},{"kind": 8,"name": "std.reset_event.ResetEvent","src": 493,"pubDecls": [1020,1021,1022,1023,1024,1025,1026,1027],"privDecls": [],"fields": [990]},{"kind": 6,"elem": 983},{"kind": 6,"const": true,"elem": 1364},{"kind": 6,"const": true,"elem": 1365},{"kind": 8,"name": "std.start.struct:260:48","src": 494,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 6,"elem": 973},{"kind": 14,"err": 1366,"payload": 551},{"kind": 8,"name": "std.reset_event.AtomicEvent","src": 495,"pubDecls": [1028],"privDecls": [1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039],"fields": [770]},{"kind": 6,"elem": 990},{"kind": 14,"err": 1368,"payload": 551},{"kind": 13,"child": 615},{"kind": 8,"name": "std.debug.struct:2439:80","src": 496,"pubDecls": [],"privDecls": [],"fields": [609]},{"kind": 8,"name": "std.debug.struct:2440:80","src": 497,"pubDecls": [],"privDecls": [],"fields": [609]},{"kind": 14,"err": 1369,"payload": 1000},{"kind": 6,"elem": 1162},{"kind": 14,"err": 1370,"payload": 1371},{"kind": 8,"name": "std.progress.Node","src": 498,"pubDecls": [1040,1041,1042,1043],"privDecls": [],"fields": [997,1373,609,573,1373,691]},{"kind": 6,"elem": 999},{"kind": 8,"name": "std.special.struct:20:44","src": 499,"pubDecls": [],"privDecls": [],"fields": [609,609,573]},{"kind": 8,"name": "std.special.struct:25:68","src": 500,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.special.struct:34:35","src": 501,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.special.struct:30:46","src": 502,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 8,"name": "std.special.struct:31:74","src": 503,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.special.struct:41:51","src": 504,"pubDecls": [],"privDecls": [],"fields": [609]},{"kind": 8,"name": "std.special.struct:43:53","src": 505,"pubDecls": [],"privDecls": [],"fields": [609,609]},{"kind": 14,"err": 1374,"payload": 551},{"kind": 6,"elem": 770},{"kind": 6,"const": true,"elem": 667},{"kind": 13,"child": 1014},{"kind": 8,"name": "std.debug.struct:118:86","src": 506,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 14,"err": 1375,"payload": 551},{"kind": 6,"elem": 972},{"kind": 14,"err": 1376,"payload": 548},{"kind": 8,"name": "std.progress.struct:133:78","src": 507,"pubDecls": [],"privDecls": [],"fields": [609]},{"kind": 8,"name": "std.progress.struct:137:77","src": 508,"pubDecls": [],"privDecls": []},{"kind": 6,"elem": 609},{"kind": 8,"name": "std.progress.struct:145:49","src": 509,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.progress.struct:150:52","src": 510,"pubDecls": [],"privDecls": [],"fields": [573]},{"kind": 8,"name": "std.progress.struct:154:69","src": 511,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.progress.struct:155:58","src": 512,"pubDecls": [],"privDecls": [],"fields": [609,609]},{"kind": 8,"name": "std.progress.struct:158:69","src": 513,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.progress.struct:159:55","src": 514,"pubDecls": [],"privDecls": [],"fields": [609]},{"kind": 8,"name": "std.progress.struct:166:45","src": 515,"pubDecls": [],"privDecls": []},{"kind": 6,"elem": 1371},{"kind": 6,"len": 2,"const": true,"elem": 572},{"kind": 14,"err": 1377,"payload": 551},{"kind": 6,"elem": 1378},{"kind": 14,"err": 1376,"payload": 551},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void","generic": false,"ret": 1030,"args": [1029,573]},{"kind": 6,"elem": 1379},{"kind": 14,"err": 647,"payload": 609},{"kind": 6,"elem": 1380},{"kind": 8,"name": "std.hash.wyhash.Wyhash","src": 516,"pubDecls": [1044,1045,1046,1047],"privDecls": [],"fields": [1037,1382,609]},{"kind": 6,"elem": 1035},{"kind": 8,"name": "std.hash.wyhash.WyhashStateless","src": 517,"pubDecls": [1048,1049,1050,1051],"privDecls": [1052],"fields": [615,609]},{"kind": 6,"elem": 1037},{"kind": 4,"u": 128},{"kind": 8,"name": "std.array_list","src": 518,"pubDecls": [1053,1054],"privDecls": [1055,1056,1057,1058,1059,1060,1061],"file": 8},{"kind": 8,"name": "pcx","src": 519,"pubDecls": [1062,1063,1064,1065,1066],"privDecls": [1067,1068,1069],"file": 9},{"kind": 7,"len": 54,"elem": 572},{"kind": 7,"len": 48,"elem": 572},{"kind": 8,"name": "std.atomic.queue","src": 520,"pubDecls": [1070],"privDecls": [1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081],"file": 10},{"kind": 8,"name": "std.linked_list.Node","src": 521,"pubDecls": [1082],"privDecls": [],"fields": [1046,1046,561]},{"kind": 13,"child": 1384},{"kind": 7,"len": 8,"elem": 572},{"kind": 8,"name": "std.target","src": 522,"pubDecls": [1083],"privDecls": [1084,1085,1086],"file": 11},{"kind": 16,"name": "std.target.Abi","src": 523,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]},{"kind": 8,"name": "std.target.Cross","src": 524,"pubDecls": [],"privDecls": [],"fields": [931,648,1049]},{"kind": 8,"name": "std.hash_map","src": 525,"pubDecls": [1087,1088,1089,1090,1091,1092,1093,1094,1095,1096],"privDecls": [1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109],"file": 12},{"kind": 8,"name": "std.hash_map.KV","src": 526,"pubDecls": [],"privDecls": [],"fields": [569,570]},{"kind": 8,"name": "std.hash_map.Entry","src": 527,"pubDecls": [],"privDecls": [],"fields": [565,609,1052]},{"kind": 6,"len": 2,"elem": 1053},{"kind": 8,"name": "std.macho.nlist_64","src": 528,"pubDecls": [],"privDecls": [],"fields": [770,572,572,730,615]},{"kind": 6,"len": 2,"align": 4,"const": true,"elem": 572},{"kind": 13,"child": 1387},{"kind": 7,"len": 256,"elem": 641},{"kind": 13,"child": 722},{"kind": 6,"len": 2,"elem": 579},{"kind": 8,"name": "std.coff.SectionHeader","src": 529,"pubDecls": [],"privDecls": [1110],"fields": [1047,1388,770,770,770,770,770,730,730,770]},{"kind": 8,"name": "std.linked_list","src": 530,"pubDecls": [1111,1112],"privDecls": [1113,1114,1115,1116,1117,1118],"file": 13},{"kind": 8,"name": "std.linked_list.Node","src": 521,"pubDecls": [1119],"privDecls": [],"fields": [1064,1064,582]},{"kind": 13,"child": 1389},{"kind": 8,"name": "std.event.fs","src": 531,"pubDecls": [1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146],"privDecls": [1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165],"file": 14},{"kind": 17,"name": "std.event.fs.Finish","src": 532,"pubDecls": [],"privDecls": [],"fields": [1045,1392,551]},{"kind": 17,"name": "std.event.fs.Msg","src": 533,"pubDecls": [1166,1167,1168,1169,1170,1171],"privDecls": [],"fields": [1397,1396,1398,1394,1393,1395,551]},{"kind": 8,"name": "std.io.in_stream","src": 534,"pubDecls": [1172,1173,1174],"privDecls": [1175,1176,1177,1178,1179,1180,1181,1182],"file": 15},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError),type) var","generic": true,"args": [676,546]},{"kind": 7,"len": 2,"elem": 641},{"kind": 13,"child": 742},{"kind": 7,"len": 16,"elem": 641},{"kind": 13,"child": 745},{"kind": 17,"name": "std.debug.FormValue","src": 535,"pubDecls": [],"privDecls": [],"fields": [615,548,1280,548,565,615,615,615,548,615]},{"kind": 8,"name": "std.io.out_stream","src": 536,"pubDecls": [1183,1184,1185],"privDecls": [1186,1187,1188,1189],"file": 16},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError),[]const u8,var) var","generic": true,"args": [734,573,null]},{"kind": 18,"name": "fn(math3d.Vec3,[]const u8) var","generic": true,"args": [622,573]},{"kind": 18,"name": "fn(math3d.Vec3,[]const u8,var,var,var,var) var","generic": true,"args": [622,573,null,null,null,null]},{"kind": 18,"name": "fn(math3d.Vec3,comptime_int) var","generic": true,"args": [622,599]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror),type,var) var","generic": true,"args": [774,546,null]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror),type,var,var) var","generic": true,"args": [774,546,null,null]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror),type) var","generic": true,"args": [774,546]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(anyerror),type,var) var","generic": true,"args": [774,546,null]},{"kind": 6,"elem": 1274},{"kind": 13,"child": 1399},{"kind": 8,"name": "std.linked_list.Node","src": 537,"pubDecls": [1190,1191,1192],"privDecls": [],"fields": [1087,548]},{"kind": 13,"child": 970},{"kind": 8,"name": "std.atomic.stack","src": 538,"pubDecls": [1193],"privDecls": [1194,1195,1196,1197,1198,1199,1200,1201,1202,1203],"file": 17},{"kind": 8,"name": "std.atomic.stack.Node","src": 539,"pubDecls": [],"privDecls": [],"fields": [1090,634]},{"kind": 13,"child": 1400},{"kind": 8,"name": "std.event.loop.ResumeNode","src": 540,"pubDecls": [1204,1205,1206,1207,1208],"privDecls": [1209,1210],"fields": [1402,561,551]},{"kind": 8,"name": "std.io.seekable_stream","src": 541,"pubDecls": [1211,1212],"privDecls": [1213,1214],"file": 18},{"kind": 13,"child": 548},{"kind": 13,"child": 749},{"kind": 18,"name": "fn(math3d.Vec2,[]const u8) var","generic": true,"args": [643,573]},{"kind": 18,"name": "fn(math3d.Vec2,[]const u8,var,var,var,var) var","generic": true,"args": [643,573,null,null,null,null]},{"kind": 18,"name": "fn(math3d.Vec2,comptime_int) var","generic": true,"args": [643,599]},{"kind": 16,"name": "netbpm.Format","src": 542,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 17,"name": "netbpm.Anymap","src": 543,"pubDecls": [1215,1216,1217],"privDecls": [1218],"fields": [610,605,653]},{"kind": 8,"name": "netbpm.Header","src": 544,"pubDecls": [],"privDecls": [],"fields": [1098,565,609,609,609]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@TypeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet), []u8) @TypeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet!usize","generic": false,"ret": 1033,"args": [1403,548]},{"kind": 7,"len": 74,"elem": 572},{"kind": 6,"len": 2,"elem": 654},{"kind": 18,"name": "fn(math3d.Vec4,[]const u8) var","generic": true,"args": [656,573]},{"kind": 18,"name": "fn(math3d.Vec4,[]const u8,var,var,var,var) var","generic": true,"args": [656,573,null,null,null,null]},{"kind": 18,"name": "fn(math3d.Vec4,comptime_int) var","generic": true,"args": [656,599]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 8,"name": "std.builtin","src": 545,"pubDecls": [723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,743,742,745,744,746,747,749,748,750,751,752,753,754,756,755,757,758,759,760,761,762,763],"privDecls": [1219,1220],"file": 19},{"kind": 8,"name": "std.builtin.Struct","src": 546,"pubDecls": [],"privDecls": [],"fields": [1115,1404,1405]},{"kind": 8,"name": "std.builtin.Array","src": 547,"pubDecls": [],"privDecls": [],"fields": [599,546,1406]},{"kind": 8,"name": "std.builtin.ErrorUnion","src": 548,"pubDecls": [],"privDecls": [],"fields": [546,546]},{"kind": 8,"name": "std.builtin.Pointer","src": 549,"pubDecls": [1221],"privDecls": [],"fields": [1407,565,565,599,546,565,1406]},{"kind": 8,"name": "std.builtin.EnumField","src": 550,"pubDecls": [],"privDecls": [],"fields": [573,599]},{"kind": 16,"name": "std.builtin.ContainerLayout","src": 551,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.builtin.Declaration","src": 552,"pubDecls": [1222],"privDecls": [],"fields": [573,565,1408]},{"kind": 8,"name": "std.builtin.Union","src": 553,"pubDecls": [],"privDecls": [],"fields": [1115,1409,1410,1405]},{"kind": 13,"child": 1411},{"kind": 8,"name": "std.builtin.Optional","src": 554,"pubDecls": [],"privDecls": [],"fields": [546]},{"kind": 8,"name": "std.builtin.Enum","src": 555,"pubDecls": [],"privDecls": [],"fields": [1115,546,1412,1405]},{"kind": 8,"name": "std.builtin.Vector","src": 556,"pubDecls": [],"privDecls": [],"fields": [599,546]},{"kind": 8,"name": "std.builtin.Float","src": 557,"pubDecls": [],"privDecls": [],"fields": [599]},{"kind": 8,"name": "std.builtin.UnionField","src": 558,"pubDecls": [],"privDecls": [],"fields": [573,1413,546]},{"kind": 8,"name": "std.builtin.StructField","src": 559,"pubDecls": [],"privDecls": [],"fields": [573,1414,546]},{"kind": 8,"name": "std.builtin.AnyFrame","src": 560,"pubDecls": [],"privDecls": [],"fields": [1409]},{"kind": 8,"name": "std.builtin.Error","src": 561,"pubDecls": [],"privDecls": [],"fields": [573,599]},{"kind": 8,"name": "std.builtin.Fn","src": 562,"pubDecls": [],"privDecls": [],"fields": [1134,565,565,1409,1415]},{"kind": 8,"name": "std.builtin.FnArg","src": 563,"pubDecls": [],"privDecls": [],"fields": [565,565,1409]},{"kind": 8,"name": "std.builtin.Int","src": 564,"pubDecls": [],"privDecls": [],"fields": [565,599]},{"kind": 8,"name": "color.Color","src": 565,"pubDecls": [1223,1224,1225],"privDecls": [],"fields": [629,629,629]},{"kind": 18,"name": "fn(usize) var","generic": true,"args": [609]},{"kind": 16,"name": "std.builtin.OutputMode","src": 566,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "std.builtin.Mode","src": 567,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 16,"name": "std.builtin.CallingConvention","src": 568,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13]},{"kind": 8,"name": "std.builtin.CallOptions","src": 569,"pubDecls": [1226],"privDecls": [],"fields": [1416,1417]},{"kind": 8,"name": "std.builtin.TestFn","src": 570,"pubDecls": [],"privDecls": [],"fields": [573,5]},{"kind": 16,"name": "std.builtin.GlobalLinkage","src": 571,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 17,"name": "std.builtin.TypeInfo","src": 449,"pubDecls": [688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707],"privDecls": [],"fields": [551,551,551,551,1129,1122,1113,1111,1110,551,551,551,551,1119,1112,1118,1120,1117,1127,1127,551,551,1125,1121,551]},{"kind": 6,"len": 2,"const": true,"elem": 1136},{"kind": 16,"name": "std.builtin.AtomicRmwOp","src": 572,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 16,"name": "@TagType(std.target.Arch)","src": 488,"pubDecls": [1006,1007,1008,1009,1010,1011],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]},{"kind": 16,"name": "std.builtin.AtomicOrder","src": 573,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5]},{"kind": 8,"name": "std.mem","src": 574,"pubDecls": [1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301],"privDecls": [1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315],"file": 20},{"kind": 8,"name": "std.math","src": 575,"pubDecls": [1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465],"privDecls": [1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481],"file": 21},{"kind": 8,"name": "std.thread.Thread","src": 576,"pubDecls": [1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492],"privDecls": [],"fields": [1445]},{"kind": 8,"name": "std.os","src": 577,"pubDecls": [1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067],"privDecls": [3068,3069,3070,3071,3072,3073,3074,3075,3076,3077,3078,3079,3080],"file": 22},{"kind": 8,"name": "std.debug","src": 578,"pubDecls": [3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116],"privDecls": [3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201],"file": 23},{"kind": 8,"name": "std.dwarf","src": 579,"pubDecls": [3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783],"privDecls": [],"file": 24},{"kind": 8,"name": "std.event","src": 580,"pubDecls": [3784,3785,3786,3787,3788,3789,3790,3791,3792],"privDecls": [],"file": 25},{"kind": 8,"name": "std.elf","src": 581,"pubDecls": [3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154],"privDecls": [4155,4156,4157,4158,4159,4160,4161,4162,4163],"file": 26},{"kind": 8,"name": "std.io","src": 582,"pubDecls": [4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197],"privDecls": [4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217],"file": 27},{"kind": 8,"name": "std.fmt","src": 583,"pubDecls": [4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243],"privDecls": [4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264],"file": 28},{"kind": 8,"name": "std.atomic","src": 584,"pubDecls": [4265,4266,4267],"privDecls": [],"file": 29},{"kind": 8,"name": "std.pdb","src": 585,"pubDecls": [4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289],"privDecls": [4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304],"file": 30},{"kind": 8,"name": "std.coff","src": 586,"pubDecls": [4305,4306,4307],"privDecls": [4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326],"file": 31},{"kind": 8,"name": "std.hash","src": 587,"pubDecls": [4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345],"privDecls": [4346,4347,4348,4349,4350],"file": 32},{"kind": 8,"name": "std.meta","src": 588,"pubDecls": [4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369],"privDecls": [4370,4371,4372,4373,4374,4375,4376,4377],"file": 33},{"kind": 8,"name": "std.fs","src": 589,"pubDecls": [4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428],"privDecls": [4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439],"file": 34},{"kind": 8,"name": "std.heap","src": 590,"pubDecls": [4440,4441,4442,4443,4444,4445,4446,4447,4448,4449],"privDecls": [4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474],"file": 35},{"kind": 8,"name": "std.start","src": 591,"pubDecls": [4475],"privDecls": [4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495],"file": 36},{"kind": 8,"name": "std.time","src": 592,"pubDecls": [4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514],"privDecls": [4515,4516,4517,4518,4519,4520],"file": 37},{"kind": 8,"name": "std.progress.Progress","src": 593,"pubDecls": [4521,4522,4523,4524,4525],"privDecls": [4526],"fields": [1532,999,1371,615,1533,615,615,565,609]},{"kind": 8,"name": "std.spinlock.SpinLock","src": 594,"pubDecls": [4527,4528,4529,4530,4531,4532,4533],"privDecls": [4534],"fields": [1535]},{"kind": 8,"name": "std.process","src": 595,"pubDecls": [4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553],"privDecls": [4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565],"file": 38},{"kind": 8,"name": "std.macho","src": 596,"pubDecls": [4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716],"privDecls": [4717],"file": 39},{"kind": 6,"elem": 736},{"kind": 15,"name": "@TypeOf(netbpm.loadBinaryBitmap).ReturnType.ErrorSet","fn": 15,"errors": [19,20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(netbpm.load).ReturnType.ErrorSet","fn": 16,"errors": [19,20,0,1,2,3,4,5,6,7,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]},{"kind": 8,"name": "std.mem.Allocator","src": 597,"pubDecls": [4718,4719,4720,4721,4722,4723,4724,4725,4726,4727],"privDecls": [],"fields": [1546,48]},{"kind": 15,"name": "@TypeOf(netbpm.readLinearizedValue).ReturnType.ErrorSet","fn": 17,"errors": [20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(netbpm.readNextByte).ReturnType.ErrorSet","fn": 19,"errors": [20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(netbpm.loadAsciiGraymap).ReturnType.ErrorSet","fn": 20,"errors": [19,21,22,20,0,1,2,3,4,5,6,7,23]},{"kind": 15,"name": "@TypeOf(netbpm.loadAsciiBitmap).ReturnType.ErrorSet","fn": 21,"errors": [19,20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(netbpm.loadBinaryGraymap).ReturnType.ErrorSet","fn": 22,"errors": [19,20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(netbpm.parseHeader).ReturnType.ErrorSet","fn": 23,"errors": [21,22,20,0,1,2,3,4,5,6,7,23,24]},{"kind": 15,"name": "@TypeOf(netbpm.loadBinaryRgbmap).ReturnType.ErrorSet","fn": 24,"errors": [19,20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(netbpm.parseNumber).ReturnType.ErrorSet","fn": 25,"errors": [21,22,20,0,1,2,3,4,5,6,7,23]},{"kind": 15,"name": "@TypeOf(netbpm.loadAsciiRgbmap).ReturnType.ErrorSet","fn": 26,"errors": [19,21,22,20,0,1,2,3,4,5,6,7,23]},{"kind": 6,"const": true,"elem": 736},{"kind": 18,"name": "fn(math3d.Mat4,[]const u8,var,var,var,var) var","generic": true,"args": [693,573,null,null,null,null]},{"kind": 15,"name": "std.fs.file.OpenError","errors": [25,26,27,28,29,30,31,32,41,33,34,35,36,42,37,43,38,39,40]},{"kind": 15,"name": "@TypeOf(pcx.load).ReturnType.ErrorSet","fn": 70,"errors": [44,17,7,45,20,0,1,2,3,4,5,6,23,46,47]},{"kind": 17,"name": "pcx.Image","src": 598,"pubDecls": [4728],"privDecls": [],"fields": [586,588,575,640]},{"kind": 15,"name": "@TypeOf(std.heap.ThreadSafeFixedBufferAllocator.realloc).ReturnType.ErrorSet","fn": 72,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.heap.ThreadSafeFixedBufferAllocator.alloc).ReturnType.ErrorSet","fn": 73,"errors": [23]},{"kind": 8,"name": "std.fs.file","src": 599,"pubDecls": [4729],"privDecls": [4730,4731,4732,4733,4734,4735,4736,4737,4738,4739],"file": 40},{"kind": 8,"name": "std.fs.file.Stat","src": 600,"pubDecls": [],"privDecls": [],"fields": [615,770,721,721,721]},{"kind": 15,"name": "std.os.SeekError","errors": [17,7]},{"kind": 15,"name": "std.fs.file.GetPosError","errors": [17,7,48,49]},{"kind": 15,"name": "std.os.FStatError","errors": [48,49,7]},{"kind": 15,"name": "@TypeOf(std.io.in_stream.InStream(std.os.ReadError).readNoEof).ReturnType.ErrorSet","fn": 78,"errors": [20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(pcx.SubImage(u1).initLinear).ReturnType.ErrorSet","fn": 81,"errors": [45,20,0,1,2,3,4,5,6,7,23]},{"kind": 15,"name": "std.mem.Error","errors": [23]},{"kind": 8,"name": "pcx.Run","src": 601,"pubDecls": [],"privDecls": [],"fields": [572,609]},{"kind": 13,"child": 1194},{"kind": 15,"name": "@TypeOf(pcx.RLEDecoder.readByte).ReturnType.ErrorSet","fn": 84,"errors": [20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(std.io.in_stream.InStream(std.os.ReadError).readByte).ReturnType.ErrorSet","fn": 85,"errors": [20,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@TypeOf(pcx.RLEDecoder.finish).ReturnType.ErrorSet","fn": 88,"errors": [45]},{"kind": 15,"name": "@TypeOf(pcx.SubImage(u4).initLinear).ReturnType.ErrorSet","fn": 90,"errors": [45,20,0,1,2,3,4,5,6,7,23]},{"kind": 15,"name": "@TypeOf(pcx.SubImage(u8).initLinear).ReturnType.ErrorSet","fn": 94,"errors": [44,17,7,45,20,0,1,2,3,4,5,6,23]},{"kind": 15,"name": "@TypeOf(pcx.SubImage(pcx.RGB).initLinear).ReturnType.ErrorSet","fn": 100,"errors": [45,20,0,1,2,3,4,5,6,7,23]},{"kind": 15,"name": "@TypeOf(netbpm.AnymapData(u1).set).ReturnType.ErrorSet","fn": 104,"errors": [19]},{"kind": 15,"name": "@TypeOf(std.fmt.parseInt).ReturnType.ErrorSet","fn": 107,"errors": [21,22]},{"kind": 15,"name": "std.fmt.ParseUnsignedError","errors": [21,22]},{"kind": 15,"name": "@TypeOf(netbpm.AnymapData(u8).set).ReturnType.ErrorSet","fn": 109,"errors": [19]},{"kind": 15,"name": "@TypeOf(std.io.in_stream.InStream(std.os.ReadError).readIntBig).ReturnType.ErrorSet","fn": 110,"errors": [20,0,1,2,3,4,5,6,7]},{"kind": 7,"len": 2,"elem": 572},{"kind": 15,"name": "@TypeOf(netbpm.AnymapData(netbpm.Color).set).ReturnType.ErrorSet","fn": 113,"errors": [19]},{"kind": 6,"len": 2,"elem": 609},{"kind": 7,"len": 2,"elem": 1547},{"kind": 7,"len": 3,"elem": 1548},{"kind": 6,"len": 2,"elem": 1070},{"kind": 6,"len": 2,"elem": 1072},{"kind": 6,"len": 2,"elem": 1058},{"kind": 15,"name": "std.fmt.error:1084:39","errors": [50]},{"kind": 15,"name": "std.math.error:710:40","errors": [51]},{"kind": 15,"name": "std.math.error:306:43","errors": [52]},{"kind": 15,"name": "std.math.error:311:43","errors": [53]},{"kind": 6,"elem": 1496},{"kind": 6,"len": 1,"elem": 572},{"kind": 8,"name": "std.os.bits.linux.Sigaction","src": 602,"pubDecls": [],"privDecls": [],"fields": [1465,1448,770,1549]},{"kind": 6,"elem": 1221},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15,"name": "std.fs.OpenSelfExeError","errors": [54,33,34,35,36,55,56,42,37,43,38,39,57,40,7,25,29,31,32,58,59]},{"kind": 15,"name": "std.math.error:710:40","errors": [60]},{"kind": 15,"name": "std.os.MMapError","errors": [61,62,63,64,65,7]},{"kind": 6,"len": 1,"align": 4096,"elem": 572},{"kind": 15},{"kind": 15},{"kind": 8,"name": "std.elf.Elf","src": 603,"pubDecls": [4740,4741,4742,4743,4744,4745],"privDecls": [],"fields": [773,774,565,781,1236,1239,615,615,615,609,1550,791,678]},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 16,"name": "std.elf.ET","src": 604,"pubDecls": [4746,4747],"privDecls": [],"fields": [0,1,2,3,4]},{"kind": 15},{"kind": 15},{"kind": 16,"name": "std.elf.EM","src": 605,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,15,17,18,19,20,21,22,23,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,131,132,133,134,135,136,137,138,139,140,141,142,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,224,243,244,247]},{"kind": 15},{"kind": 7,"len": 4,"elem": 572},{"kind": 15},{"kind": 15,"name": "std.math.error:311:43","errors": [66]},{"kind": 8,"name": "std.elf.SectionHeader","src": 606,"pubDecls": [],"privDecls": [],"fields": [770,770,615,615,615,615,770,770,615,615]},{"kind": 15},{"kind": 13,"child": 1258},{"kind": 15},{"kind": 13,"child": 1550},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null).append).ReturnType.ErrorSet","fn": 233,"errors": [23]},{"kind": 15},{"kind": 18,"name": "fn(*std.debug.DwarfInfo,var,var,var,var) var","generic": true,"args": [796,null,null,null,null]},{"kind": 8,"name": "std.debug.Section","src": 607,"pubDecls": [],"privDecls": [],"fields": [615,615]},{"kind": 15},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null).append).ReturnType.ErrorSet","fn": 238,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null).addOne).ReturnType.ErrorSet","fn": 240,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableEntry,null).ensureCapacity).ReturnType.ErrorSet","fn": 241,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null).append).ReturnType.ErrorSet","fn": 245,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null).addOne).ReturnType.ErrorSet","fn": 246,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevAttr,null).ensureCapacity).ReturnType.ErrorSet","fn": 247,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null).addOne).ReturnType.ErrorSet","fn": 251,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.AbbrevTableHeader,null).ensureCapacity).ReturnType.ErrorSet","fn": 252,"errors": [23]},{"kind": 15},{"kind": 13,"child": 1274},{"kind": 6,"const": true,"elem": 558},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.Attr,null).resize).ReturnType.ErrorSet","fn": 259,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.Attr,null).ensureCapacity).ReturnType.ErrorSet","fn": 260,"errors": [23]},{"kind": 6,"const": true,"elem": 1074},{"kind": 8,"name": "std.debug.Die","src": 608,"pubDecls": [],"privDecls": [4748,4749,4750,4751,4752,4753,4754],"fields": [615,565,596]},{"kind": 15,"name": "@TypeOf(std.debug.Die.getAttrString).ReturnType.ErrorSet","fn": 266,"errors": [67,68]},{"kind": 15},{"kind": 15,"name": "@TypeOf(std.debug.Die.getAttrRef).ReturnType.ErrorSet","fn": 268,"errors": [67,68]},{"kind": 15,"name": "@TypeOf(std.debug.Die.getAttrAddr).ReturnType.ErrorSet","fn": 269,"errors": [67,68]},{"kind": 15,"name": "@TypeOf(std.debug.Constant.asUnsignedLe).ReturnType.ErrorSet","fn": 270,"errors": [67]},{"kind": 8,"name": "std.debug.Constant","src": 609,"pubDecls": [],"privDecls": [4755],"fields": [615,565]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.Func,null).append).ReturnType.ErrorSet","fn": 271,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.Func,null).addOne).ReturnType.ErrorSet","fn": 272,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.Func,null).ensureCapacity).ReturnType.ErrorSet","fn": 273,"errors": [23]},{"kind": 15},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.CompileUnit,null).append).ReturnType.ErrorSet","fn": 279,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.CompileUnit,null).addOne).ReturnType.ErrorSet","fn": 280,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.CompileUnit,null).ensureCapacity).ReturnType.ErrorSet","fn": 281,"errors": [23]},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 6,"const": true,"elem": 626},{"kind": 15,"name": "@TypeOf(std.debug.Die.getAttrSecOffset).ReturnType.ErrorSet","fn": 293,"errors": [67,68]},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 4,"i": 8},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList([]u8,null).append).ReturnType.ErrorSet","fn": 301,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList([]u8,null).addOne).ReturnType.ErrorSet","fn": 302,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList([]u8,null).ensureCapacity).ReturnType.ErrorSet","fn": 303,"errors": [23]},{"kind": 15},{"kind": 15},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(u8,null).append).ReturnType.ErrorSet","fn": 310,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(u8,null).addOne).ReturnType.ErrorSet","fn": 311,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(u8,null).ensureCapacity).ReturnType.ErrorSet","fn": 312,"errors": [23]},{"kind": 15},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).append).ReturnType.ErrorSet","fn": 321,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).addOne).ReturnType.ErrorSet","fn": 322,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).ensureCapacity).ReturnType.ErrorSet","fn": 323,"errors": [23]},{"kind": 15,"name": "std.math.error:710:40","errors": [69]},{"kind": 15,"name": "@TypeOf(std.debug.LineNumberProgram.checkLineMatch).ReturnType.ErrorSet","fn": 328,"errors": [23,67,68]},{"kind": 13,"child": 907},{"kind": 15,"name": "@TypeOf(std.fs.path.joinPosix).ReturnType.ErrorSet","fn": 329,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.fs.path.joinSep).ReturnType.ErrorSet","fn": 330,"errors": [23]},{"kind": 15},{"kind": 15},{"kind": 15,"name": "@TypeOf(std.debug.printLineInfo).ReturnType.ErrorSet","fn": 336,"errors": [8,9,10,11,12,13,14,15,16,7,2,5,25,26,27,29,30,31,32,33,34,35,36,39,40,70]},{"kind": 13,"child": 678},{"kind": 15,"name": "@TypeOf(std.debug.printLineFromFileAnyOs).ReturnType.ErrorSet","fn": 338,"errors": [8,9,10,11,12,13,14,15,16,7,2,5,25,26,27,29,30,31,32,33,34,35,36,39,40,70]},{"kind": 15},{"kind": 8,"name": "std.mutex","src": 610,"pubDecls": [4756],"privDecls": [4757,4758,4759,4760,4761,4762,4763,4764,4765,4766],"file": 41},{"kind": 8,"name": "std.mutex.Node","src": 611,"pubDecls": [],"privDecls": [],"fields": [1551,983]},{"kind": 15,"name": "@TypeOf(std.os.toPosixPath).ReturnType.ErrorSet","fn": 368,"errors": [30]},{"kind": 7,"len": 4095,"elem": 572},{"kind": 13,"child": 1510},{"kind": 6,"const": true,"elem": 1448},{"kind": 6,"elem": 1448},{"kind": 16,"name": "std.target.Arm32","src": 612,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},{"kind": 16,"name": "std.target.Arm64","src": 613,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 16,"name": "std.target.Kalimba","src": 614,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 15,"name": "@TypeOf(std.heap.PageAllocator.realloc).ReturnType.ErrorSet","fn": 392,"errors": [71]},{"kind": 15,"name": "std.heap.error:57:63","errors": [71]},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 21,"name": "@Frame(std.debug.parseFormValue)"},{"kind": 6,"len": 2,"elem": 1274},{"kind": 15,"name": "std.process.GetEnvVarOwnedError","errors": [72,73,74]},{"kind": 15,"name": "std.os.OpenError","errors": [54,33,34,35,36,55,56,42,37,43,38,39,57,40,7]},{"kind": 15,"name": "@TypeOf(std.heap.ArenaAllocator.realloc).ReturnType.ErrorSet","fn": 469,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.heap.ArenaAllocator.alloc).ReturnType.ErrorSet","fn": 470,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.heap.ArenaAllocator.createNode).ReturnType.ErrorSet","fn": 471,"errors": [23]},{"kind": 6,"len": 2,"align": 8,"elem": 572},{"kind": 8,"name": "std.os.bits.linux.x86_64","src": 615,"pubDecls": [2265,2662,1859,1860,2666,2269,2668,2670,1864,2671,1503,1866,2673,1505,1506,1870,1872,1507,1877,1509,2681,1513,2284,1514,2286,2684,2686,1884,1518,1885,1888,2290,1891,1521,1524,1893,1894,2694,2295,1527,1898,2697,1528,1529,1899,2702,2705,1901,2706,1902,2709,2710,2303,2304,1538,2308,1540,2715,1911,2311,2722,1914,1916,2314,2725,1549,1551,1923,1552,2732,1556,1557,2324,1559,1560,2734,2735,1927,2736,2737,1929,1562,2327,1930,2738,1565,2740,2334,1940,2339,1942,2744,1946,1948,1949,2348,1951,1575,2748,1578,1954,1581,1582,1584,2754,2353,2355,1959,2758,2357,2358,1965,2359,2360,1966,2362,2364,2765,1969,1599,1972,2768,2366,2772,1977,2777,1607,1608,2780,1982,2783,1983,2378,2787,2788,1985,1617,2791,1621,1622,2794,1623,1988,2386,1989,2391,1992,1993,1627,2801,2393,1996,1628,1630,2397,2400,2805,1631,2807,2808,1632,2810,2811,2404,2405,2409,2817,2006,2819,2009,2820,2010,1644,2413,2011,2012,2415,2419,2822,2016,1650,2823,1652,2022,2023,2422,2025,2828,2830,1654,2834,2424,2426,2841,2028,2029,2433,2434,2030,2031,2033,2034,2846,1663,2849,2038,1672,2857,2451,2048,2863,2049,2051,2865,2455,2052,1676,2458,1677,2459,2460,2056,1679,2462,2058,1682,1684,2874,2062,2470,2877,2472,2474,1688,2067,2878,2880,2476,2882,2883,1692,2479,2073,1695,2886,2892,1699,2894,1702,2083,2094,2097,2905,1712,2511,2912,2105,2517,2519,2520,2107,2108,2917,2524,2919,1720,2114,1722,1723,1724,2923,2925,1732,2929,1733,1734,2934,2531,2118,2120,2534,2535,2123,1738,1739,2539,2540,2125,2128,2935,2544,2936,2132,1746,2134,2135,1748,2939,1751,2941,2139,2552,1754,2553,1756,2944,1757,1758,2555,1760,1761,2945,1763,1764,2946,2947,2948,2559,2950,2952,2563,2152,2955,1769,2154,2155,2568,1770,2157,2959,2569,2960,2160,1774,1775,2163,2165,2574,2167,2168,2966,2170,2172,1779,2580,2969,2173,2972,2586,2587,2178,2179,2976,1786,2979,2181,1787,2185,2592,1789,1792,2593,2594,2596,2995,2192,2196,2198,3005,3006,3007,2200,3009,3010,2606,3011,2205,2206,2608,3012,2609,2613,2615,1809,3016,2212,1813,1814,2617,1817,1818,1819,1822,3022,3023,2621,3030,3031,2625,1827,3035,3037,2628,1830,2228,3041,2234,2638,3044,2236,3045,1836,1838,3047,2642,1841,3050,3052,2249,3057,2650,1843,2252,3060,2253,2254,2257,2258,2656,1848,1850,3065,2658,3066],"privDecls": [4767,4768,4769,4770,4771,4772,4773,4774,4775,4776,4777],"file": 42},{"kind": 7,"len": 3,"elem": 617},{"kind": 15},{"kind": 15},{"kind": 7,"len": 1,"elem": 572},{"kind": 15},{"kind": 6,"len": 2,"elem": 1345},{"kind": 15,"name": "@TypeOf(std.heap.FixedBufferAllocator.realloc).ReturnType.ErrorSet","fn": 502,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.heap.FixedBufferAllocator.alloc).ReturnType.ErrorSet","fn": 503,"errors": [23]},{"kind": 15,"name": "@TypeOf(std.mem.dupe).ReturnType.ErrorSet","fn": 506,"errors": [23]},{"kind": 8,"name": "std.reset_event","src": 616,"pubDecls": [4778],"privDecls": [4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791],"file": 43},{"kind": 8,"name": "std.os.bits.linux.siginfo_t","src": 617,"pubDecls": [],"privDecls": [],"fields": [667,667,667,1552]},{"kind": 20,"name": "c_void"},{"kind": 15,"name": "std.os.SchedYieldError","errors": [75]},{"kind": 8,"name": "std.reset_event.LinuxFutex","src": 618,"pubDecls": [],"privDecls": [4792,4793]},{"kind": 15,"name": "@TypeOf(std.reset_event.AtomicEvent.wait).ReturnType.ErrorSet","fn": 571,"errors": [76]},{"kind": 15,"name": "@TypeOf(std.progress.Progress.start).ReturnType.ErrorSet","fn": 578,"errors": [77]},{"kind": 15,"name": "std.time.Error","errors": [77]},{"kind": 8,"name": "std.time.Timer","src": 619,"pubDecls": [4794,4795,4796,4797],"privDecls": [4798,4799,4800],"fields": [551,615,615]},{"kind": 8,"name": "std.progress","src": 620,"pubDecls": [4801],"privDecls": [4802,4803,4804],"file": 44},{"kind": 13,"child": 1000},{"kind": 15,"name": "@TypeOf(std.reset_event.LinuxFutex.wait).ReturnType.ErrorSet","fn": 603,"errors": [76]},{"kind": 15,"name": "std.os.ClockGetTimeError","errors": [78,7]},{"kind": 15,"name": "std.fmt.BufPrintError","errors": [79]},{"kind": 15,"name": "@TypeOf(std.fmt.bufPrintWrite).ReturnType.ErrorSet","fn": 644,"errors": [79]},{"kind": 8,"name": "std.fmt.BufPrintContext","src": 621,"pubDecls": [],"privDecls": [],"fields": [548]},{"kind": 8,"name": "std.elf.Elf64_Verdef","src": 622,"pubDecls": [],"privDecls": [],"fields": [730,730,730,730,770,770,770]},{"kind": 8,"name": "std.pdb.MsfStream","src": 623,"pubDecls": [4805,4806],"privDecls": [4807,4808,4809,4810,4811,4812,4813,4814],"fields": [703,615,1553,770,646]},{"kind": 8,"name": "std.hash.wyhash","src": 624,"pubDecls": [4815],"privDecls": [4816,4817,4818,4819,4820,4821,4822,4823,4824,4825],"file": 45},{"kind": 7,"len": 32,"elem": 572},{"kind": 16,"name": "pcx.Format","src": 625,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 6,"elem": 1045},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 18,"name": "fn(var,var) var","generic": true,"args": [null,null]},{"kind": 6,"const": true,"elem": 1536},{"kind": 17,"name": "std.coff.Misc","src": 626,"pubDecls": [],"privDecls": [],"fields": [770,770]},{"kind": 6,"elem": 1063},{"kind": 8,"name": "std.event.fs.CloseOperation","src": 627,"pubDecls": [4826,4827,4828,4829,4830],"privDecls": [4831,4832,4833],"fields": [678,1556]},{"kind": 8,"name": "std.event.loop.Loop","src": 628,"pubDecls": [4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858],"privDecls": [4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872],"fields": [678,560,1558,1091,609,1559,633,1560]},{"kind": 6,"elem": 1390},{"kind": 8,"name": "std.event.fs.Close","src": 629,"pubDecls": [],"privDecls": [],"fields": [667]},{"kind": 8,"name": "std.event.fs.Open","src": 630,"pubDecls": [4873],"privDecls": [],"fields": [1027,770,770,1561]},{"kind": 8,"name": "std.event.fs.WriteFile","src": 631,"pubDecls": [4874],"privDecls": [],"fields": [1027,573,770,1563]},{"kind": 8,"name": "std.event.fs.PWriteV","src": 632,"pubDecls": [4875],"privDecls": [],"fields": [667,1564,609,735]},{"kind": 8,"name": "std.event.fs.WriteV","src": 633,"pubDecls": [4876],"privDecls": [],"fields": [667,1564,735]},{"kind": 8,"name": "std.event.fs.PReadV","src": 634,"pubDecls": [4877],"privDecls": [],"fields": [667,1565,609,705]},{"kind": 8,"name": "std.debug.PcRange","src": 635,"pubDecls": [],"privDecls": [],"fields": [615,615]},{"kind": 6,"elem": 1089},{"kind": 8,"name": "std.event.loop","src": 636,"pubDecls": [4878],"privDecls": [4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893],"file": 46},{"kind": 16,"name": "std.event.loop.Id","src": 637,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 6,"elem": 646},{"kind": 6,"len": 2,"elem": 1124},{"kind": 6,"len": 2,"elem": 1116},{"kind": 20,"name": "(var)"},{"kind": 16,"name": "std.builtin.Size","src": 638,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 17,"name": "std.builtin.Data","src": 639,"pubDecls": [4894],"privDecls": [],"fields": [546,546,1566]},{"kind": 13,"child": 546},{"kind": 6,"len": 2,"elem": 1123},{"kind": 6,"len": 2,"elem": 1126},{"kind": 6,"len": 2,"elem": 1114},{"kind": 13,"child": 1114},{"kind": 13,"child": 599},{"kind": 6,"len": 2,"elem": 1128},{"kind": 16,"name": "std.builtin.Modifier","src": 640,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7]},{"kind": 13,"child": 1567},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var) var","generic": true,"args": [678,546,null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 8,"name": "std.meta.trait","src": 641,"pubDecls": [4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912],"privDecls": [4913,4914,4915,4916,4917,4918,4919,4920],"file": 47},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var,var) var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.thread","src": 642,"pubDecls": [4921],"privDecls": [4922,4923,4924,4925,4926,4927,4928],"file": 48},{"kind": 8,"name": "std.thread.Data","src": 643,"pubDecls": [],"privDecls": [],"fields": [667,775]},{"kind": 8,"name": "std.os.bits.linux","src": 644,"pubDecls": [1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1524,1523,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1546,1545,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1571,1573,1574,1575,1576,1577,1578,1580,1581,1582,1583,1584,1586,1587,1588,1589,1591,1593,1594,1595,1596,1597,1598,1599,1600,1602,1603,1604,1605,1607,1608,1609,1610,1611,1612,1613,1614,1615,1617,1616,1618,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1634,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1662,1663,1664,1665,1666,1667,1669,1668,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1686,1687,1688,1689,1690,1692,1693,1694,1695,1697,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1712,1716,1717,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1730,1731,1732,1733,1734,1735,1736,1738,1739,1741,1742,1744,1745,1746,1747,1748,1750,1751,1752,1753,1754,1755,1756,1757,1758,1760,1759,1761,1762,1763,1764,1765,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1784,1783,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1796,1797,1798,1799,1800,1802,1803,1804,1806,1809,1808,1811,1813,1814,1812,1815,1817,1818,1819,1820,1822,1823,1825,1826,1827,1828,1829,1830,1832,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1846,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1879,1880,1881,1883,1882,1884,1885,1886,1887,1888,1889,1891,1890,1892,1893,1894,1896,1895,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1932,1933,1935,1936,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1962,1964,1965,1966,1967,1969,1970,1972,1971,1973,1974,1975,1976,1977,1978,1979,1981,1982,1983,1984,1985,1986,1987,1988,1989,1991,1992,1993,1994,1995,1996,1999,2000,2001,2002,2003,2004,2005,2006,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2028,2029,2030,2031,2032,2033,2034,2035,2036,2038,2039,2040,2042,2045,2046,2047,2048,2049,2051,2052,2053,2054,2055,2056,2057,2058,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2086,2087,2088,2090,2091,2094,2093,2095,2096,2097,2098,2099,2100,2102,2101,2103,2104,2105,2106,2107,2108,2110,2111,2112,2114,2115,2116,2117,2118,2120,2119,2121,2123,2124,2125,2126,2127,2128,2129,2130,2132,2134,2135,2136,2137,2138,2139,2140,2143,2144,2145,2146,2148,2149,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2183,2184,2185,2186,2187,2188,2189,2191,2192,2193,2194,2195,2196,2197,2198,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2223,2226,2227,2225,2228,2229,2230,2231,2232,2233,2234,2235,2236,2238,2239,2240,2243,2244,2245,2246,2247,2248,2249,2251,2250,2252,2253,2254,2257,2258,2259,2260,2261,2262,2264,2263,2265,2266,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2281,2282,2283,2284,2285,2286,2287,2288,2290,2291,2293,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2311,2310,2312,2314,2315,2316,2317,2318,2319,2320,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2339,2340,2341,2342,2343,2344,2345,2347,2348,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2413,2415,2416,2417,2418,2419,2420,2422,2424,2425,2426,2427,2428,2429,2431,2432,2433,2434,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2450,2451,2452,2453,2454,2455,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2490,2491,2492,2494,2495,2496,2497,2499,2500,2501,2502,2503,2504,2505,2506,2508,2509,2510,2511,2512,2513,2515,2516,2517,2518,2519,2520,2522,2523,2524,2525,2526,2529,2531,2530,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2544,2545,2546,2547,2548,2550,2551,2552,2553,2555,2556,2557,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2571,2573,2574,2576,2577,2578,2579,2580,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2612,2613,2614,2615,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2714,2715,2716,2717,2718,2719,2720,2722,2721,2723,2724,2725,2727,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2740,2741,2744,2745,2746,2747,2748,2750,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2790,2791,2793,2794,2796,2798,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2816,2817,2818,2819,2820,2821,2822,2823,2825,2826,2827,2828,2829,2830,2831,2832,2834,2833,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2857,2856,2858,2859,2861,2863,2865,2864,2866,2867,2868,2869,2870,2871,2872,2874,2873,2875,2876,2877,2878,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2894,2895,2896,2898,2900,2901,2902,2903,2904,2905,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2921,2922,2923,2924,2925,2926,2927,2929,2930,2931,2932,2933,2934,2935,2936,2937,2939,2940,2941,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2958,2959,2960,2961,2962,2964,2965,2966,2967,2968,2969,2972,2974,2975,2976,2977,2978,2979,2980,2981,2983,2984,2987,2988,2989,2991,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3009,3008,3010,3011,3012,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3044,3045,3046,3047,3048,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3062,3063,3064,3065,3066,3067],"privDecls": [4929,4930,4931,4932,4933],"file": 49},{"kind": 8,"name": "std.os.bits.linux.errno-generic","src": 645,"pubDecls": [2263,3067,2352,2452,1856,2755,2046,1588,2266,2565,1962,2864,1771,2762,2763,1596,2272,2573,2766,1971,2060,2873,2875,2677,2467,2370,2773,2583,2774,1687,2680,1875,1876,2974,2977,1609,2373,2981,2885,2784,2376,2077,1516,1614,1881,1517,2486,2487,1790,1616,2896,1889,1890,1797,1799,2191,2689,1986,1523,2388,2796,1804,2999,2696,1994,2197,2604,2088,2091,2093,2201,3008,2711,2207,2907,1908,2004,2714,1808,1539,2211,2410,2515,2716,3018,1812,2310,2215,2721,1915,2523,1917,1547,2918,1920,2922,1726,2623,2416,2729,2624,1826,2626,1553,2014,2322,3042,2530,2119,2235,2329,1834,2331,2124,2833,2641,2643,1744,2243,2337,2843,2246,2844,2548,2651,1755,2440,2035,1759,1666,2036,2851,2557,1576,1765,1577,2447,1671,2949,2854,2856,2351,1854],"privDecls": [],"file": 50},{"kind": 7,"len": 32,"elem": 770},{"kind": 8,"name": "std.os.bits","src": 646,"pubDecls": [1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1512,1511,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1568,1567,1569,1571,1573,1574,1575,1576,1577,1578,1580,1581,1582,1583,1584,1586,1587,1588,1589,1591,1593,1594,1595,1596,1597,1598,1599,1600,1602,1603,1604,1605,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1634,1637,1638,1639,1641,1640,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1662,1663,1664,1665,1666,1667,1669,1668,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1686,1687,1688,1689,1690,1692,1693,1694,1695,1697,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1712,1716,1717,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1730,1731,1732,1733,1734,1735,1736,1738,1739,1741,1742,1744,1745,1746,1747,1748,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1784,1783,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1796,1797,1798,1799,1800,1802,1803,1804,1806,1808,1809,1811,1812,1813,1814,1815,1817,1818,1819,1820,1822,1823,1825,1826,1827,1828,1829,1830,1832,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1846,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1896,1895,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1932,1933,1935,1936,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1962,1964,1965,1966,1967,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1981,1982,1983,1984,1985,1986,1987,1988,1989,1991,1992,1993,1994,1995,1996,1999,2000,2001,2002,2003,2004,2005,2006,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2028,2029,2030,2031,2032,2033,2034,2035,2036,2038,2039,2040,2042,2045,2046,2047,2048,2049,2051,2052,2053,2054,2055,2056,2057,2058,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2077,2076,2078,2079,2080,2081,2082,2083,2084,2086,2087,2088,2090,2091,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2110,2111,2112,2114,2115,2116,2117,2118,2119,2120,2121,2123,2124,2125,2126,2127,2128,2129,2130,2132,2134,2135,2136,2137,2138,2139,2140,2143,2144,2145,2146,2148,2149,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2183,2184,2185,2186,2187,2188,2189,2191,2192,2193,2194,2195,2196,2197,2198,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2223,2227,2225,2226,2228,2229,2230,2231,2232,2233,2234,2235,2236,2238,2239,2240,2243,2244,2245,2246,2247,2248,2249,2251,2250,2252,2253,2254,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2281,2282,2283,2284,2285,2286,2287,2288,2290,2291,2293,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2310,2311,2312,2314,2315,2316,2317,2318,2319,2320,2322,2323,2324,2325,2326,2327,2328,2329,2331,2330,2332,2333,2334,2335,2337,2336,2339,2340,2341,2342,2343,2344,2345,2347,2348,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2376,2375,2377,2378,2379,2382,2383,2381,2384,2385,2386,2388,2387,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2413,2415,2416,2417,2418,2419,2420,2422,2424,2425,2426,2427,2428,2429,2431,2432,2433,2434,2436,2437,2439,2438,2440,2441,2442,2443,2444,2445,2446,2447,2448,2450,2451,2452,2453,2454,2455,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2481,2480,2483,2482,2484,2485,2486,2487,2490,2491,2492,2494,2495,2496,2497,2499,2500,2501,2502,2503,2504,2505,2506,2508,2509,2510,2511,2512,2513,2515,2516,2517,2518,2519,2520,2522,2523,2524,2525,2526,2530,2531,2529,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2544,2545,2546,2547,2548,2550,2551,2552,2553,2555,2556,2557,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2571,2573,2574,2576,2577,2578,2579,2580,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2600,2601,2602,2603,2604,2606,2605,2607,2608,2609,2610,2612,2613,2614,2615,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2714,2715,2716,2717,2718,2719,2721,2722,2720,2723,2724,2725,2727,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2740,2741,2744,2745,2746,2747,2748,2750,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2790,2791,2793,2794,2796,2798,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2816,2817,2818,2819,2820,2821,2822,2823,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2838,2837,2839,2840,2841,2842,2843,2844,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2861,2863,2864,2865,2867,2866,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2892,2891,2894,2895,2896,2898,2900,2901,2902,2903,2904,2905,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2922,2921,2923,2924,2925,2926,2927,2929,2930,2931,2932,2933,2934,2935,2936,2937,2939,2940,2941,2944,2945,2946,2947,2948,2949,2950,2951,2952,2954,2953,2955,2956,2958,2959,2960,2961,2962,2964,2965,2966,2967,2968,2969,2972,2974,2975,2976,2977,2978,2979,2980,2981,2983,2984,2987,2988,2989,2991,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3034,3033,3035,3036,3037,3038,3039,3040,3041,3042,3044,3045,3046,3047,3048,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3062,3063,3064,3065,3066,3067],"privDecls": [4934,4935],"file": 51},{"kind": 8,"name": "std.os.bits.iovec_const","src": 647,"pubDecls": [],"privDecls": [],"fields": [941,609]},{"kind": 8,"name": "std.os.bits.linux.k_sigaction","src": 648,"pubDecls": [],"privDecls": [],"fields": [1465,609,1568,1569]},{"kind": 15,"name": "std.os.ReadLinkError","errors": [80,58,81,82,83,84,85,7]},{"kind": 6,"const": true,"elem": 1570},{"kind": 8,"name": "std.os.bits.linux.stack_t","src": 649,"pubDecls": [],"privDecls": [],"fields": [982,667,617]},{"kind": 8,"name": "std.os.linux","src": 650,"pubDecls": [1493,1494,1495,1496,1497,1498,1499,4936,1500,1501,1502,1503,1504,1505,1506,4937,1507,1508,1509,4938,4939,1512,1511,1513,1514,1515,1516,4940,1517,1518,1519,4941,1520,1521,1522,1523,1524,1525,1526,4942,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,4943,4944,4945,1561,1562,1563,1564,1565,1566,1568,1567,1569,1571,1573,1574,4946,1575,4947,1576,1577,1578,4948,1580,4949,1581,1582,1583,1584,4950,1586,1587,1588,1589,4951,1591,4952,1593,1594,1595,1596,1597,1598,1599,1600,4953,1602,1603,1604,1605,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,4954,4955,1632,1634,1637,1638,1639,1640,1641,1642,4956,1643,1644,1645,1646,1647,1648,1649,1650,4957,1651,1652,4958,1653,4959,1654,1655,4960,1656,1657,1658,1659,1660,4961,1662,4962,1663,1664,1665,1666,1667,1668,1669,1670,1671,4963,1672,1673,1674,1675,1676,1677,4964,1678,1679,1680,1681,1682,1683,1684,1686,1687,1688,4965,1689,1690,1692,1693,1694,1695,1697,1699,1700,4966,4967,1701,1702,1703,1704,1705,1706,1707,1708,1709,4968,1710,1712,4969,4970,4971,1716,1717,4972,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,4973,1730,1731,1732,1733,1734,1735,1736,1738,1739,4974,1741,1742,4975,1744,1745,1746,1747,1748,4976,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,4977,1762,1763,1764,1765,4978,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1796,1797,1798,1799,1800,1802,1803,1804,1806,4979,1808,1809,4980,1811,1812,1813,1814,1815,1817,1818,1819,1820,4981,1822,1823,4982,1825,1826,1827,1828,1829,1830,1832,4983,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1846,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,4984,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,4985,1908,1909,1910,1911,1912,1913,4986,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1933,1932,4987,1935,1936,1938,1939,1940,1941,1942,1943,1944,1945,1946,4988,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1962,1964,1965,1966,1967,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1981,1982,1983,1984,1985,4989,1986,1987,1988,1989,4990,1991,1992,1993,1994,1995,1996,4991,1999,2000,2001,2002,2003,2004,4992,2005,2006,4993,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,4994,2028,2029,4995,2030,2031,2032,2033,2034,4996,2035,2036,2038,2039,2040,2042,2045,2046,2047,2048,2049,4997,2051,2052,4998,2053,2054,2055,2056,2057,2058,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,4999,2079,2080,2081,2082,2083,2084,5000,2086,2087,2088,2090,2091,2093,2094,2095,5001,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,5002,2110,2111,2112,5003,2114,2115,2116,5004,5005,5006,5007,2117,2118,2119,2120,2121,2123,2124,2125,2126,2127,2128,2129,2130,5008,2132,2134,2135,2137,2136,2138,2139,2140,2143,2144,2145,2146,2148,2149,2151,2152,2153,2154,2155,5009,2156,2157,2158,2159,2160,2161,2162,2163,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,5010,5011,2183,2184,2185,2186,2187,2188,2189,2191,2192,2193,2194,2195,2196,2197,2198,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,5012,2223,2226,2227,2225,5013,2228,2229,5014,2230,2231,2232,2233,2234,2235,2236,5015,2238,2239,2240,5016,5017,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,5018,5019,2281,2282,2283,2284,2285,2286,2287,2288,2290,2291,2293,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2310,2311,5020,2312,2314,2315,2316,2317,2318,2319,2320,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,5021,2334,2335,2336,2337,2339,2340,2341,2342,2343,2344,2345,5022,2347,2348,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,5023,5024,2381,2382,2383,5025,2384,2385,5026,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,5027,2413,5028,2415,2416,2417,2418,5029,2419,2420,5030,2422,2424,2425,2426,2427,2428,2429,2431,2432,2433,2434,2436,5031,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,5032,2448,2450,2451,2452,2453,2454,2455,2457,2458,2459,2460,2461,2462,2463,2464,5033,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,5034,2486,2487,2490,2491,2492,2494,2495,2496,2497,5035,2499,2500,2501,2502,2503,2504,2505,2506,5036,2508,2509,5037,2510,2511,2512,2513,5038,2515,2516,2517,2518,2519,2520,2522,2523,5039,2524,2525,2526,5040,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,5041,2544,5042,2545,2546,2547,2548,5043,2550,2551,2552,2553,5044,2555,2556,2557,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2571,2573,2574,5045,2576,2577,2578,2579,2580,5046,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,5047,2600,2601,2602,5048,2603,2604,5049,2605,2606,2607,2608,2609,5050,2610,2612,2613,2614,2615,2617,2618,2619,2620,2621,2622,2623,2624,2625,5051,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,5052,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2679,2680,2681,2682,2683,2684,2685,5053,2686,2687,2688,2689,2690,2691,2692,2693,2694,5054,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,5055,5056,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,5057,2725,2727,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2740,2741,5058,2744,5059,2745,2746,2747,2748,5060,2750,2752,2753,2754,2755,2756,2757,2758,5061,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2770,2771,2772,2773,2774,2775,5062,5063,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2790,2791,2793,2794,5064,2796,2798,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,5065,2816,2817,2818,2819,2820,2821,2822,5066,2823,5067,5068,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,5069,5070,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2861,5071,2863,2864,2865,5072,2867,2866,2868,2869,2870,2871,5073,2872,2873,2874,2875,5074,2876,2877,2878,5075,2880,2881,2882,2883,5076,2884,2885,5077,2886,2887,2888,2889,2890,2891,2892,5078,2894,2895,2896,2898,5079,2900,2901,2902,2903,2904,2905,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,5080,2918,2919,5081,2921,2922,2923,2924,2925,2926,2927,5082,2929,2930,2931,2932,2933,2934,5083,2935,2936,2937,5084,2939,2940,2941,5085,5086,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,5087,2958,5088,2959,2960,2961,2962,5089,2964,5090,2965,2966,2967,2968,2969,5091,5092,2972,2974,2975,2976,2977,2978,2979,2980,2981,2983,2984,5093,5094,5095,2987,2988,2989,2991,5096,5097,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3014,3015,3016,5098,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3044,3045,3046,3047,3048,5099,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3062,3063,3064,3065,3066,3067],"privDecls": [5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110],"file": 52},{"kind": 8,"name": "std.os.bits.linux.x86_64.ucontext_t","src": 651,"pubDecls": [],"privDecls": [],"fields": [609,1576,1454,1466,1448,1577]},{"kind": 8,"name": "std.os.windows","src": 652,"pubDecls": [5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691],"privDecls": [5692,5693,5694,5695,5696,5697,5698,5699],"file": 53},{"kind": 7,"len": 23,"elem": 609},{"kind": 8,"name": "std.os.bits.linux.x86_64.fpstate","src": 653,"pubDecls": [],"privDecls": [],"fields": [730,730,730,730,609,609,770,770,1581,1582,1583]},{"kind": 17,"name": "std.os.bits.linux.epoll_data","src": 654,"pubDecls": [],"privDecls": [],"fields": [609,667,770,615]},{"kind": 15,"name": "std.os.SysCtlError","errors": [59,86,87,7]},{"kind": 8,"name": "std.os.bits.iovec","src": 655,"pubDecls": [],"privDecls": [],"fields": [982,609]},{"kind": 8,"name": "std.os.bits.linux.epoll_event","src": 656,"pubDecls": [],"privDecls": [],"fields": [770,1460]},{"kind": 6,"elem": 1459},{"kind": 13,"child": 1584},{"kind": 8,"name": "std.os.bits.linux.x86_64.mcontext_t","src": 657,"pubDecls": [],"privDecls": [],"fields": [1458,1464,1585]},{"kind": 8,"name": "std.os.bits.linux.winsize","src": 658,"pubDecls": [],"privDecls": [],"fields": [730,730,730,730]},{"kind": 6,"const": true,"elem": 1586},{"kind": 17,"name": "std.os.bits.linux.sigval","src": 659,"pubDecls": [],"privDecls": [],"fields": [667,1579]},{"kind": 18,"name": "fn(var,var,var,var) var","generic": true,"args": [null,null,null,null]},{"kind": 18,"name": "fn(std.builtin.StackTrace,var,var,var,var) var","generic": true,"args": [736,null,null,null,null]},{"kind": 8,"name": "std.debug.leb128","src": 660,"pubDecls": [5700,5701,5702,5703],"privDecls": [5704,5705,5706,5707,5708,5709,5710,5711],"file": 54},{"kind": 18,"name": "fn(*std.debug.DwarfInfo,var,var,var) var","generic": true,"args": [796,null,null,null]},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace,?usize,[]const u8,var) var","generic": true,"args": [690,691,573,null]},{"kind": 18,"name": "fn(*std.debug.DwarfInfo,var,var,var) var","generic": true,"args": [796,null,null,null]},{"kind": 18,"name": "fn([]const u8,var) var","generic": true,"args": [573,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var) var","generic": true,"args": [678,null,null]},{"kind": 6,"const": true,"elem": 1589},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var) var","generic": true,"args": [678,null]},{"kind": 6,"const": true,"elem": 1590},{"kind": 8,"name": "std.debug.MachoSymbol","src": 661,"pubDecls": [],"privDecls": [5712,5713],"fields": [569,1591,615]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var) var","generic": true,"args": [678,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var,var) var","generic": true,"args": [678,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var) var","generic": true,"args": [678,null,null]},{"kind": 18,"name": "fn(var,var) var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var) var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var) var","generic": true,"args": [678,null,null]},{"kind": 7,"len": 102400,"elem": 572},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 8,"name": "std.debug.Module","src": 662,"pubDecls": [],"privDecls": [],"fields": [1514,548,548,565,548,548,691]},{"kind": 13,"child": 734},{"kind": 18,"name": "fn(var,var) var","generic": true,"args": [null,null]},{"kind": 13,"child": 807},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var,var) var","generic": true,"args": [678,null,null,null]},{"kind": 8,"name": "std.elf.Elf64_Phdr","src": 663,"pubDecls": [],"privDecls": [],"fields": [770,770,615,615,615,615,615,615]},{"kind": 8,"name": "std.elf.Elf64_Sym","src": 664,"pubDecls": [],"privDecls": [],"fields": [770,572,572,730,615,615]},{"kind": 8,"name": "std.elf.Elf64_Verdaux","src": 665,"pubDecls": [],"privDecls": [],"fields": [770,770]},{"kind": 8,"name": "std.elf.Elf64_auxv_t","src": 666,"pubDecls": [],"privDecls": [],"fields": [615,1592]},{"kind": 8,"name": "std.elf.Elf64_Ehdr","src": 667,"pubDecls": [],"privDecls": [],"fields": [1593,1236,1239,770,615,615,615,770,730,730,730,730,730,730]},{"kind": 16,"name": "std.io.Mode","src": 668,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn([]u8,[]const u8,var) var","generic": true,"args": [548,573,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var) var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var) var","generic": true,"args": [null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var) var","generic": true,"args": [null,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var) var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn([]const u8,[]const u8,var,var,var,var) var","generic": true,"args": [573,573,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [546,null,null]},{"kind": 16,"name": "std.fmt.Alignment","src": 669,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(*u32,var,var) var","generic": true,"args": [1009,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var) var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var) var","generic": true,"args": [null,null,null,null,null,null]},{"kind": 8,"name": "std.pdb.ModInfo","src": 670,"pubDecls": [],"privDecls": [],"fields": [770,1515,730,730,770,770,770,730,1207,770,770,770]},{"kind": 8,"name": "std.pdb.SectionContribEntry","src": 671,"pubDecls": [],"privDecls": [],"fields": [730,1207,770,770,770,730,1207,770,770]},{"kind": 8,"name": "std.pdb.Pdb","src": 672,"pubDecls": [5714,5715,5716],"privDecls": [],"fields": [703,678,1594,1034,1034,1517]},{"kind": 8,"name": "std.pdb.Msf","src": 673,"pubDecls": [],"privDecls": [5717],"fields": [1380,1595]},{"kind": 8,"name": "std.coff.Coff","src": 674,"pubDecls": [5718,5719,5720,5721,5722],"privDecls": [5723],"fields": [703,678,1520,1519,578,1593,770]},{"kind": 8,"name": "std.coff.OptionalHeader","src": 675,"pubDecls": [],"privDecls": [5724],"fields": [730,1597]},{"kind": 8,"name": "std.coff.CoffHeader","src": 676,"pubDecls": [],"privDecls": [],"fields": [730,730,770,770,770,730,730]},{"kind": 8,"name": "std.hash.auto_hash","src": 677,"pubDecls": [5725,5726,5727,5728,5729],"privDecls": [5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740],"file": 55},{"kind": 18,"name": "fn(var,var) var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [546]},{"kind": 8,"name": "std.fs.path","src": 678,"pubDecls": [5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776],"privDecls": [5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806],"file": 56},{"kind": 15,"name": "std.fs.SelfExePathError","errors": [80,58,81,82,83,84,85,7,59]},{"kind": 8,"name": "std.heap.PageAllocator","src": 679,"pubDecls": [],"privDecls": [5807,5808,5809]},{"kind": 6,"len": 1,"elem": 609},{"kind": 6,"const": true,"elem": 1600},{"kind": 18,"name": "fn(*std.progress.Progress,[]const u8,var) var","generic": true,"args": [997,573,null]},{"kind": 18,"name": "fn(*std.progress.Progress,*usize,[]const u8,var) var","generic": true,"args": [997,1018,573,null]},{"kind": 13,"child": 703},{"kind": 7,"len": 100,"elem": 572},{"kind": 8,"name": "std.spinlock","src": 680,"pubDecls": [5810],"privDecls": [5811,5812],"file": 57},{"kind": 16,"name": "std.spinlock.State","src": 681,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.macho.section_64","src": 682,"pubDecls": [],"privDecls": [],"fields": [1593,1593,615,615,770,770,770,770,770,770,770,770]},{"kind": 4,"i": 32},{"kind": 8,"name": "std.macho.mach_header_64","src": 683,"pubDecls": [],"privDecls": [],"fields": [770,1537,1537,770,770,770,770,770]},{"kind": 18,"name": "fn(*std.mem.Allocator,var) var","generic": true,"args": [678,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var) var","generic": true,"args": [678,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var,var) var","generic": true,"args": [678,546,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var) var","generic": true,"args": [678,546,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var,var) var","generic": true,"args": [678,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var) var","generic": true,"args": [678,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type) var","generic": true,"args": [678,546]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) std.mem.Error![]u8","generic": false,"ret": 718,"args": [678,548,700,609,700]},{"kind": 7,"len": 2,"elem": 629},{"kind": 7,"len": 3,"elem": 629},{"kind": 13,"child": 1568},{"kind": 6,"elem": 1244},{"kind": 13,"child": 1601},{"kind": 17,"name": "std.os.bits.linux.siginfo_fields_union","src": 684,"pubDecls": [],"privDecls": [],"fields": [1602,1603,1604,1605,1606]},{"kind": 6,"len": 2,"elem": 770},{"kind": 7,"len": 5,"elem": 615},{"kind": 18,"name": "fn(u8,var) var","generic": true,"args": [572,null]},{"kind": 8,"name": "std.event.fs.OsDataPosix","src": 685,"pubDecls": [],"privDecls": [],"fields": [565,1063]},{"kind": 13,"child": 1607},{"kind": 8,"name": "std.event.loop.LinuxOsData","src": 686,"pubDecls": [],"privDecls": [],"fields": [667,667,1463,1608,667,618,1063]},{"kind": 6,"len": 2,"elem": 1608},{"kind": 6,"len": 2,"elem": 1089},{"kind": 14,"err": 1181,"payload": 667},{"kind": 15,"name": "std.event.fs.Error","errors": [25,26,27,28,29,30,31,32,41,33,34,35,36,42,37,43,38,39,40,8,10,13,15,16]},{"kind": 14,"err": 1562,"payload": 551},{"kind": 6,"len": 2,"const": true,"elem": 1450},{"kind": 6,"len": 2,"const": true,"elem": 1462},{"kind": 8,"name": "std.builtin.FnDecl","src": 687,"pubDecls": [5813],"privDecls": [],"fields": [546,1609,565,565,565,905,546,1610]},{"kind": 6,"len": 2,"align": 16,"elem": 572},{"kind": 18,"name": "fn() callconv(.C) void","generic": false,"ret": 551},{"kind": 7,"len": 2,"elem": 770},{"kind": 7,"len": 20,"elem": 572},{"kind": 8,"name": "std.os.linux.x86_64","src": 688,"pubDecls": [1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,4937,1507,1508,1509,1512,1511,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1571,1573,1574,1575,1576,1577,1578,1580,1581,1582,1583,1584,1586,1587,1588,1589,1591,1593,1594,1595,1596,1597,1598,1599,1600,1602,1603,1604,1605,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1634,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,4959,1653,1654,1655,1656,1657,1658,1659,1660,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1675,1674,1676,1677,4964,1678,1679,1681,1680,1682,1683,1684,1686,1687,1688,1689,1690,1692,1693,1694,1695,1697,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1712,1716,1717,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1730,1731,1732,1733,1734,1735,1736,1738,1739,1741,1742,1744,1745,1746,1747,1748,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1796,1797,1798,1799,1800,1802,1803,1804,1806,1808,1809,1811,1812,1813,1814,1815,1817,1818,1819,1820,1822,1823,1825,1826,1827,1828,1829,1830,1832,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1846,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1879,1880,1881,1883,1882,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1933,1932,1935,1936,1938,1939,1940,1941,1942,1943,1944,1945,1946,4988,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1962,1964,1965,1966,1967,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1981,1982,1983,1984,1985,1986,1987,1988,1989,1991,1992,1993,1994,1995,1996,1999,2000,2001,2002,2003,2004,2005,2006,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2028,2029,2030,2031,2032,2033,2034,2035,2036,2038,2039,2040,2042,2045,2046,2047,2048,2049,2051,2052,2053,2054,2055,2056,2057,2058,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2077,2076,2078,2079,2080,2081,2082,2083,2084,2086,2087,2088,2090,2091,2093,2094,2095,5001,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2110,2111,2112,2114,2115,2116,2117,2118,2119,2120,2121,2123,2124,2125,2127,2126,2128,2129,2130,2132,2134,2135,2137,2136,2138,2139,2140,2143,2144,2145,2146,2148,2149,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2183,2184,2185,2186,2187,2188,2189,2191,2192,2193,2194,2195,2196,2197,2198,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2223,2226,2227,2225,2228,2229,2230,2231,2232,2233,2234,2235,2236,2238,2239,2240,5016,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2281,2282,2283,2284,2285,2286,2287,2288,2290,2291,2293,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2310,2311,2312,2314,2315,2316,2317,2318,2319,2320,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2337,2336,2339,2340,2341,2342,2343,2344,2345,2347,2348,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2382,2383,2381,2384,2385,2386,2388,2387,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2400,2401,2402,2403,2404,2405,2406,2408,2407,2409,2410,2411,2413,2415,2416,2417,2418,2419,2420,2422,2424,2425,2426,2427,2428,2429,2431,2432,2433,2434,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2450,2451,2452,2453,2454,2455,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2490,2491,2492,2494,2495,2496,2497,2499,2500,2501,2502,2503,2504,2505,2506,2508,2509,2510,2511,2512,2513,2515,2516,2517,2518,2519,2520,2522,2523,2524,2525,2526,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2544,2545,2546,2547,2548,2550,2551,2552,2553,2555,2556,2557,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2571,2573,2574,2576,2577,2578,2579,2580,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2600,2601,2602,2603,2604,5049,2605,2606,2607,2608,5050,2609,2610,2612,2613,2614,2615,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2727,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2740,2741,2744,2745,2746,2747,2748,2750,2752,2753,2754,2755,2756,2757,2758,5061,2760,2759,2761,2762,2763,2764,2765,2766,2767,2768,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2790,2791,2793,2794,2796,2798,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2816,2817,2818,2819,2820,2821,2822,2823,2827,2825,2826,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2861,2863,2864,2865,2867,2866,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2880,2881,2882,2883,2884,2885,2886,2888,2887,2889,2890,2891,2892,2894,2895,2896,2898,2900,2901,2902,2903,2904,2905,2907,2908,2909,2910,2911,2912,2913,2914,2915,5080,2916,2917,2918,2919,2921,2922,2923,2924,2925,2926,2927,2929,2930,2931,2932,2933,2934,2935,2936,2937,2939,2940,2941,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2958,2959,2960,2961,2962,2964,2965,2966,2967,2968,2969,2972,2974,2975,2976,2977,2978,2979,2980,2981,2983,2984,2987,2988,2989,2991,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3044,3045,3046,3047,3048,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3062,3063,3064,3065,3066,3067],"privDecls": [],"file": 58},{"kind": 13,"child": 1611},{"kind": 8,"name": "std.os.linux.tls","src": 689,"pubDecls": [5814,5815,5816,5817,5818],"privDecls": [5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835],"file": 59},{"kind": 13,"child": 986},{"kind": 8,"name": "std.os.linux.vdso","src": 690,"pubDecls": [5836],"privDecls": [5837,5838,5839,5840,5841,5842],"file": 60},{"kind": 6,"elem": 1456},{"kind": 7,"len": 64,"elem": 609},{"kind": 8,"name": "std.os.windows.bits","src": 691,"pubDecls": [5112,5113,5114,5115,5116,5118,5120,5121,5122,5123,5124,5125,5126,5128,5129,5130,5131,5134,5135,5136,5137,5138,5139,5141,5142,5143,5144,5146,5147,5148,5149,5150,5151,5152,5153,5155,5156,5158,5159,5161,5162,5163,5164,5165,5166,5167,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5180,5182,5184,5185,5186,5187,5188,5189,5190,5191,5193,5194,5195,5197,5198,5199,5200,5202,5204,5205,5206,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5220,5222,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5242,5243,5245,5246,5247,5248,5249,5250,5251,5252,5253,5255,5256,5257,5258,5260,5261,5262,5264,5266,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5292,5293,5294,5296,5297,5298,5299,5300,5301,5302,5303,5304,5306,5307,5308,5310,5311,5313,5314,5315,5316,5317,5318,5320,5321,5322,5323,5324,5325,5327,5329,5330,5331,5332,5333,5334,5335,5336,5338,5340,5341,5342,5345,5346,5347,5348,5349,5350,5351,5353,5354,5355,5356,5357,5358,5360,5361,5362,5365,5366,5367,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5381,5382,5383,5384,5387,5388,5389,5390,5391,5392,5393,5395,5397,5399,5400,5401,5403,5404,5406,5407,5408,5409,5410,5411,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5433,5434,5436,5437,5438,5439,5440,5441,5442,5443,5444,5446,5447,5448,5450,5451,5452,5453,5455,5456,5457,5459,5460,5461,5462,5465,5466,5467,5469,5470,5471,5472,5474,5476,5477,5479,5480,5481,5482,5483,5484,5485,5487,5489,5490,5492,5493,5494,5495,5496,5498,5499,5500,5501,5504,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5519,5520,5521,5524,5525,5526,5527,5528,5529,5530,5532,5533,5534,5535,5536,5537,5538,5539,5541,5542,5543,5544,5545,5546,5549,5551,5552,5553,5554,5555,5556,5557,5558,5559,5561,5562,5563,5565,5566,5567,5568,5570,5571,5572,5573,5575,5578,5579,5581,5583,5584,5585,5586,5588,5589,5590,5591,5593,5595,5596,5597,5598,5599,5600,5601,5603,5604,5605,5606,5607,5609,5610,5611,5613,5614,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5632,5633,5634,5635,5636,5637,5638,5641,5642,5643,5644,5645,5647,5648,5649,5650,5651,5652,5654,5656,5658,5659,5660,5661,5662,5663,5667,5668,5669,5670,5671,5672,5673,5674,5676,5677,5678,5681,5682,5683,5684,5685,5686,5688,5689,5111],"privDecls": [5843,5844,5845,5846],"file": 61},{"kind": 6,"elem": 1365},{"kind": 15,"name": "std.os.windows.CreateFileError","errors": [25,26,27,28,29,30,31,32,41]},{"kind": 7,"len": 8,"elem": 1618},{"kind": 7,"len": 16,"elem": 1619},{"kind": 7,"len": 24,"elem": 770},{"kind": 18,"name": "fn(i32, *std.os.bits.linux.siginfo_t, *c_void) callconv(.C) void","generic": false,"ret": 551,"args": [667,1620,1579]},{"kind": 7,"len": 8,"elem": 609},{"kind": 7,"len": 9,"elem": 572},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [546,null]},{"kind": 7,"len": 7,"elem": 572},{"kind": 7,"len": 4,"elem": 572},{"kind": 13,"child": 569},{"kind": 17,"name": "std.elf.union:754:11","src": 692,"pubDecls": [],"privDecls": [],"fields": [615]},{"kind": 7,"len": 16,"elem": 572},{"kind": 6,"elem": 1518},{"kind": 6,"len": 2,"elem": 1380},{"kind": 8,"name": "std.coff.DataDirectory","src": 693,"pubDecls": [],"privDecls": [],"fields": [770,770]},{"kind": 7,"len": 16,"elem": 1596},{"kind": 16,"name": "std.hash.auto_hash.HashStrategy","src": 694,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(var,var,var) var","generic": true,"args": [null,null,null]},{"kind": 7,"len": 6,"elem": 572},{"kind": 6,"elem": 1323},{"kind": 7,"len": 112,"elem": 572},{"kind": 8,"name": "std.os.bits.linux.struct:1051:13","src": 695,"pubDecls": [],"privDecls": [],"fields": [1621,1622]},{"kind": 8,"name": "std.os.bits.linux.struct:1071:15","src": 696,"pubDecls": [],"privDecls": [],"fields": [1579,1623,1624]},{"kind": 8,"name": "std.os.bits.linux.struct:1082:14","src": 697,"pubDecls": [],"privDecls": [],"fields": [617,667]},{"kind": 8,"name": "std.os.bits.linux.struct:1086:13","src": 698,"pubDecls": [],"privDecls": [],"fields": [1579,667,770]},{"kind": 6,"elem": 1391},{"kind": 6,"elem": 1145},{"kind": 16,"name": "std.builtin.Inline","src": 699,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 6,"len": 2,"elem": 573},{"kind": 6,"len": 1,"elem": 1499},{"kind": 13,"child": 1617},{"kind": 7,"len": 256,"elem": 572},{"kind": 16,"name": "std.os.linux.tls.TLSVariant","src": 700,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.os.linux.tls.DTV","src": 701,"pubDecls": [],"privDecls": [],"fields": [609,1625]},{"kind": 8,"name": "std.os.linux.tls.CustomData","src": 702,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.os.linux.tls.TLSImage","src": 703,"pubDecls": [],"privDecls": [],"fields": [548,609,609,609,609,609]},{"kind": 8,"name": "std.os.bits.linux.x86_64.struct:549:12","src": 704,"pubDecls": [],"privDecls": [],"fields": [1626,730,1627]},{"kind": 8,"name": "std.os.bits.linux.x86_64.struct:554:14","src": 705,"pubDecls": [],"privDecls": [],"fields": [1628]},{"kind": 6,"elem": 1364},{"kind": 17,"name": "std.os.bits.linux.union:1052:16","src": 706,"pubDecls": [],"privDecls": [],"fields": [1629,1630]},{"kind": 17,"name": "std.os.bits.linux.union:1062:17","src": 707,"pubDecls": [],"privDecls": [],"fields": [1469,1631]},{"kind": 4,"i": 16},{"kind": 17,"name": "std.os.bits.linux.union:1074:16","src": 708,"pubDecls": [],"privDecls": [],"fields": [1632,770]},{"kind": 7,"len": 1,"elem": 609},{"kind": 7,"len": 4,"elem": 730},{"kind": 7,"len": 3,"elem": 730},{"kind": 7,"len": 4,"elem": 770},{"kind": 8,"name": "std.os.bits.linux.struct:1053:21","src": 709,"pubDecls": [],"privDecls": [],"fields": [667,667]},{"kind": 8,"name": "std.os.bits.linux.struct:1057:20","src": 710,"pubDecls": [],"privDecls": [],"fields": [667,667]},{"kind": 8,"name": "std.os.bits.linux.struct:1064:22","src": 711,"pubDecls": [],"privDecls": [],"fields": [667,617,617]},{"kind": 8,"name": "std.os.bits.linux.struct:1075:23","src": 712,"pubDecls": [],"privDecls": [],"fields": [1579,1579]}],"decls": [{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 250,"value": 303},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 251,"value": 304},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst","kind": "const","type": 266,"value": 319},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst","kind": "const","type": 546,"value": 890},{"import": 1040,"src": 159,"name": "append","kind": "const","type": 248,"value": 301},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne","kind": "const","type": 249,"value": 302},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity","kind": "const","type": 253,"value": 306},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 878},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 247,"value": 300},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice"},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 547},{"import": 552,"src": 734,"name": "math3d","kind": "const","type": 546,"value": 666},{"import": 552,"src": 735,"name": "pcx","kind": "const","type": 546,"value": 1041},{"import": 552,"src": 736,"name": "netbpm","kind": "const","type": 546,"value": 644},{"import": 552,"src": 737,"name": "color","kind": "const","type": 546,"value": 665},{"import": 552,"src": 738,"name": "math","kind": "const","type": 546,"value": 659},{"import": 1041,"src": 739,"name": "padding","kind": "var","type": 1042,"value": null},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 188,"value": 241},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 189,"value": 242},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst","kind": "const","type": 333,"value": 411},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst","kind": "const","type": 546,"value": 942},{"import": 1040,"src": 159,"name": "append","kind": "const","type": 185,"value": 238},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne","kind": "const","type": 187,"value": 240},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity","kind": "const","type": 191,"value": 244},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 814},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 182,"value": 235},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice"},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 557},{"import": 1044,"src": 740,"name": "dump"},{"import": 1044,"src": 741,"name": "dumpToStream"},{"import": 1044,"src": 742,"name": "Node","kind": "const","type": 546,"value": 1045},{"import": 1044,"src": 743,"name": "put"},{"import": 1044,"src": 744,"name": "init"},{"import": 1044,"src": 745,"name": "unget"},{"import": 1044,"src": 746,"name": "get"},{"import": 1044,"src": 747,"name": "Self"},{"import": 1044,"src": 748,"name": "remove"},{"import": 1044,"src": 749,"name": "isEmpty"},{"import": 1048,"src": 750,"name": "exeFileExt"},{"import": 1048,"src": 751,"name": "getArchPtrBitWidth"},{"import": 1048,"src": 752,"name": "zigTriple"},{"import": 1048,"src": 753,"name": "getAbi"},{"import": 1048,"src": 754,"name": "stack_align","kind": "const","type": 599,"value": null},{"import": 1048,"src": 755,"name": "isMusl"},{"import": 1048,"src": 756,"name": "subArchName"},{"import": 1048,"src": 132,"name": "isDarwin","kind": "const","type": 138,"value": 189},{"import": 1048,"src": 237,"name": "getArch","kind": "const","type": 321,"value": 391},{"import": 1048,"src": 757,"name": "zigTripleNoSubArch"},{"import": 1048,"src": 758,"name": "isMinGW"},{"import": 1048,"src": 759,"name": "parseArchSub"},{"import": 1048,"src": 760,"name": "staticLibSuffix"},{"import": 1048,"src": 761,"name": "isWindows"},{"import": 1048,"src": 762,"name": "oFileExt"},{"import": 1048,"src": 763,"name": "isFreeBSD"},{"import": 1048,"src": 764,"name": "isGnu"},{"import": 1048,"src": 765,"name": "allocDescription"},{"import": 1048,"src": 766,"name": "vcpkgTriplet"},{"import": 1048,"src": 767,"name": "dynamicLibSuffix"},{"import": 1048,"src": 768,"name": "Os","kind": "const","type": 546,"value": 648},{"import": 1048,"src": 769,"name": "supportsNewStackCall"},{"import": 1048,"src": 770,"name": "Abi","kind": "const","type": 546,"value": 1049},{"import": 1048,"src": 771,"name": "Cross","kind": "const","type": 546,"value": 1050},{"import": 1048,"src": 772,"name": "osRequiresLibC"},{"import": 1048,"src": 773,"name": "ParseArchSubError"},{"import": 1048,"src": 774,"name": "linuxTriple"},{"import": 1048,"src": 775,"name": "wantSharedLibSymLinks"},{"import": 1048,"src": 776,"name": "ObjectFormat"},{"import": 1048,"src": 777,"name": "current","kind": "const","type": 566,"value": null},{"import": 1048,"src": 778,"name": "Executor"},{"import": 1048,"src": 779,"name": "parseOs"},{"import": 1048,"src": 133,"name": "getOs","kind": "const","type": 139,"value": 190},{"import": 1048,"src": 780,"name": "libPrefix"},{"import": 1048,"src": 781,"name": "Arch","kind": "const","type": 546,"value": 931},{"import": 1048,"src": 782,"name": "isNetBSD"},{"import": 1048,"src": 783,"name": "SubSystem"},{"import": 1048,"src": 784,"name": "parse"},{"import": 1048,"src": 785,"name": "isLinux"},{"import": 1048,"src": 786,"name": "getExternalExecutor"},{"import": 1048,"src": 787,"name": "parseAbi"},{"import": 1048,"src": 788,"name": "isUefi"},{"import": 1048,"src": 789,"name": "defaultAbi"},{"import": 1048,"src": 236,"name": "isWasm","kind": "const","type": 138,"value": 390},{"import": 1048,"src": 790,"name": "archSubArchName"},{"import": 1051,"src": 791,"name": "clone"},{"import": 1051,"src": 792,"name": "ensureCapacity"},{"import": 1051,"src": 793,"name": "getOrPut"},{"import": 1051,"src": 794,"name": "putNoClobber"},{"import": 1051,"src": 795,"name": "iterator"},{"import": 1051,"src": 796,"name": "KV","kind": "const","type": 546,"value": 1052},{"import": 1051,"src": 797,"name": "get"},{"import": 1051,"src": 798,"name": "GetOrPutResult"},{"import": 1051,"src": 799,"name": "clear"},{"import": 1051,"src": 800,"name": "putAssumeCapacity"},{"import": 1051,"src": 801,"name": "deinit"},{"import": 1051,"src": 802,"name": "getOrPutValue"},{"import": 1051,"src": 803,"name": "getValue"},{"import": 1051,"src": 804,"name": "put"},{"import": 1051,"src": 805,"name": "Iterator"},{"import": 1051,"src": 806,"name": "init"},{"import": 1051,"src": 807,"name": "count"},{"import": 1051,"src": 808,"name": "contains"},{"import": 1051,"src": 809,"name": "remove"},{"import": 1051,"src": 810,"name": "removeAssertDiscard"},{"import": 1051,"src": 811,"name": "optimizedCapacity"},{"import": 1051,"src": 812,"name": "initCapacity"},{"import": 1051,"src": 813,"name": "keyToIndex"},{"import": 1051,"src": 814,"name": "Self"},{"import": 1051,"src": 815,"name": "autoCapacity"},{"import": 1051,"src": 816,"name": "incrementModificationCount"},{"import": 1051,"src": 817,"name": "constrainIndex"},{"import": 1051,"src": 818,"name": "InternalPutResult"},{"import": 1051,"src": 819,"name": "internalPut"},{"import": 1051,"src": 820,"name": "Entry","kind": "const","type": 546,"value": 1053},{"import": 1051,"src": 821,"name": "ensureCapacityExact"},{"import": 1051,"src": 822,"name": "internalGet"},{"import": 1041,"src": 68,"name": "deinit","kind": "const","type": 67,"value": 96},{"import": 1041,"src": 62,"name": "initLinear","kind": "const","type": 65,"value": 94},{"import": 1041,"src": 823,"name": "PaletteType","kind": "const","type": 546,"value": 1058},{"import": 1041,"src": 824,"name": "Self","kind": "const","type": 546,"value": 575},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 199,"value": 252},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 200,"value": 253},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst"},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst"},{"import": 1040,"src": 159,"name": "append","kind": "const","type": 180,"value": 233},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne","kind": "const","type": 198,"value": 251},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity","kind": "const","type": 202,"value": 255},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 803},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 170,"value": 222},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice","kind": "const","type": 179,"value": 232},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 576},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity"},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity"},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst"},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst"},{"import": 1040,"src": 159,"name": "append"},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne"},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity"},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 1060},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init"},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice"},{"import": 1040,"src": 733,"name": "Self"},{"import": 1062,"src": 825,"name": "append"},{"import": 1062,"src": 826,"name": "createNode"},{"import": 1062,"src": 827,"name": "Node","kind": "const","type": 546,"value": 1063},{"import": 1062,"src": 828,"name": "destroyNode"},{"import": 1062,"src": 829,"name": "prepend"},{"import": 1062,"src": 830,"name": "pop"},{"import": 1062,"src": 831,"name": "insertAfter"},{"import": 1062,"src": 832,"name": "init"},{"import": 1062,"src": 833,"name": "insertBefore"},{"import": 1062,"src": 834,"name": "concatByMoving"},{"import": 1062,"src": 835,"name": "remove"},{"import": 1062,"src": 836,"name": "popFirst"},{"import": 1062,"src": 837,"name": "allocateNode"},{"import": 1062,"src": 838,"name": "Self"},{"import": 1065,"src": 839,"name": "Finish","kind": "const","type": 546,"value": 1066},{"import": 1065,"src": 840,"name": "Msg","kind": "const","type": 546,"value": 1067},{"import": 1068,"src": 66,"name": "readByte","kind": "const","type": 57,"value": 85},{"import": 1068,"src": 79,"name": "readIntBig","kind": "const","type": 1069,"value": 779},{"import": 1068,"src": 841,"name": "readStruct"},{"import": 1068,"src": 842,"name": "skipBytes"},{"import": 1068,"src": 67,"name": "read","kind": "const","type": 52,"value": 86},{"import": 1068,"src": 843,"name": "readAllAlloc"},{"import": 1068,"src": 844,"name": "readUntilDelimiterBuffer"},{"import": 1068,"src": 845,"name": "readIntForeign"},{"import": 1068,"src": 846,"name": "ReadFn","kind": "const","type": 546,"value": 52},{"import": 1068,"src": 847,"name": "readIntNative"},{"import": 1068,"src": 61,"name": "readFull","kind": "const","type": 52,"value": 80},{"import": 1068,"src": 59,"name": "readNoEof","kind": "const","type": 50,"value": 78},{"import": 1068,"src": 143,"name": "readEnum"},{"import": 1068,"src": 188,"name": "readByteSigned"},{"import": 1068,"src": 291,"name": "readVarInt"},{"import": 1068,"src": 848,"name": "skipUntilDelimiterOrEof"},{"import": 1068,"src": 849,"name": "Error","kind": "const","type": 546,"value": 585},{"import": 1068,"src": 155,"name": "readIntLittle"},{"import": 1068,"src": 850,"name": "readUntilDelimiterOrEof"},{"import": 1068,"src": 851,"name": "readUntilDelimiterAlloc"},{"import": 1068,"src": 852,"name": "readAllBuffer"},{"import": 1068,"src": 144,"name": "readInt"},{"import": 1068,"src": 853,"name": "Self","kind": "const","type": 546,"value": 584},{"import": 1041,"src": 68,"name": "deinit","kind": "const","type": 58,"value": 87},{"import": 1041,"src": 62,"name": "initLinear","kind": "const","type": 53,"value": 81},{"import": 1041,"src": 823,"name": "PaletteType","kind": "const","type": 546,"value": 1070},{"import": 1041,"src": 824,"name": "Self","kind": "const","type": 546,"value": 586},{"import": 1041,"src": 68,"name": "deinit","kind": "const","type": 63,"value": 92},{"import": 1041,"src": 62,"name": "initLinear","kind": "const","type": 61,"value": 90},{"import": 1041,"src": 823,"name": "PaletteType","kind": "const","type": 546,"value": 1072},{"import": 1041,"src": 824,"name": "Self","kind": "const","type": 546,"value": 588},{"import": 1068,"src": 66,"name": "readByte"},{"import": 1068,"src": 79,"name": "readIntBig"},{"import": 1068,"src": 841,"name": "readStruct"},{"import": 1068,"src": 842,"name": "skipBytes"},{"import": 1068,"src": 67,"name": "read"},{"import": 1068,"src": 843,"name": "readAllAlloc"},{"import": 1068,"src": 844,"name": "readUntilDelimiterBuffer"},{"import": 1068,"src": 845,"name": "readIntForeign"},{"import": 1068,"src": 846,"name": "ReadFn","kind": "const","type": 546,"value": 327},{"import": 1068,"src": 847,"name": "readIntNative"},{"import": 1068,"src": 61,"name": "readFull"},{"import": 1068,"src": 59,"name": "readNoEof"},{"import": 1068,"src": 143,"name": "readEnum"},{"import": 1068,"src": 188,"name": "readByteSigned"},{"import": 1068,"src": 291,"name": "readVarInt"},{"import": 1068,"src": 848,"name": "skipUntilDelimiterOrEof"},{"import": 1068,"src": 849,"name": "Error","kind": "const","type": 546,"value": 592},{"import": 1068,"src": 155,"name": "readIntLittle"},{"import": 1068,"src": 850,"name": "readUntilDelimiterOrEof"},{"import": 1068,"src": 851,"name": "readUntilDelimiterAlloc"},{"import": 1068,"src": 852,"name": "readAllBuffer"},{"import": 1068,"src": 144,"name": "readInt"},{"import": 1068,"src": 853,"name": "Self","kind": "const","type": 546,"value": 591},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 194,"value": 247},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 195,"value": 248},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst","kind": "const","type": 210,"value": 263},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst","kind": "const","type": 546,"value": 835},{"import": 1040,"src": 159,"name": "append","kind": "const","type": 192,"value": 245},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne","kind": "const","type": 193,"value": 246},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity","kind": "const","type": 197,"value": 250},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 821},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 186,"value": 239},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice"},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 594},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 207,"value": 260},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 208,"value": 261},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst","kind": "const","type": 347,"value": 426},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst","kind": "const","type": 546,"value": 956},{"import": 1040,"src": 159,"name": "append"},{"import": 1040,"src": 170,"name": "resize","kind": "const","type": 206,"value": 259},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne"},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity"},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 834},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 205,"value": 258},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice"},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 596},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 270,"value": 323},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 271,"value": 324},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst"},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst"},{"import": 1040,"src": 159,"name": "append","kind": "const","type": 268,"value": 321},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne","kind": "const","type": 269,"value": 322},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity","kind": "const","type": 273,"value": 326},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 896},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 264,"value": 317},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice"},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 602},{"import": 644,"src": 854,"name": "deinit"},{"import": 644,"src": 74,"name": "set","kind": "const","type": 80,"value": 109},{"import": 644,"src": 855,"name": "get"},{"import": 644,"src": 856,"name": "Self","kind": "const","type": 546,"value": 605},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 259,"value": 312},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 260,"value": 313},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst"},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst"},{"import": 1040,"src": 159,"name": "append","kind": "const","type": 257,"value": 310},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne","kind": "const","type": 258,"value": 311},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity","kind": "const","type": 262,"value": 315},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 548},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 256,"value": 309},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice","kind": "const","type": 263,"value": 316},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 608},{"import": 644,"src": 854,"name": "deinit"},{"import": 644,"src": 74,"name": "set","kind": "const","type": 75,"value": 104},{"import": 644,"src": 855,"name": "get"},{"import": 644,"src": 856,"name": "Self","kind": "const","type": 546,"value": 610},{"import": 1075,"src": 857,"name": "WriteFn","kind": "const","type": 546,"value": 288},{"import": 1075,"src": 858,"name": "writeIntLittle"},{"import": 1075,"src": 859,"name": "writeInt"},{"import": 1075,"src": 84,"name": "print","kind": "const","type": 1076,"value": 780},{"import": 1075,"src": 860,"name": "writeIntNative"},{"import": 1075,"src": 861,"name": "Error","kind": "const","type": 546,"value": 613},{"import": 1075,"src": 862,"name": "writeIntForeign"},{"import": 1075,"src": 201,"name": "writeByte","kind": "const","type": 287,"value": 340},{"import": 1075,"src": 863,"name": "writeByteNTimes"},{"import": 1075,"src": 864,"name": "writeIntBig"},{"import": 1075,"src": 202,"name": "write","kind": "const","type": 288,"value": 341},{"import": 1075,"src": 865,"name": "Self","kind": "const","type": 546,"value": 612},{"import": 1044,"src": 740,"name": "dump"},{"import": 1044,"src": 741,"name": "dumpToStream"},{"import": 1044,"src": 742,"name": "Node","kind": "const","type": 546,"value": 1063},{"import": 1044,"src": 743,"name": "put"},{"import": 1044,"src": 744,"name": "init"},{"import": 1044,"src": 745,"name": "unget"},{"import": 1044,"src": 746,"name": "get"},{"import": 1044,"src": 747,"name": "Self"},{"import": 1044,"src": 748,"name": "remove"},{"import": 1044,"src": 749,"name": "isEmpty"},{"import": 666,"src": 38,"name": "dot","kind": "const","type": 28,"value": 47},{"import": 666,"src": 35,"name": "mul","kind": "const","type": 25,"value": 44},{"import": 666,"src": 866,"name": "swizzle","kind": "const","type": 1077,"value": 781},{"import": 666,"src": 39,"name": "length2","kind": "const","type": 29,"value": 48},{"import": 666,"src": 36,"name": "div","kind": "const","type": 25,"value": 45},{"import": 666,"src": 92,"name": "normalize","kind": "const","type": 98,"value": 132},{"import": 666,"src": 89,"name": "componentMax","kind": "const","type": 25,"value": 128},{"import": 666,"src": 37,"name": "scale","kind": "const","type": 27,"value": 46},{"import": 666,"src": 32,"name": "add","kind": "const","type": 25,"value": 41},{"import": 666,"src": 34,"name": "sub","kind": "const","type": 25,"value": 43},{"import": 666,"src": 40,"name": "length","kind": "const","type": 29,"value": 49},{"import": 666,"src": 91,"name": "componentMin","kind": "const","type": 25,"value": 131},{"import": 666,"src": 44,"name": "fromAffinePosition","kind": "const","type": 36,"value": 62},{"import": 666,"src": 42,"name": "toAffinePosition","kind": "const","type": 35,"value": 60},{"import": 666,"src": 45,"name": "fromAffineDirection","kind": "const","type": 36,"value": 63},{"import": 666,"src": 867,"name": "unitX","kind": "const","type": 622,"value": null},{"import": 666,"src": 29,"name": "new","kind": "const","type": 1,"value": 29},{"import": 666,"src": 868,"name": "format","kind": "const","type": 1078,"value": 782},{"import": 666,"src": 94,"name": "transformDirection","kind": "const","type": 96,"value": 129},{"import": 666,"src": 41,"name": "cross","kind": "const","type": 25,"value": 50},{"import": 666,"src": 95,"name": "transform","kind": "const","type": 97,"value": 130},{"import": 666,"src": 869,"name": "zero","kind": "const","type": 622,"value": null},{"import": 666,"src": 43,"name": "toAffineDirection","kind": "const","type": 35,"value": 61},{"import": 666,"src": 870,"name": "unitZ","kind": "const","type": 622,"value": null},{"import": 666,"src": 96,"name": "transformPosition","kind": "const","type": 96,"value": 133},{"import": 666,"src": 871,"name": "unitY","kind": "const","type": 622,"value": null},{"import": 666,"src": 872,"name": "Self","kind": "const","type": 546,"value": 622},{"import": 666,"src": 212,"name": "getField","kind": "const","type": 1079,"value": 783},{"import": 1068,"src": 66,"name": "readByte","kind": "const","type": 151,"value": 202},{"import": 1068,"src": 79,"name": "readIntBig"},{"import": 1068,"src": 841,"name": "readStruct"},{"import": 1068,"src": 842,"name": "skipBytes"},{"import": 1068,"src": 67,"name": "read","kind": "const","type": 150,"value": 203},{"import": 1068,"src": 843,"name": "readAllAlloc"},{"import": 1068,"src": 844,"name": "readUntilDelimiterBuffer"},{"import": 1068,"src": 845,"name": "readIntForeign"},{"import": 1068,"src": 846,"name": "ReadFn","kind": "const","type": 546,"value": 150},{"import": 1068,"src": 847,"name": "readIntNative"},{"import": 1068,"src": 61,"name": "readFull","kind": "const","type": 150,"value": 201},{"import": 1068,"src": 59,"name": "readNoEof","kind": "const","type": 149,"value": 200},{"import": 1068,"src": 143,"name": "readEnum","kind": "const","type": 1080,"value": 784},{"import": 1068,"src": 188,"name": "readByteSigned","kind": "const","type": 246,"value": 299},{"import": 1068,"src": 291,"name": "readVarInt","kind": "const","type": 1081,"value": 785},{"import": 1068,"src": 848,"name": "skipUntilDelimiterOrEof"},{"import": 1068,"src": 849,"name": "Error","kind": "const","type": 546,"value": 624},{"import": 1068,"src": 155,"name": "readIntLittle","kind": "const","type": 1082,"value": 786},{"import": 1068,"src": 850,"name": "readUntilDelimiterOrEof"},{"import": 1068,"src": 851,"name": "readUntilDelimiterAlloc"},{"import": 1068,"src": 852,"name": "readAllBuffer"},{"import": 1068,"src": 144,"name": "readInt","kind": "const","type": 1083,"value": 787},{"import": 1068,"src": 853,"name": "Self","kind": "const","type": 546,"value": 623},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 228,"value": 281},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 229,"value": 282},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst"},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst"},{"import": 1040,"src": 159,"name": "append","kind": "const","type": 226,"value": 279},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne","kind": "const","type": 227,"value": 280},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity","kind": "const","type": 231,"value": 284},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 859},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 171,"value": 223},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice","kind": "const","type": 239,"value": 292},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 625},{"import": 1062,"src": 873,"name": "createNode"},{"import": 1062,"src": 874,"name": "Node","kind": "const","type": 546,"value": 1086},{"import": 1062,"src": 875,"name": "destroyNode"},{"import": 1062,"src": 282,"name": "prepend","kind": "const","type": 379,"value": 473},{"import": 1062,"src": 876,"name": "insertAfter"},{"import": 1062,"src": 284,"name": "init","kind": "const","type": 380,"value": 475},{"import": 1062,"src": 877,"name": "remove"},{"import": 1062,"src": 878,"name": "allocateNode"},{"import": 1062,"src": 879,"name": "popFirst"},{"import": 1062,"src": 880,"name": "Self","kind": "const","type": 546,"value": 631},{"import": 1088,"src": 881,"name": "pop"},{"import": 1088,"src": 882,"name": "init"},{"import": 1088,"src": 883,"name": "Self"},{"import": 1088,"src": 884,"name": "pushFirst"},{"import": 1088,"src": 885,"name": "Node","kind": "const","type": 546,"value": 1089},{"import": 1088,"src": 886,"name": "push"},{"import": 1088,"src": 887,"name": "isEmpty"},{"import": 1088,"src": 888,"name": "lock_init","kind": "const","type": 572,"value": null},{"import": 1092,"src": 147,"name": "seekTo","kind": "const","type": 163,"value": 215},{"import": 1092,"src": 142,"name": "seekBy","kind": "const","type": 152,"value": 204},{"import": 1092,"src": 889,"name": "SeekError","kind": "const","type": 546,"value": 624},{"import": 1092,"src": 156,"name": "getPos","kind": "const","type": 162,"value": 230},{"import": 1092,"src": 890,"name": "GetSeekPosError","kind": "const","type": 546,"value": 624},{"import": 1092,"src": 146,"name": "getEndPos","kind": "const","type": 162,"value": 214},{"import": 1092,"src": 891,"name": "Self","kind": "const","type": 546,"value": 636},{"import": 1040,"src": 713,"name": "set"},{"import": 1040,"src": 164,"name": "ensureCapacity","kind": "const","type": 220,"value": 273},{"import": 1040,"src": 714,"name": "setOrError"},{"import": 1040,"src": 715,"name": "ptrAt"},{"import": 1040,"src": 716,"name": "initCapacity"},{"import": 1040,"src": 717,"name": "appendAssumeCapacity"},{"import": 1040,"src": 718,"name": "swapRemoveOrError"},{"import": 1040,"src": 719,"name": "at"},{"import": 1040,"src": 165,"name": "capacity","kind": "const","type": 221,"value": 274},{"import": 1040,"src": 720,"name": "swapRemove"},{"import": 1040,"src": 721,"name": "pop"},{"import": 1040,"src": 171,"name": "toSliceConst","kind": "const","type": 355,"value": 440},{"import": 1040,"src": 722,"name": "appendSlice"},{"import": 1040,"src": 723,"name": "insertSlice"},{"import": 1040,"src": 724,"name": "fromOwnedSlice"},{"import": 1040,"src": 725,"name": "SliceConst","kind": "const","type": 546,"value": 960},{"import": 1040,"src": 159,"name": "append","kind": "const","type": 218,"value": 271},{"import": 1040,"src": 170,"name": "resize"},{"import": 1040,"src": 726,"name": "insert"},{"import": 1040,"src": 727,"name": "deinit"},{"import": 1040,"src": 163,"name": "addOne","kind": "const","type": 219,"value": 272},{"import": 1040,"src": 167,"name": "addOneAssumeCapacity","kind": "const","type": 223,"value": 276},{"import": 1040,"src": 728,"name": "shrink"},{"import": 1040,"src": 729,"name": "Slice","kind": "const","type": 546,"value": 850},{"import": 1040,"src": 730,"name": "toOwnedSlice"},{"import": 1040,"src": 731,"name": "orderedRemove"},{"import": 1040,"src": 152,"name": "init","kind": "const","type": 172,"value": 224},{"import": 1040,"src": 732,"name": "popOrNull"},{"import": 1040,"src": 158,"name": "toSlice"},{"import": 1040,"src": 733,"name": "Self","kind": "const","type": 546,"value": 637},{"import": 1041,"src": 68,"name": "deinit","kind": "const","type": 73,"value": 102},{"import": 1041,"src": 62,"name": "initLinear","kind": "const","type": 71,"value": 100},{"import": 1041,"src": 823,"name": "PaletteType","kind": "const","type": 546,"value": 551},{"import": 1041,"src": 824,"name": "Self","kind": "const","type": 546,"value": 640},{"import": 666,"src": 38,"name": "dot","kind": "const","type": 23,"value": 38},{"import": 666,"src": 35,"name": "mul","kind": "const","type": 20,"value": 35},{"import": 666,"src": 866,"name": "swizzle","kind": "const","type": 1095,"value": 788},{"import": 666,"src": 39,"name": "length2","kind": "const","type": 24,"value": 39},{"import": 666,"src": 36,"name": "div","kind": "const","type": 20,"value": 36},{"import": 666,"src": 92,"name": "normalize","kind": "const","type": 93,"value": 125},{"import": 666,"src": 89,"name": "componentMax","kind": "const","type": 20,"value": 122},{"import": 666,"src": 37,"name": "scale","kind": "const","type": 22,"value": 37},{"import": 666,"src": 32,"name": "add","kind": "const","type": 20,"value": 32},{"import": 666,"src": 34,"name": "sub","kind": "const","type": 20,"value": 34},{"import": 666,"src": 40,"name": "length","kind": "const","type": 24,"value": 40},{"import": 666,"src": 91,"name": "componentMin","kind": "const","type": 20,"value": 124},{"import": 666,"src": 892,"name": "unitX","kind": "const","type": 643,"value": null},{"import": 666,"src": 31,"name": "new","kind": "const","type": 3,"value": 31},{"import": 666,"src": 893,"name": "format","kind": "const","type": 1096,"value": 789},{"import": 666,"src": 90,"name": "transform","kind": "const","type": 92,"value": 123},{"import": 666,"src": 894,"name": "zero","kind": "const","type": 643,"value": null},{"import": 666,"src": 895,"name": "unitY","kind": "const","type": 643,"value": null},{"import": 666,"src": 896,"name": "Self","kind": "const","type": 546,"value": 643},{"import": 666,"src": 211,"name": "getField","kind": "const","type": 1097,"value": 790},{"import": 644,"src": 400,"name": "AnymapData","kind": "const","type": 604,"value": 762},{"import": 644,"src": 16,"name": "load","kind": "const","type": 7,"value": 16},{"import": 644,"src": 897,"name": "Format","kind": "const","type": 546,"value": 1098},{"import": 644,"src": 898,"name": "Color","kind": "const","type": 546,"value": 654},{"import": 644,"src": 899,"name": "Anymap","kind": "const","type": 546,"value": 1099},{"import": 644,"src": 900,"name": "Header","kind": "const","type": 546,"value": 1100},{"import": 644,"src": 15,"name": "loadBinaryBitmap","kind": "const","type": 6,"value": 15},{"import": 644,"src": 17,"name": "readLinearizedValue","kind": "const","type": 8,"value": 17},{"import": 644,"src": 18,"name": "isWhitespace","kind": "const","type": 9,"value": 18},{"import": 644,"src": 901,"name": "std","kind": "const","type": 546,"value": 669},{"import": 644,"src": 19,"name": "readNextByte","kind": "const","type": 10,"value": 19},{"import": 644,"src": 20,"name": "loadAsciiGraymap","kind": "const","type": 11,"value": 20},{"import": 644,"src": 21,"name": "loadAsciiBitmap","kind": "const","type": 12,"value": 21},{"import": 644,"src": 22,"name": "loadBinaryGraymap","kind": "const","type": 13,"value": 22},{"import": 644,"src": 23,"name": "parseHeader","kind": "const","type": 14,"value": 23},{"import": 644,"src": 24,"name": "loadBinaryRgbmap","kind": "const","type": 15,"value": 24},{"import": 644,"src": 25,"name": "parseNumber","kind": "const","type": 16,"value": 25},{"import": 644,"src": 26,"name": "loadAsciiRgbmap","kind": "const","type": 17,"value": 26},{"import": 1068,"src": 66,"name": "readByte"},{"import": 1068,"src": 79,"name": "readIntBig"},{"import": 1068,"src": 841,"name": "readStruct"},{"import": 1068,"src": 842,"name": "skipBytes"},{"import": 1068,"src": 67,"name": "read"},{"import": 1068,"src": 843,"name": "readAllAlloc"},{"import": 1068,"src": 844,"name": "readUntilDelimiterBuffer"},{"import": 1068,"src": 845,"name": "readIntForeign"},{"import": 1068,"src": 846,"name": "ReadFn","kind": "const","type": 546,"value": 1101},{"import": 1068,"src": 847,"name": "readIntNative"},{"import": 1068,"src": 61,"name": "readFull"},{"import": 1068,"src": 59,"name": "readNoEof"},{"import": 1068,"src": 143,"name": "readEnum"},{"import": 1068,"src": 188,"name": "readByteSigned"},{"import": 1068,"src": 291,"name": "readVarInt"},{"import": 1068,"src": 848,"name": "skipUntilDelimiterOrEof"},{"import": 1068,"src": 849,"name": "Error","kind": "const","type": 546,"value": 647},{"import": 1068,"src": 155,"name": "readIntLittle"},{"import": 1068,"src": 850,"name": "readUntilDelimiterOrEof"},{"import": 1068,"src": 851,"name": "readUntilDelimiterAlloc"},{"import": 1068,"src": 852,"name": "readAllBuffer"},{"import": 1068,"src": 144,"name": "readInt"},{"import": 1068,"src": 853,"name": "Self","kind": "const","type": 546,"value": 646},{"import": 1092,"src": 147,"name": "seekTo"},{"import": 1092,"src": 142,"name": "seekBy"},{"import": 1092,"src": 889,"name": "SeekError","kind": "const","type": 546,"value": 650},{"import": 1092,"src": 156,"name": "getPos"},{"import": 1092,"src": 890,"name": "GetSeekPosError","kind": "const","type": 546,"value": 651},{"import": 1092,"src": 146,"name": "getEndPos"},{"import": 1092,"src": 891,"name": "Self","kind": "const","type": 546,"value": 649},{"import": 644,"src": 854,"name": "deinit"},{"import": 644,"src": 74,"name": "set","kind": "const","type": 84,"value": 113},{"import": 644,"src": 855,"name": "get"},{"import": 644,"src": 856,"name": "Self","kind": "const","type": 546,"value": 653},{"import": 666,"src": 38,"name": "dot","kind": "const","type": 33,"value": 57},{"import": 666,"src": 35,"name": "mul","kind": "const","type": 30,"value": 54},{"import": 666,"src": 866,"name": "swizzle","kind": "const","type": 1104,"value": 791},{"import": 666,"src": 39,"name": "length2","kind": "const","type": 34,"value": 58},{"import": 666,"src": 36,"name": "div","kind": "const","type": 30,"value": 55},{"import": 666,"src": 92,"name": "normalize","kind": "const","type": 99,"value": 136},{"import": 666,"src": 89,"name": "componentMax","kind": "const","type": 30,"value": 134},{"import": 666,"src": 37,"name": "scale","kind": "const","type": 32,"value": 56},{"import": 666,"src": 32,"name": "add","kind": "const","type": 30,"value": 51},{"import": 666,"src": 34,"name": "sub","kind": "const","type": 30,"value": 53},{"import": 666,"src": 40,"name": "length","kind": "const","type": 34,"value": 59},{"import": 666,"src": 91,"name": "componentMin","kind": "const","type": 30,"value": 135},{"import": 666,"src": 902,"name": "unitX","kind": "const","type": 656,"value": null},{"import": 666,"src": 30,"name": "new","kind": "const","type": 2,"value": 30},{"import": 666,"src": 903,"name": "format","kind": "const","type": 1105,"value": 792},{"import": 666,"src": 48,"name": "transform","kind": "const","type": 40,"value": 67},{"import": 666,"src": 904,"name": "zero","kind": "const","type": 656,"value": null},{"import": 666,"src": 905,"name": "unitZ","kind": "const","type": 656,"value": null},{"import": 666,"src": 906,"name": "unitW","kind": "const","type": 656,"value": null},{"import": 666,"src": 907,"name": "unitY","kind": "const","type": 656,"value": null},{"import": 666,"src": 908,"name": "Self","kind": "const","type": 546,"value": 656},{"import": 666,"src": 105,"name": "getField","kind": "const","type": 1106,"value": 793},{"import": 1062,"src": 825,"name": "append"},{"import": 1062,"src": 826,"name": "createNode"},{"import": 1062,"src": 827,"name": "Node","kind": "const","type": 546,"value": 1045},{"import": 1062,"src": 828,"name": "destroyNode"},{"import": 1062,"src": 829,"name": "prepend"},{"import": 1062,"src": 830,"name": "pop"},{"import": 1062,"src": 831,"name": "insertAfter"},{"import": 1062,"src": 832,"name": "init"},{"import": 1062,"src": 833,"name": "insertBefore"},{"import": 1062,"src": 834,"name": "concatByMoving"},{"import": 1062,"src": 835,"name": "remove"},{"import": 1062,"src": 836,"name": "popFirst"},{"import": 1062,"src": 837,"name": "allocateNode"},{"import": 1062,"src": 838,"name": "Self"},{"import": 659,"src": 909,"name": "toRadians","kind": "const","type": 1107,"value": 794},{"import": 659,"src": 910,"name": "toDegrees","kind": "const","type": 1108,"value": 795},{"import": 659,"src": 911,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1109,"src": 912,"name": "Struct","kind": "const","type": 546,"value": 1110},{"import": 1109,"src": 913,"name": "Array","kind": "const","type": 546,"value": 1111},{"import": 1109,"src": 914,"name": "ErrorUnion","kind": "const","type": 546,"value": 1112},{"import": 1109,"src": 915,"name": "Pointer","kind": "const","type": 546,"value": 1113},{"import": 1109,"src": 916,"name": "EnumField","kind": "const","type": 546,"value": 1114},{"import": 1109,"src": 917,"name": "ContainerLayout","kind": "const","type": 546,"value": 1115},{"import": 1109,"src": 918,"name": "Declaration","kind": "const","type": 546,"value": 1116},{"import": 1109,"src": 919,"name": "Union","kind": "const","type": 546,"value": 1117},{"import": 1109,"src": 920,"name": "ErrorSet","kind": "const","type": 546,"value": 1118},{"import": 1109,"src": 921,"name": "Optional","kind": "const","type": 546,"value": 1119},{"import": 1109,"src": 922,"name": "Enum","kind": "const","type": 546,"value": 1120},{"import": 1109,"src": 923,"name": "Vector","kind": "const","type": 546,"value": 1121},{"import": 1109,"src": 924,"name": "Float","kind": "const","type": 546,"value": 1122},{"import": 1109,"src": 925,"name": "UnionField","kind": "const","type": 546,"value": 1123},{"import": 1109,"src": 926,"name": "StructField","kind": "const","type": 546,"value": 1124},{"import": 1109,"src": 927,"name": "AnyFrame","kind": "const","type": 546,"value": 1125},{"import": 1109,"src": 928,"name": "Error","kind": "const","type": 546,"value": 1126},{"import": 1109,"src": 929,"name": "Fn","kind": "const","type": 546,"value": 1127},{"import": 1109,"src": 930,"name": "FnArg","kind": "const","type": 546,"value": 1128},{"import": 1109,"src": 931,"name": "Int","kind": "const","type": 546,"value": 1129},{"import": 665,"src": 932,"name": "Color","kind": "const","type": 546,"value": 1130},{"import": 665,"src": 933,"name": "std","kind": "const","type": 546,"value": 669},{"import": 666,"src": 934,"name": "Vec3","kind": "const","type": 546,"value": 622},{"import": 666,"src": 1,"name": "vec3","kind": "const","type": 1,"value": 1},{"import": 666,"src": 935,"name": "Vec4","kind": "const","type": 546,"value": 656},{"import": 666,"src": 2,"name": "vec4","kind": "const","type": 2,"value": 2},{"import": 666,"src": 936,"name": "Mat3","kind": "const","type": 546,"value": 739},{"import": 666,"src": 937,"name": "Mat4","kind": "const","type": 546,"value": 693},{"import": 666,"src": 938,"name": "Vec2","kind": "const","type": 546,"value": 643},{"import": 666,"src": 3,"name": "vec2","kind": "const","type": 3,"value": 3},{"import": 666,"src": 939,"name": "Mat2","kind": "const","type": 546,"value": 738},{"import": 666,"src": 405,"name": "VectorMixin","kind": "const","type": 620,"value": 768},{"import": 666,"src": 940,"name": "SwizzleTypeByElements","kind": "const","type": 1131,"value": 796},{"import": 666,"src": 941,"name": "std","kind": "const","type": 546,"value": 669},{"import": 666,"src": 942,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1109,"src": 0,"name": "default_panic","kind": "const","type": 0,"value": 0},{"import": 1109,"src": 943,"name": "OutputMode","kind": "const","type": 546,"value": 1132},{"import": 668,"src": 944,"name": "mode","kind": "const","type": 1133,"value": null},{"import": 668,"src": 945,"name": "os","kind": "const","type": 648,"value": null},{"import": 668,"src": 946,"name": "abi","kind": "const","type": 1049,"value": null},{"import": 1109,"src": 947,"name": "StackTrace","kind": "const","type": 546,"value": 736},{"import": 668,"src": 948,"name": "output_mode","kind": "const","type": 1132,"value": null},{"import": 1109,"src": 949,"name": "CallingConvention","kind": "const","type": 546,"value": 1134},{"import": 668,"src": 950,"name": "glibc_version"},{"import": 1109,"src": 951,"name": "CallOptions","kind": "const","type": 546,"value": 1135},{"import": 1109,"src": 952,"name": "Mode","kind": "const","type": 546,"value": 1133},{"import": 1109,"src": 953,"name": "TestFn","kind": "const","type": 546,"value": 1136},{"import": 1109,"src": 954,"name": "Os","kind": "const","type": 546,"value": 648},{"import": 1109,"src": 955,"name": "Version"},{"import": 1109,"src": 956,"name": "Abi","kind": "const","type": 546,"value": 1049},{"import": 1109,"src": 957,"name": "GlobalLinkage","kind": "const","type": 546,"value": 1137},{"import": 668,"src": 958,"name": "have_error_return_tracing"},{"import": 1109,"src": 959,"name": "TypeInfo","kind": "const","type": 546,"value": 1138},{"import": 668,"src": 960,"name": "test_functions","kind": "var","type": 1139,"value": null},{"import": 668,"src": 961,"name": "position_independent_code"},{"import": 1109,"src": 962,"name": "AtomicRmwOp","kind": "const","type": 546,"value": 1140},{"import": 668,"src": 963,"name": "link_libc","kind": "const","type": 565,"value": null},{"import": 1109,"src": 964,"name": "LinkMode"},{"import": 668,"src": 965,"name": "object_format"},{"import": 668,"src": 966,"name": "arch","kind": "const","type": 1141,"value": null},{"import": 668,"src": 967,"name": "endian","kind": "const","type": 781,"value": null},{"import": 1109,"src": 968,"name": "FloatMode"},{"import": 1109,"src": 969,"name": "TypeId","kind": "const","type": 546,"value": 664},{"import": 1109,"src": 970,"name": "AtomicOrder","kind": "const","type": 546,"value": 1142},{"import": 1109,"src": 971,"name": "ObjectFormat"},{"import": 668,"src": 972,"name": "is_test","kind": "const","type": 565,"value": null},{"import": 1109,"src": 973,"name": "PanicFn","kind": "const","type": 546,"value": 0},{"import": 668,"src": 974,"name": "link_mode"},{"import": 1109,"src": 975,"name": "Arch","kind": "const","type": 546,"value": 931},{"import": 668,"src": 976,"name": "valgrind_support"},{"import": 1109,"src": 977,"name": "SubSystem"},{"import": 1109,"src": 978,"name": "subsystem"},{"import": 1109,"src": 979,"name": "Endian","kind": "const","type": 546,"value": 781},{"import": 1109,"src": 980,"name": "panic","kind": "const","type": 0,"value": 0},{"import": 668,"src": 981,"name": "strip_debug_info","kind": "const","type": 565,"value": null},{"import": 668,"src": 982,"name": "single_threaded","kind": "const","type": 565,"value": null},{"import": 669,"src": 983,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 669,"src": 984,"name": "DynLib"},{"import": 669,"src": 985,"name": "builtin","kind": "const","type": 546,"value": 1109},{"import": 669,"src": 986,"name": "SinglyLinkedList","kind": "const","type": 630,"value": 771},{"import": 669,"src": 987,"name": "PackedIntArrayEndian"},{"import": 669,"src": 988,"name": "PackedIntArray"},{"import": 669,"src": 989,"name": "math","kind": "const","type": 546,"value": 1144},{"import": 669,"src": 990,"name": "Thread","kind": "const","type": 546,"value": 1145},{"import": 669,"src": 991,"name": "BufSet"},{"import": 669,"src": 992,"name": "fifo"},{"import": 669,"src": 993,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 669,"src": 994,"name": "debug","kind": "const","type": 546,"value": 1147},{"import": 669,"src": 995,"name": "Buffer"},{"import": 669,"src": 996,"name": "dwarf","kind": "const","type": 546,"value": 1148},{"import": 669,"src": 997,"name": "testing"},{"import": 669,"src": 998,"name": "BufferOutStream"},{"import": 669,"src": 999,"name": "event","kind": "const","type": 546,"value": 1149},{"import": 669,"src": 1000,"name": "unicode"},{"import": 669,"src": 1001,"name": "build"},{"import": 669,"src": 1002,"name": "AlignedArrayList"},{"import": 669,"src": 1003,"name": "http"},{"import": 669,"src": 1004,"name": "elf","kind": "const","type": 546,"value": 1150},{"import": 669,"src": 1005,"name": "SegmentedList"},{"import": 669,"src": 1006,"name": "ascii"},{"import": 669,"src": 1007,"name": "io","kind": "const","type": 546,"value": 1151},{"import": 669,"src": 1008,"name": "ChildProcess"},{"import": 669,"src": 1009,"name": "hash_map","kind": "const","type": 546,"value": 1051},{"import": 669,"src": 1010,"name": "fmt","kind": "const","type": 546,"value": 1152},{"import": 669,"src": 1011,"name": "base64"},{"import": 669,"src": 1012,"name": "atomic","kind": "const","type": 546,"value": 1153},{"import": 669,"src": 1013,"name": "TailQueue","kind": "const","type": 580,"value": 755},{"import": 669,"src": 1014,"name": "json"},{"import": 669,"src": 1015,"name": "ResetEvent","kind": "const","type": 546,"value": 983},{"import": 669,"src": 1016,"name": "lazyInit"},{"import": 669,"src": 1017,"name": "pdb","kind": "const","type": 546,"value": 1154},{"import": 669,"src": 1018,"name": "BufMap"},{"import": 669,"src": 1019,"name": "coff","kind": "const","type": 546,"value": 1155},{"import": 669,"src": 1020,"name": "crypto"},{"import": 669,"src": 1021,"name": "hash","kind": "const","type": 546,"value": 1156},{"import": 669,"src": 1022,"name": "sort"},{"import": 669,"src": 1023,"name": "c"},{"import": 669,"src": 1024,"name": "cstr"},{"import": 669,"src": 1025,"name": "rb"},{"import": 669,"src": 1026,"name": "rand"},{"import": 669,"src": 1027,"name": "meta","kind": "const","type": 546,"value": 1157},{"import": 669,"src": 1028,"name": "net"},{"import": 669,"src": 1029,"name": "fs","kind": "const","type": 546,"value": 1158},{"import": 669,"src": 1030,"name": "heap","kind": "const","type": 546,"value": 1159},{"import": 669,"src": 1031,"name": "start","kind": "const","type": 546,"value": 1160},{"import": 669,"src": 1032,"name": "AutoHashMap"},{"import": 669,"src": 1033,"name": "Mutex","kind": "const","type": 546,"value": 919},{"import": 669,"src": 1034,"name": "PriorityQueue"},{"import": 669,"src": 1035,"name": "time","kind": "const","type": 546,"value": 1161},{"import": 669,"src": 1036,"name": "Progress","kind": "const","type": 546,"value": 1162},{"import": 669,"src": 1037,"name": "Target","kind": "const","type": 546,"value": 566},{"import": 669,"src": 1038,"name": "packed_int_array"},{"import": 669,"src": 1039,"name": "valgrind"},{"import": 669,"src": 1040,"name": "PackedIntSliceEndian"},{"import": 669,"src": 1041,"name": "HashMap","kind": "const","type": 567,"value": 752},{"import": 669,"src": 1042,"name": "zig"},{"import": 669,"src": 1043,"name": "ArrayList","kind": "const","type": 556,"value": 749},{"import": 669,"src": 1044,"name": "SpinLock","kind": "const","type": 546,"value": 1163},{"import": 669,"src": 1045,"name": "PackedIntSlice"},{"import": 669,"src": 1046,"name": "process","kind": "const","type": 546,"value": 1164},{"import": 669,"src": 1047,"name": "macho","kind": "const","type": 546,"value": 1165},{"import": 669,"src": 1048,"name": "BloomFilter"},{"import": 669,"src": 1049,"name": "StringHashMap"},{"import": 670,"src": 312,"name": "main","kind": "const","type": 5,"value": 540},{"import": 670,"src": 1050,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 670,"src": 1051,"name": "io"},{"import": 670,"src": 1052,"name": "std","kind": "const","type": 546,"value": 669},{"import": 666,"src": 47,"name": "transpose","kind": "const","type": 39,"value": 66},{"import": 666,"src": 46,"name": "mul","kind": "const","type": 37,"value": 64},{"import": 666,"src": 97,"name": "createAngleAxis","kind": "const","type": 100,"value": 137},{"import": 666,"src": 1053,"name": "zero","kind": "const","type": 693,"value": null},{"import": 666,"src": 98,"name": "createTranslation","kind": "const","type": 101,"value": 138},{"import": 666,"src": 99,"name": "createScale","kind": "const","type": 102,"value": 139},{"import": 666,"src": 100,"name": "createLookAt","kind": "const","type": 103,"value": 140},{"import": 666,"src": 101,"name": "createPerspective","kind": "const","type": 104,"value": 141},{"import": 666,"src": 102,"name": "createLook","kind": "const","type": 103,"value": 142},{"import": 666,"src": 1054,"name": "format","kind": "const","type": 1180,"value": 797},{"import": 666,"src": 1055,"name": "Self","kind": "const","type": 546,"value": 693},{"import": 666,"src": 103,"name": "createTranslationXYZ","kind": "const","type": 105,"value": 143},{"import": 666,"src": 104,"name": "createOrthogonal","kind": "const","type": 106,"value": 144},{"import": 666,"src": 1056,"name": "identity","kind": "const","type": 693,"value": null},{"import": 1158,"src": 1057,"name": "openDirC"},{"import": 1158,"src": 1058,"name": "createFileC"},{"import": 1158,"src": 1059,"name": "readLink"},{"import": 1158,"src": 1060,"name": "OpenError"},{"import": 1158,"src": 1061,"name": "deleteDirW"},{"import": 1158,"src": 1062,"name": "DeleteDirError"},{"import": 1158,"src": 1063,"name": "openReadW"},{"import": 1158,"src": 1064,"name": "createFile"},{"import": 1158,"src": 1065,"name": "openReadC"},{"import": 1158,"src": 1066,"name": "close"},{"import": 1158,"src": 1067,"name": "openDirTraverseW"},{"import": 1158,"src": 1068,"name": "createFileW"},{"import": 1158,"src": 1069,"name": "openFileW"},{"import": 1158,"src": 1070,"name": "deleteDir"},{"import": 1158,"src": 1071,"name": "Entry"},{"import": 1158,"src": 1072,"name": "iterate"},{"import": 1158,"src": 1073,"name": "openDirListW"},{"import": 1158,"src": 1074,"name": "openDirListC"},{"import": 1158,"src": 1075,"name": "openC"},{"import": 1158,"src": 1076,"name": "openDirTraverseC"},{"import": 1158,"src": 1077,"name": "openDirList"},{"import": 1158,"src": 218,"name": "openFileC","kind": "const","type": 306,"value": 369},{"import": 1158,"src": 1078,"name": "deleteTree"},{"import": 1158,"src": 1079,"name": "open"},{"import": 1158,"src": 1080,"name": "openFileWindows"},{"import": 1158,"src": 1081,"name": "openDir"},{"import": 1158,"src": 1082,"name": "deleteFileW"},{"import": 1158,"src": 1083,"name": "openDirTraverse"},{"import": 1158,"src": 1084,"name": "readFileAlloc"},{"import": 1158,"src": 50,"name": "openRead","kind": "const","type": 42,"value": 69},{"import": 1158,"src": 1085,"name": "writeFile"},{"import": 1158,"src": 1086,"name": "deleteFile"},{"import": 1158,"src": 106,"name": "openFile","kind": "const","type": 108,"value": 150},{"import": 1158,"src": 1087,"name": "Iterator"},{"import": 1158,"src": 1088,"name": "DeleteTreeError"},{"import": 1158,"src": 1089,"name": "deleteDirC"},{"import": 1158,"src": 1090,"name": "DeleteFileError"},{"import": 1158,"src": 1091,"name": "readFileAllocAligned"},{"import": 1158,"src": 1092,"name": "deleteFileC"},{"import": 1158,"src": 1093,"name": "readLinkC"},{"import": 1158,"src": 1094,"name": "openDirFlagsC"},{"import": 1158,"src": 1095,"name": "IteratorError"},{"import": 1158,"src": 1096,"name": "openDirAccessMaskW"},{"import": 1159,"src": 52,"name": "init","kind": "const","type": 44,"value": 71},{"import": 1159,"src": 57,"name": "shrink","kind": "const","type": 48,"value": 76},{"import": 1159,"src": 53,"name": "realloc","kind": "const","type": 45,"value": 72},{"import": 1159,"src": 54,"name": "alloc","kind": "const","type": 46,"value": 73},{"import": 1186,"src": 1097,"name": "Error","kind": "const","type": 546,"value": 585},{"import": 1186,"src": 1098,"name": "Stream","kind": "const","type": 546,"value": 584},{"import": 1186,"src": 108,"name": "readFn","kind": "const","type": 52,"value": 152},{"import": 1186,"src": 126,"name": "outStream","kind": "const","type": 132,"value": 183},{"import": 1186,"src": 1099,"name": "CreateFlags"},{"import": 1186,"src": 1100,"name": "seekableStream"},{"import": 1186,"src": 1101,"name": "OpenError","kind": "const","type": 546,"value": 1181},{"import": 1186,"src": 136,"name": "getEndPos","kind": "const","type": 142,"value": 193},{"import": 1186,"src": 1102,"name": "mode"},{"import": 1186,"src": 260,"name": "isTty","kind": "const","type": 352,"value": 433},{"import": 1186,"src": 242,"name": "stat","kind": "const","type": 325,"value": 396},{"import": 1186,"src": 1103,"name": "openReadW"},{"import": 1186,"src": 1104,"name": "openReadC"},{"import": 1186,"src": 73,"name": "close","kind": "const","type": 74,"value": 103},{"import": 1186,"src": 1105,"name": "openWriteNoClobber"},{"import": 1186,"src": 228,"name": "openHandle","kind": "const","type": 315,"value": 382},{"import": 1186,"src": 1106,"name": "openWrite"},{"import": 1186,"src": 366,"name": "seekTo","kind": "const","type": 526,"value": 719},{"import": 1186,"src": 1107,"name": "Mode","kind": "const","type": 546,"value": 770},{"import": 1186,"src": 1108,"name": "UpdateTimesError"},{"import": 1186,"src": 1109,"name": "Stat","kind": "const","type": 546,"value": 1187},{"import": 1186,"src": 1110,"name": "InStream","kind": "const","type": 546,"value": 702},{"import": 1186,"src": 1111,"name": "OpenFlags","kind": "const","type": 546,"value": 741},{"import": 1186,"src": 200,"name": "read","kind": "const","type": 286,"value": 339},{"import": 1186,"src": 71,"name": "seekFromEnd","kind": "const","type": 69,"value": 98},{"import": 1186,"src": 1112,"name": "seekBy"},{"import": 1186,"src": 1113,"name": "ReadError","kind": "const","type": 546,"value": 585},{"import": 1186,"src": 1114,"name": "ModeError"},{"import": 1186,"src": 1115,"name": "SeekError","kind": "const","type": 546,"value": 1188},{"import": 1186,"src": 1116,"name": "getPos"},{"import": 1186,"src": 1117,"name": "writev_iovec"},{"import": 1186,"src": 1118,"name": "default_mode"},{"import": 1186,"src": 1119,"name": "openWriteModeW"},{"import": 1186,"src": 276,"name": "write","kind": "const","type": 373,"value": 466},{"import": 1186,"src": 58,"name": "inStream","kind": "const","type": 49,"value": 77},{"import": 1186,"src": 1120,"name": "OutStream","kind": "const","type": 546,"value": 760},{"import": 1186,"src": 1121,"name": "openWriteModeC"},{"import": 1186,"src": 1122,"name": "openWriteMode"},{"import": 1186,"src": 1123,"name": "openWriteNoClobberW"},{"import": 1186,"src": 1124,"name": "GetPosError","kind": "const","type": 546,"value": 1189},{"import": 1186,"src": 1125,"name": "StatError","kind": "const","type": 546,"value": 1190},{"import": 1186,"src": 325,"name": "supportsAnsiEscapeCodes","kind": "const","type": 352,"value": 579},{"import": 1186,"src": 75,"name": "openRead","kind": "const","type": 76,"value": 105},{"import": 1186,"src": 1126,"name": "SeekableStream"},{"import": 1186,"src": 1127,"name": "WriteError","kind": "const","type": 546,"value": 613},{"import": 1186,"src": 1128,"name": "access"},{"import": 1186,"src": 1129,"name": "updateTimes"},{"import": 1186,"src": 1130,"name": "accessW"},{"import": 1186,"src": 1131,"name": "accessC"},{"import": 1186,"src": 1132,"name": "openWriteNoClobberC"},{"import": 1041,"src": 1133,"name": "Run","kind": "const","type": 546,"value": 1194},{"import": 1041,"src": 69,"name": "finish","kind": "const","type": 59,"value": 88},{"import": 1041,"src": 64,"name": "init","kind": "const","type": 55,"value": 83},{"import": 1041,"src": 65,"name": "readByte","kind": "const","type": 56,"value": 84},{"import": 666,"src": 1134,"name": "identity"},{"import": 666,"src": 1135,"name": "identity"},{"import": 1186,"src": 1136,"name": "Error","kind": "const","type": 546,"value": 613},{"import": 1186,"src": 1137,"name": "Stream","kind": "const","type": 546,"value": 612},{"import": 1186,"src": 230,"name": "writeFn","kind": "const","type": 288,"value": 384},{"import": 1092,"src": 1138,"name": "Stream","kind": "const","type": 546,"value": 591},{"import": 1092,"src": 1139,"name": "SeekableInStream","kind": "const","type": 546,"value": 649},{"import": 1092,"src": 1140,"name": "GetSeekPosError","kind": "const","type": 546,"value": 651},{"import": 1092,"src": 1141,"name": "Error","kind": "const","type": 546,"value": 592},{"import": 1092,"src": 138,"name": "init","kind": "const","type": 145,"value": 196},{"import": 1092,"src": 1142,"name": "SeekError","kind": "const","type": 546,"value": 650},{"import": 1092,"src": 247,"name": "getEndPosFn","kind": "const","type": 330,"value": 401},{"import": 1092,"src": 245,"name": "seekToFn","kind": "const","type": 328,"value": 399},{"import": 1092,"src": 246,"name": "seekByFn","kind": "const","type": 329,"value": 400},{"import": 1092,"src": 244,"name": "readFn","kind": "const","type": 327,"value": 398},{"import": 1092,"src": 1143,"name": "Self","kind": "const","type": 546,"value": 771},{"import": 1092,"src": 248,"name": "getPosFn","kind": "const","type": 330,"value": 402},{"import": 1147,"src": 184,"name": "printSourceAtAddress","kind": "const","type": 1257,"value": 798},{"import": 1147,"src": 1144,"name": "Section","kind": "const","type": 546,"value": 1258},{"import": 1147,"src": 161,"name": "allocator","kind": "const","type": 183,"value": 236},{"import": 1147,"src": 189,"name": "readString","kind": "const","type": 254,"value": 307},{"import": 1147,"src": 175,"name": "getString","kind": "const","type": 214,"value": 267},{"import": 1147,"src": 153,"name": "scanAllFunctions","kind": "const","type": 173,"value": 225},{"import": 1147,"src": 185,"name": "findCompileUnit","kind": "const","type": 238,"value": 291},{"import": 1147,"src": 157,"name": "getAbbrevTable","kind": "const","type": 178,"value": 231},{"import": 1147,"src": 197,"name": "getSymbolName","kind": "const","type": 282,"value": 335},{"import": 1147,"src": 160,"name": "parseAbbrevTable","kind": "const","type": 181,"value": 234},{"import": 1147,"src": 179,"name": "scanAllCompileUnits","kind": "const","type": 224,"value": 277},{"import": 1147,"src": 168,"name": "parseDie","kind": "const","type": 203,"value": 256},{"import": 1147,"src": 187,"name": "getLineNumberInfo","kind": "const","type": 245,"value": 298},{"import": 1147,"src": 192,"name": "checkLineMatch","kind": "const","type": 275,"value": 328},{"import": 1147,"src": 191,"name": "init","kind": "const","type": 265,"value": 318},{"import": 1147,"src": 203,"name": "deinit","kind": "const","type": 290,"value": 343},{"import": 1147,"src": 205,"name": "init","kind": "const","type": 296,"value": 349},{"import": 1147,"src": 206,"name": "next","kind": "const","type": 297,"value": 350},{"import": 1147,"src": 1145,"name": "fp_adjust_factor","kind": "const","type": 599,"value": null},{"import": 1322,"src": 1146,"name": "deinit"},{"import": 1322,"src": 208,"name": "acquire","kind": "const","type": 300,"value": 353},{"import": 1322,"src": 207,"name": "init","kind": "const","type": 299,"value": 352},{"import": 1322,"src": 262,"name": "tryAcquire","kind": "const","type": 365,"value": 450},{"import": 1322,"src": 1147,"name": "Held","kind": "const","type": 546,"value": 920},{"import": 1322,"src": 1148,"name": "QUEUE_LOCK","kind": "const","type": 609,"value": null},{"import": 1322,"src": 264,"name": "releaseSlow","kind": "const","type": 366,"value": 453},{"import": 1322,"src": 1149,"name": "QUEUE_MASK","kind": "const","type": 609,"value": null},{"import": 1322,"src": 1150,"name": "Node","kind": "const","type": 546,"value": 1323},{"import": 1322,"src": 1151,"name": "MUTEX_LOCK","kind": "const","type": 609,"value": null},{"import": 1322,"src": 263,"name": "acquireSlow","kind": "const","type": 366,"value": 451},{"import": 1322,"src": 1152,"name": "SPIN_COUNT","kind": "const","type": 599,"value": null},{"import": 1322,"src": 209,"name": "release","kind": "const","type": 302,"value": 355},{"import": 1159,"src": 235,"name": "init","kind": "const","type": 320,"value": 389},{"import": 1159,"src": 1153,"name": "deinit"},{"import": 1159,"src": 283,"name": "shrink","kind": "const","type": 48,"value": 474},{"import": 1159,"src": 281,"name": "createNode","kind": "const","type": 377,"value": 471},{"import": 1159,"src": 279,"name": "realloc","kind": "const","type": 375,"value": 469},{"import": 1159,"src": 280,"name": "alloc","kind": "const","type": 376,"value": 470},{"import": 1159,"src": 1154,"name": "BufNode","kind": "const","type": 546,"value": 1086},{"import": 1048,"src": 1155,"name": "Arm32","kind": "const","type": 546,"value": 1329},{"import": 1048,"src": 1156,"name": "endian"},{"import": 1048,"src": 1157,"name": "Arm64","kind": "const","type": 546,"value": 1330},{"import": 1048,"src": 1158,"name": "toElfMachine"},{"import": 1048,"src": 1159,"name": "Kalimba","kind": "const","type": 546,"value": 1331},{"import": 1048,"src": 1160,"name": "Mips"},{"import": 1159,"src": 1161,"name": "reset"},{"import": 1159,"src": 258,"name": "init","kind": "const","type": 350,"value": 431},{"import": 1159,"src": 295,"name": "shrink","kind": "const","type": 48,"value": 504},{"import": 1159,"src": 293,"name": "realloc","kind": "const","type": 403,"value": 502},{"import": 1159,"src": 294,"name": "alloc","kind": "const","type": 404,"value": 503},{"import": 1353,"src": 288,"name": "mtime","kind": "const","type": 383,"value": 479},{"import": 1353,"src": 289,"name": "ctime","kind": "const","type": 383,"value": 480},{"import": 1353,"src": 287,"name": "atime","kind": "const","type": 383,"value": 478},{"import": 1363,"src": 1162,"name": "reset"},{"import": 1363,"src": 303,"name": "wait","kind": "const","type": 417,"value": 530},{"import": 1363,"src": 1163,"name": "timedWait"},{"import": 1363,"src": 301,"name": "init","kind": "const","type": 416,"value": 528},{"import": 1363,"src": 1164,"name": "isSet"},{"import": 1363,"src": 305,"name": "set","kind": "const","type": 417,"value": 532},{"import": 1363,"src": 1165,"name": "OsEvent","kind": "const","type": 546,"value": 990},{"import": 1363,"src": 302,"name": "deinit","kind": "const","type": 417,"value": 529},{"import": 1363,"src": 1166,"name": "Futex","kind": "const","type": 546,"value": 1367},{"import": 1363,"src": 1167,"name": "WAIT","kind": "const","type": 599,"value": null},{"import": 1363,"src": 1168,"name": "reset"},{"import": 1363,"src": 320,"name": "wait","kind": "const","type": 431,"value": 571},{"import": 1363,"src": 1169,"name": "SpinFutex"},{"import": 1363,"src": 321,"name": "set","kind": "const","type": 430,"value": 572},{"import": 1363,"src": 319,"name": "deinit","kind": "const","type": 430,"value": 570},{"import": 1363,"src": 1170,"name": "WAKE","kind": "const","type": 599,"value": null},{"import": 1363,"src": 1171,"name": "LinuxFutex","kind": "const","type": 546,"value": 1367},{"import": 1363,"src": 1172,"name": "isSet"},{"import": 1363,"src": 318,"name": "init","kind": "const","type": 429,"value": 569},{"import": 1363,"src": 1173,"name": "WindowsFutex"},{"import": 1372,"src": 328,"name": "activate","kind": "const","type": 439,"value": 582},{"import": 1372,"src": 346,"name": "completeOne","kind": "const","type": 439,"value": 626},{"import": 1372,"src": 330,"name": "end","kind": "const","type": 439,"value": 585},{"import": 1372,"src": 327,"name": "start","kind": "const","type": 438,"value": 581},{"import": 1381,"src": 1174,"name": "hash"},{"import": 1381,"src": 369,"name": "init","kind": "const","type": 530,"value": 723},{"import": 1381,"src": 375,"name": "update","kind": "const","type": 535,"value": 729},{"import": 1381,"src": 371,"name": "final","kind": "const","type": 532,"value": 725},{"import": 1381,"src": 1175,"name": "hash"},{"import": 1381,"src": 372,"name": "init","kind": "const","type": 533,"value": 726},{"import": 1381,"src": 381,"name": "update","kind": "const","type": 540,"value": 738},{"import": 1381,"src": 374,"name": "final","kind": "const","type": 534,"value": 728},{"import": 1381,"src": 384,"name": "round","kind": "const","type": 540,"value": 743},{"import": 1040,"src": 388,"name": "ArrayList","kind": "const","type": 556,"value": 749},{"import": 1040,"src": 385,"name": "AlignedArrayList","kind": "const","type": 545,"value": 746},{"import": 1040,"src": 1176,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1040,"src": 1177,"name": "Allocator","kind": "const","type": 546,"value": 1169},{"import": 1040,"src": 1178,"name": "Item"},{"import": 1040,"src": 1179,"name": "debug","kind": "const","type": 546,"value": 1147},{"import": 1040,"src": 1180,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1040,"src": 1181,"name": "testing"},{"import": 1040,"src": 1182,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1041,"src": 1183,"name": "Header","kind": "const","type": 546,"value": 554},{"import": 1041,"src": 1184,"name": "Format","kind": "const","type": 546,"value": 1383},{"import": 1041,"src": 51,"name": "load","kind": "const","type": 43,"value": 70},{"import": 1041,"src": 1185,"name": "Image","kind": "const","type": 546,"value": 1183},{"import": 1041,"src": 1186,"name": "RGB","kind": "const","type": 546,"value": 641},{"import": 1041,"src": 1187,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1041,"src": 392,"name": "SubImage","kind": "const","type": 574,"value": 754},{"import": 1041,"src": 1188,"name": "RLEDecoder","kind": "const","type": 546,"value": 708},{"import": 1044,"src": 389,"name": "Queue","kind": "const","type": 559,"value": 750},{"import": 1044,"src": 1189,"name": "builtin"},{"import": 1044,"src": 1190,"name": "put_thread_count"},{"import": 1044,"src": 1191,"name": "AtomicRmwOp"},{"import": 1044,"src": 1192,"name": "puts_per_thread"},{"import": 1044,"src": 1193,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1044,"src": 1194,"name": "startPuts"},{"import": 1044,"src": 1195,"name": "AtomicOrder"},{"import": 1044,"src": 1196,"name": "expect"},{"import": 1044,"src": 1197,"name": "assert"},{"import": 1044,"src": 1198,"name": "Context"},{"import": 1044,"src": 1199,"name": "startGets"},{"import": 1062,"src": 1200,"name": "init"},{"import": 1048,"src": 1201,"name": "Target","kind": "const","type": 546,"value": 566},{"import": 1048,"src": 1202,"name": "builtin","kind": "const","type": 546,"value": 1109},{"import": 1048,"src": 1203,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1048,"src": 1204,"name": "mem"},{"import": 1051,"src": 1205,"name": "getAutoEqlFn"},{"import": 1051,"src": 1206,"name": "hashString"},{"import": 1051,"src": 398,"name": "getTrivialEqlFn","kind": "const","type": 600,"value": 760},{"import": 1051,"src": 1207,"name": "getAutoHashStratFn"},{"import": 1051,"src": 1208,"name": "AutoHashMap"},{"import": 1051,"src": 365,"name": "getAutoHashFn","kind": "const","type": 1385,"value": 799},{"import": 1051,"src": 391,"name": "HashMap","kind": "const","type": 567,"value": 752},{"import": 1051,"src": 1209,"name": "eqlString"},{"import": 1051,"src": 395,"name": "getHashPtrAddrFn","kind": "const","type": 590,"value": 757},{"import": 1051,"src": 1210,"name": "StringHashMap"},{"import": 1051,"src": 1211,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1051,"src": 1212,"name": "Wyhash","kind": "const","type": 546,"value": 1035},{"import": 1051,"src": 1213,"name": "math"},{"import": 1051,"src": 1214,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1051,"src": 1215,"name": "debug"},{"import": 1051,"src": 1216,"name": "meta"},{"import": 1051,"src": 1217,"name": "testing"},{"import": 1051,"src": 1218,"name": "debug_u32","kind": "const","type": 546,"value": 770},{"import": 1051,"src": 1219,"name": "Allocator","kind": "const","type": 546,"value": 1169},{"import": 1051,"src": 1220,"name": "want_modification_safety","kind": "const","type": 565,"value": null},{"import": 1051,"src": 1221,"name": "autoHash","kind": "const","type": 1386,"value": 800},{"import": 1051,"src": 1222,"name": "assert"},{"import": 1051,"src": 1223,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1155,"src": 1224,"name": "Misc","kind": "const","type": 546,"value": 1388},{"import": 1062,"src": 408,"name": "SinglyLinkedList","kind": "const","type": 630,"value": 771},{"import": 1062,"src": 393,"name": "TailQueue","kind": "const","type": 580,"value": 755},{"import": 1062,"src": 1225,"name": "std"},{"import": 1062,"src": 1226,"name": "Allocator"},{"import": 1062,"src": 1227,"name": "debug"},{"import": 1062,"src": 1228,"name": "assert"},{"import": 1062,"src": 1229,"name": "testing"},{"import": 1062,"src": 1230,"name": "mem"},{"import": 1062,"src": 1200,"name": "init"},{"import": 1065,"src": 1231,"name": "preadvWindows"},{"import": 1065,"src": 1232,"name": "RequestNode","kind": "const","type": 546,"value": 1063},{"import": 1065,"src": 1233,"name": "PReadVError"},{"import": 1065,"src": 1234,"name": "openReadWrite"},{"import": 1065,"src": 1235,"name": "writeFileMode"},{"import": 1065,"src": 1236,"name": "pwriteWindows"},{"import": 1065,"src": 1237,"name": "preadv"},{"import": 1065,"src": 1238,"name": "preadWindows"},{"import": 1065,"src": 1239,"name": "pwritev"},{"import": 1065,"src": 1240,"name": "pwritevPosix"},{"import": 1065,"src": 1241,"name": "openWrite"},{"import": 1065,"src": 1242,"name": "WatchEventError"},{"import": 1065,"src": 1243,"name": "PWriteVError"},{"import": 1065,"src": 1244,"name": "InStream"},{"import": 1065,"src": 1245,"name": "Watch"},{"import": 1065,"src": 1246,"name": "openPosix"},{"import": 1065,"src": 1247,"name": "preadvPosix"},{"import": 1065,"src": 1248,"name": "Request","kind": "const","type": 546,"value": 582},{"import": 1065,"src": 1249,"name": "pwritevWindows"},{"import": 1065,"src": 1250,"name": "writevPosix"},{"import": 1065,"src": 1251,"name": "OutStream"},{"import": 1065,"src": 1252,"name": "CloseOperation","kind": "const","type": 546,"value": 1390},{"import": 1065,"src": 1253,"name": "openWriteMode"},{"import": 1065,"src": 1254,"name": "readFile"},{"import": 1065,"src": 1255,"name": "openRead"},{"import": 1065,"src": 1256,"name": "writeFile"},{"import": 1065,"src": 1257,"name": "WatchEventId"},{"import": 1065,"src": 1258,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1065,"src": 1259,"name": "Loop","kind": "const","type": 546,"value": 1391},{"import": 1065,"src": 1260,"name": "hashString"},{"import": 1065,"src": 1261,"name": "test_tmp_dir"},{"import": 1065,"src": 1262,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1065,"src": 1263,"name": "global_event_loop"},{"import": 1065,"src": 1264,"name": "testing"},{"import": 1065,"src": 1265,"name": "testFsWatch"},{"import": 1065,"src": 1266,"name": "event","kind": "const","type": 546,"value": 1149},{"import": 1065,"src": 1267,"name": "Allocator","kind": "const","type": 546,"value": 1169},{"import": 1065,"src": 1268,"name": "writeFileWindows"},{"import": 1065,"src": 1269,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1065,"src": 1270,"name": "File","kind": "const","type": 546,"value": 703},{"import": 1065,"src": 1271,"name": "windows"},{"import": 1065,"src": 1272,"name": "eqlString"},{"import": 1065,"src": 1273,"name": "fd_t","kind": "const","type": 546,"value": 667},{"import": 1065,"src": 1274,"name": "writeFileModeThread"},{"import": 1065,"src": 1275,"name": "assert"},{"import": 1065,"src": 1276,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1065,"src": 1277,"name": "Close","kind": "const","type": 546,"value": 1393},{"import": 1065,"src": 1278,"name": "Open","kind": "const","type": 546,"value": 1394},{"import": 1065,"src": 1279,"name": "WriteFile","kind": "const","type": 546,"value": 1395},{"import": 1065,"src": 1280,"name": "PWriteV","kind": "const","type": 546,"value": 1396},{"import": 1065,"src": 1281,"name": "WriteV","kind": "const","type": 546,"value": 1397},{"import": 1065,"src": 1282,"name": "PReadV","kind": "const","type": 546,"value": 1398},{"import": 1068,"src": 1283,"name": "default_stack_size"},{"import": 1068,"src": 1284,"name": "stack_size"},{"import": 1068,"src": 394,"name": "InStream","kind": "const","type": 583,"value": 756},{"import": 1068,"src": 1285,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1068,"src": 1286,"name": "root"},{"import": 1068,"src": 1287,"name": "math"},{"import": 1068,"src": 1288,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1068,"src": 1289,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1068,"src": 1290,"name": "Buffer"},{"import": 1068,"src": 1291,"name": "testing"},{"import": 1068,"src": 1292,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1075,"src": 402,"name": "OutStream","kind": "const","type": 611,"value": 764},{"import": 1075,"src": 1293,"name": "stack_size"},{"import": 1075,"src": 1294,"name": "default_stack_size"},{"import": 1075,"src": 1295,"name": "builtin"},{"import": 1075,"src": 1296,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1075,"src": 1297,"name": "root"},{"import": 1075,"src": 1298,"name": "mem"},{"import": 1062,"src": 1299,"name": "removeNext"},{"import": 1062,"src": 1300,"name": "insertAfter"},{"import": 1062,"src": 1301,"name": "init"},{"import": 1088,"src": 409,"name": "Stack","kind": "const","type": 632,"value": 772},{"import": 1088,"src": 1302,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1088,"src": 1303,"name": "put_thread_count"},{"import": 1088,"src": 1304,"name": "puts_per_thread"},{"import": 1088,"src": 1305,"name": "std"},{"import": 1088,"src": 1306,"name": "startPuts"},{"import": 1088,"src": 1307,"name": "AtomicOrder"},{"import": 1088,"src": 1308,"name": "expect"},{"import": 1088,"src": 1309,"name": "assert"},{"import": 1088,"src": 1310,"name": "Context"},{"import": 1088,"src": 1311,"name": "startGets"},{"import": 1401,"src": 1312,"name": "Id","kind": "const","type": 546,"value": 1402},{"import": 1401,"src": 1313,"name": "overlapped_init","kind": "const","type": 551,"value": null},{"import": 1401,"src": 1314,"name": "Overlapped","kind": "const","type": 546,"value": 551},{"import": 1401,"src": 1315,"name": "EventFd","kind": "const","type": 546,"value": 634},{"import": 1401,"src": 1316,"name": "Basic"},{"import": 1401,"src": 1317,"name": "KEventBasic"},{"import": 1401,"src": 1318,"name": "KEventFd"},{"import": 1092,"src": 410,"name": "SeekableStream","kind": "const","type": 635,"value": 773},{"import": 1092,"src": 1319,"name": "SliceSeekableInStream","kind": "const","type": 546,"value": 771},{"import": 1092,"src": 1320,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1092,"src": 1321,"name": "InStream","kind": "const","type": 583,"value": 756},{"import": 644,"src": 1322,"name": "deinit"},{"import": 644,"src": 1323,"name": "getHeight"},{"import": 644,"src": 1324,"name": "getWidth"},{"import": 644,"src": 1325,"name": "Self"},{"import": 1109,"src": 1326,"name": "root","kind": "const","type": 546,"value": 670},{"import": 1109,"src": 1327,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1109,"src": 1328,"name": "Size","kind": "const","type": 546,"value": 1407},{"import": 1109,"src": 1329,"name": "Data","kind": "const","type": 546,"value": 1408},{"import": 665,"src": 1330,"name": "rgb"},{"import": 665,"src": 1331,"name": "parse"},{"import": 665,"src": 1332,"name": "Self"},{"import": 1109,"src": 1333,"name": "Modifier","kind": "const","type": 546,"value": 1416},{"import": 1143,"src": 1334,"name": "toSlice"},{"import": 1143,"src": 1335,"name": "subArrayPtr"},{"import": 1143,"src": 358,"name": "set","kind": "const","type": 1418,"value": 801},{"import": 1143,"src": 1336,"name": "reverse"},{"import": 1143,"src": 1337,"name": "writeIntSliceBig"},{"import": 1143,"src": 382,"name": "readIntSliceNative","kind": "const","type": 1419,"value": 802},{"import": 1143,"src": 1338,"name": "toBytes"},{"import": 1143,"src": 1339,"name": "rotate"},{"import": 1143,"src": 355,"name": "len","kind": "const","type": 1420,"value": 803},{"import": 1143,"src": 1340,"name": "bytesToValue"},{"import": 1143,"src": 1341,"name": "writeIntForeign"},{"import": 1143,"src": 349,"name": "toSliceConst","kind": "const","type": 1421,"value": 804},{"import": 1143,"src": 1342,"name": "separate"},{"import": 1143,"src": 1343,"name": "SplitIterator"},{"import": 1143,"src": 1344,"name": "max"},{"import": 1143,"src": 1345,"name": "startsWith"},{"import": 1143,"src": 1346,"name": "indexOfScalarPos"},{"import": 1143,"src": 1347,"name": "writeIntSliceNative"},{"import": 1143,"src": 1348,"name": "indexOf"},{"import": 1143,"src": 195,"name": "copy","kind": "const","type": 1422,"value": 805},{"import": 1143,"src": 1349,"name": "writeInt"},{"import": 1143,"src": 1350,"name": "swap"},{"import": 1143,"src": 1351,"name": "lastIndexOfScalar"},{"import": 1143,"src": 1352,"name": "writeIntSliceLittle"},{"import": 1143,"src": 1353,"name": "min"},{"import": 1143,"src": 117,"name": "readIntNative","kind": "const","type": 1423,"value": 806},{"import": 1143,"src": 1354,"name": "indexOfAnyPos"},{"import": 1143,"src": 1355,"name": "readIntSliceBig"},{"import": 1143,"src": 1356,"name": "writeIntLittle"},{"import": 1143,"src": 1357,"name": "trimLeft"},{"import": 1143,"src": 60,"name": "asBytes","kind": "const","type": 1424,"value": 807},{"import": 1143,"src": 292,"name": "readVarInt","kind": "const","type": 1425,"value": 808},{"import": 1143,"src": 1358,"name": "isAligned"},{"import": 1143,"src": 1359,"name": "writeIntSlice"},{"import": 1143,"src": 297,"name": "dupe","kind": "const","type": 1426,"value": 809},{"import": 1143,"src": 1360,"name": "join"},{"import": 1143,"src": 1361,"name": "concat"},{"import": 1143,"src": 1362,"name": "bytesAsValue"},{"import": 1143,"src": 1363,"name": "toNative"},{"import": 1143,"src": 1364,"name": "indexOfPos"},{"import": 1143,"src": 1365,"name": "nativeToLittle"},{"import": 1143,"src": 107,"name": "alignBackward","kind": "const","type": 47,"value": 151},{"import": 1143,"src": 1366,"name": "readIntSlice"},{"import": 1143,"src": 1367,"name": "nativeTo"},{"import": 1143,"src": 1368,"name": "zeroes"},{"import": 1143,"src": 1369,"name": "lastIndexOfAny"},{"import": 1143,"src": 1370,"name": "order"},{"import": 1143,"src": 1371,"name": "TokenIterator"},{"import": 1143,"src": 1372,"name": "littleToNative"},{"import": 1143,"src": 1373,"name": "bigToNative"},{"import": 1143,"src": 55,"name": "alignForward","kind": "const","type": 47,"value": 74},{"import": 1143,"src": 1374,"name": "indexOfScalar"},{"import": 1143,"src": 1375,"name": "nativeToBig"},{"import": 1143,"src": 1376,"name": "writeIntNative"},{"import": 1143,"src": 1377,"name": "Allocator","kind": "const","type": 546,"value": 1169},{"import": 1143,"src": 1378,"name": "indexOfAny"},{"import": 1143,"src": 1379,"name": "readIntBig","kind": "const","type": 1427,"value": 810},{"import": 1143,"src": 1380,"name": "lessThan"},{"import": 1143,"src": 1381,"name": "endsWith"},{"import": 1143,"src": 1382,"name": "trim"},{"import": 1143,"src": 1383,"name": "tokenize"},{"import": 1143,"src": 80,"name": "readIntForeign","kind": "const","type": 1427,"value": 810},{"import": 1143,"src": 1384,"name": "writeIntSliceForeign"},{"import": 1143,"src": 1385,"name": "readIntSliceLittle","kind": "const","type": 1419,"value": 802},{"import": 1143,"src": 1386,"name": "trimRight"},{"import": 1143,"src": 1387,"name": "secureZero"},{"import": 1143,"src": 1388,"name": "writeIntBig"},{"import": 1143,"src": 1389,"name": "page_size","kind": "const","type": 599,"value": null},{"import": 1143,"src": 1390,"name": "lastIndexOf"},{"import": 1143,"src": 1391,"name": "readIntLittle","kind": "const","type": 1423,"value": 806},{"import": 1143,"src": 1392,"name": "readIntSliceForeign"},{"import": 1143,"src": 1393,"name": "copyBackwards"},{"import": 1143,"src": 1394,"name": "allEqual"},{"import": 1143,"src": 76,"name": "eql","kind": "const","type": 571,"value": 753},{"import": 1143,"src": 145,"name": "readInt","kind": "const","type": 1428,"value": 811},{"import": 1143,"src": 1395,"name": "BytesAsValueReturnType"},{"import": 1143,"src": 1396,"name": "testWriteIntImpl"},{"import": 1143,"src": 1397,"name": "meta","kind": "const","type": 546,"value": 1157},{"import": 1143,"src": 1398,"name": "SubArrayPtrReturnType"},{"import": 1143,"src": 1399,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1143,"src": 1400,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1143,"src": 390,"name": "AsBytesReturnType","kind": "const","type": 562,"value": 751},{"import": 1143,"src": 1401,"name": "math","kind": "const","type": 546,"value": 1144},{"import": 1143,"src": 1402,"name": "debug","kind": "const","type": 546,"value": 1147},{"import": 1143,"src": 1403,"name": "testing"},{"import": 1143,"src": 1404,"name": "trait","kind": "const","type": 546,"value": 1429},{"import": 1143,"src": 1405,"name": "testReadIntImpl"},{"import": 1143,"src": 1406,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1143,"src": 1407,"name": "mem"},{"import": 1144,"src": 1408,"name": "ceil"},{"import": 1144,"src": 1409,"name": "isNan","kind": "const","type": 1430,"value": 812},{"import": 1144,"src": 1410,"name": "isSignalNan"},{"import": 1144,"src": 1411,"name": "cosh"},{"import": 1144,"src": 1412,"name": "floor","kind": "const","type": 1431,"value": 813},{"import": 1144,"src": 1413,"name": "nan_u128"},{"import": 1144,"src": 1414,"name": "modf64_result"},{"import": 1144,"src": 1415,"name": "hypot"},{"import": 1144,"src": 1416,"name": "inf_u16"},{"import": 1144,"src": 1417,"name": "absFloat"},{"import": 1144,"src": 1418,"name": "f64_true_min"},{"import": 1144,"src": 1419,"name": "rotr"},{"import": 1144,"src": 1420,"name": "absCast"},{"import": 1144,"src": 1421,"name": "cbrt"},{"import": 1144,"src": 1422,"name": "Order"},{"import": 1144,"src": 1423,"name": "round"},{"import": 1144,"src": 1424,"name": "nan_f32","kind": "const","type": 629,"value": null},{"import": 1144,"src": 1425,"name": "divFloor"},{"import": 1144,"src": 1426,"name": "ceilPowerOfTwo"},{"import": 1144,"src": 383,"name": "mulWide","kind": "const","type": 1432,"value": 814},{"import": 1144,"src": 1427,"name": "sinh"},{"import": 1144,"src": 1428,"name": "inf_u32"},{"import": 1144,"src": 1429,"name": "shr"},{"import": 1144,"src": 1430,"name": "asinh"},{"import": 1144,"src": 404,"name": "maxInt","kind": "const","type": 616,"value": 766},{"import": 1144,"src": 1431,"name": "sin","kind": "const","type": 1433,"value": 815},{"import": 1144,"src": 1432,"name": "f64_toint"},{"import": 1144,"src": 114,"name": "cast","kind": "const","type": 1434,"value": 816},{"import": 1144,"src": 1433,"name": "f128_true_min"},{"import": 1144,"src": 1434,"name": "two_sqrtpi"},{"import": 1144,"src": 1435,"name": "acosh"},{"import": 1144,"src": 1436,"name": "frexp32_result"},{"import": 1144,"src": 1437,"name": "Complex"},{"import": 1144,"src": 1438,"name": "raiseOverflow"},{"import": 1144,"src": 1439,"name": "inf_f128"},{"import": 1144,"src": 1440,"name": "inf"},{"import": 1144,"src": 413,"name": "Log2Int","kind": "const","type": 660,"value": 777},{"import": 1144,"src": 1441,"name": "log2_int"},{"import": 1144,"src": 116,"name": "add","kind": "const","type": 1435,"value": 817},{"import": 1144,"src": 1442,"name": "atanh"},{"import": 1144,"src": 1443,"name": "lossyCast"},{"import": 1144,"src": 1444,"name": "modf"},{"import": 1144,"src": 1445,"name": "mod"},{"import": 1144,"src": 1446,"name": "f32_max"},{"import": 1144,"src": 1447,"name": "sqrt1_2"},{"import": 1144,"src": 1448,"name": "order"},{"import": 1144,"src": 1449,"name": "tan","kind": "const","type": 1436,"value": 818},{"import": 1144,"src": 1450,"name": "ilogb"},{"import": 1144,"src": 1451,"name": "cos","kind": "const","type": 1437,"value": 819},{"import": 1144,"src": 1452,"name": "f64_epsilon"},{"import": 1144,"src": 1453,"name": "inf_u64"},{"import": 1144,"src": 1454,"name": "asin"},{"import": 1144,"src": 1455,"name": "isPowerOfTwo"},{"import": 1144,"src": 1456,"name": "nan_u16"},{"import": 1144,"src": 1457,"name": "inf_f32"},{"import": 1144,"src": 1458,"name": "f32_true_min"},{"import": 1144,"src": 1459,"name": "fabs","kind": "const","type": 1438,"value": 820},{"import": 1144,"src": 1460,"name": "complex"},{"import": 1144,"src": 1461,"name": "atan"},{"import": 1144,"src": 1462,"name": "raiseDivByZero"},{"import": 1144,"src": 1463,"name": "snan"},{"import": 1144,"src": 1464,"name": "f16_true_min"},{"import": 1144,"src": 1465,"name": "isNegativeInf"},{"import": 1144,"src": 1466,"name": "log10e"},{"import": 1144,"src": 1467,"name": "f32_toint"},{"import": 1144,"src": 1468,"name": "pow"},{"import": 1144,"src": 1469,"name": "log2","kind": "const","type": 627,"value": 769},{"import": 1144,"src": 1470,"name": "inf_f64"},{"import": 1144,"src": 1471,"name": "log2_int_ceil"},{"import": 1144,"src": 1472,"name": "scalbn"},{"import": 1144,"src": 1473,"name": "e"},{"import": 1144,"src": 1474,"name": "ceilPowerOfTwoPromote"},{"import": 1144,"src": 1475,"name": "f16_min"},{"import": 1144,"src": 1476,"name": "expm1"},{"import": 1144,"src": 1477,"name": "signbit"},{"import": 1144,"src": 1478,"name": "shlExact"},{"import": 1144,"src": 1479,"name": "nan_f128"},{"import": 1144,"src": 1480,"name": "frexp"},{"import": 1144,"src": 1481,"name": "f32_min"},{"import": 1144,"src": 1482,"name": "frexp64_result"},{"import": 1144,"src": 1483,"name": "CompareOperator"},{"import": 1144,"src": 1484,"name": "f16_epsilon"},{"import": 1144,"src": 1485,"name": "rem"},{"import": 1144,"src": 1486,"name": "ln10"},{"import": 1144,"src": 1487,"name": "sub"},{"import": 1144,"src": 1488,"name": "floatMantissaBits"},{"import": 1144,"src": 210,"name": "max","kind": "const","type": 658,"value": 776},{"import": 1144,"src": 1489,"name": "nan_u32","kind": "const","type": 770,"value": null},{"import": 1144,"src": 1490,"name": "acos"},{"import": 1144,"src": 1491,"name": "f16_max"},{"import": 1144,"src": 1492,"name": "floorPowerOfTwo"},{"import": 1144,"src": 1493,"name": "exp"},{"import": 1144,"src": 1494,"name": "f64_min"},{"import": 1144,"src": 1495,"name": "log10"},{"import": 1144,"src": 1496,"name": "nan_f16"},{"import": 1144,"src": 1497,"name": "f128_toint"},{"import": 1144,"src": 1498,"name": "IntFittingRange"},{"import": 1144,"src": 1499,"name": "nan_u64"},{"import": 1144,"src": 1500,"name": "rotl"},{"import": 1144,"src": 1501,"name": "sqrt2"},{"import": 1144,"src": 1502,"name": "log"},{"import": 1144,"src": 1503,"name": "raiseUnderflow"},{"import": 1144,"src": 56,"name": "min","kind": "const","type": 1439,"value": 821},{"import": 1144,"src": 403,"name": "minInt","kind": "const","type": 614,"value": 765},{"import": 1144,"src": 1504,"name": "negate"},{"import": 1144,"src": 1505,"name": "alignCast"},{"import": 1144,"src": 1506,"name": "f16_toint"},{"import": 1144,"src": 1507,"name": "isInf","kind": "const","type": 1440,"value": 822},{"import": 1144,"src": 1508,"name": "modf32_result"},{"import": 1144,"src": 1509,"name": "f128_epsilon"},{"import": 1144,"src": 115,"name": "mul","kind": "const","type": 1441,"value": 823},{"import": 1144,"src": 1510,"name": "f128_min"},{"import": 1144,"src": 1511,"name": "divExact"},{"import": 1144,"src": 1512,"name": "negateCast"},{"import": 1144,"src": 1513,"name": "isFinite"},{"import": 1144,"src": 1514,"name": "nan_f64"},{"import": 1144,"src": 1515,"name": "f128_max"},{"import": 1144,"src": 1516,"name": "f32_epsilon"},{"import": 1144,"src": 338,"name": "forceEval","kind": "const","type": 1442,"value": 824},{"import": 1144,"src": 1517,"name": "isNormal"},{"import": 1144,"src": 1518,"name": "raiseInvalid"},{"import": 1144,"src": 1519,"name": "compare"},{"import": 1144,"src": 1520,"name": "shl"},{"import": 1144,"src": 1521,"name": "ln2"},{"import": 1144,"src": 1522,"name": "big"},{"import": 1144,"src": 1523,"name": "nan","kind": "const","type": 1443,"value": 825},{"import": 1144,"src": 1524,"name": "f64_max"},{"import": 1144,"src": 1525,"name": "inf_f16"},{"import": 1144,"src": 1526,"name": "raiseInexact"},{"import": 1144,"src": 1527,"name": "inf_u128"},{"import": 1144,"src": 1528,"name": "copysign"},{"import": 1144,"src": 1529,"name": "fma"},{"import": 1144,"src": 1530,"name": "isPositiveInf"},{"import": 1144,"src": 1531,"name": "sqrt","kind": "const","type": 619,"value": 767},{"import": 1144,"src": 1532,"name": "tanh"},{"import": 1144,"src": 1533,"name": "approxEq"},{"import": 1144,"src": 1534,"name": "trunc"},{"import": 1144,"src": 1535,"name": "floatExponentBits"},{"import": 1144,"src": 1536,"name": "tau"},{"import": 1144,"src": 1537,"name": "exp2"},{"import": 1144,"src": 1538,"name": "log1p"},{"import": 1144,"src": 1539,"name": "AlignCastError"},{"import": 1144,"src": 1540,"name": "pi"},{"import": 1144,"src": 1541,"name": "log2e"},{"import": 1144,"src": 1542,"name": "powi"},{"import": 1144,"src": 1543,"name": "absInt"},{"import": 1144,"src": 1544,"name": "divTrunc"},{"import": 1144,"src": 1545,"name": "atan2"},{"import": 1144,"src": 407,"name": "Min","kind": "const","type": 628,"value": 770},{"import": 1144,"src": 1546,"name": "ln"},{"import": 1144,"src": 1547,"name": "testAbsFloat"},{"import": 1144,"src": 1548,"name": "testDivFloor"},{"import": 1144,"src": 1549,"name": "testCeilPowerOfTwo"},{"import": 1144,"src": 1550,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1144,"src": 1551,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1144,"src": 1552,"name": "testMod"},{"import": 1144,"src": 1553,"name": "TypeId"},{"import": 1144,"src": 1554,"name": "testCeilPowerOfTwoPromote"},{"import": 1144,"src": 1555,"name": "testRem"},{"import": 1144,"src": 1556,"name": "testFloorPowerOfTwo"},{"import": 1144,"src": 1557,"name": "testOverflow"},{"import": 1144,"src": 1558,"name": "testDivExact"},{"import": 1144,"src": 1559,"name": "testing"},{"import": 1144,"src": 1560,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1144,"src": 1561,"name": "testAbsInt"},{"import": 1144,"src": 1562,"name": "testDivTrunc"},{"import": 1444,"src": 1563,"name": "Id"},{"import": 1444,"src": 1564,"name": "wait"},{"import": 1444,"src": 1565,"name": "Data","kind": "const","type": 546,"value": 1445},{"import": 1444,"src": 1566,"name": "cpuCount"},{"import": 1444,"src": 1567,"name": "Handle","kind": "const","type": 546,"value": 667},{"import": 1444,"src": 1568,"name": "handle"},{"import": 1444,"src": 1569,"name": "getCurrentId"},{"import": 1444,"src": 1570,"name": "CpuCountError"},{"import": 1444,"src": 1571,"name": "use_pthreads","kind": "const","type": 565,"value": null},{"import": 1444,"src": 1572,"name": "spawn"},{"import": 1444,"src": 1573,"name": "SpawnError"},{"import": 1446,"src": 1574,"name": "EFD_NONBLOCK"},{"import": 1446,"src": 1575,"name": "SIGPIPE"},{"import": 1446,"src": 1576,"name": "SO_ZEROCOPY"},{"import": 1446,"src": 1577,"name": "SIGTERM"},{"import": 1446,"src": 1578,"name": "IN_MODIFY"},{"import": 1446,"src": 1579,"name": "CAP_SYS_TTY_CONFIG"},{"import": 1446,"src": 1580,"name": "MSG_DONTWAIT"},{"import": 1446,"src": 1581,"name": "S_IFSOCK"},{"import": 1446,"src": 1582,"name": "MS_POSIXACL"},{"import": 1446,"src": 1583,"name": "R_OK"},{"import": 1353,"src": 1584,"name": "MAP_EXECUTABLE"},{"import": 1446,"src": 1585,"name": "PF_INET6"},{"import": 1353,"src": 1586,"name": "SYS_inotify_rm_watch"},{"import": 1353,"src": 1587,"name": "REG_RBP","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1588,"name": "SYS_mq_timedreceive"},{"import": 1446,"src": 1589,"name": "PF_ROSE"},{"import": 1353,"src": 1590,"name": "SYS_iopl"},{"import": 1146,"src": 1591,"name": "epoll_create1"},{"import": 1446,"src": 1592,"name": "MSG_DONTROUTE"},{"import": 1446,"src": 1593,"name": "CLOCK_PROCESS_CPUTIME_ID"},{"import": 1353,"src": 1594,"name": "SYS_read","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1595,"name": "SYS_tgkill"},{"import": 1446,"src": 1596,"name": "SOL_RAW"},{"import": 1447,"src": 1597,"name": "EL2NSYNC"},{"import": 1447,"src": 1598,"name": "EADDRNOTAVAIL"},{"import": 1353,"src": 1599,"name": "SYS_timerfd_settime"},{"import": 1446,"src": 1600,"name": "HOST_NAME_MAX"},{"import": 1446,"src": 1601,"name": "HUGETLB_FLAG_ENCODE_256MB"},{"import": 1353,"src": 1602,"name": "ARCH_SET_GS"},{"import": 1446,"src": 1603,"name": "SO_BINDTODEVICE"},{"import": 1447,"src": 1604,"name": "EL3HLT"},{"import": 1353,"src": 1605,"name": "SYS_fork"},{"import": 1446,"src": 1606,"name": "CLOCK_THREAD_CPUTIME_ID"},{"import": 1446,"src": 1607,"name": "app_mask","kind": "const","type": 1448,"value": null},{"import": 1353,"src": 1608,"name": "SYS_unlink"},{"import": 1353,"src": 1609,"name": "SYS_adjtimex"},{"import": 1353,"src": 1610,"name": "REG_OLDMASK"},{"import": 1446,"src": 1611,"name": "IORING_OFF_SQ_RING"},{"import": 1446,"src": 1612,"name": "PROT_NONE"},{"import": 1449,"src": 1613,"name": "iovec_const","kind": "const","type": 546,"value": 1450},{"import": 1446,"src": 1614,"name": "IPPROTO_IGMP"},{"import": 1446,"src": 1615,"name": "TIOCEXCL"},{"import": 1446,"src": 1616,"name": "TIOCSRS485"},{"import": 1446,"src": 1617,"name": "AF_LOCAL"},{"import": 1446,"src": 1618,"name": "AF_IPX"},{"import": 1353,"src": 1619,"name": "SYS_pwrite"},{"import": 1447,"src": 1620,"name": "ESTALE"},{"import": 1353,"src": 1621,"name": "SYS_pipe2"},{"import": 1446,"src": 1622,"name": "SIGSTKFLT"},{"import": 1446,"src": 1623,"name": "SCM_TIMESTAMPING_OPT_STATS"},{"import": 1446,"src": 1624,"name": "STDERR_FILENO","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1625,"name": "MS_RELATIME"},{"import": 1446,"src": 1626,"name": "FUTEX_UNLOCK_PI"},{"import": 1446,"src": 1627,"name": "O_RDWR","kind": "const","type": 599,"value": null},{"import": 1447,"src": 1628,"name": "ENOTDIR","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1629,"name": "EPOLLWRBAND"},{"import": 1353,"src": 1630,"name": "SYS_capget"},{"import": 1446,"src": 1631,"name": "SO_RCVLOWAT"},{"import": 1353,"src": 1632,"name": "REG_RDX"},{"import": 1353,"src": 1633,"name": "SYS_setxattr"},{"import": 1447,"src": 1634,"name": "EBADSLT"},{"import": 1446,"src": 1635,"name": "AF_QIPCRTR"},{"import": 1446,"src": 1636,"name": "SOL_TIPC"},{"import": 1353,"src": 1637,"name": "SYS_fdatasync"},{"import": 1353,"src": 1638,"name": "SYS_sethostname"},{"import": 1446,"src": 1639,"name": "SO_TIMESTAMPNS_OLD"},{"import": 1353,"src": 1640,"name": "SYS_sched_setaffinity"},{"import": 1353,"src": 1641,"name": "SYS_unlinkat"},{"import": 1446,"src": 1642,"name": "SO_NO_CHECK"},{"import": 1353,"src": 1643,"name": "SYS_accept4"},{"import": 1446,"src": 1644,"name": "PF_INET"},{"import": 1446,"src": 1645,"name": "TIOCSIG"},{"import": 1353,"src": 1646,"name": "SYS_setresuid"},{"import": 1446,"src": 1647,"name": "EPOLLOUT"},{"import": 1446,"src": 1648,"name": "IOV_MAX"},{"import": 1446,"src": 1649,"name": "IPPROTO_ENCAP"},{"import": 1446,"src": 1650,"name": "STATX_TYPE"},{"import": 1146,"src": 1651,"name": "sysctl"},{"import": 1446,"src": 1652,"name": "sockaddr"},{"import": 1146,"src": 269,"name": "openatC","kind": "const","type": 368,"value": 458},{"import": 1446,"src": 1653,"name": "SHUT_WR"},{"import": 1446,"src": 1654,"name": "MS_NOUSER"},{"import": 1353,"src": 1655,"name": "SYS_io_uring_setup"},{"import": 1447,"src": 1656,"name": "EINVAL","kind": "const","type": 599,"value": null},{"import": 1447,"src": 1657,"name": "EISCONN"},{"import": 1353,"src": 1658,"name": "SYS_capset"},{"import": 1146,"src": 1659,"name": "inotify_add_watch"},{"import": 1446,"src": 1660,"name": "HUGETLB_FLAG_ENCODE_SHIFT"},{"import": 1353,"src": 1661,"name": "SYS_delete_module"},{"import": 1353,"src": 1662,"name": "SYS_get_mempolicy"},{"import": 1446,"src": 1663,"name": "CLOCK_REALTIME"},{"import": 1353,"src": 1664,"name": "SYS_arch_prctl","kind": "const","type": 599,"value": null},{"import": 1146,"src": 1665,"name": "dl_iterate_phdr"},{"import": 1446,"src": 1666,"name": "PATH_MAX","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1667,"name": "SIGURG"},{"import": 1447,"src": 1668,"name": "EOVERFLOW","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1669,"name": "IORING_OP_WRITEV"},{"import": 1146,"src": 1670,"name": "getrusage"},{"import": 1446,"src": 1671,"name": "SOL_PPPOL2TP"},{"import": 1146,"src": 1672,"name": "DeleteDirError"},{"import": 1446,"src": 1673,"name": "clock_t","kind": "const","type": 546,"value": 617},{"import": 1446,"src": 1674,"name": "CAP_MAC_ADMIN"},{"import": 1446,"src": 1675,"name": "k_sigaction","kind": "const","type": 546,"value": 1451},{"import": 1447,"src": 1676,"name": "ELNRNG"},{"import": 1446,"src": 1677,"name": "CAP_KILL"},{"import": 1446,"src": 1678,"name": "CLONE_FILES"},{"import": 1353,"src": 1679,"name": "SYS_getegid"},{"import": 1446,"src": 1680,"name": "SA_NOCLDWAIT"},{"import": 1146,"src": 1681,"name": "futimens"},{"import": 1446,"src": 1682,"name": "IPPROTO_UDPLITE"},{"import": 1446,"src": 1683,"name": "S_ISSOCK"},{"import": 1446,"src": 1684,"name": "CAP_SETUID"},{"import": 1446,"src": 1685,"name": "CAP_WAKE_ALARM"},{"import": 1146,"src": 1686,"name": "UnexpectedError","kind": "const","type": 546,"value": 926},{"import": 1353,"src": 1687,"name": "SYS_clock_getres","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1688,"name": "SYS_umount2"},{"import": 1447,"src": 1689,"name": "ENOSYS","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1690,"name": "IORING_UNREGISTER_BUFFERS"},{"import": 1446,"src": 1691,"name": "MS_MGC_MSK"},{"import": 1446,"src": 1692,"name": "SOL_ATM"},{"import": 1446,"src": 1693,"name": "STATX_ATTR_AUTOMOUNT"},{"import": 1447,"src": 1694,"name": "EMEDIUMTYPE"},{"import": 1446,"src": 1695,"name": "SS_DISABLE"},{"import": 1447,"src": 1696,"name": "EACCES","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1697,"name": "SYS_rt_sigsuspend"},{"import": 1446,"src": 1698,"name": "S_IWUSR"},{"import": 1146,"src": 1699,"name": "BindError"},{"import": 1446,"src": 1700,"name": "TIOCNXCL"},{"import": 1353,"src": 1701,"name": "REG_R11"},{"import": 1353,"src": 1702,"name": "SYS_fchown"},{"import": 1353,"src": 1703,"name": "SYS_vhangup"},{"import": 1446,"src": 1704,"name": "XATTR_CAPS_SZ"},{"import": 1446,"src": 1705,"name": "MAP_FIXED_NOREPLACE"},{"import": 1446,"src": 1706,"name": "SO_LOCK_FILTER"},{"import": 1353,"src": 1707,"name": "SYS_mlockall"},{"import": 1353,"src": 1708,"name": "SYS_shutdown"},{"import": 1446,"src": 1709,"name": "AF_ISDN"},{"import": 1353,"src": 1710,"name": "SYS_sync_file_range"},{"import": 1353,"src": 1711,"name": "SYS_vserver"},{"import": 1353,"src": 1712,"name": "SYS_splice"},{"import": 1146,"src": 1713,"name": "kevent"},{"import": 1446,"src": 1714,"name": "dirent64"},{"import": 1146,"src": 1715,"name": "UnlinkError"},{"import": 1146,"src": 1716,"name": "memfd_createC"},{"import": 1446,"src": 1717,"name": "MSG_CMSG_CLOEXEC"},{"import": 1446,"src": 1718,"name": "TIOCVHANGUP"},{"import": 1446,"src": 1719,"name": "POLLIN"},{"import": 1446,"src": 1720,"name": "IN_MOVED_TO"},{"import": 1446,"src": 1721,"name": "S_ISBLK"},{"import": 1446,"src": 1722,"name": "PF_IEEE802154"},{"import": 1446,"src": 1723,"name": "CAP_AUDIT_CONTROL"},{"import": 1353,"src": 1724,"name": "SYS_access"},{"import": 1446,"src": 1725,"name": "PF_KEY"},{"import": 1446,"src": 1726,"name": "SO_TIMESTAMPING_OLD"},{"import": 1446,"src": 1727,"name": "CAP_DAC_READ_SEARCH"},{"import": 1446,"src": 1728,"name": "SOCK_SEQPACKET"},{"import": 1446,"src": 1729,"name": "SO_PEERCRED"},{"import": 1353,"src": 1730,"name": "MAP_32BIT"},{"import": 1446,"src": 1731,"name": "_LINUX_CAPABILITY_VERSION_1"},{"import": 1353,"src": 1732,"name": "SYS_pivot_root"},{"import": 1446,"src": 1733,"name": "EPOLLET"},{"import": 1353,"src": 1734,"name": "SYS_kill"},{"import": 1446,"src": 1735,"name": "AF_IUCV"},{"import": 1446,"src": 1736,"name": "MS_ACTIVE"},{"import": 1446,"src": 1737,"name": "PF_TIPC"},{"import": 1446,"src": 1738,"name": "IORING_FSYNC_DATASYNC"},{"import": 1446,"src": 1739,"name": "DT_WHT"},{"import": 1446,"src": 1740,"name": "SIGQUIT"},{"import": 1146,"src": 1741,"name": "sendto"},{"import": 1446,"src": 1742,"name": "TFD_CLOEXEC"},{"import": 1353,"src": 1743,"name": "SYS_listxattr"},{"import": 1446,"src": 1744,"name": "MSG_PROXY"},{"import": 1446,"src": 1745,"name": "MFD_HUGE_MASK"},{"import": 1447,"src": 1746,"name": "ECONNRESET","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1747,"name": "fd_t","kind": "const","type": 546,"value": 667},{"import": 1446,"src": 1748,"name": "HUGETLB_FLAG_ENCODE_8MB"},{"import": 1446,"src": 1749,"name": "AF_PPPOX"},{"import": 1446,"src": 1750,"name": "SEEK_END","kind": "const","type": 599,"value": null},{"import": 1447,"src": 1751,"name": "ENSRNODATA"},{"import": 1353,"src": 1752,"name": "SYS_sched_setscheduler"},{"import": 1446,"src": 1753,"name": "MSG_WAITFORONE"},{"import": 1446,"src": 1754,"name": "AT_RECURSIVE"},{"import": 1446,"src": 1755,"name": "AF_AX25"},{"import": 1353,"src": 1756,"name": "SYS_mprotect"},{"import": 1353,"src": 1757,"name": "SYS_sched_setparam"},{"import": 1446,"src": 1758,"name": "SO_ATTACH_REUSEPORT_EBPF"},{"import": 1353,"src": 1759,"name": "SYS_memfd_create"},{"import": 1446,"src": 1760,"name": "AF_MAX"},{"import": 1446,"src": 1761,"name": "io_uring_cqe"},{"import": 1353,"src": 1762,"name": "SYS_getgid"},{"import": 1446,"src": 1763,"name": "kernel_rwf"},{"import": 1353,"src": 1764,"name": "SYS_statfs"},{"import": 1146,"src": 1765,"name": "MFD_MAX_NAME_LEN"},{"import": 1446,"src": 1766,"name": "CAP_IPC_OWNER"},{"import": 1447,"src": 1767,"name": "ENSRQUERYDOMAINTOOLONG"},{"import": 1353,"src": 1768,"name": "SYS_mbind"},{"import": 1446,"src": 1769,"name": "TIOCCONS"},{"import": 1446,"src": 1770,"name": "empty_sigset","kind": "const","type": 1448,"value": null},{"import": 1146,"src": 1771,"name": "kqueue"},{"import": 1353,"src": 1772,"name": "SYS_reboot"},{"import": 1446,"src": 1773,"name": "AF_MPLS"},{"import": 1446,"src": 1774,"name": "IORING_OP_TIMEOUT"},{"import": 1353,"src": 1775,"name": "SYS_listen"},{"import": 1146,"src": 1776,"name": "readlinkatC"},{"import": 1446,"src": 1777,"name": "CLONE_THREAD"},{"import": 1146,"src": 1778,"name": "environ","kind": "var","type": 757,"value": "undefined"},{"import": 1353,"src": 1779,"name": "SYS_syslog"},{"import": 1446,"src": 1780,"name": "FIONBIO"},{"import": 1446,"src": 1781,"name": "EPOLL_CTL_DEL"},{"import": 1353,"src": 1782,"name": "SYS_newfstatat"},{"import": 1446,"src": 1783,"name": "CAP_SYS_BOOT"},{"import": 1446,"src": 1784,"name": "CAP_NET_BIND_SERVICE"},{"import": 1446,"src": 1785,"name": "SO_DOMAIN"},{"import": 1446,"src": 1786,"name": "MNT_DETACH"},{"import": 1446,"src": 1787,"name": "TIOCMSET"},{"import": 1446,"src": 1788,"name": "SA_SIGINFO","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1789,"name": "AF_RXRPC"},{"import": 1446,"src": 1790,"name": "TCSETXW"},{"import": 1146,"src": 1791,"name": "argv","kind": "var","type": 757,"value": "undefined"},{"import": 1353,"src": 1792,"name": "SYS_setsid"},{"import": 1146,"src": 1793,"name": "ForkError"},{"import": 1146,"src": 1794,"name": "ReadLinkError","kind": "const","type": 546,"value": 1452},{"import": 1146,"src": 1795,"name": "getrandom"},{"import": 1446,"src": 1796,"name": "SIGINT"},{"import": 1446,"src": 1797,"name": "TCSETAW"},{"import": 1146,"src": 1798,"name": "darwin"},{"import": 1446,"src": 1799,"name": "MSG_SYN"},{"import": 1353,"src": 1800,"name": "REG_RAX"},{"import": 1446,"src": 1801,"name": "PF_ATMSVC"},{"import": 1353,"src": 1802,"name": "SYS_pipe"},{"import": 1353,"src": 1803,"name": "SYS_execve"},{"import": 1353,"src": 1804,"name": "F_GETLK"},{"import": 1446,"src": 1805,"name": "PROT_EXEC"},{"import": 1447,"src": 1806,"name": "EMFILE","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1807,"name": "AF_ALG"},{"import": 1446,"src": 1808,"name": "SOL_DECNET"},{"import": 1146,"src": 137,"name": "mmap","kind": "const","type": 144,"value": 195},{"import": 1446,"src": 1809,"name": "STATX_ATTR_NODUMP"},{"import": 1446,"src": 1810,"name": "MFD_HUGE_512MB"},{"import": 1353,"src": 1811,"name": "SYS_fanotify_init"},{"import": 1353,"src": 1812,"name": "F_SETOWN_EX"},{"import": 1353,"src": 1813,"name": "SYS_symlinkat"},{"import": 1446,"src": 1814,"name": "VFS_CAP_REVISION_MASK"},{"import": 1446,"src": 1815,"name": "IN_MASK_ADD"},{"import": 1146,"src": 1816,"name": "GetRandomError"},{"import": 1353,"src": 1817,"name": "SYS_msgrcv"},{"import": 1353,"src": 1818,"name": "SYS_setfsuid"},{"import": 1146,"src": 1819,"name": "readv"},{"import": 1446,"src": 1820,"name": "XATTR_CAPS_SZ_2"},{"import": 1446,"src": 1821,"name": "utsname"},{"import": 1146,"src": 1822,"name": "getcwd"},{"import": 1447,"src": 1823,"name": "ENSRBADQUERY"},{"import": 1446,"src": 1824,"name": "S_ISCHR"},{"import": 1353,"src": 1825,"name": "SYS_sched_getparam"},{"import": 1446,"src": 1826,"name": "SO_SECURITY_ENCRYPTION_TRANSPORT"},{"import": 1353,"src": 1827,"name": "REG_CSGSFS"},{"import": 1146,"src": 1828,"name": "sigaltstack"},{"import": 1446,"src": 1829,"name": "MSG_FASTOPEN"},{"import": 1353,"src": 1830,"name": "SYS_munlock"},{"import": 1446,"src": 1831,"name": "SIGTSTP"},{"import": 1446,"src": 1832,"name": "AF_IRDA"},{"import": 1353,"src": 1833,"name": "O_CLOEXEC","kind": "const","type": 599,"value": null},{"import": 1447,"src": 1834,"name": "ESHUTDOWN"},{"import": 1353,"src": 1835,"name": "SYS_readv"},{"import": 1353,"src": 1836,"name": "REG_R10"},{"import": 1353,"src": 1837,"name": "SYS_sched_getscheduler"},{"import": 1447,"src": 1838,"name": "EUSERS"},{"import": 1353,"src": 1839,"name": "SYS_fsync"},{"import": 1353,"src": 1840,"name": "SYS_fadvise64"},{"import": 1446,"src": 1841,"name": "IORING_SQ_NEED_WAKEUP"},{"import": 1353,"src": 1842,"name": "SYS_chmod"},{"import": 1353,"src": 1843,"name": "SYS_llistxattr"},{"import": 1447,"src": 1844,"name": "EPROTOTYPE"},{"import": 1146,"src": 1845,"name": "mkdirC"},{"import": 1446,"src": 1846,"name": "PF_IRDA"},{"import": 1446,"src": 1847,"name": "EPOLLMSG"},{"import": 1353,"src": 1848,"name": "SYS_get_robust_list"},{"import": 1353,"src": 1849,"name": "SYS_io_uring_register"},{"import": 1447,"src": 1850,"name": "EBUSY","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1851,"name": "IN_CLOSE_NOWRITE"},{"import": 1446,"src": 1852,"name": "WNOHANG"},{"import": 1353,"src": 1853,"name": "SYS_clock_nanosleep"},{"import": 1353,"src": 1854,"name": "SYS_poll"},{"import": 1446,"src": 1855,"name": "IPPROTO_HOPOPTS"},{"import": 1446,"src": 1856,"name": "AF_X25"},{"import": 1446,"src": 1857,"name": "POLLERR"},{"import": 1353,"src": 1858,"name": "O_NONBLOCK"},{"import": 1446,"src": 1859,"name": "MAP_TYPE"},{"import": 1446,"src": 1860,"name": "S_IFLNK"},{"import": 1446,"src": 1861,"name": "IPPROTO_IPIP"},{"import": 1446,"src": 1862,"name": "STATX_INO"},{"import": 1446,"src": 1863,"name": "WIFSTOPPED"},{"import": 1446,"src": 1864,"name": "SO_PEERGROUPS"},{"import": 1353,"src": 1865,"name": "SYS_open_by_handle_at"},{"import": 1353,"src": 1866,"name": "O_RSYNC"},{"import": 1446,"src": 1867,"name": "MAP_ANONYMOUS","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1868,"name": "SYS_getuid"},{"import": 1447,"src": 1869,"name": "ENOMEDIUM"},{"import": 1446,"src": 1870,"name": "MSG_MORE"},{"import": 1353,"src": 1871,"name": "SYS_get_thread_area"},{"import": 1446,"src": 1872,"name": "FUTEX_WAIT","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1873,"name": "CLONE_NEWIPC"},{"import": 1146,"src": 1874,"name": "lseek_CUR_get"},{"import": 1446,"src": 1875,"name": "S_ISGID"},{"import": 1447,"src": 1876,"name": "EADV"},{"import": 1446,"src": 1877,"name": "SOL_NETBEUI"},{"import": 1447,"src": 1878,"name": "EAFNOSUPPORT"},{"import": 1446,"src": 1879,"name": "MFD_CLOEXEC"},{"import": 1146,"src": 1880,"name": "execvpe"},{"import": 1446,"src": 1881,"name": "MS_NOATIME"},{"import": 1446,"src": 1882,"name": "CSIGNAL"},{"import": 1447,"src": 1883,"name": "ENSROK"},{"import": 1146,"src": 1884,"name": "realpathC"},{"import": 1446,"src": 1885,"name": "AF_CAIF"},{"import": 1146,"src": 1886,"name": "RealPathError"},{"import": 1447,"src": 1887,"name": "EOPNOTSUPP"},{"import": 1353,"src": 1888,"name": "SYS_mknod"},{"import": 1146,"src": 1889,"name": "rmdirC"},{"import": 1446,"src": 1890,"name": "AT_EMPTY_PATH"},{"import": 1447,"src": 1891,"name": "EFBIG","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1892,"name": "SYS_fgetxattr"},{"import": 1353,"src": 1893,"name": "VDSO_CGT_SYM","kind": "const","type": 1453,"value": null},{"import": 1446,"src": 1894,"name": "SS_AUTODISARM"},{"import": 1146,"src": 1895,"name": "unexpected_error_tracing","kind": "const","type": 565,"value": null},{"import": 1353,"src": 1896,"name": "SYS_uselib"},{"import": 1353,"src": 1897,"name": "SYS_init_module"},{"import": 1353,"src": 1898,"name": "SYS_process_vm_writev"},{"import": 1446,"src": 1899,"name": "SOL_IP"},{"import": 1146,"src": 1900,"name": "preadv"},{"import": 1353,"src": 1901,"name": "SYS_getxattr"},{"import": 1446,"src": 1902,"name": "EFD_CLOEXEC"},{"import": 1146,"src": 1903,"name": "pwritev"},{"import": 1446,"src": 1904,"name": "AF_FILE"},{"import": 1447,"src": 1905,"name": "ENODEV","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1906,"name": "SYS_mkdirat"},{"import": 1446,"src": 1907,"name": "SIGXCPU"},{"import": 1446,"src": 1908,"name": "CLOCK_MONOTONIC","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1909,"name": "SYS_set_robust_list"},{"import": 1146,"src": 1910,"name": "SocketError"},{"import": 1446,"src": 1911,"name": "VFS_CAP_REVISION_SHIFT"},{"import": 1146,"src": 261,"name": "read","kind": "const","type": 357,"value": 442},{"import": 1447,"src": 1912,"name": "ENSRFILE"},{"import": 1446,"src": 1913,"name": "SCM_TIMESTAMPING_PKTINFO"},{"import": 1353,"src": 1914,"name": "O_LARGEFILE","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1915,"name": "PF_SMC"},{"import": 1353,"src": 1916,"name": "SYS_socket"},{"import": 1446,"src": 1917,"name": "STATX_BTIME"},{"import": 1446,"src": 1918,"name": "IPPROTO_AH"},{"import": 1353,"src": 1919,"name": "SYS_bind"},{"import": 1446,"src": 1920,"name": "CAP_LAST_CAP"},{"import": 1353,"src": 1921,"name": "SYS_pause"},{"import": 1446,"src": 1922,"name": "PF_DECnet"},{"import": 1146,"src": 1923,"name": "realpathW"},{"import": 1446,"src": 1924,"name": "AF_UNIX"},{"import": 1146,"src": 1925,"name": "AccessError"},{"import": 1353,"src": 1926,"name": "SYS_epoll_ctl_old"},{"import": 1446,"src": 1927,"name": "MFD_HUGETLB"},{"import": 1353,"src": 1928,"name": "SYS_open"},{"import": 1446,"src": 1929,"name": "SOL_CAIF"},{"import": 1446,"src": 1930,"name": "MSG_BATCH"},{"import": 1446,"src": 1931,"name": "HUGETLB_FLAG_ENCODE_2GB"},{"import": 1447,"src": 1932,"name": "ELOOP","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1933,"name": "EPOLL_CLOEXEC"},{"import": 1447,"src": 1934,"name": "ENOSR"},{"import": 1446,"src": 1935,"name": "uid_t","kind": "const","type": 546,"value": 667},{"import": 1446,"src": 1936,"name": "STATX_MTIME"},{"import": 1353,"src": 1937,"name": "SYS_fsmount"},{"import": 1353,"src": 1938,"name": "SYS_inotify_add_watch"},{"import": 1446,"src": 1939,"name": "HUGETLB_FLAG_ENCODE_MASK"},{"import": 1446,"src": 1940,"name": "WIFSIGNALED"},{"import": 1446,"src": 1941,"name": "IORING_REGISTER_BUFFERS"},{"import": 1353,"src": 1942,"name": "F_SETFD"},{"import": 1446,"src": 1943,"name": "CLOCK_REALTIME_COARSE"},{"import": 1353,"src": 1944,"name": "SYS_sendto"},{"import": 1146,"src": 1945,"name": "fork"},{"import": 1446,"src": 1946,"name": "TCSETA"},{"import": 1446,"src": 1947,"name": "IN_DONT_FOLLOW"},{"import": 1353,"src": 1948,"name": "SYS_setuid"},{"import": 1446,"src": 1949,"name": "SIGPROF"},{"import": 1353,"src": 1950,"name": "SYS_munmap","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1951,"name": "AT_STATX_DONT_SYNC"},{"import": 1446,"src": 1952,"name": "IN_MOVE_SELF"},{"import": 1447,"src": 1953,"name": "ELIBBAD"},{"import": 1447,"src": 1954,"name": "EUCLEAN"},{"import": 1353,"src": 1955,"name": "SYS_process_vm_readv"},{"import": 1146,"src": 1956,"name": "PipeError"},{"import": 1446,"src": 1957,"name": "PF_ROUTE"},{"import": 1446,"src": 1958,"name": "CLOCK_BOOTTIME"},{"import": 1447,"src": 1959,"name": "ENSRSERVFAIL"},{"import": 1446,"src": 1960,"name": "sockaddr_un"},{"import": 1446,"src": 1961,"name": "FUTEX_PRIVATE_FLAG","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1962,"name": "SYS_kexec_load"},{"import": 1353,"src": 1963,"name": "SYS_timer_gettime"},{"import": 1446,"src": 1964,"name": "IN_ONESHOT"},{"import": 1446,"src": 1965,"name": "SIGBUS"},{"import": 1353,"src": 1966,"name": "REG_R8"},{"import": 1447,"src": 1967,"name": "ECHILD"},{"import": 1447,"src": 1968,"name": "EPROTONOSUPPORT"},{"import": 1353,"src": 1969,"name": "SYS_getrusage"},{"import": 1446,"src": 1970,"name": "PF_RDS"},{"import": 1353,"src": 1971,"name": "SYS_symlink"},{"import": 1353,"src": 1972,"name": "SYS_create_module"},{"import": 1446,"src": 1973,"name": "MAP_HUGETLB"},{"import": 1446,"src": 1974,"name": "TFD_TIMER_ABSTIME"},{"import": 1446,"src": 1975,"name": "SIGWINCH"},{"import": 1353,"src": 1976,"name": "SYS_clock_gettime","kind": "const","type": 599,"value": null},{"import": 1353,"src": 1977,"name": "SYS_ptrace"},{"import": 1446,"src": 1978,"name": "AF_CAN"},{"import": 1353,"src": 1979,"name": "SYS_mkdir"},{"import": 1353,"src": 1980,"name": "timeval"},{"import": 1446,"src": 1981,"name": "IORING_REGISTER_EVENTFD"},{"import": 1446,"src": 1982,"name": "TIOCGPTN"},{"import": 1446,"src": 1983,"name": "STATX_GID"},{"import": 1446,"src": 1984,"name": "CAP_MAC_OVERRIDE"},{"import": 1146,"src": 1985,"name": "symlinkat"},{"import": 1447,"src": 1986,"name": "ENODATA"},{"import": 1446,"src": 1987,"name": "CLONE_DETACHED"},{"import": 1446,"src": 1988,"name": "DT_FIFO"},{"import": 1353,"src": 1989,"name": "SYS_modify_ldt"},{"import": 1446,"src": 1990,"name": "SIGPWR"},{"import": 1446,"src": 1991,"name": "AF_BLUETOOTH"},{"import": 1353,"src": 1992,"name": "SYS_membarrier"},{"import": 1447,"src": 1993,"name": "ENOTBLK"},{"import": 1353,"src": 1994,"name": "SYS_mlock"},{"import": 1447,"src": 1995,"name": "ESRMNT"},{"import": 1446,"src": 1996,"name": "TFD_NONBLOCK"},{"import": 1446,"src": 1997,"name": "SO_CNX_ADVICE"},{"import": 1447,"src": 1998,"name": "ENXIO","kind": "const","type": 599,"value": null},{"import": 1446,"src": 1999,"name": "AF_VSOCK"},{"import": 1446,"src": 2000,"name": "IORING_ENTER_SQ_WAKEUP"},{"import": 1353,"src": 2001,"name": "SYS_getsockopt"},{"import": 1446,"src": 2002,"name": "AT_NO_AUTOMOUNT"},{"import": 1446,"src": 2003,"name": "MS_SYNCHRONOUS"},{"import": 1446,"src": 2004,"name": "TIOCGDEV"},{"import": 1353,"src": 2005,"name": "SYS_write","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2006,"name": "IPPROTO_ROUTING"},{"import": 1353,"src": 2007,"name": "SYS_stat"},{"import": 1353,"src": 2008,"name": "SYS_rename"},{"import": 1146,"src": 2009,"name": "unlinkC"},{"import": 1446,"src": 2010,"name": "MS_UNBINDABLE"},{"import": 1446,"src": 2011,"name": "EPOLLIN"},{"import": 1146,"src": 2012,"name": "open"},{"import": 1446,"src": 2013,"name": "TCSETSW"},{"import": 1446,"src": 2014,"name": "PF_PPPOX"},{"import": 1146,"src": 2015,"name": "renameW"},{"import": 1446,"src": 2016,"name": "SO_PROTOCOL"},{"import": 1446,"src": 2017,"name": "SOL_ICMPV6"},{"import": 1353,"src": 2018,"name": "SYS_epoll_create1"},{"import": 1446,"src": 2019,"name": "PF_LLC"},{"import": 1353,"src": 2020,"name": "SYS_signalfd4"},{"import": 1446,"src": 2021,"name": "SA_RESETHAND","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2022,"name": "CAP_CHOWN"},{"import": 1446,"src": 2023,"name": "_LINUX_CAPABILITY_VERSION_3"},{"import": 1353,"src": 2024,"name": "SYS_setpgid"},{"import": 1446,"src": 2025,"name": "TCGETX"},{"import": 1353,"src": 2026,"name": "SYS_sched_yield","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2027,"name": "SYS_getgroups"},{"import": 1446,"src": 2028,"name": "S_IRWXU"},{"import": 1353,"src": 2029,"name": "SYS_setresgid"},{"import": 1446,"src": 2030,"name": "TIOCSBRK"},{"import": 1446,"src": 2031,"name": "SO_BPF_EXTENSIONS"},{"import": 1353,"src": 2032,"name": "SYS_prlimit64"},{"import": 1446,"src": 2033,"name": "PF_NETLINK"},{"import": 1446,"src": 2034,"name": "stack_t","kind": "const","type": 546,"value": 1454},{"import": 1446,"src": 2035,"name": "MS_STRICTATIME"},{"import": 1446,"src": 2036,"name": "IPPROTO_FRAGMENT"},{"import": 1353,"src": 2037,"name": "SYS_getresuid"},{"import": 1446,"src": 2038,"name": "RR_AAAA"},{"import": 1146,"src": 2039,"name": "RaiseError","kind": "const","type": 546,"value": 926},{"import": 1447,"src": 2040,"name": "ENSRCONNREFUSED"},{"import": 1146,"src": 2041,"name": "unlinkatC"},{"import": 1446,"src": 2042,"name": "TIOCGSOFTCAR"},{"import": 1353,"src": 2043,"name": "SYS_lseek","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2044,"name": "O_DIRECTORY"},{"import": 1446,"src": 2045,"name": "MFD_HUGE_1MB"},{"import": 1146,"src": 2046,"name": "linux","kind": "const","type": 546,"value": 1455},{"import": 1353,"src": 2047,"name": "SYS_epoll_pwait"},{"import": 1446,"src": 2048,"name": "TIOCMGET"},{"import": 1447,"src": 2049,"name": "ENSRDESTRUCTION"},{"import": 1353,"src": 2050,"name": "SYS_tkill","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2051,"name": "S_IFBLK"},{"import": 1446,"src": 2052,"name": "O_RDONLY","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2053,"name": "MFD_HUGE_16MB"},{"import": 1446,"src": 2054,"name": "cap_valid"},{"import": 1353,"src": 2055,"name": "SYS_rt_sigpending"},{"import": 1446,"src": 2056,"name": "SO_SNDBUF"},{"import": 1446,"src": 2057,"name": "SO_MARK"},{"import": 1146,"src": 2058,"name": "openC"},{"import": 1446,"src": 2059,"name": "CAP_BLOCK_SUSPEND"},{"import": 1353,"src": 2060,"name": "SYS_geteuid"},{"import": 1353,"src": 2061,"name": "SYS_fspick"},{"import": 1446,"src": 2062,"name": "statx_timestamp"},{"import": 1353,"src": 2063,"name": "O_PATH"},{"import": 1447,"src": 2064,"name": "EDOM"},{"import": 1446,"src": 2065,"name": "CAP_SETFCAP"},{"import": 1353,"src": 2066,"name": "SYS_userfaultfd"},{"import": 1353,"src": 2067,"name": "SYS_recvmsg"},{"import": 1146,"src": 2068,"name": "chdir"},{"import": 1446,"src": 2069,"name": "MFD_HUGE_2MB"},{"import": 1353,"src": 2070,"name": "SYS_settimeofday"},{"import": 1353,"src": 2071,"name": "SYS_sendmsg"},{"import": 1447,"src": 2072,"name": "EISNAM"},{"import": 1446,"src": 2073,"name": "AF_TIPC"},{"import": 1353,"src": 2074,"name": "SYS_io_uring_enter"},{"import": 1146,"src": 2075,"name": "EventFdError"},{"import": 1146,"src": 2076,"name": "dup2"},{"import": 1446,"src": 2077,"name": "AF_NETROM"},{"import": 1446,"src": 2078,"name": "SOL_NETLINK"},{"import": 1446,"src": 2079,"name": "MS_NOREMOTELOCK"},{"import": 1446,"src": 2080,"name": "WIFEXITED"},{"import": 1446,"src": 2081,"name": "SEEK_SET","kind": "const","type": 599,"value": null},{"import": 1447,"src": 2082,"name": "ESRCH"},{"import": 1446,"src": 2083,"name": "TIOCNOTTY"},{"import": 1353,"src": 2084,"name": "SYS_sched_getattr"},{"import": 1146,"src": 2085,"name": "kill"},{"import": 1446,"src": 2086,"name": "PF_CAN"},{"import": 1353,"src": 2087,"name": "SYS_io_cancel"},{"import": 1353,"src": 2088,"name": "SYS_set_tid_address"},{"import": 1353,"src": 2089,"name": "SYS_time"},{"import": 1353,"src": 2090,"name": "SYS_readlinkat"},{"import": 1446,"src": 2091,"name": "SIGTRAP"},{"import": 1447,"src": 2092,"name": "ECOMM"},{"import": 1446,"src": 2093,"name": "TCSBRKP"},{"import": 1353,"src": 2094,"name": "SYS_msgctl"},{"import": 1446,"src": 2095,"name": "S_IRGRP"},{"import": 1446,"src": 2096,"name": "IN_EXCL_UNLINK"},{"import": 1446,"src": 2097,"name": "STATX_BASIC_STATS"},{"import": 1446,"src": 2098,"name": "PROT_READ","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2099,"name": "IORING_OFF_CQ_RING"},{"import": 1353,"src": 2100,"name": "SYS_getcwd"},{"import": 1353,"src": 2101,"name": "SYS_io_pgetevents"},{"import": 1446,"src": 2102,"name": "CAP_NET_BROADCAST"},{"import": 1353,"src": 2103,"name": "ARCH_GET_FS"},{"import": 1446,"src": 2104,"name": "IN_CLOSE"},{"import": 1146,"src": 2105,"name": "mkdir"},{"import": 1353,"src": 2106,"name": "SYS_mknodat"},{"import": 1353,"src": 2107,"name": "SYS_exit"},{"import": 1353,"src": 2108,"name": "SYS_getrandom"},{"import": 1353,"src": 2109,"name": "SYS_kcmp"},{"import": 1446,"src": 2110,"name": "MS_NOSEC"},{"import": 1353,"src": 2111,"name": "F_GETSIG"},{"import": 1353,"src": 2112,"name": "REG_R9"},{"import": 1447,"src": 2113,"name": "EBADF","kind": "const","type": 599,"value": null},{"import": 1447,"src": 2114,"name": "ENOEXEC"},{"import": 1146,"src": 2115,"name": "accessW"},{"import": 1353,"src": 2116,"name": "SYS_fallocate"},{"import": 1446,"src": 2117,"name": "SOCK_RDM"},{"import": 1446,"src": 2118,"name": "TCSETX"},{"import": 1146,"src": 2119,"name": "SchedGetAffinityError"},{"import": 1446,"src": 2120,"name": "DT_SOCK"},{"import": 1146,"src": 2121,"name": "PollError"},{"import": 1146,"src": 2122,"name": "INotifyAddWatchError"},{"import": 1446,"src": 2123,"name": "PF_ALG"},{"import": 1447,"src": 2124,"name": "ENOTUNIQ"},{"import": 1446,"src": 2125,"name": "MFD_ALL_FLAGS"},{"import": 1353,"src": 2126,"name": "SYS_syncfs"},{"import": 1353,"src": 2127,"name": "SYS_getcpu"},{"import": 1146,"src": 140,"name": "munmap","kind": "const","type": 147,"value": 198},{"import": 1353,"src": 2128,"name": "MAP_LOCKED"},{"import": 1353,"src": 2129,"name": "SYS_security"},{"import": 1446,"src": 2130,"name": "DT_UNKNOWN"},{"import": 1446,"src": 2131,"name": "AT_STATX_SYNC_AS_STAT"},{"import": 1446,"src": 2132,"name": "SHUT_RD"},{"import": 1353,"src": 2133,"name": "SYS_rt_sigqueueinfo"},{"import": 1446,"src": 2134,"name": "WTERMSIG"},{"import": 1353,"src": 2135,"name": "SYS_semget"},{"import": 1146,"src": 2136,"name": "readlinkC"},{"import": 1447,"src": 2137,"name": "EL3RST"},{"import": 1446,"src": 2138,"name": "IPPROTO_GRE"},{"import": 1353,"src": 2139,"name": "SYS_clone3"},{"import": 1446,"src": 2140,"name": "IN_CLOSE_WRITE"},{"import": 1446,"src": 2141,"name": "SOCK_NONBLOCK"},{"import": 1446,"src": 2142,"name": "SO_MEMINFO"},{"import": 1446,"src": 2143,"name": "TIOCMBIS"},{"import": 1353,"src": 2144,"name": "SYS_fchdir"},{"import": 1446,"src": 2145,"name": "PF_SNA"},{"import": 1446,"src": 2146,"name": "CAP_FSETID"},{"import": 1446,"src": 2147,"name": "AF_SMC"},{"import": 1446,"src": 2148,"name": "TCGETS"},{"import": 1446,"src": 2149,"name": "PF_X25"},{"import": 1353,"src": 2150,"name": "ucontext_t","kind": "const","type": 546,"value": 1456},{"import": 1446,"src": 2151,"name": "SOL_RXRPC"},{"import": 1446,"src": 2152,"name": "TIOCSPGRP"},{"import": 1446,"src": 2153,"name": "PF_LOCAL"},{"import": 1447,"src": 2154,"name": "ENETDOWN"},{"import": 1446,"src": 2155,"name": "TIOCGETD"},{"import": 1446,"src": 2156,"name": "S_IROTH"},{"import": 1446,"src": 2157,"name": "SOL_TLS"},{"import": 1446,"src": 2158,"name": "S_IFDIR"},{"import": 1446,"src": 2159,"name": "MS_SHARED"},{"import": 1353,"src": 2160,"name": "SYS_openat","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2161,"name": "SO_MAX_PACING_RATE"},{"import": 1146,"src": 2162,"name": "socket"},{"import": 1446,"src": 2163,"name": "SO_PASSSEC"},{"import": 1446,"src": 2164,"name": "PF_WANPIPE"},{"import": 1447,"src": 2165,"name": "EBADR"},{"import": 1146,"src": 2166,"name": "freebsd"},{"import": 1446,"src": 2167,"name": "_LINUX_CAPABILITY_VERSION_2"},{"import": 1447,"src": 2168,"name": "EREMOTE"},{"import": 1146,"src": 2169,"name": "accessC"},{"import": 1447,"src": 2170,"name": "EREMCHG"},{"import": 1353,"src": 2171,"name": "SYS_getpmsg"},{"import": 1446,"src": 2172,"name": "IPPROTO_IPV6"},{"import": 1446,"src": 2173,"name": "AF_PACKET"},{"import": 1353,"src": 2174,"name": "SYS_swapoff"},{"import": 1446,"src": 2175,"name": "EPOLLHUP"},{"import": 1446,"src": 2176,"name": "S_IRUSR"},{"import": 1446,"src": 2177,"name": "SO_KEEPALIVE"},{"import": 1446,"src": 2178,"name": "SIGCONT"},{"import": 1446,"src": 2179,"name": "cap_user_header_t"},{"import": 1446,"src": 2180,"name": "TIOCPKT"},{"import": 1446,"src": 2181,"name": "AF_ATMPVC"},{"import": 1353,"src": 2182,"name": "O_CREAT"},{"import": 1446,"src": 2183,"name": "CLONE_PARENT_SETTID"},{"import": 1353,"src": 2184,"name": "SYS_clock_settime"},{"import": 1353,"src": 2185,"name": "SYS_utime"},{"import": 1146,"src": 2186,"name": "sysctlbynameC"},{"import": 1446,"src": 2187,"name": "S_IFIFO"},{"import": 1446,"src": 2188,"name": "AF_INET6"},{"import": 1446,"src": 2189,"name": "TIOCSCTTY"},{"import": 1146,"src": 2190,"name": "listen"},{"import": 1353,"src": 2191,"name": "SYS_mincore"},{"import": 1446,"src": 2192,"name": "AF_ATMSVC"},{"import": 1446,"src": 2193,"name": "SA_NODEFER"},{"import": 1446,"src": 2194,"name": "VFS_CAP_REVISION"},{"import": 1353,"src": 2195,"name": "SYS_mq_timedsend"},{"import": 1447,"src": 2196,"name": "ENOPROTOOPT"},{"import": 1353,"src": 2197,"name": "msghdr_const"},{"import": 1446,"src": 2198,"name": "F_OK"},{"import": 1146,"src": 2199,"name": "execveC"},{"import": 1353,"src": 2200,"name": "SYS_chdir"},{"import": 1447,"src": 2201,"name": "ENOMSG"},{"import": 1353,"src": 2202,"name": "F_SETLKW"},{"import": 1446,"src": 2203,"name": "PF_IPX"},{"import": 1446,"src": 2204,"name": "TIOCGSID"},{"import": 1353,"src": 2205,"name": "SYS_afs_syscall"},{"import": 1446,"src": 2206,"name": "TIOCSPTLCK"},{"import": 1446,"src": 2207,"name": "SO_DETACH_FILTER"},{"import": 1146,"src": 2208,"name": "gettimeofday"},{"import": 1353,"src": 2209,"name": "SYS_timer_create"},{"import": 1146,"src": 2210,"name": "ClockGetTimeError","kind": "const","type": 546,"value": 1375},{"import": 1353,"src": 2211,"name": "SYS_writev"},{"import": 1353,"src": 2212,"name": "SYS_ioctl","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2213,"name": "FIONREAD"},{"import": 1446,"src": 2214,"name": "TCFLSH"},{"import": 1446,"src": 2215,"name": "MAP_STACK"},{"import": 1353,"src": 2216,"name": "SYS_uname"},{"import": 1446,"src": 2217,"name": "IORING_OP_SYNC_FILE_RANGE"},{"import": 1146,"src": 298,"name": "isatty","kind": "const","type": 407,"value": 507},{"import": 1146,"src": 2218,"name": "windows","kind": "const","type": 546,"value": 1457},{"import": 1446,"src": 2219,"name": "IN_ALL_EVENTS"},{"import": 1446,"src": 2220,"name": "IPPROTO_IDP"},{"import": 1446,"src": 2221,"name": "AF_SNA"},{"import": 1446,"src": 2222,"name": "MFD_HUGE_256MB"},{"import": 1146,"src": 2223,"name": "DnExpandError"},{"import": 1446,"src": 2224,"name": "SIGSEGV","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2225,"name": "AF_ECONET"},{"import": 1146,"src": 2226,"name": "wasi"},{"import": 1446,"src": 2227,"name": "FUTEX_CLOCK_REALTIME"},{"import": 1353,"src": 2228,"name": "SYS_mq_getsetattr"},{"import": 1446,"src": 2229,"name": "IN_ATTRIB"},{"import": 1353,"src": 2230,"name": "F_DUPFD"},{"import": 1353,"src": 2231,"name": "O_TMPFILE"},{"import": 1446,"src": 2232,"name": "IORING_SETUP_IOPOLL"},{"import": 1353,"src": 2233,"name": "SYS_getsid"},{"import": 1446,"src": 2234,"name": "SO_TYPE"},{"import": 1446,"src": 2235,"name": "FUTEX_REQUEUE"},{"import": 1353,"src": 2236,"name": "SYS_unshare"},{"import": 1446,"src": 2237,"name": "SIGVTALRM"},{"import": 1446,"src": 2238,"name": "MSG_EOR"},{"import": 1353,"src": 2239,"name": "SYS_rt_sigprocmask","kind": "const","type": 599,"value": null},{"import": 1146,"src": 2240,"name": "KillError"},{"import": 1353,"src": 2241,"name": "SYS_lsetxattr"},{"import": 1446,"src": 2242,"name": "AF_ROSE"},{"import": 1353,"src": 2243,"name": "SYS_setitimer"},{"import": 1353,"src": 2244,"name": "SYS__sysctl"},{"import": 1446,"src": 2245,"name": "SIGSTKSZ"},{"import": 1353,"src": 2246,"name": "SYS_rt_sigtimedwait"},{"import": 1446,"src": 2247,"name": "IPPROTO_COMP"},{"import": 1353,"src": 2248,"name": "SYS_madvise"},{"import": 1353,"src": 2249,"name": "ARCH_GET_GS"},{"import": 1446,"src": 2250,"name": "HUGETLB_FLAG_ENCODE_512MB"},{"import": 1446,"src": 2251,"name": "IPPROTO_SCTP"},{"import": 1446,"src": 2252,"name": "SIGHUP"},{"import": 1446,"src": 2253,"name": "MFD_HUGE_2GB"},{"import": 1353,"src": 2254,"name": "gregset_t","kind": "const","type": 546,"value": 1458},{"import": 1353,"src": 2255,"name": "SYS_alarm"},{"import": 1446,"src": 2256,"name": "RWF_APPEND"},{"import": 1353,"src": 2257,"name": "SYS_creat"},{"import": 1146,"src": 2258,"name": "recvfrom"},{"import": 1446,"src": 2259,"name": "SO_ATTACH_REUSEPORT_CBPF"},{"import": 1446,"src": 2260,"name": "SIGTTOU"},{"import": 1353,"src": 2261,"name": "O_NOCTTY"},{"import": 1446,"src": 2262,"name": "AF_BRIDGE"},{"import": 1446,"src": 2263,"name": "SO_OOBINLINE"},{"import": 1446,"src": 2264,"name": "TIOCGSERIAL"},{"import": 1446,"src": 2265,"name": "PF_ISDN"},{"import": 1146,"src": 2266,"name": "ChangeCurDirError"},{"import": 1447,"src": 2267,"name": "EROFS"},{"import": 1353,"src": 2268,"name": "O_APPEND"},{"import": 1446,"src": 2269,"name": "SO_SNDBUFFORCE"},{"import": 1446,"src": 2270,"name": "CLONE_NEWUTS"},{"import": 1446,"src": 2271,"name": "SOL_ALG"},{"import": 1353,"src": 2272,"name": "SYS_brk"},{"import": 1447,"src": 2273,"name": "ENOTTY"},{"import": 1353,"src": 2274,"name": "SYS_setregid"},{"import": 1146,"src": 2275,"name": "freeNullDelimitedEnvMap"},{"import": 1353,"src": 2276,"name": "SYS_setgid"},{"import": 1447,"src": 2277,"name": "ELIBACC"},{"import": 1446,"src": 2278,"name": "CAP_SYS_PACCT"},{"import": 1446,"src": 2279,"name": "IORING_ENTER_GETEVENTS"},{"import": 1446,"src": 2280,"name": "SO_PEEK_OFF"},{"import": 1353,"src": 2281,"name": "greg_t","kind": "const","type": 546,"value": 609},{"import": 1353,"src": 2282,"name": "F_SETFL"},{"import": 1447,"src": 2283,"name": "EBADE"},{"import": 1446,"src": 2284,"name": "SOL_X25"},{"import": 1446,"src": 2285,"name": "SO_DETACH_BPF"},{"import": 1446,"src": 2286,"name": "sockaddr_in"},{"import": 1447,"src": 2287,"name": "ESOCKTNOSUPPORT"},{"import": 1353,"src": 2288,"name": "SYS_copy_file_range"},{"import": 1446,"src": 2289,"name": "IN_DELETE"},{"import": 1446,"src": 2290,"name": "STATX_ATTR_COMPRESSED"},{"import": 1447,"src": 2291,"name": "E2BIG"},{"import": 1446,"src": 2292,"name": "CPU_SETSIZE"},{"import": 1446,"src": 2293,"name": "CAP_NET_ADMIN"},{"import": 1446,"src": 2294,"name": "AF_ROUTE"},{"import": 1446,"src": 2295,"name": "MS_REMOUNT"},{"import": 1446,"src": 2296,"name": "io_sqring_offsets"},{"import": 1146,"src": 2297,"name": "accept4"},{"import": 1146,"src": 2298,"name": "errno","kind": "const","type": 307,"value": 373},{"import": 1446,"src": 2299,"name": "CAP_NET_RAW"},{"import": 1146,"src": 2300,"name": "renameC"},{"import": 1446,"src": 2301,"name": "SIGXFSZ"},{"import": 1446,"src": 2302,"name": "WCONTINUED"},{"import": 1446,"src": 2303,"name": "SIGILL","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2304,"name": "SYS_timerfd_gettime"},{"import": 1446,"src": 2305,"name": "IPPROTO_TP"},{"import": 1446,"src": 2306,"name": "EPOLLRDHUP"},{"import": 1446,"src": 2307,"name": "IOSQE_FIXED_FILE"},{"import": 1446,"src": 2308,"name": "IORING_SETUP_SQ_AFF"},{"import": 1446,"src": 2309,"name": "IN_OPEN"},{"import": 1353,"src": 2310,"name": "O_DIRECT"},{"import": 1447,"src": 2311,"name": "ETOOMANYREFS"},{"import": 1353,"src": 2312,"name": "SYS_shmdt"},{"import": 1146,"src": 2313,"name": "setsockopt"},{"import": 1446,"src": 2314,"name": "IN_CLOEXEC"},{"import": 1446,"src": 2315,"name": "CAP_LEASE"},{"import": 1446,"src": 2316,"name": "WUNTRACED"},{"import": 1146,"src": 2317,"name": "rename"},{"import": 1146,"src": 2318,"name": "isCygwinPty"},{"import": 1447,"src": 2319,"name": "ENOTCONN"},{"import": 1446,"src": 2320,"name": "SO_TXTIME"},{"import": 1446,"src": 2321,"name": "S_ISREG"},{"import": 1447,"src": 2322,"name": "ETIMEDOUT","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2323,"name": "WSTOPPED"},{"import": 1446,"src": 2324,"name": "AF_DECnet"},{"import": 1353,"src": 2325,"name": "SYS_rt_tgsigqueueinfo"},{"import": 1446,"src": 2326,"name": "MSG_FIN"},{"import": 1446,"src": 2327,"name": "WNOWAIT"},{"import": 1353,"src": 2328,"name": "SYS_swapon"},{"import": 1353,"src": 2329,"name": "fpstate","kind": "const","type": 546,"value": 1459},{"import": 1353,"src": 2330,"name": "SYS_query_module"},{"import": 1146,"src": 2331,"name": "dragonfly"},{"import": 1146,"src": 2332,"name": "unlinkatW"},{"import": 1353,"src": 2333,"name": "SYS_tuxcall"},{"import": 1353,"src": 2334,"name": "SYS_epoll_create"},{"import": 1446,"src": 2335,"name": "RUSAGE_SELF"},{"import": 1446,"src": 2336,"name": "AF_NETBEUI"},{"import": 1446,"src": 2337,"name": "SIG_UNBLOCK"},{"import": 1446,"src": 2338,"name": "CLOCK_REALTIME_ALARM"},{"import": 1447,"src": 2339,"name": "EISDIR","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2340,"name": "CLONE_UNTRACED"},{"import": 1353,"src": 2341,"name": "SYS_times"},{"import": 1447,"src": 2342,"name": "ECONNABORTED"},{"import": 1146,"src": 2343,"name": "MFD_NAME_PREFIX"},{"import": 1446,"src": 2344,"name": "CLONE_CHILD_CLEARTID"},{"import": 1353,"src": 2345,"name": "Elf_Symndx","kind": "const","type": 546,"value": 770},{"import": 1446,"src": 2346,"name": "AF_SECURITY"},{"import": 1446,"src": 2347,"name": "SOL_NFC"},{"import": 1447,"src": 2348,"name": "ENSROF"},{"import": 1446,"src": 2349,"name": "CAP_SYS_NICE"},{"import": 1446,"src": 2350,"name": "WEXITSTATUS"},{"import": 1446,"src": 2351,"name": "S_IXUSR"},{"import": 1446,"src": 2352,"name": "IPPROTO_DCCP"},{"import": 1446,"src": 2353,"name": "DT_BLK"},{"import": 1446,"src": 2354,"name": "MFD_HUGE_64KB"},{"import": 1146,"src": 2355,"name": "poll"},{"import": 1146,"src": 2356,"name": "execvpeC"},{"import": 1446,"src": 2357,"name": "SOL_IRDA"},{"import": 1446,"src": 2358,"name": "TIOCSETD"},{"import": 1446,"src": 2359,"name": "RWF_HIPRI"},{"import": 1353,"src": 2360,"name": "SYS_mq_notify"},{"import": 1446,"src": 2361,"name": "MSG_RST"},{"import": 1353,"src": 2362,"name": "SYS_setreuid"},{"import": 1446,"src": 2363,"name": "STDOUT_FILENO","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2364,"name": "EPOLL_CTL_MOD"},{"import": 1146,"src": 2365,"name": "SeekError","kind": "const","type": 546,"value": 1188},{"import": 1353,"src": 2366,"name": "SYS_getresgid"},{"import": 1446,"src": 2367,"name": "CAP_SYS_RAWIO"},{"import": 1146,"src": 2368,"name": "res_mkquery"},{"import": 1446,"src": 2369,"name": "PROT_GROWSDOWN"},{"import": 1146,"src": 2370,"name": "RecvFromError"},{"import": 1353,"src": 2371,"name": "SYS_getpgrp"},{"import": 1446,"src": 2372,"name": "MSG_ZEROCOPY"},{"import": 1446,"src": 2373,"name": "SO_GET_FILTER"},{"import": 1446,"src": 2374,"name": "CAP_SYS_CHROOT"},{"import": 1446,"src": 2375,"name": "IORING_OP_READV"},{"import": 1446,"src": 2376,"name": "SIG_BLOCK","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2377,"name": "IORING_OP_RECVMSG"},{"import": 1446,"src": 2378,"name": "sa_family_t"},{"import": 1353,"src": 2379,"name": "SYS_dup2"},{"import": 1353,"src": 2380,"name": "SYS_getrlimit"},{"import": 1446,"src": 2381,"name": "CAP_SYS_ADMIN"},{"import": 1446,"src": 2382,"name": "IN_IGNORED"},{"import": 1446,"src": 2383,"name": "SIGCHLD"},{"import": 1353,"src": 2384,"name": "SYS_getpriority"},{"import": 1146,"src": 2385,"name": "MemFdCreateError"},{"import": 1447,"src": 2386,"name": "ENSRTIMEOUT"},{"import": 1353,"src": 2387,"name": "SYS_prctl"},{"import": 1446,"src": 2388,"name": "S_IRWXG"},{"import": 1146,"src": 2389,"name": "gethostname"},{"import": 1353,"src": 2390,"name": "SYS_pidfd_send_signal"},{"import": 1446,"src": 2391,"name": "SO_TIMESTAMPNS_NEW"},{"import": 1446,"src": 2392,"name": "cap_user_data_t"},{"import": 1446,"src": 2393,"name": "mmsghdr_const"},{"import": 1446,"src": 2394,"name": "SIG_ERR"},{"import": 1446,"src": 2395,"name": "MSG_WAITALL"},{"import": 1446,"src": 2396,"name": "AF_NETLINK"},{"import": 1146,"src": 2397,"name": "send"},{"import": 1447,"src": 2398,"name": "ENSRNOTIMP"},{"import": 1446,"src": 2399,"name": "epoll_data","kind": "const","type": 546,"value": 1460},{"import": 1353,"src": 2400,"name": "SYS_getdents"},{"import": 1446,"src": 2401,"name": "PF_ASH"},{"import": 1446,"src": 2402,"name": "TFD_TIMER_CANCEL_ON_SET"},{"import": 1353,"src": 2403,"name": "F_GETOWNER_UIDS"},{"import": 1446,"src": 2404,"name": "PF_CAIF"},{"import": 1447,"src": 2405,"name": "EBADMSG"},{"import": 1446,"src": 2406,"name": "SIGSYS"},{"import": 1447,"src": 2407,"name": "ELIBMAX"},{"import": 1446,"src": 2408,"name": "STATX_ATTR_APPEND"},{"import": 1446,"src": 2409,"name": "CAP_AUDIT_WRITE"},{"import": 1353,"src": 2410,"name": "SYS_setrlimit"},{"import": 1446,"src": 2411,"name": "POLLNVAL"},{"import": 1446,"src": 2412,"name": "IPPROTO_MPLS"},{"import": 1447,"src": 2413,"name": "EEXIST","kind": "const","type": 599,"value": null},{"import": 1146,"src": 2414,"name": "MProtectError"},{"import": 1353,"src": 2415,"name": "SYS_msgsnd"},{"import": 1446,"src": 2416,"name": "IPPROTO_EGP"},{"import": 1446,"src": 2417,"name": "SIG_IGN"},{"import": 1446,"src": 2418,"name": "FUTEX_LOCK_PI"},{"import": 1446,"src": 2419,"name": "S_IWOTH"},{"import": 1446,"src": 2420,"name": "IN_ISDIR"},{"import": 1446,"src": 2421,"name": "TIOCSWINSZ"},{"import": 1146,"src": 2422,"name": "KQueueError"},{"import": 1446,"src": 2423,"name": "SIGIOT"},{"import": 1353,"src": 2424,"name": "SYS_accept"},{"import": 1146,"src": 2425,"name": "lseek_CUR"},{"import": 1446,"src": 2426,"name": "S_ISDIR"},{"import": 1447,"src": 2427,"name": "EDQUOT","kind": "const","type": 599,"value": null},{"import": 1447,"src": 2428,"name": "EMSGSIZE"},{"import": 1353,"src": 2429,"name": "REG_RIP","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2430,"name": "MFD_ALLOW_SEALING"},{"import": 1353,"src": 2431,"name": "SYS_msgget"},{"import": 1446,"src": 2432,"name": "SO_RXQ_OVFL"},{"import": 1353,"src": 2433,"name": "REG_RDI"},{"import": 1353,"src": 2434,"name": "SYS_kexec_file_load"},{"import": 1353,"src": 2435,"name": "SYS_sendmmsg"},{"import": 1353,"src": 2436,"name": "SYS_sched_setattr"},{"import": 1446,"src": 2437,"name": "HUGETLB_FLAG_ENCODE_1GB"},{"import": 1353,"src": 2438,"name": "SYS_migrate_pages"},{"import": 1446,"src": 2439,"name": "CAP_SETGID"},{"import": 1353,"src": 2440,"name": "SYS_epoll_ctl"},{"import": 1446,"src": 2441,"name": "SO_COOKIE"},{"import": 1353,"src": 2442,"name": "SYS_sysfs"},{"import": 1446,"src": 2443,"name": "SIGUNUSED"},{"import": 1446,"src": 2444,"name": "SIGABRT","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2445,"name": "CLONE_NEWNS"},{"import": 1447,"src": 2446,"name": "ENAVAIL"},{"import": 1446,"src": 2447,"name": "IORING_SETUP_SQPOLL"},{"import": 1446,"src": 2448,"name": "MFD_HUGE_8MB"},{"import": 1447,"src": 2449,"name": "ENOPKG"},{"import": 1446,"src": 2450,"name": "PF_PACKET"},{"import": 1446,"src": 2451,"name": "SA_NOCLDSTOP"},{"import": 1447,"src": 2452,"name": "EREMOTEIO"},{"import": 1446,"src": 2453,"name": "CLONE_SIGHAND"},{"import": 1353,"src": 2454,"name": "SYS_removexattr"},{"import": 1446,"src": 2455,"name": "CAP_AUDIT_READ"},{"import": 1146,"src": 2456,"name": "symlink"},{"import": 1446,"src": 2457,"name": "MAP_SHARED_VALIDATE"},{"import": 1446,"src": 2458,"name": "SO_ATTACH_BPF"},{"import": 1446,"src": 2459,"name": "SO_SNDTIMEO_NEW"},{"import": 1446,"src": 2460,"name": "io_cqring_offsets"},{"import": 1446,"src": 2461,"name": "MSG_CTRUNC"},{"import": 1353,"src": 2462,"name": "SYS_connect"},{"import": 1446,"src": 2463,"name": "IOSQE_IO_DRAIN"},{"import": 1447,"src": 2464,"name": "ENSRNOTFOUND"},{"import": 1446,"src": 2465,"name": "CAP_FOWNER"},{"import": 1446,"src": 2466,"name": "VFS_CAP_FLAGS_EFFECTIVE"},{"import": 1353,"src": 2467,"name": "SYS_get_kernel_syms"},{"import": 1446,"src": 2468,"name": "WSTOPSIG"},{"import": 1353,"src": 2469,"name": "SYS_sched_getaffinity"},{"import": 1446,"src": 2470,"name": "SO_RCVTIMEO_NEW"},{"import": 1446,"src": 2471,"name": "MAP_NONBLOCK"},{"import": 1446,"src": 2472,"name": "SOCK_PACKET"},{"import": 1353,"src": 2473,"name": "SYS_setdomainname"},{"import": 1446,"src": 2474,"name": "AF_WANPIPE"},{"import": 1146,"src": 2475,"name": "MakeDirError"},{"import": 1353,"src": 2476,"name": "SYS_lremovexattr"},{"import": 1446,"src": 2477,"name": "CAP_SYS_PTRACE"},{"import": 1446,"src": 2478,"name": "VFS_CAP_U32_1"},{"import": 1446,"src": 2479,"name": "EPOLLEXCLUSIVE"},{"import": 1353,"src": 2480,"name": "REG_RCX"},{"import": 1353,"src": 2481,"name": "SYS_eventfd"},{"import": 1446,"src": 2482,"name": "SOL_PNPIPE"},{"import": 1446,"src": 2483,"name": "CAP_DAC_OVERRIDE"},{"import": 1446,"src": 2484,"name": "SIGTTIN"},{"import": 1353,"src": 2485,"name": "SYS_name_to_handle_at"},{"import": 1447,"src": 2486,"name": "EIDRM"},{"import": 1446,"src": 2487,"name": "SHUT_RDWR"},{"import": 1146,"src": 2488,"name": "setreuid"},{"import": 1353,"src": 2489,"name": "SYS_getpid"},{"import": 1146,"src": 2490,"name": "sched_getaffinity"},{"import": 1353,"src": 2491,"name": "SYS_chroot"},{"import": 1447,"src": 2492,"name": "ENOTSOCK"},{"import": 1446,"src": 2493,"name": "CLOCK_SGI_CYCLE"},{"import": 1446,"src": 2494,"name": "SO_LINGER"},{"import": 1353,"src": 2495,"name": "SYS_nanosleep"},{"import": 1446,"src": 2496,"name": "pollfd"},{"import": 1146,"src": 2497,"name": "EpollCtlError"},{"import": 1353,"src": 2498,"name": "O_SYNC"},{"import": 1146,"src": 2499,"name": "SysCtlError","kind": "const","type": 546,"value": 1461},{"import": 1353,"src": 2500,"name": "SYS_nfsservctl"},{"import": 1446,"src": 2501,"name": "sockaddr_in6"},{"import": 1353,"src": 2502,"name": "SYS_quotactl"},{"import": 1446,"src": 2503,"name": "IPPROTO_PUP"},{"import": 1446,"src": 2504,"name": "AF_INET"},{"import": 1446,"src": 2505,"name": "EPOLLRDNORM"},{"import": 1146,"src": 2506,"name": "netbsd"},{"import": 1446,"src": 2507,"name": "PF_SECURITY"},{"import": 1446,"src": 2508,"name": "CLONE_PTRACE"},{"import": 1353,"src": 2509,"name": "SYS_exit_group","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2510,"name": "SYS_waitid"},{"import": 1146,"src": 2511,"name": "dn_expand"},{"import": 1446,"src": 2512,"name": "SO_TIMESTAMP_OLD"},{"import": 1446,"src": 2513,"name": "EPOLLONESHOT"},{"import": 1446,"src": 2514,"name": "X_OK"},{"import": 1446,"src": 2515,"name": "IORING_UNREGISTER_FILES"},{"import": 1447,"src": 2516,"name": "EHOSTDOWN"},{"import": 1446,"src": 2517,"name": "SO_SECURITY_ENCRYPTION_NETWORK"},{"import": 1446,"src": 2518,"name": "STATX_BLOCKS"},{"import": 1446,"src": 2519,"name": "IPPROTO_UDP"},{"import": 1446,"src": 2520,"name": "CLOCK_TAI"},{"import": 1446,"src": 2521,"name": "TIOCLINUX"},{"import": 1446,"src": 2522,"name": "SO_BUSY_POLL"},{"import": 1447,"src": 2523,"name": "EDEADLK"},{"import": 1446,"src": 2524,"name": "sigset_t","kind": "const","type": 546,"value": 1448},{"import": 1146,"src": 2525,"name": "pipe"},{"import": 1446,"src": 2526,"name": "AF_APPLETALK"},{"import": 1353,"src": 2527,"name": "SYS_remap_file_pages"},{"import": 1447,"src": 2528,"name": "ENSRREFUSED"},{"import": 1446,"src": 2529,"name": "FUTEX_FD"},{"import": 1446,"src": 2530,"name": "MS_MOVE"},{"import": 1353,"src": 2531,"name": "SYS_sched_get_priority_min"},{"import": 1146,"src": 2532,"name": "createNullDelimitedEnvMap"},{"import": 1446,"src": 2533,"name": "AF_LLC"},{"import": 1353,"src": 2534,"name": "SYS_dup3"},{"import": 1353,"src": 2535,"name": "SYS_wait4"},{"import": 1353,"src": 2536,"name": "O_NOATIME"},{"import": 1446,"src": 2537,"name": "MINSIGSTKSZ"},{"import": 1353,"src": 2538,"name": "SYS_signalfd"},{"import": 1446,"src": 2539,"name": "TCSETXF"},{"import": 1446,"src": 2540,"name": "S_IFCHR"},{"import": 1446,"src": 2541,"name": "SIGUSR1"},{"import": 1446,"src": 2542,"name": "SOCK_DCCP"},{"import": 1447,"src": 2543,"name": "EBFONT"},{"import": 1446,"src": 2544,"name": "MAP_POPULATE"},{"import": 1446,"src": 2545,"name": "EPOLL_CTL_ADD"},{"import": 1353,"src": 2546,"name": "O_TRUNC"},{"import": 1446,"src": 2547,"name": "MS_NOEXEC"},{"import": 1353,"src": 2548,"name": "ARCH_SET_FS","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2549,"name": "MS_BORN"},{"import": 1353,"src": 2550,"name": "SYS_sigaltstack"},{"import": 1446,"src": 2551,"name": "RR_CNAME"},{"import": 1353,"src": 2552,"name": "SYS_pwritev2"},{"import": 1449,"src": 2553,"name": "iovec","kind": "const","type": 546,"value": 1462},{"import": 1446,"src": 2554,"name": "SIGPOLL"},{"import": 1353,"src": 2555,"name": "SYS_io_destroy"},{"import": 1446,"src": 2556,"name": "SCM_TXTIME"},{"import": 1446,"src": 2557,"name": "STATX_ATTR_IMMUTABLE"},{"import": 1446,"src": 2558,"name": "AT_SYMLINK_NOFOLLOW"},{"import": 1446,"src": 2559,"name": "VFS_CAP_REVISION_1"},{"import": 1446,"src": 2560,"name": "IN_NONBLOCK"},{"import": 1446,"src": 2561,"name": "TIOCGPGRP"},{"import": 1447,"src": 2562,"name": "EAGAIN","kind": "const","type": 599,"value": null},{"import": 1447,"src": 2563,"name": "ENOSPC","kind": "const","type": 599,"value": null},{"import": 1146,"src": 2564,"name": "KEventError"},{"import": 1146,"src": 2565,"name": "FutimensError"},{"import": 1446,"src": 2566,"name": "SA_ONSTACK"},{"import": 1446,"src": 2567,"name": "IORING_REGISTER_FILES"},{"import": 1446,"src": 2568,"name": "PF_BLUETOOTH"},{"import": 1146,"src": 2569,"name": "SendError"},{"import": 1446,"src": 2570,"name": "MFD_HUGE_SHIFT"},{"import": 1446,"src": 2571,"name": "SOCK_CLOEXEC"},{"import": 1446,"src": 2572,"name": "PF_UNSPEC"},{"import": 1446,"src": 2573,"name": "addrinfo"},{"import": 1146,"src": 317,"name": "sched_yield","kind": "const","type": 428,"value": 568},{"import": 1446,"src": 2574,"name": "inotify_event"},{"import": 1446,"src": 2575,"name": "SO_SNDTIMEO"},{"import": 1446,"src": 2576,"name": "PF_BRIDGE"},{"import": 1446,"src": 2577,"name": "IPPROTO_NONE"},{"import": 1446,"src": 2578,"name": "SIGALRM"},{"import": 1446,"src": 2579,"name": "CAP_TO_MASK"},{"import": 1446,"src": 2580,"name": "epoll_event","kind": "const","type": 546,"value": 1463},{"import": 1446,"src": 2581,"name": "HUGETLB_FLAG_ENCODE_16MB"},{"import": 1146,"src": 122,"name": "exit","kind": "const","type": 128,"value": 179},{"import": 1446,"src": 2582,"name": "IORING_OP_READ_FIXED"},{"import": 1446,"src": 2583,"name": "MFD_HUGE_512KB"},{"import": 1446,"src": 2584,"name": "AF_KEY"},{"import": 1353,"src": 2585,"name": "SYS_sendfile"},{"import": 1446,"src": 2586,"name": "S_IXOTH"},{"import": 1446,"src": 2587,"name": "SO_PRIORITY"},{"import": 1146,"src": 2588,"name": "pipe2"},{"import": 1447,"src": 2589,"name": "ENSRNOMEM"},{"import": 1446,"src": 2590,"name": "S_IWGRP"},{"import": 1353,"src": 2591,"name": "SYS_ioperm"},{"import": 1446,"src": 2592,"name": "TCSBRK"},{"import": 1353,"src": 2593,"name": "SYS_fremovexattr"},{"import": 1353,"src": 2594,"name": "O_NDELAY"},{"import": 1146,"src": 2595,"name": "system","kind": "const","type": 546,"value": 1455},{"import": 1446,"src": 2596,"name": "SOCK_STREAM"},{"import": 1447,"src": 2597,"name": "EWOULDBLOCK"},{"import": 1353,"src": 2598,"name": "REG_RSP"},{"import": 1446,"src": 2599,"name": "TIOCSSOFTCAR"},{"import": 1446,"src": 2600,"name": "SO_PEERNAME"},{"import": 1146,"src": 2601,"name": "MMapError","kind": "const","type": 546,"value": 1228},{"import": 1146,"src": 2602,"name": "GetHostNameError"},{"import": 1446,"src": 2603,"name": "SO_PASSCRED"},{"import": 1447,"src": 2604,"name": "EDESTADDRREQ","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2605,"name": "SYS_ftruncate"},{"import": 1446,"src": 2606,"name": "SO_SNDLOWAT"},{"import": 1446,"src": 2607,"name": "EPOLLWAKEUP"},{"import": 1353,"src": 2608,"name": "SYS_fchmodat"},{"import": 1353,"src": 2609,"name": "SYS_set_thread_area"},{"import": 1446,"src": 2610,"name": "pid_t","kind": "const","type": 546,"value": 667},{"import": 1446,"src": 2611,"name": "IPPROTO_TCP"},{"import": 1446,"src": 2612,"name": "IORING_OP_SENDMSG"},{"import": 1353,"src": 2613,"name": "SYS_pkey_free"},{"import": 1353,"src": 2614,"name": "SYS_io_submit"},{"import": 1446,"src": 2615,"name": "S_IFMT"},{"import": 1146,"src": 2616,"name": "setuid"},{"import": 1146,"src": 2617,"name": "chdirC"},{"import": 1353,"src": 2618,"name": "SYS_sched_rr_get_interval"},{"import": 1446,"src": 2619,"name": "SOCK_RAW"},{"import": 1446,"src": 2620,"name": "rusage"},{"import": 1446,"src": 2621,"name": "dl_phdr_info"},{"import": 1447,"src": 2622,"name": "ENOENT","kind": "const","type": 599,"value": null},{"import": 1146,"src": 2623,"name": "rmdir"},{"import": 1446,"src": 2624,"name": "MSG_CONFIRM"},{"import": 1446,"src": 2625,"name": "MS_SLAVE"},{"import": 1353,"src": 2626,"name": "SYS_umask"},{"import": 1353,"src": 2627,"name": "F_SETOWN"},{"import": 1146,"src": 2628,"name": "access"},{"import": 1353,"src": 2629,"name": "SYS_gettid","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2630,"name": "MNT_FORCE"},{"import": 1447,"src": 2631,"name": "ESPIPE","kind": "const","type": 599,"value": null},{"import": 1146,"src": 85,"name": "abort","kind": "const","type": 85,"value": 118},{"import": 1353,"src": 2632,"name": "SYS_fsconfig"},{"import": 1446,"src": 2633,"name": "CAP_SYS_RESOURCE"},{"import": 1446,"src": 2634,"name": "TCSETAF"},{"import": 1446,"src": 2635,"name": "MS_NODIRATIME"},{"import": 1353,"src": 2636,"name": "SYS_futex","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2637,"name": "STATX_NLINK"},{"import": 1447,"src": 2638,"name": "ENOTNAM"},{"import": 1446,"src": 2639,"name": "AT_SYMLINK_FOLLOW"},{"import": 1446,"src": 2640,"name": "STATX_CTIME"},{"import": 1353,"src": 2641,"name": "REG_R15"},{"import": 1353,"src": 2642,"name": "SYS_getitimer"},{"import": 1146,"src": 2643,"name": "inotify_add_watchC"},{"import": 1446,"src": 2644,"name": "FUTEX_TRYLOCK_PI"},{"import": 1146,"src": 2645,"name": "realpath"},{"import": 1447,"src": 2646,"name": "EBADRQC"},{"import": 1353,"src": 2647,"name": "SYS_flock"},{"import": 1146,"src": 112,"name": "close","kind": "const","type": 120,"value": 168},{"import": 1446,"src": 2648,"name": "SOL_SOCKET"},{"import": 1446,"src": 2649,"name": "IORING_UNREGISTER_EVENTFD"},{"import": 1446,"src": 2650,"name": "EPOLLERR"},{"import": 1446,"src": 2651,"name": "MAP_FIXED"},{"import": 1353,"src": 2652,"name": "REG_CR2"},{"import": 1146,"src": 2653,"name": "waitpid"},{"import": 1446,"src": 2654,"name": "IORING_OP_NOP"},{"import": 1447,"src": 2655,"name": "ENAMETOOLONG","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2656,"name": "SO_PEERSEC"},{"import": 1446,"src": 2657,"name": "SO_BINDTOIFINDEX"},{"import": 1353,"src": 2658,"name": "SYS_inotify_init1"},{"import": 1353,"src": 2659,"name": "fpregset_t","kind": "const","type": 546,"value": 1464},{"import": 1446,"src": 2660,"name": "CLONE_VFORK"},{"import": 1446,"src": 2661,"name": "MSG_ERRQUEUE"},{"import": 1446,"src": 2662,"name": "S_ISUID"},{"import": 1446,"src": 2663,"name": "CLONE_CHILD_SETTID"},{"import": 1353,"src": 2664,"name": "SYS_renameat2"},{"import": 1353,"src": 2665,"name": "SYS_rt_sigaction","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2666,"name": "MAP_NORESERVE"},{"import": 1446,"src": 2667,"name": "MSG_NOSIGNAL"},{"import": 1353,"src": 2668,"name": "SYS_getppid"},{"import": 1446,"src": 2669,"name": "AF_IEEE802154"},{"import": 1446,"src": 2670,"name": "PROT_GROWSUP"},{"import": 1146,"src": 341,"name": "clock_gettime","kind": "const","type": 459,"value": 613},{"import": 1446,"src": 2671,"name": "TIOCGPKT"},{"import": 1446,"src": 2672,"name": "SO_NOFCS"},{"import": 1446,"src": 2673,"name": "IPPROTO_ESP"},{"import": 1446,"src": 2674,"name": "AF_NFC"},{"import": 1447,"src": 2675,"name": "EDOTDOT"},{"import": 1446,"src": 2676,"name": "SO_ERROR"},{"import": 1353,"src": 2677,"name": "SYS_fcntl"},{"import": 1446,"src": 2678,"name": "IORING_FEAT_SINGLE_MMAP"},{"import": 1353,"src": 2679,"name": "O_EXCL"},{"import": 1353,"src": 2680,"name": "SYS_timer_settime"},{"import": 1446,"src": 2681,"name": "PF_MPLS"},{"import": 1146,"src": 221,"name": "unexpectedErrno","kind": "const","type": 309,"value": 375},{"import": 1446,"src": 2682,"name": "in_port_t"},{"import": 1353,"src": 2683,"name": "SYS_fsetxattr"},{"import": 1446,"src": 2684,"name": "PF_NFC"},{"import": 1353,"src": 2685,"name": "SYS_getdents64"},{"import": 1146,"src": 2686,"name": "EpollCreateError"},{"import": 1353,"src": 2687,"name": "timespec","kind": "const","type": 546,"value": 972},{"import": 1446,"src": 2688,"name": "CLONE_SYSVSEM"},{"import": 1446,"src": 2689,"name": "IPPROTO_DSTOPTS"},{"import": 1446,"src": 2690,"name": "MAP_SYNC"},{"import": 1353,"src": 2691,"name": "REG_ERR"},{"import": 1446,"src": 2692,"name": "PF_PHONET"},{"import": 1447,"src": 2693,"name": "ENOANO"},{"import": 1447,"src": 2694,"name": "ENOMEM","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2695,"name": "SYS_munlockall"},{"import": 1447,"src": 2696,"name": "ECHRNG"},{"import": 1446,"src": 2697,"name": "SCM_WIFI_STATUS"},{"import": 1353,"src": 2698,"name": "SYS_epoll_wait"},{"import": 1446,"src": 2699,"name": "SIGUSR2"},{"import": 1446,"src": 2700,"name": "PF_ECONET"},{"import": 1446,"src": 2701,"name": "SO_DONTROUTE"},{"import": 1446,"src": 2702,"name": "IORING_OP_FSYNC"},{"import": 1446,"src": 2703,"name": "cpu_set_t"},{"import": 1446,"src": 2704,"name": "MS_SILENT"},{"import": 1446,"src": 2705,"name": "O_WRONLY","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2706,"name": "SO_TIMESTAMP_NEW"},{"import": 1446,"src": 2707,"name": "IPPROTO_RSVP"},{"import": 1353,"src": 2708,"name": "SYS_lookup_dcookie"},{"import": 1446,"src": 2709,"name": "SOL_DCCP"},{"import": 1446,"src": 2710,"name": "CPU_COUNT"},{"import": 1447,"src": 2711,"name": "ENOLCK"},{"import": 1353,"src": 2712,"name": "SYS_futimesat"},{"import": 1447,"src": 2713,"name": "ENONET"},{"import": 1446,"src": 2714,"name": "PF_IUCV"},{"import": 1446,"src": 2715,"name": "SIG_DFL","kind": "const","type": 1465,"value": null},{"import": 1446,"src": 2716,"name": "VFS_CAP_REVISION_2"},{"import": 1446,"src": 2717,"name": "SOL_KCM"},{"import": 1146,"src": 2718,"name": "GetCwdError"},{"import": 1446,"src": 2719,"name": "CAP_SYS_TIME"},{"import": 1353,"src": 2720,"name": "SYS_open_tree"},{"import": 1447,"src": 2721,"name": "ENOCSI"},{"import": 1446,"src": 2722,"name": "W_OK"},{"import": 1446,"src": 2723,"name": "DT_DIR"},{"import": 1446,"src": 2724,"name": "SOL_LLC"},{"import": 1446,"src": 2725,"name": "siginfo_t","kind": "const","type": 546,"value": 1364},{"import": 1353,"src": 2726,"name": "SYS_setns"},{"import": 1446,"src": 2727,"name": "IPPROTO_PIM"},{"import": 1353,"src": 2728,"name": "F_SETSIG"},{"import": 1446,"src": 2729,"name": "TIOCSSERIAL"},{"import": 1446,"src": 2730,"name": "S_IRWXO"},{"import": 1446,"src": 2731,"name": "SIG_SETMASK","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2732,"name": "SYS_getpgid"},{"import": 1446,"src": 2733,"name": "TIOCGEXCL"},{"import": 1446,"src": 2734,"name": "nfds_t"},{"import": 1146,"src": 2735,"name": "OpenError","kind": "const","type": 546,"value": 1348},{"import": 1353,"src": 2736,"name": "SYS_vmsplice"},{"import": 1446,"src": 2737,"name": "IPPROTO_ICMPV6"},{"import": 1353,"src": 2738,"name": "SYS_flistxattr"},{"import": 1446,"src": 2739,"name": "SOL_IPV6"},{"import": 1353,"src": 2740,"name": "SYS_seccomp"},{"import": 1353,"src": 2741,"name": "mcontext_t","kind": "const","type": 546,"value": 1466},{"import": 1446,"src": 2742,"name": "AT_REMOVEDIR"},{"import": 1353,"src": 2743,"name": "SYS_setpriority"},{"import": 1446,"src": 2744,"name": "SA_RESTORER","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2745,"name": "SOL_RDS"},{"import": 1446,"src": 2746,"name": "mmsghdr"},{"import": 1447,"src": 2747,"name": "ECONNREFUSED"},{"import": 1146,"src": 111,"name": "lseek_END","kind": "const","type": 117,"value": 164},{"import": 1446,"src": 2748,"name": "MS_MGC_VAL"},{"import": 1447,"src": 2749,"name": "EBADFD"},{"import": 1353,"src": 2750,"name": "VDSO_GETCPU_VER"},{"import": 1446,"src": 2751,"name": "CLONE_NEWCGROUP"},{"import": 1446,"src": 2752,"name": "TCGETA"},{"import": 1353,"src": 2753,"name": "SYS_acct"},{"import": 1446,"src": 2754,"name": "SOMAXCONN"},{"import": 1353,"src": 2755,"name": "SYS_setfsgid"},{"import": 1446,"src": 2756,"name": "STATX_UID"},{"import": 1446,"src": 2757,"name": "MSG_TRUNC"},{"import": 1447,"src": 2758,"name": "EPIPE","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2759,"name": "AT_STATX_SYNC_TYPE"},{"import": 1446,"src": 2760,"name": "MAP_SHARED","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2761,"name": "CLONE_IO"},{"import": 1446,"src": 2762,"name": "io_uring_params"},{"import": 1353,"src": 2763,"name": "F_GETFD"},{"import": 1146,"src": 2764,"name": "readlink"},{"import": 1447,"src": 2765,"name": "ETXTBSY","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2766,"name": "sigcontext"},{"import": 1446,"src": 2767,"name": "RUSAGE_THREAD"},{"import": 1446,"src": 2768,"name": "_LINUX_CAPABILITY_U32S_1"},{"import": 1446,"src": 2769,"name": "SO_REUSEPORT"},{"import": 1446,"src": 2770,"name": "FUTEX_WAIT_BITSET"},{"import": 1353,"src": 2771,"name": "SYS_dup"},{"import": 1446,"src": 2772,"name": "SOCK_DGRAM"},{"import": 1446,"src": 2773,"name": "CAP_LINUX_IMMUTABLE"},{"import": 1353,"src": 2774,"name": "SYS_io_getevents"},{"import": 1353,"src": 2775,"name": "SYS_recvmmsg"},{"import": 1446,"src": 2776,"name": "IN_ONLYDIR"},{"import": 1446,"src": 2777,"name": "POLLOUT"},{"import": 1353,"src": 2778,"name": "SYS_clock_adjtime"},{"import": 1353,"src": 2779,"name": "SYS_perf_event_open"},{"import": 1447,"src": 2780,"name": "EPERM","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2781,"name": "WEXITED"},{"import": 1146,"src": 2782,"name": "inotify_rm_watch"},{"import": 1447,"src": 2783,"name": "ENFILE","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2784,"name": "SYS_close","kind": "const","type": 599,"value": null},{"import": 1447,"src": 2785,"name": "EADDRINUSE"},{"import": 1446,"src": 2786,"name": "TIOCGPTLCK"},{"import": 1446,"src": 2787,"name": "SO_TIMESTAMPING_NEW"},{"import": 1446,"src": 2788,"name": "CLONE_NEWNET"},{"import": 1446,"src": 2789,"name": "SO_BSDCOMPAT"},{"import": 1447,"src": 2790,"name": "ENOTSUP"},{"import": 1353,"src": 2791,"name": "SYS_keyctl"},{"import": 1446,"src": 2792,"name": "all_mask"},{"import": 1446,"src": 2793,"name": "FUTEX_WAKE","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2794,"name": "REG_R14"},{"import": 1146,"src": 2795,"name": "SigaltstackError"},{"import": 1446,"src": 2796,"name": "STATX_ATTR_ENCRYPTED"},{"import": 1146,"src": 2797,"name": "getsockoptError"},{"import": 1447,"src": 2798,"name": "EIO","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2799,"name": "CAP_TO_INDEX"},{"import": 1446,"src": 2800,"name": "CLONE_NEWUSER"},{"import": 1353,"src": 2801,"name": "O_ASYNC"},{"import": 1446,"src": 2802,"name": "CLOCK_MONOTONIC_RAW"},{"import": 1353,"src": 2803,"name": "SYS_ppoll"},{"import": 1353,"src": 2804,"name": "VDSO_GETCPU_SYM"},{"import": 1353,"src": 2805,"name": "SYS_ioprio_set"},{"import": 1353,"src": 2806,"name": "REG_RBX"},{"import": 1353,"src": 2807,"name": "SYS_preadv2"},{"import": 1146,"src": 368,"name": "lseek_SET","kind": "const","type": 529,"value": 722},{"import": 1353,"src": 2808,"name": "SYS_rmdir"},{"import": 1446,"src": 2809,"name": "AF_ASH"},{"import": 1146,"src": 2810,"name": "UnlinkatError"},{"import": 1146,"src": 2811,"name": "epoll_ctl"},{"import": 1353,"src": 2812,"name": "SYS_move_mount"},{"import": 1446,"src": 2813,"name": "MFD_HUGE_1GB"},{"import": 1446,"src": 2814,"name": "EPOLLPRI"},{"import": 1446,"src": 2815,"name": "CAP_SYS_MODULE"},{"import": 1353,"src": 2816,"name": "SYS_lstat"},{"import": 1146,"src": 2817,"name": "connect"},{"import": 1446,"src": 2818,"name": "CAP_SYSLOG"},{"import": 1146,"src": 2819,"name": "SchedYieldError","kind": "const","type": 546,"value": 1366},{"import": 1446,"src": 2820,"name": "RWF_SYNC"},{"import": 1446,"src": 2821,"name": "PF_APPLETALK"},{"import": 1353,"src": 2822,"name": "SYS_rseq"},{"import": 1447,"src": 2823,"name": "EHOSTUNREACH"},{"import": 1446,"src": 2824,"name": "TIOCCBRK"},{"import": 1446,"src": 2825,"name": "IN_ACCESS"},{"import": 1353,"src": 2826,"name": "SYS_socketpair"},{"import": 1446,"src": 2827,"name": "MS_DIRSYNC"},{"import": 1446,"src": 2828,"name": "SO_ACCEPTCONN"},{"import": 1446,"src": 2829,"name": "HUGETLB_FLAG_ENCODE_32MB"},{"import": 1447,"src": 2830,"name": "EINTR","kind": "const","type": 599,"value": null},{"import": 1447,"src": 2831,"name": "ENOTEMPTY"},{"import": 1446,"src": 2832,"name": "EPOLLRDBAND"},{"import": 1353,"src": 2833,"name": "SYS_move_pages"},{"import": 1447,"src": 2834,"name": "ENSRFORMERR"},{"import": 1446,"src": 2835,"name": "CLONE_SETTLS"},{"import": 1353,"src": 2836,"name": "SYS_ioprio_get"},{"import": 1146,"src": 128,"name": "raise","kind": "const","type": 134,"value": 185},{"import": 1446,"src": 2837,"name": "IN_CREATE"},{"import": 1446,"src": 2838,"name": "AF_IB"},{"import": 1353,"src": 2839,"name": "SYS_inotify_init"},{"import": 1447,"src": 2840,"name": "EMLINK"},{"import": 1447,"src": 2841,"name": "ENSRBADNAME"},{"import": 1446,"src": 2842,"name": "IPPROTO_IP"},{"import": 1446,"src": 2843,"name": "PF_RXRPC"},{"import": 1353,"src": 2844,"name": "F_GETOWN"},{"import": 1446,"src": 2845,"name": "HUGETLB_FLAG_ENCODE_64KB"},{"import": 1446,"src": 2846,"name": "CLOCK_BOOTTIME_ALARM"},{"import": 1353,"src": 2847,"name": "SYS_shmctl"},{"import": 1446,"src": 2848,"name": "MS_I_VERSION"},{"import": 1446,"src": 2849,"name": "MFD_HUGE_16GB"},{"import": 1353,"src": 2850,"name": "SYS_mq_unlink"},{"import": 1447,"src": 2851,"name": "EPROTO"},{"import": 1446,"src": 2852,"name": "AF_UNSPEC"},{"import": 1446,"src": 2853,"name": "PF_FILE"},{"import": 1353,"src": 2854,"name": "SYS_timer_getoverrun"},{"import": 1353,"src": 2855,"name": "SYS_add_key"},{"import": 1146,"src": 2856,"name": "ReadError","kind": "const","type": 546,"value": 585},{"import": 1446,"src": 2857,"name": "RWF_NOWAIT"},{"import": 1353,"src": 2858,"name": "SYS_semop"},{"import": 1146,"src": 296,"name": "getenv","kind": "const","type": 405,"value": 505},{"import": 1446,"src": 2859,"name": "PF_MAX"},{"import": 1353,"src": 2860,"name": "SYS_sync"},{"import": 1146,"src": 2861,"name": "setgid"},{"import": 1447,"src": 2862,"name": "ELIBSCN"},{"import": 1146,"src": 2863,"name": "symlinkatC"},{"import": 1446,"src": 2864,"name": "DT_LNK"},{"import": 1146,"src": 2865,"name": "WriteError","kind": "const","type": 546,"value": 613},{"import": 1446,"src": 2866,"name": "DT_REG"},{"import": 1353,"src": 2867,"name": "SYS_fstat","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2868,"name": "IPPROTO_BEETPH"},{"import": 1446,"src": 2869,"name": "SO_WIFI_STATUS"},{"import": 1446,"src": 2870,"name": "MFD_HUGE_32MB"},{"import": 1353,"src": 2871,"name": "SYS_linkat"},{"import": 1446,"src": 2872,"name": "PF_ATMPVC"},{"import": 1353,"src": 2873,"name": "SYS_fchmod"},{"import": 1353,"src": 2874,"name": "SYS_shmat"},{"import": 1446,"src": 2875,"name": "STATX_ATIME"},{"import": 1353,"src": 2876,"name": "SYS_bpf"},{"import": 1353,"src": 2877,"name": "SYS_fstatfs"},{"import": 1446,"src": 2878,"name": "MS_PRIVATE"},{"import": 1446,"src": 2879,"name": "IPPROTO_MTP"},{"import": 1446,"src": 2880,"name": "SO_RCVBUFFORCE"},{"import": 1146,"src": 2881,"name": "memfd_create"},{"import": 1446,"src": 2882,"name": "TIOCGRS485"},{"import": 1353,"src": 2883,"name": "SYS_readlink"},{"import": 1446,"src": 2884,"name": "SS_ONSTACK"},{"import": 1353,"src": 2885,"name": "SYS_pselect6"},{"import": 1353,"src": 2886,"name": "SYS_mremap"},{"import": 1446,"src": 2887,"name": "STATX_MODE"},{"import": 1353,"src": 2888,"name": "SYS_fstatat"},{"import": 1353,"src": 2889,"name": "SYS_epoll_wait_old"},{"import": 1146,"src": 2890,"name": "setregid"},{"import": 1446,"src": 2891,"name": "IPPROTO_MH"},{"import": 1446,"src": 2892,"name": "VFS_CAP_FLAGS_MASK"},{"import": 1446,"src": 2893,"name": "SOL_PACKET"},{"import": 1353,"src": 2894,"name": "SYS_tee"},{"import": 1446,"src": 2895,"name": "PROT_WRITE","kind": "const","type": 599,"value": null},{"import": 1353,"src": 2896,"name": "SYS_faccessat"},{"import": 1446,"src": 2897,"name": "IN_Q_OVERFLOW"},{"import": 1446,"src": 2898,"name": "TIOCINQ"},{"import": 1447,"src": 2899,"name": "ERESTART"},{"import": 1353,"src": 2900,"name": "SYS_select"},{"import": 1446,"src": 2901,"name": "MSG_PEEK"},{"import": 1446,"src": 2902,"name": "EFD_SEMAPHORE"},{"import": 1446,"src": 2903,"name": "POLLRDNORM"},{"import": 1446,"src": 2904,"name": "MS_NODEV"},{"import": 1446,"src": 2905,"name": "S_ISFIFO"},{"import": 1446,"src": 2906,"name": "IN_MOVED_FROM"},{"import": 1353,"src": 2907,"name": "F_SETLK"},{"import": 1446,"src": 2908,"name": "IORING_OP_POLL_ADD"},{"import": 1447,"src": 2909,"name": "EMULTIHOP"},{"import": 1447,"src": 2910,"name": "ENETRESET"},{"import": 1146,"src": 2911,"name": "getsockname"},{"import": 1353,"src": 2912,"name": "O_DSYNC"},{"import": 1446,"src": 2913,"name": "IPPROTO_MAX"},{"import": 1446,"src": 2914,"name": "IN_UNMOUNT"},{"import": 1353,"src": 2915,"name": "SYS_fanotify_mark"},{"import": 1446,"src": 2916,"name": "MS_RMT_MASK"},{"import": 1447,"src": 2917,"name": "ENOLINK"},{"import": 1446,"src": 2918,"name": "SEEK_CUR"},{"import": 1446,"src": 2919,"name": "SIGIO"},{"import": 1447,"src": 2920,"name": "ENSRBADFAMILY"},{"import": 1446,"src": 2921,"name": "RWF_DSYNC"},{"import": 1447,"src": 2922,"name": "EILSEQ"},{"import": 1353,"src": 2923,"name": "SYS_renameat"},{"import": 1446,"src": 2924,"name": "HUGETLB_FLAG_ENCODE_1MB"},{"import": 1446,"src": 2925,"name": "SOL_AAL"},{"import": 1146,"src": 2926,"name": "ExecveError"},{"import": 1446,"src": 2927,"name": "_LINUX_CAPABILITY_U32S_2"},{"import": 1146,"src": 2928,"name": "unlinkat"},{"import": 1353,"src": 2929,"name": "SYS_fchownat"},{"import": 1447,"src": 2930,"name": "EXFULL"},{"import": 1353,"src": 2931,"name": "SYS_rt_sigreturn","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2932,"name": "AF_PHONET"},{"import": 1446,"src": 2933,"name": "TIOCOUTQ"},{"import": 1446,"src": 2934,"name": "XATTR_CAPS_SZ_1"},{"import": 1446,"src": 2935,"name": "SA_RESTART","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2936,"name": "TCSETS"},{"import": 1446,"src": 2937,"name": "IOSQE_IO_LINK"},{"import": 1446,"src": 2938,"name": "CAP_SETPCAP"},{"import": 1447,"src": 2939,"name": "EPFNOSUPPORT"},{"import": 1353,"src": 2940,"name": "SYS_restart_syscall"},{"import": 1447,"src": 2941,"name": "EL2HLT"},{"import": 1446,"src": 2942,"name": "S_IXGRP"},{"import": 1353,"src": 2943,"name": "SYS_sysinfo"},{"import": 1353,"src": 2944,"name": "REG_R13"},{"import": 1146,"src": 2945,"name": "inotify_init1"},{"import": 1353,"src": 2946,"name": "SYS_pidfd_open"},{"import": 1446,"src": 2947,"name": "VFS_CAP_U32_2"},{"import": 1353,"src": 2948,"name": "SYS_io_setup"},{"import": 1353,"src": 2949,"name": "SYS_eventfd2"},{"import": 1446,"src": 2950,"name": "UMOUNT_NOFOLLOW"},{"import": 1447,"src": 2951,"name": "ESTRPIPE"},{"import": 1353,"src": 2952,"name": "SYS_pkey_alloc"},{"import": 1446,"src": 2953,"name": "cap_t"},{"import": 1446,"src": 2954,"name": "winsize","kind": "const","type": 546,"value": 1467},{"import": 1446,"src": 2955,"name": "CLONE_VM"},{"import": 1446,"src": 2956,"name": "MS_KERNMOUNT"},{"import": 1446,"src": 2957,"name": "SO_RCVTIMEO"},{"import": 1353,"src": 2958,"name": "SYS_semctl"},{"import": 1146,"src": 2959,"name": "unlink"},{"import": 1353,"src": 2960,"name": "REG_TRAPNO"},{"import": 1446,"src": 2961,"name": "MSG_OOB"},{"import": 1447,"src": 2962,"name": "EUNATCH"},{"import": 1146,"src": 339,"name": "getenvC","kind": "const","type": 458,"value": 611},{"import": 1446,"src": 2963,"name": "POLLHUP"},{"import": 1146,"src": 2964,"name": "mprotect"},{"import": 1446,"src": 2965,"name": "SO_INCOMING_CPU"},{"import": 1446,"src": 2966,"name": "SO_DEBUG"},{"import": 1446,"src": 2967,"name": "POLLPRI"},{"import": 1446,"src": 2968,"name": "CAP_IPC_LOCK"},{"import": 1446,"src": 2969,"name": "STDIN_FILENO"},{"import": 1353,"src": 2970,"name": "SYS_utimensat"},{"import": 1146,"src": 2971,"name": "SymLinkError"},{"import": 1447,"src": 2972,"name": "ELIBEXEC"},{"import": 1446,"src": 2973,"name": "CLONE_PARENT"},{"import": 1446,"src": 2974,"name": "MS_BIND"},{"import": 1446,"src": 2975,"name": "SO_REUSEADDR"},{"import": 1446,"src": 2976,"name": "FUTEX_WAKE_OP"},{"import": 1353,"src": 2977,"name": "SYS_link"},{"import": 1446,"src": 2978,"name": "CLONE_NEWPID"},{"import": 1446,"src": 2979,"name": "SO_INCOMING_NAPI_ID"},{"import": 1446,"src": 2980,"name": "IORING_OP_WRITE_FIXED"},{"import": 1446,"src": 2981,"name": "S_ISLNK"},{"import": 1353,"src": 2982,"name": "SYS_setsockopt"},{"import": 1447,"src": 2983,"name": "ENSRBADRESP"},{"import": 1353,"src": 2984,"name": "SYS_getpeername"},{"import": 1146,"src": 2985,"name": "uefi"},{"import": 1446,"src": 2986,"name": "IPPROTO_RAW"},{"import": 1447,"src": 2987,"name": "ENETUNREACH"},{"import": 1353,"src": 2988,"name": "SYS_putpmsg"},{"import": 1446,"src": 2989,"name": "TIOCSTI"},{"import": 1353,"src": 2990,"name": "SYS_lgetxattr"},{"import": 1446,"src": 2991,"name": "TIOCGWINSZ","kind": "const","type": 599,"value": null},{"import": 1446,"src": 2992,"name": "Sigaction","kind": "const","type": 546,"value": 1221},{"import": 1146,"src": 2993,"name": "nanosleep"},{"import": 1353,"src": 2994,"name": "SYS_execveat"},{"import": 1446,"src": 2995,"name": "AF_KCM"},{"import": 1446,"src": 2996,"name": "PF_NETROM"},{"import": 1446,"src": 2997,"name": "PF_IB"},{"import": 1446,"src": 2998,"name": "SO_SECURITY_AUTHENTICATION"},{"import": 1353,"src": 2999,"name": "Stat","kind": "const","type": 546,"value": 973},{"import": 1353,"src": 3000,"name": "SYS_timer_delete"},{"import": 1353,"src": 3001,"name": "REG_RSI"},{"import": 1446,"src": 3002,"name": "EPOLLWRNORM"},{"import": 1146,"src": 286,"name": "fstat","kind": "const","type": 382,"value": 477},{"import": 1353,"src": 3003,"name": "SYS_personality"},{"import": 1446,"src": 3004,"name": "MNT_EXPIRE"},{"import": 1353,"src": 3005,"name": "SYS_clone"},{"import": 1146,"src": 3006,"name": "openat"},{"import": 1146,"src": 3007,"name": "GetSockNameError"},{"import": 1353,"src": 3008,"name": "SYS_fsopen"},{"import": 1353,"src": 3009,"name": "VDSO_CGT_VER","kind": "const","type": 1468,"value": null},{"import": 1353,"src": 3010,"name": "msghdr"},{"import": 1353,"src": 3011,"name": "SYS_pkey_mprotect"},{"import": 1353,"src": 3012,"name": "SYS_request_key"},{"import": 1447,"src": 3013,"name": "ENOBUFS","kind": "const","type": 599,"value": null},{"import": 1353,"src": 3014,"name": "SYS_vfork"},{"import": 1446,"src": 3015,"name": "SO_SELECT_ERR_QUEUE"},{"import": 1353,"src": 3016,"name": "MAP_DENYWRITE"},{"import": 1446,"src": 3017,"name": "CLONE_FS"},{"import": 1446,"src": 3018,"name": "SO_ATTACH_FILTER"},{"import": 1353,"src": 3019,"name": "SYS_recvfrom"},{"import": 1446,"src": 3020,"name": "NSIG","kind": "const","type": 599,"value": null},{"import": 1146,"src": 124,"name": "sigaction","kind": "const","type": 130,"value": 181},{"import": 1446,"src": 3021,"name": "RUSAGE_CHILDREN"},{"import": 1353,"src": 3022,"name": "SYS_readahead"},{"import": 1353,"src": 3023,"name": "F_GETOWN_EX"},{"import": 1446,"src": 3024,"name": "socklen_t"},{"import": 1446,"src": 3025,"name": "SO_RCVBUF"},{"import": 1146,"src": 3026,"name": "writev"},{"import": 1446,"src": 3027,"name": "MS_RDONLY"},{"import": 1446,"src": 3028,"name": "FUTEX_CMP_REQUEUE"},{"import": 1353,"src": 3029,"name": "timezone"},{"import": 1446,"src": 3030,"name": "AT_STATX_FORCE_SYNC"},{"import": 1446,"src": 3031,"name": "PF_AX25"},{"import": 1353,"src": 3032,"name": "REG_EFL"},{"import": 1146,"src": 3033,"name": "AcceptError"},{"import": 1146,"src": 3034,"name": "bind"},{"import": 1353,"src": 3035,"name": "SYS_mount"},{"import": 1146,"src": 3036,"name": "symlinkC"},{"import": 1447,"src": 3037,"name": "ERANGE"},{"import": 1446,"src": 3038,"name": "PF_NETBEUI"},{"import": 1353,"src": 3039,"name": "SYS_utimes"},{"import": 1447,"src": 3040,"name": "ETIME"},{"import": 1446,"src": 3041,"name": "SIGSTOP","kind": "const","type": 599,"value": null},{"import": 1353,"src": 3042,"name": "SYS_statx"},{"import": 1446,"src": 3043,"name": "HUGETLB_FLAG_ENCODE_2MB"},{"import": 1447,"src": 3044,"name": "EINPROGRESS"},{"import": 1146,"src": 3045,"name": "FStatError","kind": "const","type": 546,"value": 1190},{"import": 1446,"src": 3046,"name": "SIGFPE"},{"import": 1446,"src": 3047,"name": "POLLRDBAND"},{"import": 1146,"src": 3048,"name": "eventfd"},{"import": 1146,"src": 3049,"name": "SetSockOptError"},{"import": 1446,"src": 3050,"name": "AT_FDCWD","kind": "const","type": 599,"value": null},{"import": 1446,"src": 3051,"name": "sigval","kind": "const","type": 546,"value": 1469},{"import": 1446,"src": 3052,"name": "TCXONC"},{"import": 1146,"src": 3053,"name": "SetIdError"},{"import": 1446,"src": 3054,"name": "HUGETLB_FLAG_ENCODE_512KB"},{"import": 1146,"src": 3055,"name": "epoll_wait"},{"import": 1146,"src": 313,"name": "write","kind": "const","type": 424,"value": 542},{"import": 1446,"src": 3056,"name": "IPPORT_RESERVED"},{"import": 1353,"src": 3057,"name": "off_t","kind": "const","type": 546,"value": 721},{"import": 1446,"src": 3058,"name": "TIOCMBIC"},{"import": 1446,"src": 3059,"name": "SO_BROADCAST"},{"import": 1446,"src": 3060,"name": "S_IFREG"},{"import": 1447,"src": 3061,"name": "ENOSTR"},{"import": 1446,"src": 3062,"name": "gid_t"},{"import": 1446,"src": 3063,"name": "HUGETLB_FLAG_ENCODE_16GB"},{"import": 1446,"src": 3064,"name": "io_uring_sqe"},{"import": 1446,"src": 3065,"name": "AF_RDS"},{"import": 1446,"src": 3066,"name": "VFS_CAP_U32"},{"import": 1353,"src": 3067,"name": "SYS_preadv"},{"import": 1353,"src": 3068,"name": "O_NOFOLLOW"},{"import": 1353,"src": 3069,"name": "SYS_getsockname"},{"import": 1447,"src": 3070,"name": "ENSRCNAMELOOP"},{"import": 1353,"src": 3071,"name": "SYS_setgroups"},{"import": 1353,"src": 3072,"name": "SYS_mlock2"},{"import": 1353,"src": 3073,"name": "SYS_timerfd_create"},{"import": 1353,"src": 3074,"name": "SYS_shmget"},{"import": 1146,"src": 3075,"name": "INotifyInitError"},{"import": 1446,"src": 3076,"name": "MAP_PRIVATE","kind": "const","type": 599,"value": null},{"import": 1446,"src": 3077,"name": "TCSETSF"},{"import": 1353,"src": 3078,"name": "SYS_gettimeofday"},{"import": 1446,"src": 3079,"name": "S_ISVTX"},{"import": 1447,"src": 3080,"name": "EFAULT","kind": "const","type": 599,"value": null},{"import": 1446,"src": 3081,"name": "_LINUX_CAPABILITY_U32S_3"},{"import": 1446,"src": 3082,"name": "IN_MOVE"},{"import": 1446,"src": 3083,"name": "PF_KCM"},{"import": 1353,"src": 3084,"name": "SYS_pread"},{"import": 1353,"src": 3085,"name": "SYS_set_mempolicy"},{"import": 1446,"src": 3086,"name": "cpu_count_t"},{"import": 1446,"src": 3087,"name": "vfs_cap_data"},{"import": 1446,"src": 3088,"name": "IPPROTO_ICMP"},{"import": 1446,"src": 3089,"name": "STATX_SIZE"},{"import": 1446,"src": 3090,"name": "MS_LAZYTIME"},{"import": 1446,"src": 3091,"name": "PF_QIPCRTR"},{"import": 1353,"src": 3092,"name": "SYS_msync"},{"import": 1353,"src": 3093,"name": "SYS_truncate"},{"import": 1446,"src": 3094,"name": "SOL_BLUETOOTH"},{"import": 1446,"src": 3095,"name": "PF_VSOCK"},{"import": 1446,"src": 3096,"name": "PF_UNIX"},{"import": 1353,"src": 3097,"name": "SYS_ustat"},{"import": 1446,"src": 3098,"name": "MAP_UNINITIALIZED"},{"import": 1353,"src": 3099,"name": "SYS_sched_get_priority_max"},{"import": 1446,"src": 3100,"name": "SIGKILL","kind": "const","type": 599,"value": null},{"import": 1446,"src": 3101,"name": "SO_DETACH_REUSEPORT_BPF"},{"import": 1446,"src": 3102,"name": "CAP_MKNOD"},{"import": 1353,"src": 3103,"name": "MAP_GROWSDOWN"},{"import": 1447,"src": 3104,"name": "EALREADY"},{"import": 1146,"src": 3105,"name": "ConnectError"},{"import": 1353,"src": 3106,"name": "SYS_finit_module"},{"import": 1353,"src": 3107,"name": "REG_R12"},{"import": 1446,"src": 3108,"name": "IORING_OFF_SQES"},{"import": 1353,"src": 3109,"name": "F_GETFL"},{"import": 1446,"src": 3110,"name": "DT_CHR"},{"import": 1146,"src": 340,"name": "clock_getres","kind": "const","type": 459,"value": 612},{"import": 1353,"src": 3111,"name": "SYS_semtimedop"},{"import": 1446,"src": 3112,"name": "SOL_IUCV"},{"import": 1353,"src": 3113,"name": "SYS_pwritev"},{"import": 1446,"src": 3114,"name": "MS_REC"},{"import": 1446,"src": 3115,"name": "Statx"},{"import": 1446,"src": 3116,"name": "RR_A"},{"import": 1446,"src": 3117,"name": "IN_DELETE_SELF"},{"import": 1353,"src": 3118,"name": "SYS_chown"},{"import": 1446,"src": 3119,"name": "IORING_OP_POLL_REMOVE"},{"import": 1446,"src": 3120,"name": "MS_NOSUID"},{"import": 1353,"src": 3121,"name": "SYS_lchown"},{"import": 1146,"src": 217,"name": "toPosixPath","kind": "const","type": 305,"value": 368},{"import": 1446,"src": 3122,"name": "MS_MANDLOCK"},{"import": 1446,"src": 3123,"name": "NAME_MAX"},{"import": 1446,"src": 3124,"name": "CLOCK_MONOTONIC_COARSE"},{"import": 1353,"src": 3125,"name": "SYS_mq_open"},{"import": 1353,"src": 3126,"name": "SYS_mmap","kind": "const","type": 599,"value": null},{"import": 1447,"src": 3127,"name": "EXDEV"},{"import": 1146,"src": 3128,"name": "ListenError"},{"import": 1146,"src": 3129,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1146,"src": 3130,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1146,"src": 3131,"name": "getRandomBytesDevURandom"},{"import": 1146,"src": 3132,"name": "RenameError"},{"import": 1146,"src": 3133,"name": "MAX_PATH_BYTES"},{"import": 1146,"src": 3134,"name": "elf"},{"import": 1146,"src": 3135,"name": "math","kind": "const","type": 546,"value": 1144},{"import": 1146,"src": 3136,"name": "toMemFdPath"},{"import": 1146,"src": 3137,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1146,"src": 3138,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1146,"src": 3139,"name": "dl"},{"import": 1146,"src": 3140,"name": "root","kind": "const","type": 546,"value": 670},{"import": 1147,"src": 3141,"name": "LineInfo","kind": "const","type": 546,"value": 907},{"import": 1147,"src": 272,"name": "attachSegfaultHandler","kind": "const","type": 86,"value": 462},{"import": 1147,"src": 3142,"name": "captureStackTrace"},{"import": 1147,"src": 3143,"name": "writeCurrentStackTraceWindows"},{"import": 1147,"src": 87,"name": "dumpCurrentStackTrace","kind": "const","type": 90,"value": 120},{"import": 1147,"src": 83,"name": "getStderrStream","kind": "const","type": 87,"value": 116},{"import": 1147,"src": 3144,"name": "have_segfault_handling_support","kind": "const","type": 565,"value": null},{"import": 1147,"src": 204,"name": "writeCurrentStackTrace","kind": "const","type": 1470,"value": 826},{"import": 1147,"src": 86,"name": "dumpStackTrace","kind": "const","type": 89,"value": 119},{"import": 1147,"src": 3145,"name": "DebugInfo","kind": "const","type": 546,"value": 807},{"import": 1147,"src": 3146,"name": "enable_segfault_handler","kind": "const","type": 565,"value": null},{"import": 1147,"src": 181,"name": "writeStackTrace","kind": "const","type": 1471,"value": 827},{"import": 1147,"src": 3147,"name": "leb","kind": "const","type": 546,"value": 1472},{"import": 1147,"src": 3148,"name": "DwarfInfo","kind": "const","type": 546,"value": 807},{"import": 1147,"src": 129,"name": "getSelfDebugInfo","kind": "const","type": 135,"value": 186},{"import": 1147,"src": 3149,"name": "panic"},{"import": 1147,"src": 3150,"name": "DwarfInStream","kind": "const","type": 546,"value": 623},{"import": 1147,"src": 4,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1147,"src": 3151,"name": "DwarfSeekableStream","kind": "const","type": 546,"value": 636},{"import": 1147,"src": 182,"name": "printSourceAtAddress","kind": "const","type": 1473,"value": 828},{"import": 1147,"src": 3152,"name": "StackIterator","kind": "const","type": 546,"value": 916},{"import": 1147,"src": 3153,"name": "OpenSelfDebugInfoError"},{"import": 1147,"src": 3154,"name": "FailingAllocator"},{"import": 1147,"src": 28,"name": "panicExtra","kind": "const","type": 1474,"value": 829},{"import": 1147,"src": 225,"name": "maybeEnableSegfaultHandler","kind": "const","type": 86,"value": 379},{"import": 1147,"src": 3155,"name": "runtime_safety","kind": "const","type": 565,"value": null},{"import": 1147,"src": 323,"name": "dumpStackTraceFromBase","kind": "const","type": 435,"value": 577},{"import": 1147,"src": 3156,"name": "dumpStackPointerAddr"},{"import": 1147,"src": 3157,"name": "getStderrMutex"},{"import": 1147,"src": 3158,"name": "failing_allocator"},{"import": 1147,"src": 130,"name": "openSelfDebugInfo","kind": "const","type": 136,"value": 187},{"import": 1147,"src": 183,"name": "printSourceAtAddressPosix","kind": "const","type": 1475,"value": 830},{"import": 1147,"src": 151,"name": "openDwarfDebugInfo","kind": "const","type": 169,"value": 221},{"import": 1147,"src": 88,"name": "warn","kind": "const","type": 1476,"value": 831},{"import": 1147,"src": 3159,"name": "global_allocator","kind": "const","type": 678,"value": null},{"import": 1147,"src": 139,"name": "openElfDebugInfo","kind": "const","type": 146,"value": 197},{"import": 1147,"src": 255,"name": "readAllocBytes","kind": "const","type": 1477,"value": 832},{"import": 1147,"src": 3160,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1147,"src": 3161,"name": "populateModule"},{"import": 1147,"src": 3162,"name": "WHITE","kind": "const","type": 1478,"value": null},{"import": 1147,"src": 3163,"name": "handleSegfaultWindows"},{"import": 1147,"src": 3164,"name": "readIntMem"},{"import": 1147,"src": 3165,"name": "DW","kind": "const","type": 546,"value": 1148},{"import": 1147,"src": 251,"name": "parseFormValueTargetAddrSize","kind": "const","type": 1479,"value": 833},{"import": 1147,"src": 190,"name": "readStringRaw","kind": "const","type": 1480,"value": 834},{"import": 1147,"src": 3166,"name": "panicking","kind": "var","type": 572,"value": null},{"import": 1147,"src": 3167,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1147,"src": 3168,"name": "FileEntry","kind": "const","type": 546,"value": 603},{"import": 1147,"src": 3169,"name": "readSparseBitVector"},{"import": 1147,"src": 3170,"name": "stderr_file_out_stream","kind": "var","type": 760,"value": "undefined"},{"import": 1147,"src": 3171,"name": "RESET","kind": "const","type": 1481,"value": null},{"import": 1147,"src": 3172,"name": "elf","kind": "const","type": 546,"value": 1150},{"import": 1147,"src": 3173,"name": "openSelfDebugInfoMacOs"},{"import": 1147,"src": 3174,"name": "Func","kind": "const","type": 546,"value": 638},{"import": 1147,"src": 3175,"name": "readByteSignedMem"},{"import": 1147,"src": 3176,"name": "readInitialLengthMem"},{"import": 1147,"src": 3177,"name": "MachoSymbol","kind": "const","type": 546,"value": 1482},{"import": 1147,"src": 252,"name": "parseFormValueBlock","kind": "const","type": 1483,"value": 835},{"import": 1147,"src": 3178,"name": "io","kind": "const","type": 546,"value": 1151},{"import": 1147,"src": 3179,"name": "LineNumberProgram","kind": "const","type": 546,"value": 887},{"import": 1147,"src": 3180,"name": "CYAN"},{"import": 1147,"src": 3181,"name": "root","kind": "const","type": 546,"value": 670},{"import": 1147,"src": 3182,"name": "Constant","kind": "const","type": 546,"value": 1280},{"import": 1147,"src": 3183,"name": "maxInt","kind": "const","type": 616,"value": 766},{"import": 1147,"src": 3184,"name": "coff","kind": "const","type": 546,"value": 1155},{"import": 1147,"src": 254,"name": "parseFormValueConstant","kind": "const","type": 1484,"value": 836},{"import": 1147,"src": 3185,"name": "DIM","kind": "const","type": 1481,"value": null},{"import": 1147,"src": 3186,"name": "GREEN","kind": "const","type": 1478,"value": null},{"import": 1147,"src": 3187,"name": "fs","kind": "const","type": 546,"value": 1158},{"import": 1147,"src": 3188,"name": "setTtyColor"},{"import": 1147,"src": 3189,"name": "File","kind": "const","type": 546,"value": 703},{"import": 1147,"src": 253,"name": "parseFormValueBlockLen","kind": "const","type": 1485,"value": 837},{"import": 1147,"src": 199,"name": "printLineFromFileAnyOs","kind": "const","type": 1486,"value": 838},{"import": 1147,"src": 3190,"name": "openSelfDebugInfoWindows"},{"import": 1147,"src": 198,"name": "printLineInfo","kind": "const","type": 1487,"value": 839},{"import": 1147,"src": 3191,"name": "AbbrevTable","kind": "const","type": 546,"value": 557},{"import": 1147,"src": 3192,"name": "Die","kind": "const","type": 546,"value": 1274},{"import": 1147,"src": 3193,"name": "process","kind": "const","type": 546,"value": 1164},{"import": 1147,"src": 3194,"name": "macho","kind": "const","type": 546,"value": 1165},{"import": 1147,"src": 131,"name": "getDebugInfoAllocator","kind": "const","type": 137,"value": 188},{"import": 1147,"src": 3195,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1147,"src": 3196,"name": "windows_segfault_handle"},{"import": 1147,"src": 3197,"name": "debug_info_allocator","kind": "var","type": 1319,"value": null},{"import": 1147,"src": 3198,"name": "CompileUnit","kind": "const","type": 546,"value": 626},{"import": 1147,"src": 3199,"name": "TtyColor"},{"import": 1147,"src": 257,"name": "parseFormValueRef","kind": "const","type": 1488,"value": 840},{"import": 1147,"src": 3200,"name": "math","kind": "const","type": 546,"value": 1144},{"import": 1147,"src": 3201,"name": "global_fixed_allocator","kind": "var","type": 698,"value": null},{"import": 1147,"src": 3202,"name": "stderr_file","kind": "var","type": 703,"value": "undefined"},{"import": 1147,"src": 3203,"name": "FormValue","kind": "const","type": 546,"value": 1074},{"import": 1147,"src": 134,"name": "openSelfDebugInfoPosix","kind": "const","type": 140,"value": 191},{"import": 1147,"src": 3204,"name": "global_allocator_mem","kind": "var","type": 1489,"value": null},{"import": 1147,"src": 154,"name": "readInitialLength","kind": "const","type": 1490,"value": 841},{"import": 1147,"src": 180,"name": "wantTtyColor","kind": "const","type": 233,"value": 286},{"import": 1147,"src": 3205,"name": "AbbrevTableEntry","kind": "const","type": 546,"value": 558},{"import": 1147,"src": 3206,"name": "getLineNumberInfoMacOs"},{"import": 1147,"src": 3207,"name": "Module","kind": "const","type": 546,"value": 1491},{"import": 1147,"src": 82,"name": "resetSegfaultHandler","kind": "const","type": 86,"value": 115},{"import": 1147,"src": 3208,"name": "stderr_stream","kind": "var","type": 1492,"value": null},{"import": 1147,"src": 3209,"name": "stderr_mutex","kind": "var","type": 919,"value": null},{"import": 1147,"src": 3210,"name": "pdb","kind": "const","type": 546,"value": 1154},{"import": 1147,"src": 3211,"name": "PcRange","kind": "const","type": 546,"value": 1399},{"import": 1147,"src": 3212,"name": "readStringMem"},{"import": 1147,"src": 3213,"name": "readByteMem"},{"import": 1147,"src": 148,"name": "findDwarfSectionFromElf","kind": "const","type": 166,"value": 218},{"import": 1147,"src": 3214,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1147,"src": 256,"name": "parseFormValueDwarfOffsetSize","kind": "const","type": 1493,"value": 842},{"import": 1147,"src": 3215,"name": "printSourceAtAddressWindows"},{"import": 1147,"src": 3216,"name": "machoSearchSymbols"},{"import": 1147,"src": 3217,"name": "AbbrevAttr","kind": "const","type": 546,"value": 595},{"import": 1147,"src": 311,"name": "handleSegfaultLinux","kind": "const","type": 422,"value": 539},{"import": 1147,"src": 3218,"name": "printSourceAtAddressMacOs"},{"import": 1147,"src": 3219,"name": "AbbrevTableHeader","kind": "const","type": 546,"value": 577},{"import": 1147,"src": 169,"name": "getAbbrevTableEntry","kind": "const","type": 204,"value": 257},{"import": 1147,"src": 3220,"name": "windows"},{"import": 1147,"src": 3221,"name": "self_debug_info","kind": "var","type": 1494,"value": null},{"import": 1147,"src": 3222,"name": "ArrayList","kind": "const","type": 556,"value": 749},{"import": 1147,"src": 172,"name": "parseFormValue","kind": "const","type": 1495,"value": 843},{"import": 1147,"src": 3223,"name": "MachOFile","kind": "const","type": 546,"value": 570},{"import": 1147,"src": 3224,"name": "debug_info_arena_allocator","kind": "var","type": 930,"value": "undefined"},{"import": 1147,"src": 3225,"name": "RED"},{"import": 1148,"src": 3226,"name": "ATE_HP_signed_fixed"},{"import": 1148,"src": 3227,"name": "AT_GNU_exclusive_locks_required"},{"import": 1148,"src": 3228,"name": "OP_lit1"},{"import": 1148,"src": 3229,"name": "CFA_MIPS_advance_loc8"},{"import": 1148,"src": 3230,"name": "CFA_expression"},{"import": 1148,"src": 3231,"name": "OP_const4s"},{"import": 1148,"src": 3232,"name": "OP_GNU_uninit"},{"import": 1148,"src": 3233,"name": "OP_push_object_address"},{"import": 1148,"src": 3234,"name": "AT_subscr_data"},{"import": 1148,"src": 3235,"name": "ATE_HP_float128"},{"import": 1148,"src": 3236,"name": "FORM_strp","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3237,"name": "OP_GNU_entry_value"},{"import": 1148,"src": 3238,"name": "CFA_val_expression"},{"import": 1148,"src": 3239,"name": "CHILDREN_no"},{"import": 1148,"src": 3240,"name": "OP_breg0"},{"import": 1148,"src": 3241,"name": "OP_reg4"},{"import": 1148,"src": 3242,"name": "FORM_GNU_ref_alt"},{"import": 1148,"src": 3243,"name": "OP_lit4"},{"import": 1148,"src": 3244,"name": "LNE_lo_user"},{"import": 1148,"src": 3245,"name": "AT_GNU_shared_locks_required"},{"import": 1148,"src": 3246,"name": "OP_reg13"},{"import": 1148,"src": 3247,"name": "OP_reg30"},{"import": 1148,"src": 3248,"name": "OP_lit21"},{"import": 1148,"src": 3249,"name": "AT_GNU_ranges_base"},{"import": 1148,"src": 3250,"name": "AT_VMS_rtnbeg_pd_address"},{"import": 1148,"src": 3251,"name": "AT_data_location"},{"import": 1148,"src": 3252,"name": "OP_reg20"},{"import": 1148,"src": 3253,"name": "AT_elemental"},{"import": 1148,"src": 3254,"name": "AT_small"},{"import": 1148,"src": 3255,"name": "AT_HP_proc_per_section"},{"import": 1148,"src": 3256,"name": "AT_HP_is_result_param"},{"import": 1148,"src": 3257,"name": "LANG_PLI"},{"import": 1148,"src": 3258,"name": "OP_reg1"},{"import": 1148,"src": 3259,"name": "OP_HP_unmod_range"},{"import": 1148,"src": 3260,"name": "OP_lit14"},{"import": 1148,"src": 3261,"name": "OP_breg25"},{"import": 1148,"src": 3262,"name": "TAG_module"},{"import": 1148,"src": 3263,"name": "AT_decimal_scale"},{"import": 1148,"src": 3264,"name": "AT_PGI_lstride"},{"import": 1148,"src": 3265,"name": "OP_reg16"},{"import": 1148,"src": 3266,"name": "OP_abs"},{"import": 1148,"src": 3267,"name": "AT_body_begin"},{"import": 1148,"src": 3268,"name": "OP_plus"},{"import": 1148,"src": 3269,"name": "AT_start_scope"},{"import": 1148,"src": 3270,"name": "TAG_HP_array_descriptor"},{"import": 1148,"src": 3271,"name": "TAG_GNU_formal_parameter_pack"},{"import": 1148,"src": 3272,"name": "AT_priority"},{"import": 1148,"src": 3273,"name": "AT_PGI_soffset"},{"import": 1148,"src": 3274,"name": "AT_external"},{"import": 1148,"src": 3275,"name": "AT_HP_prof_version_id"},{"import": 1148,"src": 3276,"name": "OP_deref"},{"import": 1148,"src": 3277,"name": "OP_breg15"},{"import": 1148,"src": 3278,"name": "TAG_label"},{"import": 1148,"src": 3279,"name": "ATE_HP_complex_float128"},{"import": 1148,"src": 3280,"name": "AT_import"},{"import": 1148,"src": 3281,"name": "ATE_numeric_string"},{"import": 1148,"src": 3282,"name": "OP_breg22"},{"import": 1148,"src": 3283,"name": "LANG_hi_user"},{"import": 1148,"src": 3284,"name": "LANG_Cobol74"},{"import": 1148,"src": 3285,"name": "TAG_class_template"},{"import": 1148,"src": 3286,"name": "TAG_constant"},{"import": 1148,"src": 3287,"name": "OP_over"},{"import": 1148,"src": 3288,"name": "CFA_lo_user"},{"import": 1148,"src": 3289,"name": "LANG_C_plus_plus"},{"import": 1148,"src": 3290,"name": "AT_location"},{"import": 1148,"src": 3291,"name": "TAG_variant_part"},{"import": 1148,"src": 3292,"name": "TAG_upc_shared_type"},{"import": 1148,"src": 3293,"name": "TAG_PGI_interface_block"},{"import": 1148,"src": 3294,"name": "AT_signature"},{"import": 1148,"src": 3295,"name": "FORM_GNU_strp_alt"},{"import": 1148,"src": 3296,"name": "OP_breg18"},{"import": 1148,"src": 3297,"name": "TAG_with_stmt"},{"import": 1148,"src": 3298,"name": "AT_HP_raw_data_ptr"},{"import": 1148,"src": 3299,"name": "LANG_C11"},{"import": 1148,"src": 3300,"name": "TAG_namespace"},{"import": 1148,"src": 3301,"name": "LANG_lo_user"},{"import": 1148,"src": 3302,"name": "LANG_UPC"},{"import": 1148,"src": 3303,"name": "FORM_block2","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3304,"name": "AT_GNAT_descriptive_type"},{"import": 1148,"src": 3305,"name": "OP_call4"},{"import": 1148,"src": 3306,"name": "ATE_HP_complex_float80"},{"import": 1148,"src": 3307,"name": "TAG_try_block"},{"import": 1148,"src": 3308,"name": "LNE_define_file","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3309,"name": "AT_stmt_list","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3310,"name": "CFA_def_cfa"},{"import": 1148,"src": 3311,"name": "ATE_unsigned_char"},{"import": 1148,"src": 3312,"name": "AT_frame_base"},{"import": 1148,"src": 3313,"name": "AT_vtable_elem_location"},{"import": 1148,"src": 3314,"name": "AT_common_reference"},{"import": 1148,"src": 3315,"name": "AT_abstract_origin","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3316,"name": "AT_HP_opt_level"},{"import": 1148,"src": 3317,"name": "ATE_HP_unsigned_fixed"},{"import": 1148,"src": 3318,"name": "TAG_set_type"},{"import": 1148,"src": 3319,"name": "AT_mac_info"},{"import": 1148,"src": 3320,"name": "AT_lo_user"},{"import": 1148,"src": 3321,"name": "OP_const2u"},{"import": 1148,"src": 3322,"name": "LANG_Fortran90"},{"import": 1148,"src": 3323,"name": "CFA_restore"},{"import": 1148,"src": 3324,"name": "TAG_padding"},{"import": 1148,"src": 3325,"name": "AT_GNU_dwo_name"},{"import": 1148,"src": 3326,"name": "FORM_ref8","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3327,"name": "AT_virtuality"},{"import": 1148,"src": 3328,"name": "FORM_GNU_str_index"},{"import": 1148,"src": 3329,"name": "TAG_GNU_template_template_param"},{"import": 1148,"src": 3330,"name": "TAG_packed_type"},{"import": 1148,"src": 3331,"name": "OP_pick"},{"import": 1148,"src": 3332,"name": "LNE_hi_user"},{"import": 1148,"src": 3333,"name": "CFA_advance_loc2"},{"import": 1148,"src": 3334,"name": "AT_HP_default_location"},{"import": 1148,"src": 3335,"name": "OP_minus"},{"import": 1148,"src": 3336,"name": "AT_MIPS_linkage_name"},{"import": 1148,"src": 3337,"name": "TAG_base_type"},{"import": 1148,"src": 3338,"name": "LNS_fixed_advance_pc","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3339,"name": "TAG_GNU_template_parameter_pack"},{"import": 1148,"src": 3340,"name": "TAG_lo_user"},{"import": 1148,"src": 3341,"name": "OP_reg28"},{"import": 1148,"src": 3342,"name": "AT_GNU_template_name"},{"import": 1148,"src": 3343,"name": "AT_HP_unit_name"},{"import": 1148,"src": 3344,"name": "LANG_C99"},{"import": 1148,"src": 3345,"name": "OP_breg5"},{"import": 1148,"src": 3346,"name": "TAG_variable"},{"import": 1148,"src": 3347,"name": "OP_reg9"},{"import": 1148,"src": 3348,"name": "OP_mul"},{"import": 1148,"src": 3349,"name": "OP_lit7"},{"import": 1148,"src": 3350,"name": "AT_GNU_all_call_sites"},{"import": 1148,"src": 3351,"name": "TAG_GNU_call_site_parameter"},{"import": 1148,"src": 3352,"name": "OP_lit24"},{"import": 1148,"src": 3353,"name": "CFA_val_offset"},{"import": 1148,"src": 3354,"name": "TAG_subrange_type"},{"import": 1148,"src": 3355,"name": "AT_GNU_tail_call"},{"import": 1148,"src": 3356,"name": "LNE_end_sequence","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3357,"name": "LANG_Fortran08"},{"import": 1148,"src": 3358,"name": "ATE_HP_zoned_decimal"},{"import": 1148,"src": 3359,"name": "OP_reg25"},{"import": 1148,"src": 3360,"name": "OP_shr"},{"import": 1148,"src": 3361,"name": "TAG_restrict_type"},{"import": 1148,"src": 3362,"name": "AT_variable_parameter"},{"import": 1148,"src": 3363,"name": "ATE_decimal_float"},{"import": 1148,"src": 3364,"name": "OP_breg2"},{"import": 1148,"src": 3365,"name": "LANG_Go"},{"import": 1148,"src": 3366,"name": "LANG_HP_Pascal91"},{"import": 1148,"src": 3367,"name": "OP_neg"},{"import": 1148,"src": 3368,"name": "OP_reg6"},{"import": 1148,"src": 3369,"name": "CFA_hi_user"},{"import": 1148,"src": 3370,"name": "OP_not"},{"import": 1148,"src": 3371,"name": "OP_lit11"},{"import": 1148,"src": 3372,"name": "LNS_copy","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3373,"name": "OP_reg15"},{"import": 1148,"src": 3374,"name": "FORM_flag","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3375,"name": "OP_lit23"},{"import": 1148,"src": 3376,"name": "OP_GNU_push_tls_address"},{"import": 1148,"src": 3377,"name": "LANG_Rust"},{"import": 1148,"src": 3378,"name": "TAG_subroutine","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3379,"name": "LNE_set_address","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3380,"name": "OP_reg22"},{"import": 1148,"src": 3381,"name": "OP_GNU_deref_type"},{"import": 1148,"src": 3382,"name": "OP_lit31"},{"import": 1148,"src": 3383,"name": "LNS_advance_line","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3384,"name": "ATE_complex_float"},{"import": 1148,"src": 3385,"name": "OP_breg10"},{"import": 1148,"src": 3386,"name": "OP_breg31"},{"import": 1148,"src": 3387,"name": "ATE_HP_float80"},{"import": 1148,"src": 3388,"name": "OP_reg3"},{"import": 1148,"src": 3389,"name": "OP_lit16"},{"import": 1148,"src": 3390,"name": "AT_MIPS_has_inlines"},{"import": 1148,"src": 3391,"name": "OP_breg27"},{"import": 1148,"src": 3392,"name": "ATE_lo_user"},{"import": 1148,"src": 3393,"name": "FORM_flag_present","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3394,"name": "OP_bit_piece"},{"import": 1148,"src": 3395,"name": "AT_GNU_addr_base"},{"import": 1148,"src": 3396,"name": "AT_MIPS_software_pipeline_depth"},{"import": 1148,"src": 3397,"name": "FORM_ref_sig8","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3398,"name": "ATE_signed_fixed"},{"import": 1148,"src": 3399,"name": "OP_lo_user"},{"import": 1148,"src": 3400,"name": "LANG_HP_Basic91"},{"import": 1148,"src": 3401,"name": "TAG_inheritance"},{"import": 1148,"src": 3402,"name": "FORM_data8","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3403,"name": "OP_breg17"},{"import": 1148,"src": 3404,"name": "AT_GNU_pubtypes"},{"import": 1148,"src": 3405,"name": "LNS_set_file","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3406,"name": "AT_MIPS_clone_origin"},{"import": 1148,"src": 3407,"name": "CFA_def_cfa_expression"},{"import": 1148,"src": 3408,"name": "OP_shl"},{"import": 1148,"src": 3409,"name": "LANG_Python"},{"import": 1148,"src": 3410,"name": "TAG_union_type"},{"import": 1148,"src": 3411,"name": "AT_alignment"},{"import": 1148,"src": 3412,"name": "AT_specification","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3413,"name": "AT_visibility"},{"import": 1148,"src": 3414,"name": "AT_enum_class"},{"import": 1148,"src": 3415,"name": "OP_PGI_omp_thread_num"},{"import": 1148,"src": 3416,"name": "LNS_negate_stmt","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3417,"name": "OP_GNU_encoded_addr"},{"import": 1148,"src": 3418,"name": "ATE_float"},{"import": 1148,"src": 3419,"name": "LANG_Fortran95"},{"import": 1148,"src": 3420,"name": "AT_GNU_all_tail_call_sites"},{"import": 1148,"src": 3421,"name": "CFA_offset_extended"},{"import": 1148,"src": 3422,"name": "AT_MIPS_stride"},{"import": 1148,"src": 3423,"name": "OP_breg29"},{"import": 1148,"src": 3424,"name": "TAG_pointer_type"},{"import": 1148,"src": 3425,"name": "ATE_unsigned"},{"import": 1148,"src": 3426,"name": "LNS_advance_pc","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3427,"name": "LANG_Pascal83"},{"import": 1148,"src": 3428,"name": "AT_HP_definition_points"},{"import": 1148,"src": 3429,"name": "OP_addr"},{"import": 1148,"src": 3430,"name": "AT_body_end"},{"import": 1148,"src": 3431,"name": "LANG_C_plus_plus_14"},{"import": 1148,"src": 3432,"name": "AT_decl_line"},{"import": 1148,"src": 3433,"name": "AT_HP_widened_byte_size"},{"import": 1148,"src": 3434,"name": "LNS_set_column","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3435,"name": "ATE_signed_char"},{"import": 1148,"src": 3436,"name": "ATE_HP_VAX_float"},{"import": 1148,"src": 3437,"name": "TAG_inlined_subroutine","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3438,"name": "AT_GNU_dwo_id"},{"import": 1148,"src": 3439,"name": "OP_const4u"},{"import": 1148,"src": 3440,"name": "AT_comp_dir","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3441,"name": "CFA_restore_extended"},{"import": 1148,"src": 3442,"name": "AT_decl_file"},{"import": 1148,"src": 3443,"name": "FORM_ref_udata","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3444,"name": "OP_const2s"},{"import": 1148,"src": 3445,"name": "ATE_packed_decimal"},{"import": 1148,"src": 3446,"name": "OP_xderef_size"},{"import": 1148,"src": 3447,"name": "TAG_namelist"},{"import": 1148,"src": 3448,"name": "AT_MIPS_epilog_begin"},{"import": 1148,"src": 3449,"name": "ATE_HP_imaginary_float80"},{"import": 1148,"src": 3450,"name": "TAG_common_inclusion"},{"import": 1148,"src": 3451,"name": "TAG_rvalue_reference_type"},{"import": 1148,"src": 3452,"name": "TAG_ptr_to_member_type"},{"import": 1148,"src": 3453,"name": "CHILDREN_yes","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3454,"name": "AT_MIPS_loop_unroll_factor"},{"import": 1148,"src": 3455,"name": "TAG_typedef"},{"import": 1148,"src": 3456,"name": "AT_GNU_call_site_target_clobbered"},{"import": 1148,"src": 3457,"name": "OP_lit2"},{"import": 1148,"src": 3458,"name": "OP_lit19"},{"import": 1148,"src": 3459,"name": "AT_decl_column"},{"import": 1148,"src": 3460,"name": "AT_friend"},{"import": 1148,"src": 3461,"name": "AT_PGI_lbase"},{"import": 1148,"src": 3462,"name": "AT_calling_convention"},{"import": 1148,"src": 3463,"name": "FORM_sec_offset","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3464,"name": "AT_allocated"},{"import": 1148,"src": 3465,"name": "FORM_exprloc","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3466,"name": "TAG_thrown_type"},{"import": 1148,"src": 3467,"name": "AT_inline"},{"import": 1148,"src": 3468,"name": "AT_GNU_vector"},{"import": 1148,"src": 3469,"name": "TAG_partial_unit"},{"import": 1148,"src": 3470,"name": "LANG_Fortran77"},{"import": 1148,"src": 3471,"name": "OP_regx"},{"import": 1148,"src": 3472,"name": "ATE_void"},{"import": 1148,"src": 3473,"name": "OP_breg7"},{"import": 1148,"src": 3474,"name": "TAG_member"},{"import": 1148,"src": 3475,"name": "AT_data_member_location"},{"import": 1148,"src": 3476,"name": "AT_trampoline"},{"import": 1148,"src": 3477,"name": "AT_linkage_name"},{"import": 1148,"src": 3478,"name": "AT_discr_list"},{"import": 1148,"src": 3479,"name": "AT_MIPS_abstract_name"},{"import": 1148,"src": 3480,"name": "OP_lit5"},{"import": 1148,"src": 3481,"name": "LANG_C89"},{"import": 1148,"src": 3482,"name": "TAG_reference_type"},{"import": 1148,"src": 3483,"name": "OP_reg10"},{"import": 1148,"src": 3484,"name": "OP_reg31"},{"import": 1148,"src": 3485,"name": "OP_lit26"},{"import": 1148,"src": 3486,"name": "AT_use_UTF8"},{"import": 1148,"src": 3487,"name": "AT_picture_string"},{"import": 1148,"src": 3488,"name": "OP_reg27"},{"import": 1148,"src": 3489,"name": "AT_GNU_macros"},{"import": 1148,"src": 3490,"name": "AT_const_value"},{"import": 1148,"src": 3491,"name": "AT_upper_bound"},{"import": 1148,"src": 3492,"name": "FORM_ref4","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3493,"name": "LNS_set_isa"},{"import": 1148,"src": 3494,"name": "TAG_unspecified_type"},{"import": 1148,"src": 3495,"name": "TAG_imported_module"},{"import": 1148,"src": 3496,"name": "OP_reg0"},{"import": 1148,"src": 3497,"name": "OP_bra"},{"import": 1148,"src": 3498,"name": "OP_lit8"},{"import": 1148,"src": 3499,"name": "OP_lit13"},{"import": 1148,"src": 3500,"name": "OP_breg24"},{"import": 1148,"src": 3501,"name": "AT_default_value"},{"import": 1148,"src": 3502,"name": "OP_reg17"},{"import": 1148,"src": 3503,"name": "OP_HP_fltconst8"},{"import": 1148,"src": 3504,"name": "TAG_imported_unit"},{"import": 1148,"src": 3505,"name": "ATE_hi_user"},{"import": 1148,"src": 3506,"name": "AT_pure"},{"import": 1148,"src": 3507,"name": "OP_breg12"},{"import": 1148,"src": 3508,"name": "OP_breg9"},{"import": 1148,"src": 3509,"name": "AT_main_subprogram"},{"import": 1148,"src": 3510,"name": "OP_breg21"},{"import": 1148,"src": 3511,"name": "OP_form_tls_address"},{"import": 1148,"src": 3512,"name": "AT_byte_size"},{"import": 1148,"src": 3513,"name": "CFA_val_offset_sf"},{"import": 1148,"src": 3514,"name": "OP_ne"},{"import": 1148,"src": 3515,"name": "CFA_GNU_args_size"},{"import": 1148,"src": 3516,"name": "AT_data_bit_offset"},{"import": 1148,"src": 3517,"name": "OP_lit28"},{"import": 1148,"src": 3518,"name": "OP_ge"},{"import": 1148,"src": 3519,"name": "AT_language"},{"import": 1148,"src": 3520,"name": "AT_HP_prologue"},{"import": 1148,"src": 3521,"name": "FORM_sdata","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3522,"name": "TAG_structure_type"},{"import": 1148,"src": 3523,"name": "AT_endianity"},{"import": 1148,"src": 3524,"name": "AT_return_addr"},{"import": 1148,"src": 3525,"name": "OP_dup"},{"import": 1148,"src": 3526,"name": "OP_le"},{"import": 1148,"src": 3527,"name": "OP_breg19"},{"import": 1148,"src": 3528,"name": "TAG_shared_type"},{"import": 1148,"src": 3529,"name": "AT_binary_scale"},{"import": 1148,"src": 3530,"name": "AT_call_line"},{"import": 1148,"src": 3531,"name": "CFA_advance_loc"},{"import": 1148,"src": 3532,"name": "LANG_C_plus_plus_11"},{"import": 1148,"src": 3533,"name": "AT_string_length"},{"import": 1148,"src": 3534,"name": "AT_macro_info"},{"import": 1148,"src": 3535,"name": "AT_element_list"},{"import": 1148,"src": 3536,"name": "AT_GNU_call_site_value"},{"import": 1148,"src": 3537,"name": "AT_HP_pass_by_reference"},{"import": 1148,"src": 3538,"name": "FORM_data1","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3539,"name": "CFA_advance_loc4"},{"import": 1148,"src": 3540,"name": "TAG_HP_Bliss_field_set"},{"import": 1148,"src": 3541,"name": "LNS_set_epilogue_begin"},{"import": 1148,"src": 3542,"name": "OP_consts"},{"import": 1148,"src": 3543,"name": "LNS_set_prologue_end","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3544,"name": "OP_const1u"},{"import": 1148,"src": 3545,"name": "AT_address_class"},{"import": 1148,"src": 3546,"name": "OP_implicit_value"},{"import": 1148,"src": 3547,"name": "LANG_Fortran03"},{"import": 1148,"src": 3548,"name": "AT_HP_epilogue"},{"import": 1148,"src": 3549,"name": "AT_associated"},{"import": 1148,"src": 3550,"name": "AT_HP_unit_size"},{"import": 1148,"src": 3551,"name": "AT_bit_stride"},{"import": 1148,"src": 3552,"name": "LANG_Modula2"},{"import": 1148,"src": 3553,"name": "AT_name","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3554,"name": "CFA_advance_loc1"},{"import": 1148,"src": 3555,"name": "OP_and"},{"import": 1148,"src": 3556,"name": "LNS_const_add_pc","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3557,"name": "OP_reg18"},{"import": 1148,"src": 3558,"name": "AT_type"},{"import": 1148,"src": 3559,"name": "OP_HP_mod_range"},{"import": 1148,"src": 3560,"name": "OP_const8s"},{"import": 1148,"src": 3561,"name": "ATE_HP_edited"},{"import": 1148,"src": 3562,"name": "CFA_def_cfa_offset_sf"},{"import": 1148,"src": 3563,"name": "AT_use_GNAT_descriptive_type"},{"import": 1148,"src": 3564,"name": "LANG_Java"},{"import": 1148,"src": 3565,"name": "AT_namelist_items"},{"import": 1148,"src": 3566,"name": "OP_GNU_addr_index"},{"import": 1148,"src": 3567,"name": "OP_breg4"},{"import": 1148,"src": 3568,"name": "ATE_UTF"},{"import": 1148,"src": 3569,"name": "TAG_GNU_EINCL"},{"import": 1148,"src": 3570,"name": "OP_reg8"},{"import": 1148,"src": 3571,"name": "OP_lit0"},{"import": 1148,"src": 3572,"name": "TAG_namelist_item"},{"import": 1148,"src": 3573,"name": "AT_prototyped"},{"import": 1148,"src": 3574,"name": "OP_lt"},{"import": 1148,"src": 3575,"name": "AT_GNU_pubnames"},{"import": 1148,"src": 3576,"name": "OP_lit25"},{"import": 1148,"src": 3577,"name": "AT_GNU_odr_signature"},{"import": 1148,"src": 3578,"name": "TAG_formal_parameter"},{"import": 1148,"src": 3579,"name": "AT_artificial"},{"import": 1148,"src": 3580,"name": "TAG_class_type"},{"import": 1148,"src": 3581,"name": "OP_deref_size"},{"import": 1148,"src": 3582,"name": "AT_discr_value"},{"import": 1148,"src": 3583,"name": "OP_rot"},{"import": 1148,"src": 3584,"name": "OP_reg24"},{"import": 1148,"src": 3585,"name": "OP_piece"},{"import": 1148,"src": 3586,"name": "OP_HP_is_value"},{"import": 1148,"src": 3587,"name": "TAG_compile_unit","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3588,"name": "FORM_ref1","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3589,"name": "OP_GNU_regval_type"},{"import": 1148,"src": 3590,"name": "OP_breg1"},{"import": 1148,"src": 3591,"name": "TAG_string_type"},{"import": 1148,"src": 3592,"name": "LANG_D"},{"import": 1148,"src": 3593,"name": "OP_GNU_reinterpret"},{"import": 1148,"src": 3594,"name": "LANG_ObjC_plus_plus"},{"import": 1148,"src": 3595,"name": "OP_reg5"},{"import": 1148,"src": 3596,"name": "TAG_enumeration_type"},{"import": 1148,"src": 3597,"name": "OP_lit10"},{"import": 1148,"src": 3598,"name": "TAG_subprogram","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3599,"name": "AT_explicit"},{"import": 1148,"src": 3600,"name": "OP_reg12"},{"import": 1148,"src": 3601,"name": "OP_eq"},{"import": 1148,"src": 3602,"name": "OP_lit20"},{"import": 1148,"src": 3603,"name": "AT_HP_all_variables_modifiable"},{"import": 1148,"src": 3604,"name": "OP_reg21"},{"import": 1148,"src": 3605,"name": "OP_lit30"},{"import": 1148,"src": 3606,"name": "ATE_address"},{"import": 1148,"src": 3607,"name": "OP_breg11"},{"import": 1148,"src": 3608,"name": "FORM_indirect","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3609,"name": "TAG_file_type"},{"import": 1148,"src": 3610,"name": "AT_upc_threads_scaled"},{"import": 1148,"src": 3611,"name": "LANG_HP_Bliss"},{"import": 1148,"src": 3612,"name": "CFA_offset_extended_sf"},{"import": 1148,"src": 3613,"name": "OP_reg2"},{"import": 1148,"src": 3614,"name": "OP_lit15"},{"import": 1148,"src": 3615,"name": "TAG_HP_Bliss_field"},{"import": 1148,"src": 3616,"name": "OP_breg26"},{"import": 1148,"src": 3617,"name": "TAG_GNU_call_site"},{"import": 1148,"src": 3618,"name": "FORM_GNU_addr_index"},{"import": 1148,"src": 3619,"name": "TAG_common_block"},{"import": 1148,"src": 3620,"name": "TAG_subroutine_type"},{"import": 1148,"src": 3621,"name": "OP_GNU_const_type"},{"import": 1148,"src": 3622,"name": "TAG_entry_point","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3623,"name": "TAG_catch_block"},{"import": 1148,"src": 3624,"name": "OP_swap"},{"import": 1148,"src": 3625,"name": "AT_sibling"},{"import": 1148,"src": 3626,"name": "OP_bregx"},{"import": 1148,"src": 3627,"name": "AT_base_types"},{"import": 1148,"src": 3628,"name": "FORM_addr","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3629,"name": "OP_breg14"},{"import": 1148,"src": 3630,"name": "TAG_interface_type"},{"import": 1148,"src": 3631,"name": "LANG_Ada95"},{"import": 1148,"src": 3632,"name": "AT_ordering"},{"import": 1148,"src": 3633,"name": "AT_byte_stride"},{"import": 1148,"src": 3634,"name": "AT_producer"},{"import": 1148,"src": 3635,"name": "OP_breg23"},{"import": 1148,"src": 3636,"name": "AT_use_location"},{"import": 1148,"src": 3637,"name": "TAG_hi_user"},{"import": 1148,"src": 3638,"name": "AT_HP_opt_flags"},{"import": 1148,"src": 3639,"name": "AT_object_pointer"},{"import": 1148,"src": 3640,"name": "AT_lower_bound"},{"import": 1148,"src": 3641,"name": "AT_entry_pc"},{"import": 1148,"src": 3642,"name": "OP_mod"},{"import": 1148,"src": 3643,"name": "TAG_condition"},{"import": 1148,"src": 3644,"name": "OP_GNU_const_index"},{"import": 1148,"src": 3645,"name": "OP_stack_value"},{"import": 1148,"src": 3646,"name": "OP_GNU_implicit_pointer"},{"import": 1148,"src": 3647,"name": "AT_recursive"},{"import": 1148,"src": 3648,"name": "FORM_data4","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3649,"name": "AT_HP_prof_flags"},{"import": 1148,"src": 3650,"name": "LNS_extended_op","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3651,"name": "TAG_function_template"},{"import": 1148,"src": 3652,"name": "AT_GNU_locks_excluded"},{"import": 1148,"src": 3653,"name": "OP_drop"},{"import": 1148,"src": 3654,"name": "OP_breg28"},{"import": 1148,"src": 3655,"name": "AT_src_coords"},{"import": 1148,"src": 3656,"name": "AT_GNU_guarded_by"},{"import": 1148,"src": 3657,"name": "AT_const_expr"},{"import": 1148,"src": 3658,"name": "AT_high_pc","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3659,"name": "LANG_HP_Assembler"},{"import": 1148,"src": 3660,"name": "AT_HP_unmodifiable"},{"import": 1148,"src": 3661,"name": "ATE_HP_packed_decimal"},{"import": 1148,"src": 3662,"name": "ATE_HP_VAX_complex_float_d"},{"import": 1148,"src": 3663,"name": "ATE_HP_VAX_float_d"},{"import": 1148,"src": 3664,"name": "OP_xor"},{"import": 1148,"src": 3665,"name": "LANG_Mips_Assembler"},{"import": 1148,"src": 3666,"name": "OP_const1s"},{"import": 1148,"src": 3667,"name": "TAG_template_value_param"},{"import": 1148,"src": 3668,"name": "TAG_upc_strict_type"},{"import": 1148,"src": 3669,"name": "CFA_def_cfa_register"},{"import": 1148,"src": 3670,"name": "CFA_register"},{"import": 1148,"src": 3671,"name": "AT_GNU_pt_guarded_by"},{"import": 1148,"src": 3672,"name": "OP_HP_unknown"},{"import": 1148,"src": 3673,"name": "OP_lit3"},{"import": 1148,"src": 3674,"name": "OP_lit18"},{"import": 1148,"src": 3675,"name": "AT_MIPS_loop_begin"},{"import": 1148,"src": 3676,"name": "FORM_string","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3677,"name": "OP_or"},{"import": 1148,"src": 3678,"name": "TAG_upc_relaxed_type"},{"import": 1148,"src": 3679,"name": "OP_const8u"},{"import": 1148,"src": 3680,"name": "CFA_offset"},{"import": 1148,"src": 3681,"name": "TAG_template_alias"},{"import": 1148,"src": 3682,"name": "OP_reg29"},{"import": 1148,"src": 3683,"name": "AT_call_column"},{"import": 1148,"src": 3684,"name": "CFA_restore_state"},{"import": 1148,"src": 3685,"name": "TAG_type_unit"},{"import": 1148,"src": 3686,"name": "AT_count"},{"import": 1148,"src": 3687,"name": "OP_gt"},{"import": 1148,"src": 3688,"name": "ATE_boolean"},{"import": 1148,"src": 3689,"name": "FORM_ref2","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3690,"name": "AT_threads_scaled"},{"import": 1148,"src": 3691,"name": "TAG_format_label"},{"import": 1148,"src": 3692,"name": "OP_breg6"},{"import": 1148,"src": 3693,"name": "LANG_C"},{"import": 1148,"src": 3694,"name": "OP_HP_tls"},{"import": 1148,"src": 3695,"name": "AT_extension"},{"import": 1148,"src": 3696,"name": "OP_nop"},{"import": 1148,"src": 3697,"name": "OP_lit6"},{"import": 1148,"src": 3698,"name": "LANG_Upc"},{"import": 1148,"src": 3699,"name": "OP_reg11"},{"import": 1148,"src": 3700,"name": "TAG_enumerator"},{"import": 1148,"src": 3701,"name": "OP_lit27"},{"import": 1148,"src": 3702,"name": "AT_hi_user"},{"import": 1148,"src": 3703,"name": "OP_reg26"},{"import": 1148,"src": 3704,"name": "AT_bit_offset"},{"import": 1148,"src": 3705,"name": "AT_HP_actuals_stmt_list"},{"import": 1148,"src": 3706,"name": "CFA_remember_state"},{"import": 1148,"src": 3707,"name": "AT_decimal_sign"},{"import": 1148,"src": 3708,"name": "OP_breg3"},{"import": 1148,"src": 3709,"name": "CFA_same_value"},{"import": 1148,"src": 3710,"name": "TAG_PGI_kanji_type"},{"import": 1148,"src": 3711,"name": "OP_shra"},{"import": 1148,"src": 3712,"name": "AT_discr"},{"import": 1148,"src": 3713,"name": "OP_reg7"},{"import": 1148,"src": 3714,"name": "CFA_set_loc"},{"import": 1148,"src": 3715,"name": "OP_GNU_convert"},{"import": 1148,"src": 3716,"name": "OP_lit9"},{"import": 1148,"src": 3717,"name": "OP_lit12"},{"import": 1148,"src": 3718,"name": "TAG_unspecified_parameters"},{"import": 1148,"src": 3719,"name": "ATE_unsigned_fixed"},{"import": 1148,"src": 3720,"name": "CFA_nop"},{"import": 1148,"src": 3721,"name": "AT_GNU_call_site_target"},{"import": 1148,"src": 3722,"name": "OP_reg14"},{"import": 1148,"src": 3723,"name": "AT_low_pc","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3724,"name": "OP_lit22"},{"import": 1148,"src": 3725,"name": "AT_GNU_all_source_call_sites"},{"import": 1148,"src": 3726,"name": "AT_mutable"},{"import": 1148,"src": 3727,"name": "TAG_friend"},{"import": 1148,"src": 3728,"name": "OP_call_ref"},{"import": 1148,"src": 3729,"name": "OP_call_frame_cfa"},{"import": 1148,"src": 3730,"name": "OP_reg23"},{"import": 1148,"src": 3731,"name": "OP_breg13"},{"import": 1148,"src": 3732,"name": "OP_fbreg"},{"import": 1148,"src": 3733,"name": "OP_breg30"},{"import": 1148,"src": 3734,"name": "OP_breg8"},{"import": 1148,"src": 3735,"name": "AT_static_link"},{"import": 1148,"src": 3736,"name": "TAG_template_type_param"},{"import": 1148,"src": 3737,"name": "AT_is_optional"},{"import": 1148,"src": 3738,"name": "OP_plus_uconst"},{"import": 1148,"src": 3739,"name": "OP_hi_user"},{"import": 1148,"src": 3740,"name": "LANG_Cobol85"},{"import": 1148,"src": 3741,"name": "OP_lit17"},{"import": 1148,"src": 3742,"name": "OP_breg20"},{"import": 1148,"src": 3743,"name": "LNE_set_discriminator"},{"import": 1148,"src": 3744,"name": "LANG_Ada83"},{"import": 1148,"src": 3745,"name": "AT_sf_names"},{"import": 1148,"src": 3746,"name": "AT_MIPS_tail_loop_begin"},{"import": 1148,"src": 3747,"name": "CFA_GNU_window_save"},{"import": 1148,"src": 3748,"name": "TAG_GNU_BINCL"},{"import": 1148,"src": 3749,"name": "OP_lit29"},{"import": 1148,"src": 3750,"name": "AT_GNU_pt_guarded"},{"import": 1148,"src": 3751,"name": "TAG_volatile_type"},{"import": 1148,"src": 3752,"name": "OP_HP_fltconst4"},{"import": 1148,"src": 3753,"name": "TAG_array_type"},{"import": 1148,"src": 3754,"name": "AT_ranges","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3755,"name": "AT_bit_size"},{"import": 1148,"src": 3756,"name": "AT_GNU_guarded"},{"import": 1148,"src": 3757,"name": "TAG_access_declaration"},{"import": 1148,"src": 3758,"name": "AT_HP_block_index"},{"import": 1148,"src": 3759,"name": "OP_breg16"},{"import": 1148,"src": 3760,"name": "ATE_imaginary_float"},{"import": 1148,"src": 3761,"name": "LANG_ObjC"},{"import": 1148,"src": 3762,"name": "AT_src_info"},{"import": 1148,"src": 3763,"name": "LNS_set_basic_block","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3764,"name": "OP_constu"},{"import": 1148,"src": 3765,"name": "CFA_def_cfa_offset"},{"import": 1148,"src": 3766,"name": "TAG_const_type"},{"import": 1148,"src": 3767,"name": "TAG_lexical_block"},{"import": 1148,"src": 3768,"name": "ATE_HP_VAX_complex_float"},{"import": 1148,"src": 3769,"name": "AT_call_file"},{"import": 1148,"src": 3770,"name": "OP_skip"},{"import": 1148,"src": 3771,"name": "DW_TAG_MIPS_loop"},{"import": 1148,"src": 3772,"name": "AT_HP_cold_region_high_pc"},{"import": 1148,"src": 3773,"name": "FORM_block4","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3774,"name": "OP_call2"},{"import": 1148,"src": 3775,"name": "OP_div"},{"import": 1148,"src": 3776,"name": "OP_xderef"},{"import": 1148,"src": 3777,"name": "OP_GNU_parameter_ref"},{"import": 1148,"src": 3778,"name": "AT_identifier_case"},{"import": 1148,"src": 3779,"name": "AT_declaration"},{"import": 1148,"src": 3780,"name": "FORM_data2","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3781,"name": "LANG_HP_IMacro"},{"import": 1148,"src": 3782,"name": "AT_accessibility"},{"import": 1148,"src": 3783,"name": "AT_member"},{"import": 1148,"src": 3784,"name": "TAG_variant"},{"import": 1148,"src": 3785,"name": "FORM_block1","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3786,"name": "ATE_HP_imaginary_float128"},{"import": 1148,"src": 3787,"name": "CFA_undefined"},{"import": 1148,"src": 3788,"name": "AT_encoding"},{"import": 1148,"src": 3789,"name": "ATE_signed"},{"import": 1148,"src": 3790,"name": "CFA_def_cfa_sf"},{"import": 1148,"src": 3791,"name": "AT_GNU_call_site_data_value"},{"import": 1148,"src": 3792,"name": "AT_containing_type"},{"import": 1148,"src": 3793,"name": "AT_HP_cold_region_low_pc"},{"import": 1148,"src": 3794,"name": "AT_HP_linkage_name"},{"import": 1148,"src": 3795,"name": "TAG_dwarf_procedure"},{"import": 1148,"src": 3796,"name": "AT_digit_count"},{"import": 1148,"src": 3797,"name": "TAG_imported_declaration"},{"import": 1148,"src": 3798,"name": "OP_reg19"},{"import": 1148,"src": 3799,"name": "FORM_udata","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3800,"name": "CFA_GNU_negative_offset_extended"},{"import": 1148,"src": 3801,"name": "AT_segment"},{"import": 1148,"src": 3802,"name": "FORM_block","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3803,"name": "AT_description"},{"import": 1148,"src": 3804,"name": "AT_MIPS_fde"},{"import": 1148,"src": 3805,"name": "FORM_ref_addr","kind": "const","type": 599,"value": null},{"import": 1148,"src": 3806,"name": "ATE_edited"},{"import": 1148,"src": 3807,"name": "ATE_HP_floathpintel"},{"import": 1149,"src": 3808,"name": "RwLock"},{"import": 1149,"src": 3809,"name": "Lock"},{"import": 1149,"src": 3810,"name": "Locked"},{"import": 1149,"src": 3811,"name": "Channel"},{"import": 1149,"src": 3812,"name": "Future"},{"import": 1149,"src": 3813,"name": "RwLocked"},{"import": 1149,"src": 3814,"name": "Loop","kind": "const","type": 546,"value": 1391},{"import": 1149,"src": 3815,"name": "Group"},{"import": 1149,"src": 3816,"name": "fs","kind": "const","type": 546,"value": 1065},{"import": 1150,"src": 3817,"name": "SHT_SYMTAB_SHNDX"},{"import": 1150,"src": 3818,"name": "Elf32_Nhdr"},{"import": 1150,"src": 3819,"name": "SHF_COMPRESSED"},{"import": 1150,"src": 3820,"name": "SHF_ALLOC"},{"import": 1150,"src": 3821,"name": "DT_MIPS_SYMBOL_LIB"},{"import": 1150,"src": 3822,"name": "DT_SYMINFO"},{"import": 1150,"src": 3823,"name": "DT_MIPS_COMPACT_SIZE"},{"import": 1150,"src": 3824,"name": "DT_MIPS_LOCAL_GOTNO"},{"import": 1150,"src": 3825,"name": "AT_PHNUM","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3826,"name": "PT_NOTE"},{"import": 1150,"src": 3827,"name": "EI_NIDENT","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3828,"name": "SHF_WRITE"},{"import": 1150,"src": 3829,"name": "SHF_OS_NONCONFORMING"},{"import": 1150,"src": 3830,"name": "STB_LOCAL"},{"import": 1150,"src": 3831,"name": "DT_MIPS_DELTA_RELOC"},{"import": 1150,"src": 3832,"name": "DT_MIPS_DELTA_SYM_NO"},{"import": 1150,"src": 3833,"name": "DT_FEATURE_1"},{"import": 1150,"src": 3834,"name": "SHT_FINI_ARRAY"},{"import": 1150,"src": 3835,"name": "AT_DCACHEBSIZE"},{"import": 1150,"src": 3836,"name": "Elf64_Section","kind": "const","type": 546,"value": 730},{"import": 1150,"src": 3837,"name": "DT_MIPS_NUM"},{"import": 1150,"src": 3838,"name": "Elf32_Chdr"},{"import": 1150,"src": 3839,"name": "SHF_ARM_PURECODE"},{"import": 1150,"src": 3840,"name": "AT_EGID"},{"import": 1150,"src": 3841,"name": "AT_L3_CACHEGEOMETRY"},{"import": 1150,"src": 3842,"name": "STT_ARM_TFUNC"},{"import": 1150,"src": 3843,"name": "DT_VALNUM"},{"import": 1150,"src": 3844,"name": "Elf_Options"},{"import": 1150,"src": 3845,"name": "DT_SYMINSZ"},{"import": 1150,"src": 3846,"name": "DT_GNU_CONFLICTSZ"},{"import": 1150,"src": 3847,"name": "DT_RELASZ"},{"import": 1150,"src": 3848,"name": "Elf64_Off","kind": "const","type": 546,"value": 615},{"import": 1150,"src": 3849,"name": "Elf64_Shdr"},{"import": 1150,"src": 3850,"name": "Phdr","kind": "const","type": 546,"value": 1496},{"import": 1150,"src": 3851,"name": "STT_SPARC_REGISTER"},{"import": 1150,"src": 3852,"name": "STT_LOPROC"},{"import": 1150,"src": 3853,"name": "SHT_SHLIB"},{"import": 1150,"src": 3854,"name": "SHF_MERGE"},{"import": 1150,"src": 3855,"name": "DT_MIPS_UNREFEXTNO"},{"import": 1150,"src": 3856,"name": "Elf32_Phdr"},{"import": 1150,"src": 3857,"name": "SHF_X86_64_LARGE"},{"import": 1150,"src": 3858,"name": "Elf32_Xword"},{"import": 1150,"src": 3859,"name": "DT_MIPS_PLTGOT"},{"import": 1150,"src": 3860,"name": "Elf64_Sym","kind": "const","type": 546,"value": 1497},{"import": 1150,"src": 3861,"name": "DT_DEPAUDIT"},{"import": 1150,"src": 3862,"name": "DT_MIPS_DELTA_CLASS_NO"},{"import": 1150,"src": 3863,"name": "PT_HIOS"},{"import": 1150,"src": 3864,"name": "DT_VERNEEDNUM"},{"import": 1150,"src": 3865,"name": "SHF_MIPS_STRING"},{"import": 1150,"src": 3866,"name": "DT_MIPS_RWPLT"},{"import": 1150,"src": 3867,"name": "DT_INIT_ARRAY"},{"import": 1150,"src": 3868,"name": "SHF_TLS"},{"import": 1150,"src": 3869,"name": "DT_FINI_ARRAY"},{"import": 1150,"src": 3870,"name": "DT_HIPROC"},{"import": 1150,"src": 3871,"name": "Elf32_Verneed"},{"import": 1150,"src": 3872,"name": "Elf64_Addr","kind": "const","type": 546,"value": 615},{"import": 1150,"src": 3873,"name": "DT_AUDIT"},{"import": 1150,"src": 3874,"name": "SHT_GROUP"},{"import": 1150,"src": 3875,"name": "Elf32_Conflict"},{"import": 1150,"src": 3876,"name": "DT_MIPS_CONFLICT"},{"import": 1150,"src": 3877,"name": "AT_L1I_CACHESHAPE"},{"import": 1150,"src": 3878,"name": "PT_GNU_EH_FRAME"},{"import": 1150,"src": 3879,"name": "DT_NEEDED"},{"import": 1150,"src": 3880,"name": "DT_MIPS_SYMTABNO"},{"import": 1150,"src": 3881,"name": "STB_LOPROC"},{"import": 1150,"src": 3882,"name": "AT_L3_CACHESHAPE"},{"import": 1150,"src": 3883,"name": "Elf","kind": "const","type": 546,"value": 1232},{"import": 1150,"src": 3884,"name": "DT_SYMENT"},{"import": 1150,"src": 3885,"name": "DT_NULL"},{"import": 1150,"src": 3886,"name": "PF_W"},{"import": 1150,"src": 3887,"name": "DT_PPC64_OPD"},{"import": 1150,"src": 3888,"name": "DT_GNU_CONFLICT"},{"import": 1150,"src": 3889,"name": "DT_MIPS_RLD_MAP_REL"},{"import": 1150,"src": 3890,"name": "SHT_STRTAB","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3891,"name": "SectionHeader","kind": "const","type": 546,"value": 1244},{"import": 1150,"src": 3892,"name": "PT_HISUNW"},{"import": 1150,"src": 3893,"name": "DT_HIOS"},{"import": 1150,"src": 3894,"name": "SHT_INIT_ARRAY"},{"import": 1150,"src": 3895,"name": "SHF_MIPS_MERGE"},{"import": 1150,"src": 3896,"name": "Elf64_Versym"},{"import": 1150,"src": 3897,"name": "DT_MIPS_PERF_SUFFIX"},{"import": 1150,"src": 3898,"name": "Elf64_Dyn"},{"import": 1150,"src": 3899,"name": "SHF_MIPS_ADDR"},{"import": 1150,"src": 3900,"name": "DT_ADDRRNGHI"},{"import": 1150,"src": 3901,"name": "SHT_HIOS"},{"import": 1150,"src": 3902,"name": "AT_NULL","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3903,"name": "STT_HIPROC"},{"import": 1150,"src": 3904,"name": "Elf_Options_Hw"},{"import": 1150,"src": 3905,"name": "VER_FLG_BASE","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3906,"name": "STT_GNU_IFUNC"},{"import": 1150,"src": 3907,"name": "Elf64_Chdr"},{"import": 1150,"src": 3908,"name": "Elf64_Verdaux","kind": "const","type": 546,"value": 1498},{"import": 1150,"src": 3909,"name": "SHF_MASKOS"},{"import": 1150,"src": 3910,"name": "STT_TLS"},{"import": 1150,"src": 3911,"name": "DT_ADDRNUM"},{"import": 1150,"src": 3912,"name": "DT_MIPS_DELTA_INSTANCE"},{"import": 1150,"src": 3913,"name": "AT_PAGESZ"},{"import": 1150,"src": 3914,"name": "Dyn"},{"import": 1150,"src": 3915,"name": "DT_SPARC_REGISTER"},{"import": 1150,"src": 3916,"name": "AT_HWCAP","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3917,"name": "AT_IGNOREPPC"},{"import": 1150,"src": 3918,"name": "DT_PLTREL"},{"import": 1150,"src": 3919,"name": "AT_HWCAP2"},{"import": 1150,"src": 3920,"name": "DT_MOVETAB"},{"import": 1150,"src": 3921,"name": "DT_PPC64_OPDSZ"},{"import": 1150,"src": 3922,"name": "DT_INIT_ARRAYSZ"},{"import": 1150,"src": 3923,"name": "DT_TLSDESC_GOT"},{"import": 1150,"src": 3924,"name": "SHF_MIPS_NODUPES"},{"import": 1150,"src": 3925,"name": "DT_FLAGS_1"},{"import": 1150,"src": 3926,"name": "Elf32_auxv_t"},{"import": 1150,"src": 3927,"name": "DT_PLTGOT"},{"import": 1150,"src": 3928,"name": "SHF_MIPS_NAMES"},{"import": 1150,"src": 3929,"name": "Elf32_Move"},{"import": 1150,"src": 3930,"name": "DT_RELAENT"},{"import": 1150,"src": 3931,"name": "SHT_HIUSER"},{"import": 1150,"src": 3932,"name": "Sym","kind": "const","type": 546,"value": 1497},{"import": 1150,"src": 3933,"name": "Elf64_Verneed"},{"import": 1150,"src": 3934,"name": "AT_NOTELF"},{"import": 1150,"src": 3935,"name": "PT_TLS","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3936,"name": "STT_FUNC","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3937,"name": "DT_MOVEENT"},{"import": 1150,"src": 3938,"name": "Elf_MIPS_ABIFlags_v0"},{"import": 1150,"src": 3939,"name": "AT_SYSINFO_EHDR","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3940,"name": "SHF_GROUP"},{"import": 1150,"src": 3941,"name": "AT_ICACHEBSIZE"},{"import": 1150,"src": 3942,"name": "STT_COMMON","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3943,"name": "DT_ENCODING"},{"import": 1150,"src": 3944,"name": "DT_GNU_LIBLIST"},{"import": 1150,"src": 3945,"name": "Verdef","kind": "const","type": 546,"value": 1379},{"import": 1150,"src": 3946,"name": "Elf32_Verdaux"},{"import": 1150,"src": 3947,"name": "PF_MASKPROC"},{"import": 1150,"src": 3948,"name": "DT_LOOS"},{"import": 1150,"src": 3949,"name": "AT_L1D_CACHESIZE"},{"import": 1150,"src": 3950,"name": "DT_GNU_LIBLISTSZ"},{"import": 1150,"src": 3951,"name": "AT_UCACHEBSIZE"},{"import": 1150,"src": 3952,"name": "SHT_LOUSER"},{"import": 1150,"src": 3953,"name": "AT_L2_CACHEGEOMETRY"},{"import": 1150,"src": 3954,"name": "DT_SYMTAB","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3955,"name": "Elf32_gptab"},{"import": 1150,"src": 3956,"name": "STT_ARM_16BIT"},{"import": 1150,"src": 3957,"name": "DT_FLAGS"},{"import": 1150,"src": 3958,"name": "PF_R"},{"import": 1150,"src": 3959,"name": "DT_RELACOUNT"},{"import": 1150,"src": 3960,"name": "DT_MIPS_MSYM"},{"import": 1150,"src": 3961,"name": "DT_IA_64_NUM"},{"import": 1150,"src": 3962,"name": "SHT_RELA"},{"import": 1150,"src": 3963,"name": "DT_TEXTREL"},{"import": 1150,"src": 3964,"name": "DT_RELCOUNT"},{"import": 1150,"src": 3965,"name": "DT_MIPS_RLD_TEXT_RESOLVE_ADDR"},{"import": 1150,"src": 3966,"name": "DT_PPC64_GLINK"},{"import": 1150,"src": 3967,"name": "DT_MIPS_BASE_ADDRESS"},{"import": 1150,"src": 3968,"name": "Elf64_Nhdr"},{"import": 1150,"src": 3969,"name": "DT_LOPROC"},{"import": 1150,"src": 3970,"name": "AT_ENTRY"},{"import": 1150,"src": 3971,"name": "SHF_LINK_ORDER"},{"import": 1150,"src": 3972,"name": "DT_MIPS_LOCAL_GOTIDX"},{"import": 1150,"src": 3973,"name": "DT_PLTRELSZ"},{"import": 1150,"src": 3974,"name": "STT_HIOS"},{"import": 1150,"src": 3975,"name": "DT_VALRNGLO"},{"import": 1150,"src": 3976,"name": "VER_FLG_WEAK"},{"import": 1150,"src": 3977,"name": "DT_CHECKSUM"},{"import": 1150,"src": 3978,"name": "XCORE_SHF_DP_SECTION"},{"import": 1150,"src": 3979,"name": "AT_RANDOM"},{"import": 1150,"src": 3980,"name": "DT_MIPS_HIDDEN_GOTIDX"},{"import": 1150,"src": 3981,"name": "Elf64_Rela"},{"import": 1150,"src": 3982,"name": "DT_MIPS_TIME_STAMP"},{"import": 1150,"src": 3983,"name": "AT_FPUCW"},{"import": 1150,"src": 3984,"name": "Elf64_Sxword"},{"import": 1150,"src": 3985,"name": "DT_BIND_NOW"},{"import": 1150,"src": 3986,"name": "DT_ADDRRNGLO"},{"import": 1150,"src": 3987,"name": "Elf64_auxv_t","kind": "const","type": 546,"value": 1499},{"import": 1150,"src": 3988,"name": "DT_SYMINENT"},{"import": 1150,"src": 3989,"name": "ET","kind": "const","type": 546,"value": 1236},{"import": 1150,"src": 3990,"name": "PT_PHDR","kind": "const","type": 599,"value": null},{"import": 1150,"src": 3991,"name": "DT_MIPS_DELTA_SYM"},{"import": 1150,"src": 3992,"name": "DT_PPC_OPT"},{"import": 1150,"src": 3993,"name": "DT_MIPS_PIXIE_INIT"},{"import": 1150,"src": 3994,"name": "Elf32_Word"},{"import": 1150,"src": 3995,"name": "DT_AUXILIARY"},{"import": 1150,"src": 3996,"name": "STT_HP_OPAQUE"},{"import": 1150,"src": 3997,"name": "PT_SUNWSTACK"},{"import": 1150,"src": 3998,"name": "Elf32_Dyn"},{"import": 1150,"src": 3999,"name": "PF_X"},{"import": 1150,"src": 4000,"name": "DT_RELSZ"},{"import": 1150,"src": 4001,"name": "Elf32_Half"},{"import": 1150,"src": 4002,"name": "Elf64_Verdef","kind": "const","type": 546,"value": 1379},{"import": 1150,"src": 4003,"name": "AT_L2_CACHESIZE"},{"import": 1150,"src": 4004,"name": "Elf32_Versym"},{"import": 1150,"src": 4005,"name": "Elf64_Xword","kind": "const","type": 546,"value": 615},{"import": 1150,"src": 4006,"name": "AT_SECURE"},{"import": 1150,"src": 4007,"name": "DT_MIPS_LIBLISTNO"},{"import": 1150,"src": 4008,"name": "STT_NOTYPE","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4009,"name": "DT_MOVESZ"},{"import": 1150,"src": 4010,"name": "STB_GLOBAL","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4011,"name": "Elf32_Syminfo"},{"import": 1150,"src": 4012,"name": "DT_MIPS_LIBLIST"},{"import": 1150,"src": 4013,"name": "DT_RUNPATH"},{"import": 1150,"src": 4014,"name": "Elf64_Ehdr","kind": "const","type": 546,"value": 1500},{"import": 1150,"src": 4015,"name": "DT_DEBUG"},{"import": 1150,"src": 4016,"name": "DT_MIPS_LOCALPAGE_GOTIDX"},{"import": 1150,"src": 4017,"name": "DT_PPC64_OPT"},{"import": 1150,"src": 4018,"name": "DT_NIOS2_GP"},{"import": 1150,"src": 4019,"name": "PT_INTERP"},{"import": 1150,"src": 4020,"name": "DT_TLSDESC_PLT"},{"import": 1150,"src": 4021,"name": "Elf64_Half","kind": "const","type": 546,"value": 730},{"import": 1150,"src": 4022,"name": "DT_RPATH"},{"import": 1150,"src": 4023,"name": "SHT_DYNSYM"},{"import": 1150,"src": 4024,"name": "PT_DYNAMIC","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4025,"name": "Elf32_Sxword"},{"import": 1150,"src": 4026,"name": "SHT_LOOS"},{"import": 1150,"src": 4027,"name": "STB_NUM"},{"import": 1150,"src": 4028,"name": "DT_MIPS_HIPAGENO"},{"import": 1150,"src": 4029,"name": "DT_POSFLAG_1"},{"import": 1150,"src": 4030,"name": "DT_PPC64_NUM"},{"import": 1150,"src": 4031,"name": "PT_HIPROC"},{"import": 1150,"src": 4032,"name": "STB_WEAK","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4033,"name": "DT_VERNEED"},{"import": 1150,"src": 4034,"name": "DT_STRSZ"},{"import": 1150,"src": 4035,"name": "DT_MIPS_DELTA_CLASSSYM_NO"},{"import": 1150,"src": 4036,"name": "Elf32_Lib"},{"import": 1150,"src": 4037,"name": "SHT_LOPROC"},{"import": 1150,"src": 4038,"name": "DT_PREINIT_ARRAY"},{"import": 1150,"src": 4039,"name": "AT_GID"},{"import": 1150,"src": 4040,"name": "STB_HIOS"},{"import": 1150,"src": 4041,"name": "PT_NUM"},{"import": 1150,"src": 4042,"name": "Ehdr","kind": "const","type": 546,"value": 1500},{"import": 1150,"src": 4043,"name": "DT_VERDEFNUM"},{"import": 1150,"src": 4044,"name": "DT_SYMBOLIC"},{"import": 1150,"src": 4045,"name": "DT_ALPHA_PLTRO"},{"import": 1150,"src": 4046,"name": "DT_MIPS_INTERFACE_SIZE"},{"import": 1150,"src": 4047,"name": "DT_MIPS_GOTSYM"},{"import": 1150,"src": 4048,"name": "DT_SYMTAB_SHNDX"},{"import": 1150,"src": 4049,"name": "DT_MIPS_DELTA_INSTANCE_NO"},{"import": 1150,"src": 4050,"name": "AT_EXECFD"},{"import": 1150,"src": 4051,"name": "PT_SHLIB"},{"import": 1150,"src": 4052,"name": "Elf32_Rela"},{"import": 1150,"src": 4053,"name": "DT_MIPS_IVERSION"},{"import": 1150,"src": 4054,"name": "AT_PLATFORM"},{"import": 1150,"src": 4055,"name": "DT_FILTER"},{"import": 1150,"src": 4056,"name": "SHT_REL"},{"import": 1150,"src": 4057,"name": "Elf64_Sword"},{"import": 1150,"src": 4058,"name": "AT_L1I_CACHEGEOMETRY"},{"import": 1150,"src": 4059,"name": "AT_EUID"},{"import": 1150,"src": 4060,"name": "STB_MIPS_SPLIT_COMMON"},{"import": 1150,"src": 4061,"name": "Shdr"},{"import": 1150,"src": 4062,"name": "AT_UID"},{"import": 1150,"src": 4063,"name": "PT_LOSUNW"},{"import": 1150,"src": 4064,"name": "DT_PROCNUM"},{"import": 1150,"src": 4065,"name": "DT_MIPS_AUX_DYNAMIC"},{"import": 1150,"src": 4066,"name": "XCORE_SHF_CP_SECTION"},{"import": 1150,"src": 4067,"name": "AT_EXECFN"},{"import": 1150,"src": 4068,"name": "AT_L2_CACHESHAPE"},{"import": 1150,"src": 4069,"name": "DT_RELA"},{"import": 1150,"src": 4070,"name": "EM","kind": "const","type": 546,"value": 1239},{"import": 1150,"src": 4071,"name": "DT_STRTAB","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4072,"name": "SHT_DYNAMIC"},{"import": 1150,"src": 4073,"name": "DT_MIPS_INTERFACE"},{"import": 1150,"src": 4074,"name": "DT_REL"},{"import": 1150,"src": 4075,"name": "DT_VERSYM","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4076,"name": "DT_VERDEF","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4077,"name": "DT_PLTPADSZ"},{"import": 1150,"src": 4078,"name": "Elf32_Sym"},{"import": 1150,"src": 4079,"name": "DT_MIPS_GP_VALUE"},{"import": 1150,"src": 4080,"name": "PT_GNU_STACK","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4081,"name": "DT_EXTRANUM"},{"import": 1150,"src": 4082,"name": "DT_PREINIT_ARRAYSZ"},{"import": 1150,"src": 4083,"name": "DT_CONFIG"},{"import": 1150,"src": 4084,"name": "Elf64_Word","kind": "const","type": 546,"value": 770},{"import": 1150,"src": 4085,"name": "AT_L1D_CACHEGEOMETRY"},{"import": 1150,"src": 4086,"name": "AT_L1D_CACHESHAPE"},{"import": 1150,"src": 4087,"name": "STT_OBJECT","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4088,"name": "AT_CLKTCK"},{"import": 1150,"src": 4089,"name": "DT_GNU_PRELINKED"},{"import": 1150,"src": 4090,"name": "SHT_HIPROC"},{"import": 1150,"src": 4091,"name": "Elf64_Rel"},{"import": 1150,"src": 4092,"name": "PT_GNU_RELRO"},{"import": 1150,"src": 4093,"name": "SHF_STRINGS"},{"import": 1150,"src": 4094,"name": "AT_PHDR","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4095,"name": "SHT_NULL","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4096,"name": "PT_NULL"},{"import": 1150,"src": 4097,"name": "Elf64_Vernaux"},{"import": 1150,"src": 4098,"name": "DT_JMPREL"},{"import": 1150,"src": 4099,"name": "SHT_NOBITS","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4100,"name": "STT_HP_STUB"},{"import": 1150,"src": 4101,"name": "AT_SYSINFO"},{"import": 1150,"src": 4102,"name": "DT_SPARC_NUM"},{"import": 1150,"src": 4103,"name": "AT_L3_CACHESIZE"},{"import": 1150,"src": 4104,"name": "Elf64_Lib"},{"import": 1150,"src": 4105,"name": "STT_SECTION"},{"import": 1150,"src": 4106,"name": "DT_PLTPAD"},{"import": 1150,"src": 4107,"name": "Elf32_Verdef"},{"import": 1150,"src": 4108,"name": "DT_PPC_GOT"},{"import": 1150,"src": 4109,"name": "SHF_MIPS_GPREL"},{"import": 1150,"src": 4110,"name": "PT_LOAD","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4111,"name": "SHT_PREINIT_ARRAY"},{"import": 1150,"src": 4112,"name": "STT_FILE"},{"import": 1150,"src": 4113,"name": "Elf32_RegInfo"},{"import": 1150,"src": 4114,"name": "AT_FLAGS"},{"import": 1150,"src": 4115,"name": "DT_IA_64_PLT_RESERVE"},{"import": 1150,"src": 4116,"name": "Elf64_Phdr","kind": "const","type": 546,"value": 1496},{"import": 1150,"src": 4117,"name": "Verdaux","kind": "const","type": 546,"value": 1498},{"import": 1150,"src": 4118,"name": "DT_MIPS_OPTIONS"},{"import": 1150,"src": 4119,"name": "AT_IGNORE"},{"import": 1150,"src": 4120,"name": "SHT_HASH"},{"import": 1150,"src": 4121,"name": "STB_LOOS"},{"import": 1150,"src": 4122,"name": "STB_GNU_UNIQUE","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4123,"name": "DT_MIPS_PROTECTED_GOTIDX"},{"import": 1150,"src": 4124,"name": "DT_VALRNGHI"},{"import": 1150,"src": 4125,"name": "Elf32_Rel"},{"import": 1150,"src": 4126,"name": "DT_MIPS_DYNSTR_ALIGN"},{"import": 1150,"src": 4127,"name": "DT_HASH","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4128,"name": "DT_INIT"},{"import": 1150,"src": 4129,"name": "PF_MASKOS"},{"import": 1150,"src": 4130,"name": "DT_FINI_ARRAYSZ"},{"import": 1150,"src": 4131,"name": "DT_NUM"},{"import": 1150,"src": 4132,"name": "Elf64_Move"},{"import": 1150,"src": 4133,"name": "Elf32_Off"},{"import": 1150,"src": 4134,"name": "Elf32_Vernaux"},{"import": 1150,"src": 4135,"name": "DT_MIPS_RLD_VERSION"},{"import": 1150,"src": 4136,"name": "DT_MIPS_CONFLICTNO"},{"import": 1150,"src": 4137,"name": "DT_GNU_HASH"},{"import": 1150,"src": 4138,"name": "PT_LOPROC"},{"import": 1150,"src": 4139,"name": "SHF_EXCLUDE"},{"import": 1150,"src": 4140,"name": "DT_MIPS_DELTA_CLASS"},{"import": 1150,"src": 4141,"name": "DT_MIPS_FLAGS"},{"import": 1150,"src": 4142,"name": "Auxv","kind": "const","type": 546,"value": 1499},{"import": 1150,"src": 4143,"name": "Elf32_Section"},{"import": 1150,"src": 4144,"name": "Elf32_Sword"},{"import": 1150,"src": 4145,"name": "PT_LOOS"},{"import": 1150,"src": 4146,"name": "AT_BASE_PLATFORM"},{"import": 1150,"src": 4147,"name": "DT_MIPS_ICHECKSUM"},{"import": 1150,"src": 4148,"name": "AT_BASE"},{"import": 1150,"src": 4149,"name": "DT_ALPHA_NUM"},{"import": 1150,"src": 4150,"name": "DT_MIPS_RLD_MAP"},{"import": 1150,"src": 4151,"name": "STB_HIPROC"},{"import": 1150,"src": 4152,"name": "SHT_NOTE"},{"import": 1150,"src": 4153,"name": "Elf64_Syminfo"},{"import": 1150,"src": 4154,"name": "STT_LOOS"},{"import": 1150,"src": 4155,"name": "AT_L1I_CACHESIZE"},{"import": 1150,"src": 4156,"name": "STT_NUM"},{"import": 1150,"src": 4157,"name": "DT_PPC_NUM"},{"import": 1150,"src": 4158,"name": "SHF_EXECINSTR"},{"import": 1150,"src": 4159,"name": "DT_SONAME"},{"import": 1150,"src": 4160,"name": "DT_MIPS_DELTA_RELOC_NO"},{"import": 1150,"src": 4161,"name": "SHT_SYMTAB"},{"import": 1150,"src": 4162,"name": "DT_VERSIONTAGNUM"},{"import": 1150,"src": 4163,"name": "SHF_MIPS_LOCAL"},{"import": 1150,"src": 4164,"name": "SHT_PROGBITS"},{"import": 1150,"src": 4165,"name": "SHF_HEX_GPREL"},{"import": 1150,"src": 4166,"name": "AT_PHENT","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4167,"name": "Elf32_Addr"},{"import": 1150,"src": 4168,"name": "DT_MIPS_CXX_FLAGS"},{"import": 1150,"src": 4169,"name": "Elf32_Ehdr"},{"import": 1150,"src": 4170,"name": "PT_SUNWBSS"},{"import": 1150,"src": 4171,"name": "STT_PARISC_MILLICODE"},{"import": 1150,"src": 4172,"name": "SHF_MASKPROC"},{"import": 1150,"src": 4173,"name": "DT_RELENT"},{"import": 1150,"src": 4174,"name": "SHF_INFO_LINK"},{"import": 1150,"src": 4175,"name": "DT_FINI"},{"import": 1150,"src": 4176,"name": "DT_MIPS_DELTA_CLASSSYM"},{"import": 1150,"src": 4177,"name": "Elf32_Shdr"},{"import": 1150,"src": 4178,"name": "SHF_MIPS_NOSTRIP"},{"import": 1150,"src": 4179,"name": "io","kind": "const","type": 546,"value": 1151},{"import": 1150,"src": 4180,"name": "math","kind": "const","type": 546,"value": 1144},{"import": 1150,"src": 4181,"name": "debug"},{"import": 1150,"src": 4182,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1150,"src": 4183,"name": "File"},{"import": 1150,"src": 4184,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1150,"src": 4185,"name": "InStream"},{"import": 1150,"src": 4186,"name": "os"},{"import": 1150,"src": 4187,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1151,"src": 4188,"name": "BufferedInStream"},{"import": 1151,"src": 4189,"name": "Packing"},{"import": 1151,"src": 4190,"name": "mode","kind": "const","type": 1501,"value": null},{"import": 1151,"src": 4191,"name": "COutStream"},{"import": 1151,"src": 4192,"name": "BufferOutStream"},{"import": 1151,"src": 4193,"name": "getStdOut"},{"import": 1151,"src": 4194,"name": "Serializer"},{"import": 1151,"src": 4195,"name": "BitOutStream"},{"import": 1151,"src": 4196,"name": "BufferedOutStream"},{"import": 1151,"src": 4197,"name": "BitInStream"},{"import": 1151,"src": 4198,"name": "Mode","kind": "const","type": 546,"value": 1501},{"import": 1151,"src": 4199,"name": "null_out_stream"},{"import": 1151,"src": 4200,"name": "BufferedAtomicFile"},{"import": 1151,"src": 4201,"name": "NullOutStream"},{"import": 1151,"src": 4202,"name": "readLineFrom"},{"import": 1151,"src": 4203,"name": "InStream","kind": "const","type": 583,"value": 756},{"import": 1151,"src": 4204,"name": "PeekStream"},{"import": 1151,"src": 4205,"name": "is_async","kind": "const","type": 565,"value": null},{"import": 1151,"src": 4206,"name": "BufferedOutStreamCustom"},{"import": 1151,"src": 4207,"name": "Deserializer"},{"import": 1151,"src": 4208,"name": "readLine"},{"import": 1151,"src": 4209,"name": "SliceInStream"},{"import": 1151,"src": 4210,"name": "readLineSliceFrom"},{"import": 1151,"src": 4211,"name": "BufferedInStreamCustom"},{"import": 1151,"src": 4212,"name": "SliceSeekableInStream","kind": "const","type": 546,"value": 771},{"import": 1151,"src": 4213,"name": "OutStream","kind": "const","type": 611,"value": 764},{"import": 1151,"src": 4214,"name": "SliceOutStream"},{"import": 1151,"src": 4215,"name": "readFileAlloc"},{"import": 1151,"src": 4216,"name": "SeekableStream","kind": "const","type": 635,"value": 773},{"import": 1151,"src": 4217,"name": "writeFile"},{"import": 1151,"src": 125,"name": "getStdErr","kind": "const","type": 131,"value": 182},{"import": 1151,"src": 4218,"name": "readLineSlice"},{"import": 1151,"src": 4219,"name": "CountingOutStream"},{"import": 1151,"src": 4220,"name": "getStdIn"},{"import": 1151,"src": 4221,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1151,"src": 4222,"name": "math"},{"import": 1151,"src": 229,"name": "getStdErrHandle","kind": "const","type": 316,"value": 383},{"import": 1151,"src": 4223,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1151,"src": 4224,"name": "debug"},{"import": 1151,"src": 4225,"name": "Buffer"},{"import": 1151,"src": 4226,"name": "testing"},{"import": 1151,"src": 4227,"name": "null_out_stream_state"},{"import": 1151,"src": 4228,"name": "trait"},{"import": 1151,"src": 4229,"name": "fmt"},{"import": 1151,"src": 4230,"name": "getStdOutHandle"},{"import": 1151,"src": 4231,"name": "root","kind": "const","type": 546,"value": 670},{"import": 1151,"src": 4232,"name": "getStdInHandle"},{"import": 1151,"src": 4233,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1151,"src": 4234,"name": "c"},{"import": 1151,"src": 4235,"name": "meta"},{"import": 1151,"src": 4236,"name": "fs"},{"import": 1151,"src": 4237,"name": "File","kind": "const","type": 546,"value": 703},{"import": 1151,"src": 4238,"name": "assert"},{"import": 1151,"src": 4239,"name": "mem"},{"import": 1152,"src": 113,"name": "charToDigit","kind": "const","type": 121,"value": 169},{"import": 1152,"src": 342,"name": "bufPrint","kind": "const","type": 1502,"value": 844},{"import": 1152,"src": 4240,"name": "default_max_depth","kind": "const","type": 599,"value": null},{"import": 1152,"src": 231,"name": "formatType","kind": "const","type": 1503,"value": 845},{"import": 1152,"src": 4241,"name": "isWhiteSpace"},{"import": 1152,"src": 4242,"name": "formatAsciiChar"},{"import": 1152,"src": 4243,"name": "formatFloatDecimal"},{"import": 1152,"src": 4244,"name": "ParseUnsignedError","kind": "const","type": 546,"value": 1204},{"import": 1152,"src": 333,"name": "formatIntValue","kind": "const","type": 1504,"value": 846},{"import": 1152,"src": 4245,"name": "trim"},{"import": 1152,"src": 4246,"name": "formatFloatScientific"},{"import": 1152,"src": 4247,"name": "parseFloat"},{"import": 1152,"src": 4248,"name": "formatBytes"},{"import": 1152,"src": 4249,"name": "allocPrint"},{"import": 1152,"src": 127,"name": "format","kind": "const","type": 1505,"value": 847},{"import": 1152,"src": 77,"name": "parseInt","kind": "const","type": 1506,"value": 848},{"import": 1152,"src": 4250,"name": "FormatOptions","kind": "const","type": 546,"value": 927},{"import": 1152,"src": 4251,"name": "BufPrintError","kind": "const","type": 546,"value": 1376},{"import": 1152,"src": 347,"name": "formatInt","kind": "const","type": 1507,"value": 849},{"import": 1152,"src": 4252,"name": "formatIntBuf"},{"import": 1152,"src": 4253,"name": "AllocPrintError"},{"import": 1152,"src": 277,"name": "formatText","kind": "const","type": 1508,"value": 850},{"import": 1152,"src": 4254,"name": "hexToBytes"},{"import": 1152,"src": 4255,"name": "formatBuf"},{"import": 1152,"src": 78,"name": "parseUnsigned","kind": "const","type": 1509,"value": 851},{"import": 1152,"src": 4256,"name": "Alignment","kind": "const","type": 546,"value": 1510},{"import": 1152,"src": 4257,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1152,"src": 4258,"name": "builtin"},{"import": 1152,"src": 4259,"name": "BufPrintContext","kind": "const","type": 546,"value": 1378},{"import": 1152,"src": 352,"name": "bufPrintWrite","kind": "const","type": 486,"value": 644},{"import": 1152,"src": 4260,"name": "countSize"},{"import": 1152,"src": 4261,"name": "math","kind": "const","type": 546,"value": 1144},{"import": 1152,"src": 4262,"name": "errol"},{"import": 1152,"src": 4263,"name": "nextArg","kind": "const","type": 1511,"value": 852},{"import": 1152,"src": 4264,"name": "FormatIntBuf"},{"import": 1152,"src": 4265,"name": "formatFloatValue"},{"import": 1152,"src": 4266,"name": "peekIsAlign"},{"import": 1152,"src": 4267,"name": "formatIntSigned"},{"import": 1152,"src": 4268,"name": "testFmt"},{"import": 1152,"src": 4269,"name": "bufPrintIntToSlice"},{"import": 1152,"src": 354,"name": "formatIntUnsigned","kind": "const","type": 1512,"value": 853},{"import": 1152,"src": 4270,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1152,"src": 316,"name": "formatValue","kind": "const","type": 1513,"value": 854},{"import": 1152,"src": 357,"name": "digitToChar","kind": "const","type": 514,"value": 685},{"import": 1152,"src": 4271,"name": "formatIntCallback"},{"import": 1152,"src": 4272,"name": "lossyCast"},{"import": 1152,"src": 4273,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1153,"src": 4274,"name": "Queue","kind": "const","type": 559,"value": 750},{"import": 1153,"src": 4275,"name": "Int"},{"import": 1153,"src": 4276,"name": "Stack","kind": "const","type": 632,"value": 772},{"import": 1154,"src": 4277,"name": "DebugSubsectionKind"},{"import": 1154,"src": 4278,"name": "LineFragmentHeader"},{"import": 1154,"src": 4279,"name": "DbiStreamHeader"},{"import": 1154,"src": 4280,"name": "TypeIndex"},{"import": 1154,"src": 4281,"name": "ModInfo","kind": "const","type": 546,"value": 1514},{"import": 1154,"src": 4282,"name": "SectionContribEntry","kind": "const","type": 546,"value": 1515},{"import": 1154,"src": 4283,"name": "LineBlockFragmentHeader"},{"import": 1154,"src": 4284,"name": "PDBStringTableHeader"},{"import": 1154,"src": 4285,"name": "LineNumberEntry"},{"import": 1154,"src": 4286,"name": "ColumnNumberEntry"},{"import": 1154,"src": 4287,"name": "DebugSubsectionHeader"},{"import": 1154,"src": 4288,"name": "ProcSymFlags"},{"import": 1154,"src": 4289,"name": "RecordPrefix"},{"import": 1154,"src": 4290,"name": "Pdb","kind": "const","type": 546,"value": 1516},{"import": 1154,"src": 4291,"name": "SectionMapHeader"},{"import": 1154,"src": 4292,"name": "StreamType"},{"import": 1154,"src": 4293,"name": "SymbolKind"},{"import": 1154,"src": 4294,"name": "ProcSym"},{"import": 1154,"src": 4295,"name": "FileChecksumEntryHeader"},{"import": 1154,"src": 4296,"name": "SectionMapEntry"},{"import": 1154,"src": 4297,"name": "SectionContrSubstreamVersion"},{"import": 1154,"src": 4298,"name": "LineFlags"},{"import": 1154,"src": 4299,"name": "builtin"},{"import": 1154,"src": 4300,"name": "SuperBlock"},{"import": 1154,"src": 4301,"name": "coff","kind": "const","type": 546,"value": 1155},{"import": 1154,"src": 4302,"name": "math","kind": "const","type": 546,"value": 1144},{"import": 1154,"src": 4303,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1154,"src": 4304,"name": "MsfStream","kind": "const","type": 546,"value": 1380},{"import": 1154,"src": 4305,"name": "os"},{"import": 1154,"src": 4306,"name": "fs"},{"import": 1154,"src": 4307,"name": "File","kind": "const","type": 546,"value": 703},{"import": 1154,"src": 4308,"name": "blockCountFromSize"},{"import": 1154,"src": 4309,"name": "io","kind": "const","type": 546,"value": 1151},{"import": 1154,"src": 4310,"name": "warn"},{"import": 1154,"src": 4311,"name": "ArrayList"},{"import": 1154,"src": 4312,"name": "Msf","kind": "const","type": 546,"value": 1517},{"import": 1154,"src": 4313,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1155,"src": 4314,"name": "Section","kind": "const","type": 546,"value": 579},{"import": 1155,"src": 4315,"name": "Coff","kind": "const","type": 546,"value": 1518},{"import": 1155,"src": 4316,"name": "CoffError"},{"import": 1155,"src": 4317,"name": "builtin"},{"import": 1155,"src": 4318,"name": "IMAGE_DEBUG_TYPE_CODEVIEW"},{"import": 1155,"src": 4319,"name": "IMAGE_FILE_MACHINE_IA64"},{"import": 1155,"src": 4320,"name": "DEBUG_DIRECTORY"},{"import": 1155,"src": 4321,"name": "IMAGE_NUMBEROF_DIRECTORY_ENTRIES","kind": "const","type": 599,"value": null},{"import": 1155,"src": 4322,"name": "OptionalHeader","kind": "const","type": 546,"value": 1519},{"import": 1155,"src": 4323,"name": "IMAGE_NT_OPTIONAL_HDR64_MAGIC"},{"import": 1155,"src": 4324,"name": "IMAGE_FILE_MACHINE_I386"},{"import": 1155,"src": 4325,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1155,"src": 4326,"name": "os"},{"import": 1155,"src": 4327,"name": "SectionHeader","kind": "const","type": 546,"value": 1061},{"import": 1155,"src": 4328,"name": "File","kind": "const","type": 546,"value": 703},{"import": 1155,"src": 4329,"name": "DebugDirectoryEntry"},{"import": 1155,"src": 4330,"name": "CoffHeader","kind": "const","type": 546,"value": 1520},{"import": 1155,"src": 4331,"name": "IMAGE_NT_OPTIONAL_HDR32_MAGIC"},{"import": 1155,"src": 4332,"name": "IMAGE_FILE_MACHINE_AMD64"},{"import": 1155,"src": 4333,"name": "io"},{"import": 1155,"src": 4334,"name": "ArrayList","kind": "const","type": 556,"value": 749},{"import": 1155,"src": 4335,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1156,"src": 4336,"name": "Strategy"},{"import": 1156,"src": 4337,"name": "Crc32"},{"import": 1156,"src": 4338,"name": "Murmur2_64"},{"import": 1156,"src": 4339,"name": "Wyhash","kind": "const","type": 546,"value": 1035},{"import": 1156,"src": 4340,"name": "SipHash128"},{"import": 1156,"src": 4341,"name": "autoHashStrat"},{"import": 1156,"src": 4342,"name": "murmur"},{"import": 1156,"src": 4343,"name": "Murmur2_32"},{"import": 1156,"src": 4344,"name": "Fnv1a_128"},{"import": 1156,"src": 4345,"name": "cityhash"},{"import": 1156,"src": 4346,"name": "Murmur3_32"},{"import": 1156,"src": 4347,"name": "Fnv1a_32"},{"import": 1156,"src": 4348,"name": "Fnv1a_64"},{"import": 1156,"src": 4349,"name": "Adler32"},{"import": 1156,"src": 4350,"name": "SipHash64"},{"import": 1156,"src": 4351,"name": "CityHash32"},{"import": 1156,"src": 4352,"name": "crc"},{"import": 1156,"src": 4353,"name": "autoHash","kind": "const","type": 1386,"value": 800},{"import": 1156,"src": 4354,"name": "CityHash64"},{"import": 1156,"src": 4355,"name": "fnv"},{"import": 1156,"src": 4356,"name": "wyhash","kind": "const","type": 546,"value": 1381},{"import": 1156,"src": 4357,"name": "adler"},{"import": 1156,"src": 4358,"name": "auto_hash","kind": "const","type": 546,"value": 1521},{"import": 1156,"src": 4359,"name": "siphash"},{"import": 1157,"src": 33,"name": "eql","kind": "const","type": 1522,"value": 855},{"import": 1157,"src": 4360,"name": "bitCount"},{"import": 1157,"src": 4361,"name": "declarations","kind": "const","type": 1523,"value": 856},{"import": 1157,"src": 4362,"name": "fieldIndex"},{"import": 1157,"src": 386,"name": "refAllDecls","kind": "const","type": 550,"value": 747},{"import": 1157,"src": 4363,"name": "IntToEnumError"},{"import": 1157,"src": 397,"name": "alignment","kind": "const","type": 598,"value": 759},{"import": 1157,"src": 4364,"name": "fieldInfo"},{"import": 1157,"src": 4365,"name": "activeTag"},{"import": 1157,"src": 4366,"name": "declarationInfo"},{"import": 1157,"src": 4367,"name": "trait","kind": "const","type": 546,"value": 1429},{"import": 1157,"src": 4368,"name": "TagType"},{"import": 1157,"src": 4369,"name": "containerLayout"},{"import": 1157,"src": 4370,"name": "tagName"},{"import": 1157,"src": 4371,"name": "intToEnum"},{"import": 1157,"src": 4372,"name": "TagPayloadType"},{"import": 1157,"src": 4373,"name": "stringToEnum"},{"import": 1157,"src": 4374,"name": "fields","kind": "const","type": 1524,"value": 857},{"import": 1157,"src": 387,"name": "Child","kind": "const","type": 553,"value": 748},{"import": 1157,"src": 4375,"name": "mem"},{"import": 1157,"src": 4376,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1157,"src": 4377,"name": "math"},{"import": 1157,"src": 4378,"name": "std"},{"import": 1157,"src": 4379,"name": "debug"},{"import": 1157,"src": 4380,"name": "TypeId","kind": "const","type": 546,"value": 664},{"import": 1157,"src": 4381,"name": "testing"},{"import": 1157,"src": 4382,"name": "TypeInfo","kind": "const","type": 546,"value": 1138},{"import": 1158,"src": 4383,"name": "createFileAbsoluteC"},{"import": 1158,"src": 4384,"name": "openFileAbsolute"},{"import": 1158,"src": 4385,"name": "Walker"},{"import": 1158,"src": 4386,"name": "makePath"},{"import": 1158,"src": 4387,"name": "MAX_PATH_BYTES"},{"import": 1158,"src": 4388,"name": "readLink"},{"import": 1158,"src": 4389,"name": "deleteDirW"},{"import": 1158,"src": 4390,"name": "walkPath"},{"import": 1158,"src": 4391,"name": "realpath"},{"import": 1158,"src": 4392,"name": "selfExePath"},{"import": 1158,"src": 4393,"name": "createFileAbsolute"},{"import": 1158,"src": 4394,"name": "updateFileMode"},{"import": 1158,"src": 4395,"name": "GetAppDataDirError"},{"import": 1158,"src": 4396,"name": "renameC"},{"import": 1158,"src": 4397,"name": "deleteDir"},{"import": 1158,"src": 135,"name": "openSelfExe","kind": "const","type": 141,"value": 192},{"import": 1158,"src": 4398,"name": "copyFile"},{"import": 1158,"src": 4399,"name": "Dir","kind": "const","type": 546,"value": 694},{"import": 1158,"src": 4400,"name": "symLink"},{"import": 1158,"src": 4401,"name": "path","kind": "const","type": 546,"value": 1525},{"import": 1158,"src": 4402,"name": "copyFileMode"},{"import": 1158,"src": 4403,"name": "deleteFileAbsoluteW"},{"import": 1158,"src": 4404,"name": "deleteFileAbsoluteC"},{"import": 1158,"src": 4405,"name": "realpathAlloc"},{"import": 1158,"src": 49,"name": "cwd","kind": "const","type": 41,"value": 68},{"import": 1158,"src": 4406,"name": "deleteTree"},{"import": 1158,"src": 4407,"name": "SelfExePathError","kind": "const","type": 546,"value": 1526},{"import": 1158,"src": 4408,"name": "deleteFileAbsolute"},{"import": 1158,"src": 4409,"name": "renameW"},{"import": 1158,"src": 4410,"name": "makeDir"},{"import": 1158,"src": 4411,"name": "openFileAbsoluteW"},{"import": 1158,"src": 4412,"name": "selfExeDirPathAlloc"},{"import": 1158,"src": 4413,"name": "rename"},{"import": 1158,"src": 241,"name": "openFileAbsoluteC","kind": "const","type": 324,"value": 395},{"import": 1158,"src": 4414,"name": "symLinkC"},{"import": 1158,"src": 4415,"name": "OpenSelfExeError","kind": "const","type": 546,"value": 1226},{"import": 1158,"src": 4416,"name": "AtomicFile"},{"import": 1158,"src": 4417,"name": "makeDirW"},{"import": 1158,"src": 4418,"name": "updateFile"},{"import": 1158,"src": 4419,"name": "File","kind": "const","type": 546,"value": 703},{"import": 1158,"src": 4420,"name": "createFileAbsoluteW"},{"import": 1158,"src": 4421,"name": "base64_encoder"},{"import": 1158,"src": 4422,"name": "realpathC"},{"import": 1158,"src": 4423,"name": "getAppDataDir"},{"import": 1158,"src": 4424,"name": "realpathW"},{"import": 1158,"src": 4425,"name": "selfExePathW"},{"import": 1158,"src": 4426,"name": "selfExeDirPath"},{"import": 1158,"src": 4427,"name": "deleteDirC"},{"import": 1158,"src": 4428,"name": "makeDirC"},{"import": 1158,"src": 4429,"name": "atomicSymLink"},{"import": 1158,"src": 4430,"name": "readLinkC"},{"import": 1158,"src": 4431,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1158,"src": 4432,"name": "math"},{"import": 1158,"src": 4433,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1158,"src": 4434,"name": "Allocator"},{"import": 1158,"src": 4435,"name": "base64"},{"import": 1158,"src": 4436,"name": "crypto"},{"import": 1158,"src": 4437,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1158,"src": 4438,"name": "default_new_dir_mode"},{"import": 1158,"src": 4439,"name": "PrevStatus"},{"import": 1158,"src": 4440,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1158,"src": 4441,"name": "mem"},{"import": 1159,"src": 4442,"name": "ThreadSafeFixedBufferAllocator","kind": "const","type": 546,"value": 698},{"import": 1159,"src": 4443,"name": "page_allocator","kind": "const","type": 678,"value": null},{"import": 1159,"src": 4444,"name": "LoggingAllocator"},{"import": 1159,"src": 4445,"name": "FixedBufferAllocator","kind": "const","type": 546,"value": 958},{"import": 1159,"src": 4446,"name": "stackFallback"},{"import": 1159,"src": 4447,"name": "ArenaAllocator","kind": "const","type": 546,"value": 930},{"import": 1159,"src": 4448,"name": "HeapAllocator"},{"import": 1159,"src": 4449,"name": "c_allocator"},{"import": 1159,"src": 4450,"name": "direct_allocator"},{"import": 1159,"src": 4451,"name": "StackFallbackAllocator"},{"import": 1159,"src": 4452,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1159,"src": 4453,"name": "page_allocator_state","kind": "var","type": 1169,"value": null},{"import": 1159,"src": 4454,"name": "testAllocatorAligned"},{"import": 1159,"src": 4455,"name": "testAllocatorAlignedShrink"},{"import": 1159,"src": 4456,"name": "root"},{"import": 1159,"src": 4457,"name": "wasm_page_allocator_state"},{"import": 1159,"src": 4458,"name": "llvm.wasm.memory.size.i32"},{"import": 1159,"src": 4459,"name": "maxInt"},{"import": 1159,"src": 4460,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1159,"src": 4461,"name": "c"},{"import": 1159,"src": 4462,"name": "testAllocator"},{"import": 1159,"src": 4463,"name": "cShrink"},{"import": 1159,"src": 4464,"name": "cRealloc"},{"import": 1159,"src": 4465,"name": "test_fixed_buffer_allocator_memory"},{"import": 1159,"src": 4466,"name": "testAllocatorLargeAlignment"},{"import": 1159,"src": 4467,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1159,"src": 4468,"name": "WasmPageAllocator"},{"import": 1159,"src": 4469,"name": "llvm.wasm.memory.grow.i32"},{"import": 1159,"src": 4470,"name": "debug","kind": "const","type": 546,"value": 1147},{"import": 1159,"src": 4471,"name": "testing"},{"import": 1159,"src": 4472,"name": "c_allocator_state"},{"import": 1159,"src": 4473,"name": "Allocator","kind": "const","type": 546,"value": 1169},{"import": 1159,"src": 4474,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1159,"src": 4475,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1159,"src": 4476,"name": "PageAllocator","kind": "const","type": 546,"value": 1527},{"import": 1160,"src": 273,"name": "callMain","kind": "const","type": 313,"value": 463},{"import": 1160,"src": 4477,"name": "builtin","kind": "const","type": 546,"value": 1109},{"import": 1160,"src": 4478,"name": "root","kind": "const","type": 546,"value": 670},{"import": 1160,"src": 4479,"name": "main"},{"import": 1160,"src": 4480,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1160,"src": 4481,"name": "starting_stack_ptr","kind": "var","type": 1528,"value": "undefined"},{"import": 1160,"src": 4482,"name": "wasm_freestanding_start"},{"import": 1160,"src": 226,"name": "initEventLoopAndCallMain","kind": "const","type": 313,"value": 380},{"import": 1160,"src": 4483,"name": "is_mips","kind": "const","type": 565,"value": null},{"import": 1160,"src": 4484,"name": "bad_main_ret"},{"import": 1160,"src": 27,"name": "_start","kind": "const","type": 18,"value": 27},{"import": 1160,"src": 4485,"name": "callMainAsync"},{"import": 1160,"src": 4486,"name": "EfiMain"},{"import": 1160,"src": 4487,"name": "uefi"},{"import": 1160,"src": 123,"name": "callMainWithArgs","kind": "const","type": 129,"value": 180},{"import": 1160,"src": 4488,"name": "start_sym_name","kind": "const","type": 1529,"value": null},{"import": 1160,"src": 4489,"name": "WinMainCRTStartup"},{"import": 1160,"src": 4490,"name": "is_wasm","kind": "const","type": 565,"value": null},{"import": 1160,"src": 81,"name": "posixCallMainAndExit","kind": "const","type": 85,"value": 114},{"import": 1160,"src": 4491,"name": "_DllMainCRTStartup"},{"import": 1160,"src": 4492,"name": "assert"},{"import": 1161,"src": 4493,"name": "Timer","kind": "const","type": 546,"value": 1371},{"import": 1161,"src": 4494,"name": "microsecond","kind": "const","type": 599,"value": null},{"import": 1161,"src": 4495,"name": "milliTimestamp"},{"import": 1161,"src": 4496,"name": "s_per_day"},{"import": 1161,"src": 4497,"name": "sleep"},{"import": 1161,"src": 4498,"name": "s_per_week"},{"import": 1161,"src": 4499,"name": "hour"},{"import": 1161,"src": 4500,"name": "ns_per_s","kind": "const","type": 599,"value": null},{"import": 1161,"src": 4501,"name": "s_per_hour"},{"import": 1161,"src": 4502,"name": "nanosecond","kind": "const","type": 599,"value": null},{"import": 1161,"src": 4503,"name": "second"},{"import": 1161,"src": 4504,"name": "timestamp"},{"import": 1161,"src": 4505,"name": "epoch"},{"import": 1161,"src": 4506,"name": "minute"},{"import": 1161,"src": 4507,"name": "millisecond","kind": "const","type": 599,"value": null},{"import": 1161,"src": 4508,"name": "s_per_min"},{"import": 1161,"src": 4509,"name": "ms_per_s"},{"import": 1161,"src": 4510,"name": "us_per_s"},{"import": 1161,"src": 4511,"name": "cs_per_s"},{"import": 1161,"src": 4512,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1161,"src": 4513,"name": "math"},{"import": 1161,"src": 4514,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1161,"src": 4515,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1161,"src": 4516,"name": "testing"},{"import": 1161,"src": 4517,"name": "assert"},{"import": 1372,"src": 324,"name": "start","kind": "const","type": 436,"value": 578},{"import": 1372,"src": 331,"name": "log","kind": "const","type": 1530,"value": 858},{"import": 1372,"src": 329,"name": "refresh","kind": "const","type": 440,"value": 583},{"import": 1372,"src": 4518,"name": "Node","kind": "const","type": 546,"value": 999},{"import": 1372,"src": 345,"name": "maybeRefresh","kind": "const","type": 440,"value": 625},{"import": 1372,"src": 343,"name": "bufWrite","kind": "const","type": 1531,"value": 859},{"import": 1534,"src": 4519,"name": "init"},{"import": 1534,"src": 4520,"name": "acquire"},{"import": 1534,"src": 4521,"name": "tryAcquire"},{"import": 1534,"src": 4522,"name": "deinit"},{"import": 1534,"src": 304,"name": "loopHint","kind": "const","type": 127,"value": 531},{"import": 1534,"src": 4523,"name": "Held"},{"import": 1534,"src": 300,"name": "yield","kind": "const","type": 86,"value": 527},{"import": 1534,"src": 4524,"name": "State","kind": "const","type": 546,"value": 1535},{"import": 1164,"src": 4525,"name": "getCwdAlloc"},{"import": 1164,"src": 4526,"name": "getEnvMap"},{"import": 1164,"src": 4527,"name": "exit"},{"import": 1164,"src": 4528,"name": "changeCurDir"},{"import": 1164,"src": 4529,"name": "ArgIterator"},{"import": 1164,"src": 4530,"name": "ArgIteratorPosix"},{"import": 1164,"src": 4531,"name": "argsFree"},{"import": 1164,"src": 4532,"name": "getBaseAddress"},{"import": 1164,"src": 4533,"name": "posixGetUserInfo"},{"import": 1164,"src": 4534,"name": "changeCurDirC"},{"import": 1164,"src": 4535,"name": "argsAlloc"},{"import": 1164,"src": 4536,"name": "UserInfo"},{"import": 1164,"src": 4537,"name": "getCwd"},{"import": 1164,"src": 259,"name": "getEnvVarOwned","kind": "const","type": 351,"value": 432},{"import": 1164,"src": 4538,"name": "ArgIteratorWindows"},{"import": 1164,"src": 4539,"name": "GetEnvVarOwnedError","kind": "const","type": 546,"value": 1347},{"import": 1164,"src": 4540,"name": "getUserInfo"},{"import": 1164,"src": 4541,"name": "abort"},{"import": 1164,"src": 4542,"name": "args"},{"import": 1164,"src": 4543,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1164,"src": 4544,"name": "BufMap"},{"import": 1164,"src": 4545,"name": "math"},{"import": 1164,"src": 4546,"name": "testWindowsCmdLine"},{"import": 1164,"src": 4547,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1164,"src": 4548,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1164,"src": 4549,"name": "Buffer"},{"import": 1164,"src": 4550,"name": "testing"},{"import": 1164,"src": 4551,"name": "fs"},{"import": 1164,"src": 4552,"name": "Allocator"},{"import": 1164,"src": 4553,"name": "assert"},{"import": 1164,"src": 4554,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1165,"src": 4555,"name": "N_OLEVEL"},{"import": 1165,"src": 4556,"name": "MH_NOUNDEFS"},{"import": 1165,"src": 4557,"name": "LC_SEGMENT_SPLIT_INFO"},{"import": 1165,"src": 4558,"name": "LC_DYLD_INFO_ONLY"},{"import": 1165,"src": 4559,"name": "MH_HAS_TLV_DESCRIPTORS"},{"import": 1165,"src": 4560,"name": "LC_FVMFILE"},{"import": 1165,"src": 4561,"name": "N_GSYM"},{"import": 1165,"src": 4562,"name": "S_4BYTE_LITERALS"},{"import": 1165,"src": 4563,"name": "LC_SUB_UMBRELLA"},{"import": 1165,"src": 4564,"name": "LC_FUNCTION_STARTS"},{"import": 1165,"src": 4565,"name": "LC_UNIXTHREAD"},{"import": 1165,"src": 4566,"name": "LC_TWOLEVEL_HINTS"},{"import": 1165,"src": 4567,"name": "LC_VERSION_MIN_TVOS"},{"import": 1165,"src": 4568,"name": "N_PEXT"},{"import": 1165,"src": 4569,"name": "SECTION_ATTRIBUTES"},{"import": 1165,"src": 4570,"name": "N_LBRAC"},{"import": 1165,"src": 4571,"name": "segment_command"},{"import": 1165,"src": 4572,"name": "mach_header"},{"import": 1165,"src": 4573,"name": "N_ENTRY"},{"import": 1165,"src": 4574,"name": "LC_PREBOUND_DYLIB"},{"import": 1165,"src": 4575,"name": "MH_SETUID_SAFE"},{"import": 1165,"src": 4576,"name": "MH_DYLDLINK"},{"import": 1165,"src": 4577,"name": "N_OPT"},{"import": 1165,"src": 4578,"name": "S_8BYTE_LITERALS"},{"import": 1165,"src": 4579,"name": "MH_PRELOAD"},{"import": 1165,"src": 4580,"name": "N_LENG"},{"import": 1165,"src": 4581,"name": "MH_DYLIB"},{"import": 1165,"src": 4582,"name": "N_BNSYM"},{"import": 1165,"src": 4583,"name": "S_CSTRING_LITERALS"},{"import": 1165,"src": 4584,"name": "section_64","kind": "const","type": 546,"value": 1536},{"import": 1165,"src": 4585,"name": "LC_SUB_CLIENT"},{"import": 1165,"src": 4586,"name": "MH_BUNDLE"},{"import": 1165,"src": 4587,"name": "N_ECOML"},{"import": 1165,"src": 4588,"name": "LC_ROUTINES_64"},{"import": 1165,"src": 4589,"name": "LC_ENCRYPTION_INFO"},{"import": 1165,"src": 4590,"name": "MH_WEAK_DEFINES"},{"import": 1165,"src": 4591,"name": "MH_FORCE_FLAT"},{"import": 1165,"src": 4592,"name": "MH_SUBSECTIONS_VIA_SYMBOLS"},{"import": 1165,"src": 4593,"name": "MH_DYLINKER"},{"import": 1165,"src": 4594,"name": "MH_DEAD_STRIPPABLE_DYLIB"},{"import": 1165,"src": 4595,"name": "LC_DYSYMTAB"},{"import": 1165,"src": 4596,"name": "symtab_command"},{"import": 1165,"src": 4597,"name": "LC_PREPAGE"},{"import": 1165,"src": 4598,"name": "MH_NO_REEXPORTED_DYLIBS"},{"import": 1165,"src": 4599,"name": "LC_THREAD"},{"import": 1165,"src": 4600,"name": "N_EXT"},{"import": 1165,"src": 4601,"name": "N_SLINE"},{"import": 1165,"src": 4602,"name": "LC_LINKER_OPTION"},{"import": 1165,"src": 4603,"name": "MH_MAGIC"},{"import": 1165,"src": 4604,"name": "N_FUN"},{"import": 1165,"src": 4605,"name": "MH_NO_HEAP_EXECUTION"},{"import": 1165,"src": 4606,"name": "cpu_type_t","kind": "const","type": 546,"value": 1537},{"import": 1165,"src": 4607,"name": "MH_INCRLINK"},{"import": 1165,"src": 4608,"name": "LC_VERSION_MIN_WATCHOS"},{"import": 1165,"src": 4609,"name": "MH_APP_EXTENSION_SAFE"},{"import": 1165,"src": 4610,"name": "N_RSYM"},{"import": 1165,"src": 4611,"name": "LC_DATA_IN_CODE"},{"import": 1165,"src": 4612,"name": "MH_FVMLIB"},{"import": 1165,"src": 4613,"name": "MH_ALLOW_STACK_EXECUTION"},{"import": 1165,"src": 4614,"name": "N_LSYM"},{"import": 1165,"src": 4615,"name": "LC_REEXPORT_DYLIB"},{"import": 1165,"src": 4616,"name": "N_STSYM"},{"import": 1165,"src": 4617,"name": "MH_PIE"},{"import": 1165,"src": 4618,"name": "integer_t","kind": "const","type": 546,"value": 1537},{"import": 1165,"src": 4619,"name": "LC_DYLD_INFO"},{"import": 1165,"src": 4620,"name": "LC_ENCRYPTION_INFO_64"},{"import": 1165,"src": 4621,"name": "MH_EXECUTE"},{"import": 1165,"src": 4622,"name": "MH_CIGAM"},{"import": 1165,"src": 4623,"name": "LC_SEGMENT_64"},{"import": 1165,"src": 4624,"name": "MH_BINDS_TO_WEAK"},{"import": 1165,"src": 4625,"name": "LC_LOADFVMLIB"},{"import": 1165,"src": 4626,"name": "MH_BINDATLOAD"},{"import": 1165,"src": 4627,"name": "MH_NOMULTIDEFS"},{"import": 1165,"src": 4628,"name": "LC_VERSION_MIN_IPHONEOS"},{"import": 1165,"src": 4629,"name": "segment_command_64"},{"import": 1165,"src": 4630,"name": "mach_header_64","kind": "const","type": 546,"value": 1538},{"import": 1165,"src": 4631,"name": "LC_BUILD_VERSION"},{"import": 1165,"src": 4632,"name": "N_EXCL"},{"import": 1165,"src": 4633,"name": "MH_TWOLEVEL"},{"import": 1165,"src": 4634,"name": "nlist_64","kind": "const","type": 546,"value": 1055},{"import": 1165,"src": 4635,"name": "MH_PREBINDABLE"},{"import": 1165,"src": 4636,"name": "MH_NLIST_OUTOFSYNC_WITH_DYLDINFO"},{"import": 1165,"src": 4637,"name": "S_ATTR_DEBUG"},{"import": 1165,"src": 4638,"name": "LC_SUB_LIBRARY"},{"import": 1165,"src": 4639,"name": "LC_UUID"},{"import": 1165,"src": 4640,"name": "MH_DYLIB_STUB"},{"import": 1165,"src": 4641,"name": "LC_SYMTAB"},{"import": 1165,"src": 4642,"name": "cpu_subtype_t","kind": "const","type": 546,"value": 1537},{"import": 1165,"src": 4643,"name": "N_RBRAC"},{"import": 1165,"src": 4644,"name": "S_ZEROFILL"},{"import": 1165,"src": 4645,"name": "LC_SOURCE_VERSION"},{"import": 1165,"src": 4646,"name": "LC_ID_DYLINKER"},{"import": 1165,"src": 4647,"name": "LC_VERSION_MIN_MACOSX"},{"import": 1165,"src": 4648,"name": "nlist"},{"import": 1165,"src": 4649,"name": "LC_NOTE"},{"import": 1165,"src": 4650,"name": "N_FNAME"},{"import": 1165,"src": 4651,"name": "SECTION_TYPE"},{"import": 1165,"src": 4652,"name": "S_REGULAR"},{"import": 1165,"src": 4653,"name": "MH_CIGAM_64"},{"import": 1165,"src": 4654,"name": "LC_LOAD_UPWARD_DYLIB"},{"import": 1165,"src": 4655,"name": "MH_ALLMODSBOUND"},{"import": 1165,"src": 4656,"name": "LC_IDFVMLIB"},{"import": 1165,"src": 4657,"name": "MH_SPLIT_SEGS"},{"import": 1165,"src": 4658,"name": "MH_LAZY_INIT"},{"import": 1165,"src": 4659,"name": "N_BINCL"},{"import": 1165,"src": 4660,"name": "MH_ROOT_SAFE"},{"import": 1165,"src": 4661,"name": "vm_prot_t"},{"import": 1165,"src": 4662,"name": "LC_DYLD_ENVIRONMENT"},{"import": 1165,"src": 4663,"name": "LC_IDENT"},{"import": 1165,"src": 4664,"name": "N_AST"},{"import": 1165,"src": 4665,"name": "LC_CODE_SIGNATURE"},{"import": 1165,"src": 4666,"name": "LC_SUB_FRAMEWORK"},{"import": 1165,"src": 4667,"name": "N_SO"},{"import": 1165,"src": 4668,"name": "load_command"},{"import": 1165,"src": 4669,"name": "MH_MAGIC_64"},{"import": 1165,"src": 4670,"name": "LC_ID_DYLIB"},{"import": 1165,"src": 4671,"name": "LC_RPATH"},{"import": 1165,"src": 4672,"name": "MH_CORE"},{"import": 1165,"src": 4673,"name": "MH_PREBOUND"},{"import": 1165,"src": 4674,"name": "MH_NOFIXPREBINDING"},{"import": 1165,"src": 4675,"name": "section"},{"import": 1165,"src": 4676,"name": "N_SOL"},{"import": 1165,"src": 4677,"name": "N_ECOMM"},{"import": 1165,"src": 4678,"name": "N_LCSYM"},{"import": 1165,"src": 4679,"name": "LC_SYMSEG"},{"import": 1165,"src": 4680,"name": "N_PSYM"},{"import": 1165,"src": 4681,"name": "N_VERSION"},{"import": 1165,"src": 4682,"name": "N_BCOMM"},{"import": 1165,"src": 4683,"name": "LC_LAZY_LOAD_DYLIB"},{"import": 1165,"src": 4684,"name": "N_EINCL"},{"import": 1165,"src": 4685,"name": "MH_DSYM"},{"import": 1165,"src": 4686,"name": "N_STAB"},{"import": 1165,"src": 4687,"name": "LC_REQ_DYLD"},{"import": 1165,"src": 4688,"name": "LC_SEGMENT"},{"import": 1165,"src": 4689,"name": "LC_PREBIND_CKSUM"},{"import": 1165,"src": 4690,"name": "LC_MAIN"},{"import": 1165,"src": 4691,"name": "N_ENSYM"},{"import": 1165,"src": 4692,"name": "LC_LINKER_OPTIMIZATION_HINT"},{"import": 1165,"src": 4693,"name": "N_TYPE"},{"import": 1165,"src": 4694,"name": "LC_DYLIB_CODE_SIGN_DRS"},{"import": 1165,"src": 4695,"name": "LC_ROUTINES"},{"import": 1165,"src": 4696,"name": "S_LITERAL_POINTERS"},{"import": 1165,"src": 4697,"name": "N_OSO"},{"import": 1165,"src": 4698,"name": "MH_OBJECT"},{"import": 1165,"src": 4699,"name": "LC_LOAD_DYLINKER"},{"import": 1165,"src": 4700,"name": "LC_LOAD_DYLIB"},{"import": 1165,"src": 4701,"name": "N_PARAMS"},{"import": 1165,"src": 4702,"name": "MH_KEXT_BUNDLE"},{"import": 1165,"src": 4703,"name": "N_SSYM"},{"import": 1165,"src": 4704,"name": "MH_CANONICAL"},{"import": 1165,"src": 4705,"name": "LC_LOAD_WEAK_DYLIB"},{"import": 1165,"src": 4706,"name": "linkedit_data_command"},{"import": 1143,"src": 72,"name": "destroy","kind": "const","type": 1539,"value": 860},{"import": 1143,"src": 166,"name": "realloc","kind": "const","type": 1540,"value": 861},{"import": 1143,"src": 4707,"name": "shrink"},{"import": 1143,"src": 4708,"name": "Error","kind": "const","type": 546,"value": 1193},{"import": 1143,"src": 4709,"name": "alignedShrink"},{"import": 1143,"src": 109,"name": "alignedAlloc","kind": "const","type": 1541,"value": 862},{"import": 1143,"src": 63,"name": "alloc","kind": "const","type": 1542,"value": 863},{"import": 1143,"src": 250,"name": "alignedRealloc","kind": "const","type": 1543,"value": 864},{"import": 1143,"src": 110,"name": "free","kind": "const","type": 1544,"value": 865},{"import": 1143,"src": 70,"name": "create","kind": "const","type": 1545,"value": 866},{"import": 1041,"src": 4710,"name": "deinit"},{"import": 1186,"src": 4711,"name": "File","kind": "const","type": 546,"value": 703},{"import": 1186,"src": 4712,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1186,"src": 4713,"name": "windows","kind": "const","type": 546,"value": 1457},{"import": 1186,"src": 4714,"name": "maxInt"},{"import": 1186,"src": 4715,"name": "math"},{"import": 1186,"src": 4716,"name": "io","kind": "const","type": 546,"value": 1151},{"import": 1186,"src": 4717,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1186,"src": 4718,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1186,"src": 4719,"name": "Os","kind": "const","type": 546,"value": 648},{"import": 1186,"src": 4720,"name": "assert"},{"import": 1186,"src": 4721,"name": "mem"},{"import": 1150,"src": 141,"name": "openStream","kind": "const","type": 148,"value": 199},{"import": 1150,"src": 4722,"name": "openPath"},{"import": 1150,"src": 150,"name": "close","kind": "const","type": 168,"value": 220},{"import": 1150,"src": 149,"name": "findSection","kind": "const","type": 167,"value": 219},{"import": 1150,"src": 4723,"name": "seekToSection"},{"import": 1150,"src": 4724,"name": "openFile"},{"import": 1150,"src": 4725,"name": "LOPROC","kind": "const","type": 599,"value": null},{"import": 1150,"src": 4726,"name": "HIPROC","kind": "const","type": 599,"value": null},{"import": 1147,"src": 173,"name": "getAttr","kind": "const","type": 212,"value": 265},{"import": 1147,"src": 4727,"name": "Attr","kind": "const","type": 546,"value": 597},{"import": 1147,"src": 177,"name": "getAttrAddr","kind": "const","type": 216,"value": 269},{"import": 1147,"src": 4728,"name": "getAttrUnsignedLe"},{"import": 1147,"src": 174,"name": "getAttrString","kind": "const","type": 213,"value": 266},{"import": 1147,"src": 186,"name": "getAttrSecOffset","kind": "const","type": 240,"value": 293},{"import": 1147,"src": 176,"name": "getAttrRef","kind": "const","type": 215,"value": 268},{"import": 1147,"src": 178,"name": "asUnsignedLe","kind": "const","type": 217,"value": 270},{"import": 1322,"src": 4729,"name": "Mutex","kind": "const","type": 546,"value": 919},{"import": 1322,"src": 4730,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1322,"src": 4731,"name": "ResetEvent","kind": "const","type": 546,"value": 983},{"import": 1322,"src": 4732,"name": "windows"},{"import": 1322,"src": 4733,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1322,"src": 4734,"name": "SpinLock","kind": "const","type": 546,"value": 1163},{"import": 1322,"src": 4735,"name": "os"},{"import": 1322,"src": 4736,"name": "worker"},{"import": 1322,"src": 4737,"name": "assert"},{"import": 1322,"src": 4738,"name": "testing"},{"import": 1322,"src": 4739,"name": "TestContext"},{"import": 1353,"src": 4740,"name": "uid_t"},{"import": 1353,"src": 4741,"name": "iovec_const"},{"import": 1353,"src": 4742,"name": "sockaddr"},{"import": 1353,"src": 4743,"name": "stack_t","kind": "const","type": 546,"value": 1454},{"import": 1353,"src": 4744,"name": "clock_t"},{"import": 1353,"src": 4745,"name": "linux","kind": "const","type": 546,"value": 1455},{"import": 1353,"src": 4746,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1353,"src": 4747,"name": "sigset_t","kind": "const","type": 546,"value": 1448},{"import": 1353,"src": 4748,"name": "iovec"},{"import": 1353,"src": 4749,"name": "pid_t"},{"import": 1353,"src": 4750,"name": "socklen_t"},{"import": 1363,"src": 4751,"name": "ResetEvent","kind": "const","type": 546,"value": 983},{"import": 1363,"src": 4752,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1363,"src": 4753,"name": "DebugEvent"},{"import": 1363,"src": 4754,"name": "time","kind": "const","type": 546,"value": 1161},{"import": 1363,"src": 4755,"name": "AtomicEvent","kind": "const","type": 546,"value": 990},{"import": 1363,"src": 4756,"name": "windows"},{"import": 1363,"src": 4757,"name": "PosixEvent"},{"import": 1363,"src": 4758,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1363,"src": 4759,"name": "c"},{"import": 1363,"src": 4760,"name": "SpinLock"},{"import": 1363,"src": 4761,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1363,"src": 4762,"name": "testing"},{"import": 1363,"src": 4763,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1363,"src": 4764,"name": "linux","kind": "const","type": 546,"value": 1455},{"import": 1363,"src": 335,"name": "wait","kind": "const","type": 451,"value": 603},{"import": 1363,"src": 337,"name": "wake","kind": "const","type": 453,"value": 605},{"import": 1161,"src": 4765,"name": "reset"},{"import": 1161,"src": 344,"name": "read","kind": "const","type": 469,"value": 623},{"import": 1161,"src": 4766,"name": "lap"},{"import": 1161,"src": 326,"name": "start","kind": "const","type": 437,"value": 580},{"import": 1161,"src": 4767,"name": "Error","kind": "const","type": 546,"value": 1370},{"import": 1161,"src": 353,"name": "clockNative","kind": "const","type": 496,"value": 654},{"import": 1161,"src": 4768,"name": "monotonic_clock_id","kind": "const","type": 599,"value": null},{"import": 1372,"src": 4769,"name": "Progress","kind": "const","type": 546,"value": 1162},{"import": 1372,"src": 4770,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1372,"src": 4771,"name": "assert"},{"import": 1372,"src": 4772,"name": "testing"},{"import": 1154,"src": 4773,"name": "Stream","kind": "const","type": 546,"value": 646},{"import": 1154,"src": 4774,"name": "Error","kind": "const","type": 546,"value": 647},{"import": 1154,"src": 364,"name": "read","kind": "const","type": 524,"value": 717},{"import": 1154,"src": 4775,"name": "getSize"},{"import": 1154,"src": 4776,"name": "readNullTermString"},{"import": 1154,"src": 4777,"name": "seekBy"},{"import": 1154,"src": 4778,"name": "seekTo"},{"import": 1154,"src": 4779,"name": "init"},{"import": 1154,"src": 4780,"name": "readFn"},{"import": 1154,"src": 4781,"name": "getFilePos"},{"import": 1381,"src": 4782,"name": "Wyhash","kind": "const","type": 546,"value": 1035},{"import": 1381,"src": 376,"name": "mix0","kind": "const","type": 537,"value": 731},{"import": 1381,"src": 378,"name": "read_8bytes_swapped","kind": "const","type": 538,"value": 735},{"import": 1381,"src": 4783,"name": "primes","kind": "const","type": 1554,"value": null},{"import": 1381,"src": 380,"name": "mum","kind": "const","type": 539,"value": 737},{"import": 1381,"src": 379,"name": "mix1","kind": "const","type": 537,"value": 736},{"import": 1381,"src": 4784,"name": "expectEqual"},{"import": 1381,"src": 4785,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1381,"src": 4786,"name": "WyhashStateless","kind": "const","type": 546,"value": 1037},{"import": 1381,"src": 377,"name": "read_bytes","kind": "const","type": 1555,"value": 867},{"import": 1381,"src": 4787,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1065,"src": 4788,"name": "start"},{"import": 1065,"src": 4789,"name": "finish"},{"import": 1065,"src": 4790,"name": "setHandle"},{"import": 1065,"src": 4791,"name": "getHandle"},{"import": 1065,"src": 4792,"name": "clearHandle"},{"import": 1065,"src": 4793,"name": "initOsDataPosix"},{"import": 1065,"src": 4794,"name": "OsDataPosix","kind": "const","type": 546,"value": 1556},{"import": 1065,"src": 4795,"name": "OsData","kind": "const","type": 546,"value": 1556},{"import": 1401,"src": 4796,"name": "startCpuBoundOperation"},{"import": 1401,"src": 4797,"name": "finishOneEvent"},{"import": 1401,"src": 4798,"name": "instance","kind": "const","type": 1557,"value": null},{"import": 1401,"src": 4799,"name": "onNextTick"},{"import": 1401,"src": 4800,"name": "initSingleThreaded"},{"import": 1401,"src": 4801,"name": "beginOneEvent"},{"import": 1401,"src": 4802,"name": "deinit"},{"import": 1401,"src": 4803,"name": "linuxModFd"},{"import": 1401,"src": 4804,"name": "yield"},{"import": 1401,"src": 4805,"name": "waitUntilFdWritable"},{"import": 1401,"src": 4806,"name": "linuxRemoveFd"},{"import": 1401,"src": 4807,"name": "ResumeNode","kind": "const","type": 546,"value": 1091},{"import": 1401,"src": 4808,"name": "run"},{"import": 1401,"src": 4809,"name": "bsdRemoveKev"},{"import": 1401,"src": 4810,"name": "initMultiThreaded"},{"import": 1401,"src": 4811,"name": "bsdAddKev"},{"import": 1401,"src": 4812,"name": "bsdWaitKev"},{"import": 1401,"src": 4813,"name": "cancelOnNextTick"},{"import": 1401,"src": 4814,"name": "linuxWaitFd"},{"import": 1401,"src": 4815,"name": "waitUntilFdWritableOrReadable"},{"import": 1401,"src": 4816,"name": "NextTickNode","kind": "const","type": 546,"value": 1045},{"import": 1401,"src": 4817,"name": "init"},{"import": 1401,"src": 4818,"name": "waitUntilFdReadable"},{"import": 1401,"src": 4819,"name": "initThreadPool"},{"import": 1401,"src": 4820,"name": "linuxAddFd"},{"import": 1401,"src": 4821,"name": "posixFsRequest"},{"import": 1401,"src": 4822,"name": "initOsData"},{"import": 1401,"src": 4823,"name": "global_instance_state"},{"import": 1401,"src": 4824,"name": "default_instance","kind": "const","type": 1557,"value": null},{"import": 1401,"src": 4825,"name": "InitOsDataError"},{"import": 1401,"src": 4826,"name": "deinitOsData"},{"import": 1401,"src": 4827,"name": "posixFsRun"},{"import": 1401,"src": 4828,"name": "OsData","kind": "const","type": 546,"value": 1558},{"import": 1401,"src": 4829,"name": "posixFsCancel"},{"import": 1401,"src": 4830,"name": "workerRun"},{"import": 1401,"src": 4831,"name": "KEventData"},{"import": 1401,"src": 4832,"name": "LinuxOsData","kind": "const","type": 546,"value": 1558},{"import": 1401,"src": 4833,"name": "dispatch"},{"import": 1401,"src": 4834,"name": "wakeup_bytes"},{"import": 1065,"src": 4835,"name": "Error","kind": "const","type": 546,"value": 1181},{"import": 1065,"src": 4836,"name": "Error","kind": "const","type": 546,"value": 1562},{"import": 1065,"src": 4837,"name": "Error","kind": "const","type": 546,"value": 613},{"import": 1065,"src": 4838,"name": "Error","kind": "const","type": 546,"value": 613},{"import": 1065,"src": 4839,"name": "Error","kind": "const","type": 546,"value": 585},{"import": 1401,"src": 4840,"name": "Loop","kind": "const","type": 546,"value": 1391},{"import": 1401,"src": 4841,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1401,"src": 4842,"name": "root","kind": "const","type": 546,"value": 670},{"import": 1401,"src": 4843,"name": "AtomicRmwOp"},{"import": 1401,"src": 4844,"name": "testEventLoop2"},{"import": 1401,"src": 4845,"name": "windows","kind": "const","type": 546,"value": 1457},{"import": 1401,"src": 4846,"name": "maxInt"},{"import": 1401,"src": 4847,"name": "Thread","kind": "const","type": 546,"value": 1145},{"import": 1401,"src": 4848,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1401,"src": 4849,"name": "testEventLoop"},{"import": 1401,"src": 4850,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1401,"src": 4851,"name": "AtomicOrder"},{"import": 1401,"src": 4852,"name": "assert"},{"import": 1401,"src": 4853,"name": "testing"},{"import": 1401,"src": 4854,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1401,"src": 4855,"name": "fs","kind": "const","type": 546,"value": 1065},{"import": 1109,"src": 4856,"name": "FnDecl","kind": "const","type": 546,"value": 1566},{"import": 1429,"src": 411,"name": "isSlice","kind": "const","type": 639,"value": 774},{"import": 1429,"src": 4857,"name": "hasFn"},{"import": 1429,"src": 4858,"name": "isExtern"},{"import": 1429,"src": 4859,"name": "isContainer"},{"import": 1429,"src": 396,"name": "isSingleItemPtr","kind": "const","type": 593,"value": 758},{"import": 1429,"src": 4860,"name": "multiTrait"},{"import": 1429,"src": 4861,"name": "isNumber"},{"import": 1429,"src": 414,"name": "is","kind": "const","type": 662,"value": 778},{"import": 1429,"src": 4862,"name": "isUnsignedInt"},{"import": 1429,"src": 4863,"name": "TraitFn","kind": "const","type": 546,"value": 663},{"import": 1429,"src": 4864,"name": "isManyItemPtr"},{"import": 1429,"src": 4865,"name": "isSignedInt"},{"import": 1429,"src": 4866,"name": "isIndexable"},{"import": 1429,"src": 4867,"name": "isPtrTo"},{"import": 1429,"src": 4868,"name": "isPacked"},{"import": 1429,"src": 4869,"name": "TraitList"},{"import": 1429,"src": 4870,"name": "hasField"},{"import": 1429,"src": 399,"name": "isConstPtr","kind": "const","type": 601,"value": 761},{"import": 1429,"src": 4871,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1429,"src": 4872,"name": "std"},{"import": 1429,"src": 4873,"name": "debug"},{"import": 1429,"src": 4874,"name": "meta"},{"import": 1429,"src": 4875,"name": "testing"},{"import": 1429,"src": 4876,"name": "traitFnWorkaround","kind": "const","type": 663,"value": 868},{"import": 1429,"src": 4877,"name": "warn"},{"import": 1429,"src": 4878,"name": "mem"},{"import": 1444,"src": 4879,"name": "Thread","kind": "const","type": 546,"value": 1145},{"import": 1444,"src": 4880,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1444,"src": 4881,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1444,"src": 4882,"name": "c"},{"import": 1444,"src": 4883,"name": "os"},{"import": 1444,"src": 4884,"name": "windows","kind": "const","type": 546,"value": 1457},{"import": 1444,"src": 4885,"name": "assert"},{"import": 1444,"src": 4886,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1446,"src": 4887,"name": "std"},{"import": 1446,"src": 4888,"name": "maxInt"},{"import": 1446,"src": 4889,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1446,"src": 4890,"name": "siginfo_fields_union","kind": "const","type": 546,"value": 1552},{"import": 1446,"src": 4891,"name": "is_mips","kind": "const","type": 565,"value": null},{"import": 1449,"src": 4892,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1449,"src": 4893,"name": "root","kind": "const","type": 546,"value": 670},{"import": 1455,"src": 4894,"name": "llseek"},{"import": 1571,"src": 271,"name": "syscall1","kind": "const","type": 47,"value": 461},{"import": 1455,"src": 4895,"name": "epoll_create1"},{"import": 1455,"src": 4896,"name": "getsockopt"},{"import": 1455,"src": 4897,"name": "getxattr"},{"import": 1455,"src": 4898,"name": "getdents"},{"import": 1455,"src": 4899,"name": "getresuid"},{"import": 1455,"src": 232,"name": "sigprocmask","kind": "const","type": 318,"value": 386},{"import": 1455,"src": 4900,"name": "setxattr"},{"import": 1455,"src": 4901,"name": "socketpair"},{"import": 1455,"src": 4902,"name": "recvmsg"},{"import": 1455,"src": 4903,"name": "capget"},{"import": 1455,"src": 4904,"name": "fremovexattr"},{"import": 1455,"src": 4905,"name": "inotify_add_watch"},{"import": 1455,"src": 4906,"name": "dl_iterate_phdr"},{"import": 1455,"src": 4907,"name": "getrusage"},{"import": 1455,"src": 4908,"name": "clone5"},{"import": 1455,"src": 4909,"name": "futimens"},{"import": 1455,"src": 4910,"name": "getresgid"},{"import": 1455,"src": 4911,"name": "getpid"},{"import": 1455,"src": 4912,"name": "execve"},{"import": 1455,"src": 4913,"name": "pwritev2"},{"import": 1455,"src": 4914,"name": "seteuid"},{"import": 1571,"src": 290,"name": "syscall6","kind": "const","type": 384,"value": 481},{"import": 1455,"src": 4915,"name": "tgkill"},{"import": 1455,"src": 4916,"name": "sendto"},{"import": 1455,"src": 4917,"name": "io_uring_register"},{"import": 1455,"src": 4918,"name": "timerfd_settime"},{"import": 1571,"src": 274,"name": "restore_rt","kind": "const","type": 371,"value": 464},{"import": 1455,"src": 336,"name": "futex_wait","kind": "const","type": 452,"value": 604},{"import": 1455,"src": 4919,"name": "elf_aux_maybe","kind": "var","type": 1572,"value": null},{"import": 1455,"src": 4920,"name": "mkdirat"},{"import": 1455,"src": 4921,"name": "chroot"},{"import": 1455,"src": 220,"name": "lseek","kind": "const","type": 308,"value": 374},{"import": 1455,"src": 4922,"name": "stat"},{"import": 1455,"src": 4923,"name": "getrandom"},{"import": 1455,"src": 4924,"name": "fsetxattr"},{"import": 1455,"src": 243,"name": "mmap","kind": "const","type": 326,"value": 397},{"import": 1455,"src": 4925,"name": "readv"},{"import": 1455,"src": 4926,"name": "getcwd"},{"import": 1455,"src": 4927,"name": "sigaltstack"},{"import": 1455,"src": 4928,"name": "faccessat"},{"import": 1455,"src": 4929,"name": "umount"},{"import": 1455,"src": 4930,"name": "readlinkat"},{"import": 1455,"src": 4931,"name": "unshare"},{"import": 1455,"src": 4932,"name": "preadv"},{"import": 1455,"src": 4933,"name": "pwritev"},{"import": 1455,"src": 299,"name": "read","kind": "const","type": 414,"value": 518},{"import": 1455,"src": 4934,"name": "fork"},{"import": 1455,"src": 4935,"name": "symlinkat"},{"import": 1455,"src": 4936,"name": "removexattr"},{"import": 1455,"src": 4937,"name": "open"},{"import": 1571,"src": 275,"name": "syscall4","kind": "const","type": 372,"value": 465},{"import": 1455,"src": 4938,"name": "utimensat"},{"import": 1455,"src": 4939,"name": "chdir"},{"import": 1455,"src": 4940,"name": "dup2"},{"import": 1455,"src": 4941,"name": "setresgid"},{"import": 1455,"src": 4942,"name": "kill"},{"import": 1455,"src": 4943,"name": "mkdir"},{"import": 1455,"src": 4944,"name": "setegid"},{"import": 1455,"src": 4945,"name": "tls","kind": "const","type": 546,"value": 1573},{"import": 1455,"src": 249,"name": "munmap","kind": "const","type": 331,"value": 403},{"import": 1455,"src": 4946,"name": "clone2"},{"import": 1455,"src": 4947,"name": "setgroups"},{"import": 1455,"src": 4948,"name": "socket"},{"import": 1571,"src": 4949,"name": "syscall5"},{"import": 1455,"src": 234,"name": "tkill","kind": "const","type": 319,"value": 388},{"import": 1455,"src": 4950,"name": "listen"},{"import": 1455,"src": 4951,"name": "epoll_create"},{"import": 1455,"src": 4952,"name": "settimeofday"},{"import": 1455,"src": 4953,"name": "geteuid"},{"import": 1455,"src": 348,"name": "futex_wake","kind": "const","type": 480,"value": 636},{"import": 1455,"src": 4954,"name": "gettimeofday"},{"import": 1455,"src": 4955,"name": "dup3"},{"import": 1455,"src": 4956,"name": "recvfrom"},{"import": 1455,"src": 4957,"name": "timerfd_create"},{"import": 1455,"src": 4958,"name": "accept4"},{"import": 1455,"src": 4959,"name": "sendmsg"},{"import": 1455,"src": 4960,"name": "renameat2"},{"import": 1455,"src": 4961,"name": "setsockopt"},{"import": 1571,"src": 4962,"name": "restore","kind": "const","type": 371,"value": 464},{"import": 1455,"src": 4963,"name": "rename"},{"import": 1455,"src": 4964,"name": "clock_settime"},{"import": 1455,"src": 4965,"name": "poll"},{"import": 1455,"src": 4966,"name": "getgroups"},{"import": 1455,"src": 4967,"name": "getegid"},{"import": 1455,"src": 219,"name": "getErrno","kind": "const","type": 307,"value": 373},{"import": 1455,"src": 4968,"name": "pwrite"},{"import": 1455,"src": 4969,"name": "symlink"},{"import": 1455,"src": 4970,"name": "preadv2"},{"import": 1455,"src": 4971,"name": "create"},{"import": 1455,"src": 4972,"name": "setreuid"},{"import": 1455,"src": 4973,"name": "sched_getaffinity"},{"import": 1455,"src": 4974,"name": "lsetxattr"},{"import": 1455,"src": 4975,"name": "flistxattr"},{"import": 1455,"src": 4976,"name": "epoll_pwait"},{"import": 1455,"src": 4977,"name": "pipe"},{"import": 1455,"src": 4978,"name": "io_uring_enter"},{"import": 1455,"src": 4979,"name": "shutdown"},{"import": 1455,"src": 334,"name": "sched_yield","kind": "const","type": 450,"value": 602},{"import": 1455,"src": 4980,"name": "exit"},{"import": 1455,"src": 4981,"name": "capset"},{"import": 1455,"src": 4982,"name": "pipe2"},{"import": 1455,"src": 4983,"name": "setresuid"},{"import": 1455,"src": 4984,"name": "mount"},{"import": 1455,"src": 4985,"name": "setuid"},{"import": 1455,"src": 4986,"name": "fgetxattr"},{"import": 1455,"src": 4987,"name": "rmdir"},{"import": 1455,"src": 4988,"name": "access"},{"import": 1455,"src": 222,"name": "close","kind": "const","type": 310,"value": 376},{"import": 1455,"src": 4989,"name": "waitpid"},{"import": 1455,"src": 351,"name": "clock_gettime","kind": "const","type": 485,"value": 643},{"import": 1455,"src": 4990,"name": "sigaddset"},{"import": 1571,"src": 223,"name": "syscall2","kind": "const","type": 311,"value": 377},{"import": 1571,"src": 4991,"name": "clone"},{"import": 1455,"src": 4992,"name": "sigismember"},{"import": 1455,"src": 4993,"name": "umount2"},{"import": 1455,"src": 4994,"name": "lremovexattr"},{"import": 1455,"src": 4995,"name": "readlink"},{"import": 1455,"src": 4996,"name": "getdents64"},{"import": 1455,"src": 4997,"name": "inotify_rm_watch"},{"import": 1455,"src": 4998,"name": "lgetxattr"},{"import": 1455,"src": 4999,"name": "epoll_ctl"},{"import": 1455,"src": 5000,"name": "llistxattr"},{"import": 1455,"src": 5001,"name": "connect"},{"import": 1571,"src": 270,"name": "syscall3","kind": "const","type": 369,"value": 459},{"import": 1455,"src": 5002,"name": "pread"},{"import": 1455,"src": 5003,"name": "sendmmsg"},{"import": 1455,"src": 5004,"name": "setgid"},{"import": 1455,"src": 5005,"name": "memfd_create"},{"import": 1455,"src": 5006,"name": "getpeername"},{"import": 1455,"src": 5007,"name": "lstat"},{"import": 1455,"src": 5008,"name": "setregid"},{"import": 1455,"src": 233,"name": "gettid","kind": "const","type": 316,"value": 387},{"import": 1455,"src": 5009,"name": "getsockname"},{"import": 1455,"src": 5010,"name": "unlinkat"},{"import": 1455,"src": 5011,"name": "itimerspec"},{"import": 1455,"src": 5012,"name": "getuid"},{"import": 1455,"src": 5013,"name": "accept"},{"import": 1455,"src": 5014,"name": "inotify_init1"},{"import": 1455,"src": 5015,"name": "statx"},{"import": 1455,"src": 5016,"name": "vfork"},{"import": 1455,"src": 5017,"name": "unlink"},{"import": 1455,"src": 5018,"name": "mprotect"},{"import": 1571,"src": 278,"name": "syscall0","kind": "const","type": 126,"value": 468},{"import": 1455,"src": 5019,"name": "timerfd_gettime"},{"import": 1455,"src": 5020,"name": "nanosleep"},{"import": 1455,"src": 5021,"name": "fstatat"},{"import": 1455,"src": 315,"name": "fstat","kind": "const","type": 425,"value": 544},{"import": 1455,"src": 310,"name": "openat","kind": "const","type": 420,"value": 537},{"import": 1455,"src": 5022,"name": "renameat"},{"import": 1455,"src": 227,"name": "sigaction","kind": "const","type": 314,"value": 381},{"import": 1455,"src": 5023,"name": "listxattr"},{"import": 1455,"src": 5024,"name": "writev"},{"import": 1455,"src": 224,"name": "exit_group","kind": "const","type": 312,"value": 378},{"import": 1455,"src": 5025,"name": "bind"},{"import": 1455,"src": 5026,"name": "io_uring_setup"},{"import": 1455,"src": 5027,"name": "getgid"},{"import": 1455,"src": 5028,"name": "eventfd"},{"import": 1455,"src": 360,"name": "getauxval","kind": "const","type": 126,"value": 702},{"import": 1455,"src": 5029,"name": "epoll_wait"},{"import": 1455,"src": 332,"name": "write","kind": "const","type": 449,"value": 593},{"import": 1455,"src": 5030,"name": "uname"},{"import": 1455,"src": 350,"name": "clock_getres","kind": "const","type": 485,"value": 642},{"import": 1455,"src": 5031,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1455,"src": 5032,"name": "maxInt"},{"import": 1455,"src": 5033,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1455,"src": 5034,"name": "vdso_clock_gettime","kind": "var","type": 1574,"value": null},{"import": 1455,"src": 5035,"name": "elf"},{"import": 1455,"src": 356,"name": "init_vdso_clock_gettime","kind": "const","type": 505,"value": 670},{"import": 1455,"src": 5036,"name": "vdso_clock_gettime_ty","kind": "const","type": 546,"value": 505},{"import": 1455,"src": 5037,"name": "vdso","kind": "const","type": 546,"value": 1575},{"import": 1455,"src": 5038,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1455,"src": 5039,"name": "dl"},{"import": 1455,"src": 5040,"name": "__ehdr_start"},{"import": 1578,"src": 5041,"name": "FILE_DEVICE_CONTROLLER"},{"import": 1578,"src": 5042,"name": "EXCEPTION_DATATYPE_MISALIGNMENT"},{"import": 1578,"src": 5043,"name": "MEM_RESERVE_PLACEHOLDERS"},{"import": 1578,"src": 5044,"name": "FILE_ACTION_MODIFIED"},{"import": 1578,"src": 5045,"name": "OBJ_KERNEL_HANDLE"},{"import": 1578,"src": 5046,"name": "CTL_CODE"},{"import": 1457,"src": 5047,"name": "WaitForSingleObjectEx"},{"import": 1578,"src": 5048,"name": "FILE_DEVICE_STORAGE_REPLICATION"},{"import": 1457,"src": 5049,"name": "WaitForSingleObjectError"},{"import": 1578,"src": 5050,"name": "FILE_DEVICE_NETWORK_BROWSER"},{"import": 1578,"src": 5051,"name": "STARTF_RUNFULLSCREEN"},{"import": 1578,"src": 5052,"name": "FileCompressionInfo"},{"import": 1578,"src": 5053,"name": "PSECURITY_ATTRIBUTES"},{"import": 1578,"src": 5054,"name": "CREATE_UNICODE_ENVIRONMENT"},{"import": 1578,"src": 5055,"name": "FILE_NOTIFY_INFORMATION"},{"import": 1578,"src": 5056,"name": "EXCEPTION_POINTERS"},{"import": 1457,"src": 5057,"name": "fromSysTime"},{"import": 1578,"src": 5058,"name": "FILE_DEVICE_SERIAL_MOUSE_PORT"},{"import": 1578,"src": 5059,"name": "RTL_DRIVE_LETTER_CURDIR"},{"import": 1578,"src": 5060,"name": "FILE_TRANSACTED_MODE"},{"import": 1578,"src": 5061,"name": "FILE_DEVICE_BUS_EXTENDER"},{"import": 1457,"src": 5062,"name": "RtlGenRandomError"},{"import": 1457,"src": 5063,"name": "CreateIoCompletionPort"},{"import": 1578,"src": 5064,"name": "FILE_DEVICE_WPD"},{"import": 1578,"src": 5065,"name": "COINIT_DISABLE_OLE1DDE"},{"import": 1578,"src": 5066,"name": "KF_FLAG_NOT_PARENT_RELATIVE"},{"import": 1578,"src": 5067,"name": "FILE_OPEN"},{"import": 1578,"src": 5068,"name": "WIN32_FIND_DATAW"},{"import": 1578,"src": 5069,"name": "FileFullDirectoryInfo"},{"import": 1457,"src": 5070,"name": "FindFirstFile"},{"import": 1578,"src": 5071,"name": "E_UNEXPECTED"},{"import": 1578,"src": 5072,"name": "LPCTSTR"},{"import": 1578,"src": 5073,"name": "EXCEPTION_ACCESS_VIOLATION"},{"import": 1578,"src": 5074,"name": "WCHAR"},{"import": 1457,"src": 5075,"name": "WSASocketW"},{"import": 1578,"src": 5076,"name": "BOOL"},{"import": 1578,"src": 5077,"name": "FILE_NAME_INFORMATION"},{"import": 1578,"src": 5078,"name": "WRITE_DAC"},{"import": 1578,"src": 5079,"name": "FILE_FLAG_OVERLAPPED"},{"import": 1578,"src": 5080,"name": "FILE_WRITE_EA"},{"import": 1578,"src": 5081,"name": "FILE_ACCESS_INFORMATION"},{"import": 1578,"src": 5082,"name": "OBJ_OPENIF"},{"import": 1578,"src": 5083,"name": "NTSTATUS"},{"import": 1457,"src": 5084,"name": "WriteFile"},{"import": 1578,"src": 5085,"name": "PHKEY"},{"import": 1578,"src": 5086,"name": "FILE_NAME_NORMALIZED"},{"import": 1457,"src": 5087,"name": "HeapDestroy"},{"import": 1578,"src": 5088,"name": "FILE_DEVICE_MAILSLOT"},{"import": 1578,"src": 5089,"name": "HANDLE","kind": "const","type": 546,"value": 1579},{"import": 1457,"src": 5090,"name": "CreateProcessError"},{"import": 1578,"src": 5091,"name": "LANG"},{"import": 1578,"src": 5092,"name": "FILE_MAXIMUM_DISPOSITION"},{"import": 1578,"src": 5093,"name": "KF_FLAG_CREATE"},{"import": 1578,"src": 5094,"name": "FILE_DEVICE_CD_ROM_FILE_SYSTEM"},{"import": 1578,"src": 5095,"name": "FILE_WRITE_DATA"},{"import": 1578,"src": 5096,"name": "VOLUME_NAME_NT"},{"import": 1578,"src": 5097,"name": "VECTORED_EXCEPTION_HANDLER"},{"import": 1457,"src": 5098,"name": "WSAStartup"},{"import": 1578,"src": 5099,"name": "FILE_ATTRIBUTE_ENCRYPTED"},{"import": 1578,"src": 5100,"name": "FILE_DEVICE_DATALINK"},{"import": 1578,"src": 5101,"name": "WAIT_ABANDONED_0"},{"import": 1578,"src": 5102,"name": "UINT"},{"import": 1578,"src": 5103,"name": "FILE_NO_EA_KNOWLEDGE"},{"import": 1578,"src": 5104,"name": "FILE_DEVICE_SMARTCARD"},{"import": 1578,"src": 5105,"name": "COINIT_SPEED_OVER_MEMORY"},{"import": 1578,"src": 5106,"name": "USHORT"},{"import": 1578,"src": 5107,"name": "PAGE_TARGETS_INVALID"},{"import": 1578,"src": 5108,"name": "FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS"},{"import": 1457,"src": 5109,"name": "CloseHandle"},{"import": 1578,"src": 5110,"name": "HEAP_NO_SERIALIZE"},{"import": 1457,"src": 5111,"name": "GetEnvironmentStringsW"},{"import": 1578,"src": 5112,"name": "FileIdInfo"},{"import": 1457,"src": 5113,"name": "VirtualFree"},{"import": 1578,"src": 5114,"name": "FILE_DEVICE_CD_ROM"},{"import": 1578,"src": 5115,"name": "FILE_DEVICE_HOLOGRAPHIC"},{"import": 1578,"src": 5116,"name": "LPTSTR"},{"import": 1578,"src": 5117,"name": "MEM_PHYSICAL"},{"import": 1578,"src": 5118,"name": "FALSE"},{"import": 1578,"src": 5119,"name": "FILE_DEVICE_BATTERY"},{"import": 1578,"src": 5120,"name": "FILE_DEVICE_WAVE_OUT"},{"import": 1578,"src": 5121,"name": "FILE_DEVICE_NETWORK"},{"import": 1457,"src": 5122,"name": "TerminateProcessError"},{"import": 1578,"src": 5123,"name": "FILE_CREATE_TREE_CONNECTION"},{"import": 1578,"src": 5124,"name": "MOVEFILE_DELAY_UNTIL_REBOOT"},{"import": 1578,"src": 5125,"name": "KF_FLAG_SIMPLE_IDLIST"},{"import": 1457,"src": 5126,"name": "ReadFileError"},{"import": 1578,"src": 5127,"name": "KF_FLAG_DONT_UNEXPAND"},{"import": 1578,"src": 5128,"name": "FILE_ATTRIBUTE_DIRECTORY"},{"import": 1578,"src": 5129,"name": "BY_HANDLE_FILE_INFORMATION"},{"import": 1578,"src": 5130,"name": "FileIoPriorityHintInfo"},{"import": 1457,"src": 5131,"name": "SetHandleInformation"},{"import": 1578,"src": 5132,"name": "FILE_CREATE_PIPE_INSTANCE"},{"import": 1457,"src": 5133,"name": "GetFileAttributesError"},{"import": 1578,"src": 5134,"name": "FILE_DEVICE_DEVAPI"},{"import": 1578,"src": 5135,"name": "FILE_FLAG_WRITE_THROUGH"},{"import": 1578,"src": 5136,"name": "PEB_LDR_DATA"},{"import": 1457,"src": 5137,"name": "SetFilePointerEx_BEGIN"},{"import": 1578,"src": 5138,"name": "FILE_CREATE"},{"import": 1578,"src": 5139,"name": "GENERIC_WRITE"},{"import": 1578,"src": 5140,"name": "FILE_DEVICE_DISK_FILE_SYSTEM"},{"import": 1578,"src": 5141,"name": "FILE_NON_DIRECTORY_FILE"},{"import": 1578,"src": 5142,"name": "INIT_ONCE_FN"},{"import": 1578,"src": 5143,"name": "FILE_FLAG_POSIX_SEMANTICS"},{"import": 1578,"src": 5144,"name": "HRESULT"},{"import": 1578,"src": 5145,"name": "MAX_PATH"},{"import": 1578,"src": 5146,"name": "FILE_EXECUTE"},{"import": 1578,"src": 5147,"name": "SHORT"},{"import": 1578,"src": 5148,"name": "LPCVOID"},{"import": 1457,"src": 5149,"name": "ws2_32"},{"import": 1578,"src": 5150,"name": "TLS_OUT_OF_INDEXES"},{"import": 1457,"src": 5151,"name": "GetFinalPathNameByHandleW"},{"import": 1578,"src": 5152,"name": "PAGE_READONLY"},{"import": 1457,"src": 5153,"name": "MoveFileError"},{"import": 1578,"src": 5154,"name": "SUBLANG"},{"import": 1578,"src": 5155,"name": "FILE_DEVICE_MOUSE"},{"import": 1578,"src": 5156,"name": "FILE_RESERVE_OPFILTER"},{"import": 1578,"src": 5157,"name": "FORMAT_MESSAGE_FROM_SYSTEM"},{"import": 1578,"src": 5158,"name": "INFINITE"},{"import": 1578,"src": 5159,"name": "FILE_DEVICE_EHSTOR"},{"import": 1578,"src": 5160,"name": "E_POINTER"},{"import": 1578,"src": 5161,"name": "FILE_SYNCHRONOUS_IO_ALERT"},{"import": 1578,"src": 5162,"name": "FileNameInfo"},{"import": 1578,"src": 5163,"name": "FILE_NOTIFY_CHANGE_CREATION"},{"import": 1578,"src": 5164,"name": "E_NOINTERFACE"},{"import": 1578,"src": 5165,"name": "FILETIME"},{"import": 1578,"src": 5166,"name": "OBJ_EXCLUSIVE"},{"import": 1578,"src": 5167,"name": "FILE_DEVICE_BEEP"},{"import": 1578,"src": 5168,"name": "FileAlignmentInfo"},{"import": 1578,"src": 5169,"name": "FILE_APPEND_DATA"},{"import": 1578,"src": 5170,"name": "STARTF_FORCEONFEEDBACK"},{"import": 1457,"src": 5171,"name": "CreatePipeError"},{"import": 1578,"src": 5172,"name": "INVALID_HANDLE_VALUE"},{"import": 1578,"src": 5173,"name": "FILE_MODE_INFORMATION"},{"import": 1457,"src": 5174,"name": "MoveFileEx"},{"import": 1578,"src": 5175,"name": "FileRemoteProtocolInfo"},{"import": 1578,"src": 5176,"name": "EXCEPTION_RECORD"},{"import": 1578,"src": 5177,"name": "FILE_DEVICE_MIDI_OUT"},{"import": 1578,"src": 5178,"name": "KF_FLAG_ALIAS_ONLY"},{"import": 1578,"src": 5179,"name": "FileAttributeTagInfo"},{"import": 1578,"src": 5180,"name": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"},{"import": 1578,"src": 5181,"name": "UNICODE"},{"import": 1578,"src": 5182,"name": "FORMAT_MESSAGE_IGNORE_INSERTS"},{"import": 1578,"src": 5183,"name": "UNICODE_STRING"},{"import": 1457,"src": 5184,"name": "VirtualAlloc"},{"import": 1578,"src": 5185,"name": "LPTHREAD_START_ROUTINE"},{"import": 1578,"src": 5186,"name": "E_OUTOFMEMORY"},{"import": 1578,"src": 5187,"name": "LPCH"},{"import": 1578,"src": 5188,"name": "KF_FLAG_NO_APPCONTAINER_REDIRECTION"},{"import": 1457,"src": 5189,"name": "CreateSymbolicLinkW"},{"import": 1578,"src": 5190,"name": "COORD"},{"import": 1578,"src": 5191,"name": "FILE_DEVICE_SCREEN"},{"import": 1578,"src": 5192,"name": "FILE_DEVICE_PMI"},{"import": 1457,"src": 5193,"name": "MoveFileExW"},{"import": 1578,"src": 5194,"name": "FILE_ADD_SUBDIRECTORY"},{"import": 1457,"src": 5195,"name": "GetFinalPathNameByHandleError"},{"import": 1578,"src": 5196,"name": "STARTF_TITLEISLINKNAME"},{"import": 1457,"src": 5197,"name": "CreateSymbolicLinkError"},{"import": 1578,"src": 5198,"name": "FILE_DEVICE_8042_PORT"},{"import": 1578,"src": 5199,"name": "LPSECURITY_ATTRIBUTES"},{"import": 1578,"src": 5200,"name": "FILE_ATTRIBUTE_REPARSE_POINT"},{"import": 1578,"src": 5201,"name": "FORMAT_MESSAGE_MAX_WIDTH_MASK"},{"import": 1578,"src": 5202,"name": "FILE_NO_INTERMEDIATE_BUFFERING"},{"import": 1578,"src": 5203,"name": "LPOVERLAPPED"},{"import": 1578,"src": 5204,"name": "TRUE"},{"import": 1578,"src": 5205,"name": "EXCEPTION_CONTINUE_SEARCH"},{"import": 1578,"src": 5206,"name": "FILE_DEVICE_CONSOLE"},{"import": 1578,"src": 5207,"name": "PAGE_GUARD"},{"import": 1578,"src": 5208,"name": "FILE_OPEN_IF"},{"import": 1578,"src": 5209,"name": "FileIdExtdDirectoryRestartInfo"},{"import": 1578,"src": 5210,"name": "MEM_DECOMMIT"},{"import": 1578,"src": 5211,"name": "OBJ_INHERIT"},{"import": 1578,"src": 5212,"name": "FILE_BOTH_DIRECTORY_INFORMATION"},{"import": 1578,"src": 5213,"name": "ERROR"},{"import": 1578,"src": 5214,"name": "RTL_CRITICAL_SECTION_DEBUG"},{"import": 1578,"src": 5215,"name": "FILE_DEVICE_VIRTUAL_BLOCK"},{"import": 1578,"src": 5216,"name": "HLOCAL"},{"import": 1578,"src": 5217,"name": "WORD"},{"import": 1578,"src": 5218,"name": "FILE_ATTRIBUTE_NORMAL"},{"import": 1578,"src": 5219,"name": "FILE_SHARE_WRITE"},{"import": 1457,"src": 5220,"name": "ntdll"},{"import": 1457,"src": 5221,"name": "ReadFile"},{"import": 1578,"src": 5222,"name": "GENERIC_READ"},{"import": 1578,"src": 5223,"name": "FILE_DEVICE_MIDI_IN"},{"import": 1578,"src": 5224,"name": "FILE_DEVICE_PRINTER"},{"import": 1457,"src": 5225,"name": "FindNextFile"},{"import": 1578,"src": 5226,"name": "KF_FLAG_DEFAULT_PATH"},{"import": 1578,"src": 5227,"name": "FILE_ATTRIBUTE_READONLY"},{"import": 1578,"src": 5228,"name": "STARTF_USESTDHANDLES"},{"import": 1578,"src": 5229,"name": "FILE_FLAG_BACKUP_SEMANTICS"},{"import": 1578,"src": 5230,"name": "LIST_ENTRY"},{"import": 1578,"src": 5231,"name": "FOREGROUND_RED"},{"import": 1578,"src": 5232,"name": "FILE_READ_DATA"},{"import": 1578,"src": 5233,"name": "FILE_DELETE_CHILD"},{"import": 1578,"src": 5234,"name": "FILE_POSITION_INFORMATION"},{"import": 1457,"src": 5235,"name": "fileTimeToNanoSeconds"},{"import": 1578,"src": 5236,"name": "PAGE_WRITECOMBINE"},{"import": 1578,"src": 5237,"name": "TRUNCATE_EXISTING"},{"import": 1578,"src": 5238,"name": "FILE_DELETE_ON_CLOSE"},{"import": 1457,"src": 5239,"name": "RemoveDirectory"},{"import": 1578,"src": 5240,"name": "MEM_RELEASE"},{"import": 1578,"src": 5241,"name": "FILE_NOTIFY_CHANGE_DIR_NAME"},{"import": 1457,"src": 5242,"name": "CreatePipe"},{"import": 1578,"src": 5243,"name": "MEM_RESET_UNDO"},{"import": 1578,"src": 5244,"name": "PAGE_NOACCESS"},{"import": 1578,"src": 5245,"name": "PWSTR"},{"import": 1578,"src": 5246,"name": "FILE_DEVICE_GPIO"},{"import": 1578,"src": 5247,"name": "FILE_DEVICE_UCM"},{"import": 1578,"src": 5248,"name": "PAGE_NOCACHE"},{"import": 1457,"src": 5249,"name": "sliceToPrefixedSuffixedFileW"},{"import": 1578,"src": 5250,"name": "STATUS"},{"import": 1578,"src": 5251,"name": "WRITE_OWNER"},{"import": 1578,"src": 5252,"name": "OBJECT_ATTRIBUTES"},{"import": 1578,"src": 5253,"name": "LPVOID"},{"import": 1578,"src": 5254,"name": "FORMAT_MESSAGE_ARGUMENT_ARRAY"},{"import": 1578,"src": 5255,"name": "FILE_OPEN_FOR_FREE_SPACE_QUERY"},{"import": 1457,"src": 5256,"name": "DeleteFileError"},{"import": 1578,"src": 5257,"name": "INT"},{"import": 1457,"src": 5258,"name": "GetQueuedCompletionStatusResult"},{"import": 1578,"src": 5259,"name": "STARTF_UNTRUSTEDSOURCE"},{"import": 1578,"src": 5260,"name": "FILE_DEVICE_SCANNER"},{"import": 1578,"src": 5261,"name": "FILE_DEVICE_MODEM"},{"import": 1578,"src": 5262,"name": "READ_CONTROL"},{"import": 1578,"src": 5263,"name": "FILE_STANDARD_INFORMATION"},{"import": 1578,"src": 5264,"name": "FILE_DEVICE_INPORT_PORT"},{"import": 1578,"src": 5265,"name": "FileBasicInfo"},{"import": 1578,"src": 5266,"name": "FILE_NOTIFY_CHANGE_LAST_ACCESS"},{"import": 1457,"src": 5267,"name": "GetCurrentDirectory"},{"import": 1578,"src": 5268,"name": "MEM_COALESCE_PLACEHOLDERS"},{"import": 1457,"src": 5269,"name": "WriteFileError"},{"import": 1578,"src": 5270,"name": "FILE_ATTRIBUTE_NO_SCRUB_DATA"},{"import": 1578,"src": 5271,"name": "OBJ_PERMANENT"},{"import": 1578,"src": 5272,"name": "HCRYPTPROV"},{"import": 1457,"src": 5273,"name": "ole32"},{"import": 1457,"src": 5274,"name": "RemoveDirectoryW"},{"import": 1578,"src": 5275,"name": "IMAGE_TLS_DIRECTORY64"},{"import": 1578,"src": 5276,"name": "FILE_DEVICE_FILE_SYSTEM"},{"import": 1578,"src": 5277,"name": "FILE_NOTIFY_CHANGE_FILE_NAME"},{"import": 1578,"src": 5278,"name": "OBJ_VALID_ATTRIBUTES"},{"import": 1578,"src": 5279,"name": "FILE_NOTIFY_CHANGE_SIZE"},{"import": 1578,"src": 5280,"name": "FARPROC"},{"import": 1578,"src": 5281,"name": "OPEN_EXISTING"},{"import": 1457,"src": 5282,"name": "GetFileAttributesW"},{"import": 1578,"src": 5283,"name": "EXCEPTION_ILLEGAL_INSTRUCTION"},{"import": 1578,"src": 5284,"name": "S_OK"},{"import": 1578,"src": 5285,"name": "FILE_ACTION_REMOVED"},{"import": 1578,"src": 5286,"name": "FileStreamInfo"},{"import": 1578,"src": 5287,"name": "FORMAT_MESSAGE_FROM_STRING"},{"import": 1578,"src": 5288,"name": "PAGE_WRITECOPY"},{"import": 1457,"src": 5289,"name": "toSysTime"},{"import": 1578,"src": 5290,"name": "FILE_OVERWRITE_IF"},{"import": 1578,"src": 5291,"name": "MOVEFILE_FAIL_IF_NOT_TRACKABLE"},{"import": 1578,"src": 5292,"name": "FILE_DEVICE_USBEX"},{"import": 1457,"src": 5293,"name": "WSACleanup"},{"import": 1457,"src": 5294,"name": "InitOnceExecuteOnce"},{"import": 1578,"src": 5295,"name": "HINSTANCE"},{"import": 1578,"src": 5296,"name": "CURDIR"},{"import": 1578,"src": 5297,"name": "FILE_DEVICE_TAPE_FILE_SYSTEM"},{"import": 1457,"src": 5298,"name": "shell32"},{"import": 1578,"src": 5299,"name": "FILE_DEVICE_POINT_OF_SERVICE"},{"import": 1578,"src": 5300,"name": "COINIT"},{"import": 1578,"src": 5301,"name": "FILE_DEVICE_NVDIMM"},{"import": 1578,"src": 5302,"name": "HKEY__"},{"import": 1578,"src": 5303,"name": "FILE_DEVICE_INFINIBAND"},{"import": 1578,"src": 5304,"name": "MOVEFILE_COPY_ALLOWED"},{"import": 1578,"src": 5305,"name": "FILE_ALL_INFORMATION"},{"import": 1578,"src": 5306,"name": "STARTF_USESIZE"},{"import": 1578,"src": 5307,"name": "FILE_DEVICE_CRYPT_PROVIDER"},{"import": 1578,"src": 5308,"name": "FILE_EA_INFORMATION"},{"import": 1578,"src": 5309,"name": "E_ABORT"},{"import": 1457,"src": 5310,"name": "sliceToPrefixedFileW"},{"import": 1578,"src": 5311,"name": "RTL_USER_PROCESS_PARAMETERS"},{"import": 1578,"src": 5312,"name": "CREATE_EVENT_INITIAL_SET"},{"import": 1578,"src": 5313,"name": "FILE_SYNCHRONOUS_IO_NONALERT"},{"import": 1578,"src": 5314,"name": "LONGLONG"},{"import": 1457,"src": 5315,"name": "FreeLibrary"},{"import": 1457,"src": 5316,"name": "FreeEnvironmentStringsW"},{"import": 1578,"src": 5317,"name": "STARTF_PREVENTPINNING"},{"import": 1578,"src": 5318,"name": "LANGID"},{"import": 1578,"src": 5319,"name": "PVOID"},{"import": 1578,"src": 5320,"name": "FILE_OPEN_FOR_BACKUP_INTENT"},{"import": 1578,"src": 5321,"name": "FILE_DEVICE_UNKNOWN"},{"import": 1578,"src": 5322,"name": "FileEndOfFileInfo"},{"import": 1578,"src": 5323,"name": "FORMAT_MESSAGE_ALLOCATE_BUFFER"},{"import": 1457,"src": 5324,"name": "QueryPerformanceFrequency"},{"import": 1578,"src": 5325,"name": "FILE_DEVICE_SDFXHCI"},{"import": 1457,"src": 5326,"name": "GetModuleFileNameW"},{"import": 1578,"src": 5327,"name": "LPBYTE"},{"import": 1457,"src": 5328,"name": "GetOverlappedResult"},{"import": 1578,"src": 5329,"name": "FILE_NO_COMPRESSION"},{"import": 1578,"src": 5330,"name": "FILE_DEVICE_NETWORK_FILE_SYSTEM"},{"import": 1578,"src": 5331,"name": "FILE_DEVICE_SERENUM"},{"import": 1457,"src": 5332,"name": "CreateDirectory"},{"import": 1578,"src": 5333,"name": "PAGE_READWRITE"},{"import": 1578,"src": 5334,"name": "COINIT_MULTITHREADED"},{"import": 1457,"src": 5335,"name": "RemoveDirectoryError"},{"import": 1578,"src": 5336,"name": "PAGE_EXECUTE_WRITECOPY"},{"import": 1578,"src": 5337,"name": "STD_OUTPUT_HANDLE"},{"import": 1578,"src": 5338,"name": "HANDLE_FLAG_INHERIT"},{"import": 1578,"src": 5339,"name": "FILE_DEVICE_NFP"},{"import": 1578,"src": 5340,"name": "FILE_ATTRIBUTE_ARCHIVE"},{"import": 1578,"src": 5341,"name": "LPCWSTR"},{"import": 1457,"src": 5342,"name": "WSAIoctl"},{"import": 1578,"src": 5343,"name": "FILE_ATTRIBUTE_OFFLINE"},{"import": 1578,"src": 5344,"name": "FILE_READ_EA"},{"import": 1578,"src": 5345,"name": "LPWSTR"},{"import": 1578,"src": 5346,"name": "MEM_RESERVE"},{"import": 1578,"src": 5347,"name": "FILE_RANDOM_ACCESS"},{"import": 1578,"src": 5348,"name": "HANDLE_FLAG_PROTECT_FROM_CLOSE"},{"import": 1578,"src": 5349,"name": "PAGE_TARGETS_NO_UPDATE"},{"import": 1578,"src": 5350,"name": "MEM_COMMIT"},{"import": 1578,"src": 5351,"name": "FILE_BOTH_DIR_INFORMATION"},{"import": 1578,"src": 5352,"name": "E_HANDLE"},{"import": 1578,"src": 5353,"name": "INVALID_FILE_ATTRIBUTES"},{"import": 1578,"src": 5354,"name": "FILE_FLAG_RANDOM_ACCESS"},{"import": 1578,"src": 5355,"name": "FileIdExtdDirectoryInfo"},{"import": 1578,"src": 5356,"name": "MEM_RESET"},{"import": 1578,"src": 5357,"name": "WAIT_OBJECT_0"},{"import": 1578,"src": 5358,"name": "COINIT_APARTMENTTHREADED"},{"import": 1578,"src": 5359,"name": "LPOVERLAPPED_COMPLETION_ROUTINE"},{"import": 1578,"src": 5360,"name": "KF_FLAG_INIT"},{"import": 1578,"src": 5361,"name": "RTL_RUN_ONCE_INIT"},{"import": 1457,"src": 5362,"name": "SetConsoleTextAttributeError"},{"import": 1578,"src": 5363,"name": "FILE_DEVICE_KS"},{"import": 1578,"src": 5364,"name": "FileDispositionInfo"},{"import": 1457,"src": 5365,"name": "VirtualAllocError"},{"import": 1578,"src": 5366,"name": "STANDARD_RIGHTS_EXECUTE"},{"import": 1578,"src": 5367,"name": "FILE_NOTIFY_CHANGE_ATTRIBUTES"},{"import": 1578,"src": 5368,"name": "FILE_DEVICE_NAMED_PIPE"},{"import": 1578,"src": 5369,"name": "PROV_RSA_FULL"},{"import": 1578,"src": 5370,"name": "FILE_ACTION_RENAMED_OLD_NAME"},{"import": 1578,"src": 5371,"name": "FILE_WRITE_ACCESS"},{"import": 1578,"src": 5372,"name": "FILE_CURRENT"},{"import": 1578,"src": 5373,"name": "EVENT_MODIFY_STATE"},{"import": 1578,"src": 5374,"name": "E_FAIL"},{"import": 1457,"src": 5375,"name": "TerminateProcess"},{"import": 1578,"src": 5376,"name": "CHAR"},{"import": 1578,"src": 5377,"name": "FILE_OVERWRITE"},{"import": 1578,"src": 5378,"name": "CREATE_ALWAYS"},{"import": 1457,"src": 5379,"name": "CreateDirectoryError"},{"import": 1578,"src": 5380,"name": "FILE_DEVICE_DFS_FILE_SYSTEM"},{"import": 1578,"src": 5381,"name": "FILE_DEVICE_DVD"},{"import": 1578,"src": 5382,"name": "OBJ_OPENLINK"},{"import": 1578,"src": 5383,"name": "FILE_DEVICE_DISK"},{"import": 1457,"src": 5384,"name": "SetFilePointerEx_CURRENT"},{"import": 1578,"src": 5385,"name": "FILE_DEVICE_SMB"},{"import": 1578,"src": 5386,"name": "STARTF_TITLEISAPPID"},{"import": 1578,"src": 5387,"name": "FILE_DEVICE_VIRTUAL_DISK"},{"import": 1457,"src": 5388,"name": "GetCurrentDirectoryError"},{"import": 1578,"src": 5389,"name": "IMAGE_TLS_DIRECTORY"},{"import": 1578,"src": 5390,"name": "FILE_COMPLETE_IF_OPLOCKED"},{"import": 1578,"src": 5391,"name": "DUPLICATE_SAME_ACCESS"},{"import": 1578,"src": 5392,"name": "FILE_BASIC_INFORMATION"},{"import": 1457,"src": 5393,"name": "wToPrefixedFileW"},{"import": 1457,"src": 5394,"name": "QueryPerformanceCounter"},{"import": 1578,"src": 5395,"name": "LARGE_INTEGER"},{"import": 1578,"src": 5396,"name": "FileRenameInfo"},{"import": 1578,"src": 5397,"name": "FILE_FLAG_DELETE_ON_CLOSE"},{"import": 1457,"src": 5398,"name": "PostQueuedCompletionStatus"},{"import": 1578,"src": 5399,"name": "ULONGLONG"},{"import": 1578,"src": 5400,"name": "VOLUME_NAME_GUID"},{"import": 1578,"src": 5401,"name": "GENERIC_ALL"},{"import": 1578,"src": 5402,"name": "HKEY"},{"import": 1457,"src": 5403,"name": "PostQueuedCompletionStatusError"},{"import": 1578,"src": 5404,"name": "FILE_DEVICE_SOUND"},{"import": 1457,"src": 5405,"name": "DeviceIoControl"},{"import": 1578,"src": 5406,"name": "E_INVALIDARG"},{"import": 1578,"src": 5407,"name": "EXCEPTION_STACK_OVERFLOW"},{"import": 1457,"src": 5408,"name": "GetEnvironmentVariableError"},{"import": 1578,"src": 5409,"name": "FILE_DEVICE_MT_TRANSPORT"},{"import": 1578,"src": 5410,"name": "SYNCHRONIZE"},{"import": 1578,"src": 5411,"name": "FILE_FLAG_OPEN_NO_RECALL"},{"import": 1578,"src": 5412,"name": "BOOLEAN"},{"import": 1578,"src": 5413,"name": "FILE_DEVICE_MASS_STORAGE"},{"import": 1578,"src": 5414,"name": "SYSTEM_INFO"},{"import": 1578,"src": 5415,"name": "IO_STATUS_BLOCK"},{"import": 1457,"src": 5416,"name": "self_process_handle"},{"import": 1578,"src": 5417,"name": "FILE_INFO_BY_HANDLE_CLASS"},{"import": 1457,"src": 5418,"name": "RtlGenRandom"},{"import": 1578,"src": 5419,"name": "FILE_FLAG_NO_BUFFERING"},{"import": 1578,"src": 5420,"name": "DWORD"},{"import": 1457,"src": 5421,"name": "GetFileAttributes"},{"import": 1578,"src": 5422,"name": "FILE_ALIGNMENT_INFORMATION"},{"import": 1578,"src": 5423,"name": "STARTF_USESHOWWINDOW"},{"import": 1578,"src": 5424,"name": "FILE_DEVICE_TRUST_ENV"},{"import": 1578,"src": 5425,"name": "CONSOLE_SCREEN_BUFFER_INFO"},{"import": 1578,"src": 5426,"name": "FILE_DEVICE_STREAMS"},{"import": 1457,"src": 5427,"name": "LoadLibraryW"},{"import": 1578,"src": 5428,"name": "FOLDERID_LocalAppData"},{"import": 1578,"src": 5429,"name": "LPSTR"},{"import": 1578,"src": 5430,"name": "FILE_DEVICE_MULTI_UNC_PROVIDER"},{"import": 1578,"src": 5431,"name": "FILE_OPEN_OFFLINE_FILE"},{"import": 1457,"src": 5432,"name": "FindFirstFileError"},{"import": 1457,"src": 5433,"name": "SetHandleInformationError"},{"import": 1578,"src": 5434,"name": "FILE_OPEN_BY_FILE_ID"},{"import": 1457,"src": 5435,"name": "LoadLibraryError"},{"import": 1578,"src": 5436,"name": "FILE_DEVICE_SERIAL_PORT"},{"import": 1578,"src": 5437,"name": "RTL_CRITICAL_SECTION"},{"import": 1578,"src": 5438,"name": "CREATE_EVENT_MANUAL_RESET"},{"import": 1578,"src": 5439,"name": "FILE_ADD_FILE"},{"import": 1578,"src": 5440,"name": "FILE_DEVICE_VMBUS"},{"import": 1578,"src": 5441,"name": "FILE_DEVICE_NETWORK_REDIRECTOR"},{"import": 1578,"src": 5442,"name": "FILE_END"},{"import": 1578,"src": 5443,"name": "DELETE"},{"import": 1578,"src": 5444,"name": "DEVICE_TYPE"},{"import": 1578,"src": 5445,"name": "FILE_FLAG_SESSION_AWARE"},{"import": 1578,"src": 5446,"name": "MEM_LARGE_PAGES"},{"import": 1578,"src": 5447,"name": "STARTF_USECOUNTCHARS"},{"import": 1457,"src": 5448,"name": "peb"},{"import": 1578,"src": 5449,"name": "FileAllocationInfo"},{"import": 1578,"src": 5450,"name": "VOLUME_NAME_NONE"},{"import": 1578,"src": 5451,"name": "PAGE_EXECUTE_READ"},{"import": 1457,"src": 5452,"name": "GetFileInformationByHandleError"},{"import": 1457,"src": 5453,"name": "unexpectedError"},{"import": 1578,"src": 5454,"name": "FILE_DEVICE_PHYSICAL_NETCARD"},{"import": 1578,"src": 5455,"name": "STARTF_USEHOTKEY"},{"import": 1578,"src": 5456,"name": "INIT_ONCE"},{"import": 1578,"src": 5457,"name": "FileFullDirectoryRestartInfo"},{"import": 1578,"src": 5458,"name": "E_NOTIMPL"},{"import": 1578,"src": 5459,"name": "E_ACCESSDENIED"},{"import": 1578,"src": 5460,"name": "FILE_DEVICE_VDM"},{"import": 1457,"src": 5461,"name": "FindClose"},{"import": 1578,"src": 5462,"name": "PTHREAD_START_ROUTINE"},{"import": 1578,"src": 5463,"name": "LPCSTR"},{"import": 1578,"src": 5464,"name": "FILE_INFORMATION_CLASS"},{"import": 1578,"src": 5465,"name": "FILE_DEVICE_FULLSCREEN_VIDEO"},{"import": 1578,"src": 5466,"name": "FILE_DEVICE_KEYBOARD"},{"import": 1578,"src": 5467,"name": "REGSAM"},{"import": 1578,"src": 5468,"name": "KF_FLAG_DONT_VERIFY"},{"import": 1578,"src": 5469,"name": "FILE_DEVICE_TERMSRV"},{"import": 1457,"src": 5470,"name": "CreateDirectoryW"},{"import": 1578,"src": 5471,"name": "TransferType"},{"import": 1578,"src": 5472,"name": "FILE_ATTRIBUTE_COMPRESSED"},{"import": 1578,"src": 5473,"name": "FILE_ACTION_RENAMED_NEW_NAME"},{"import": 1578,"src": 5474,"name": "FILE_NAME_OPENED"},{"import": 1578,"src": 5475,"name": "STANDARD_RIGHTS_READ"},{"import": 1578,"src": 5476,"name": "WAIT_FAILED"},{"import": 1457,"src": 5477,"name": "cStrToPrefixedFileW"},{"import": 1457,"src": 5478,"name": "closesocket"},{"import": 1578,"src": 5479,"name": "FILE_DEVICE_MT_COMPOSITE"},{"import": 1457,"src": 5480,"name": "unexpectedWSAError"},{"import": 1578,"src": 5481,"name": "FileIdBothDirectoryRestartInfo"},{"import": 1578,"src": 5482,"name": "KF_FLAG_NO_ALIAS"},{"import": 1578,"src": 5483,"name": "VOLUME_NAME_DOS"},{"import": 1578,"src": 5484,"name": "STARTF_USEFILLATTRIBUTE"},{"import": 1578,"src": 5485,"name": "FILE_DEVICE_UCMTCPCI"},{"import": 1578,"src": 5486,"name": "ULONG_PTR"},{"import": 1578,"src": 5487,"name": "FILE_ATTRIBUTE_SYSTEM"},{"import": 1578,"src": 5488,"name": "WAIT_TIMEOUT"},{"import": 1578,"src": 5489,"name": "MOVEFILE_CREATE_HARDLINK"},{"import": 1457,"src": 5490,"name": "SetFilePointerEx_CURRENT_get"},{"import": 1578,"src": 5491,"name": "PROCESS_INFORMATION"},{"import": 1578,"src": 5492,"name": "HMODULE"},{"import": 1578,"src": 5493,"name": "STARTF_USEPOSITION"},{"import": 1457,"src": 5494,"name": "SetConsoleTextAttribute"},{"import": 1578,"src": 5495,"name": "IO_APC_ROUTINE"},{"import": 1578,"src": 5496,"name": "FILE_DEVICE_DFS_VOLUME"},{"import": 1578,"src": 5497,"name": "INIT_ONCE_STATIC_INIT"},{"import": 1578,"src": 5498,"name": "va_list"},{"import": 1457,"src": 5499,"name": "CreateFileError","kind": "const","type": 546,"value": 1580},{"import": 1578,"src": 5500,"name": "FILE_READ_ATTRIBUTES"},{"import": 1578,"src": 5501,"name": "HEAP_GENERATE_EXCEPTIONS"},{"import": 1578,"src": 5502,"name": "FILE_SUPERSEDE"},{"import": 1578,"src": 5503,"name": "FILE_FLAG_OPEN_REPARSE_POINT"},{"import": 1457,"src": 5504,"name": "SetFileTimeError"},{"import": 1578,"src": 5505,"name": "TCHAR"},{"import": 1457,"src": 5506,"name": "FindNextFileError"},{"import": 1457,"src": 5507,"name": "CreateSymbolicLink"},{"import": 1578,"src": 5508,"name": "SECURITY_ATTRIBUTES"},{"import": 1578,"src": 5509,"name": "FILE_ATTRIBUTE_TEMPORARY"},{"import": 1457,"src": 5510,"name": "WaitForMultipleObjectsEx"},{"import": 1578,"src": 5511,"name": "FILE_ATTRIBUTE_SPARSE_FILE"},{"import": 1457,"src": 5512,"name": "nanoSecondsToFileTime"},{"import": 1578,"src": 5513,"name": "STANDARD_RIGHTS_WRITE"},{"import": 1578,"src": 5514,"name": "FILE_READ_ACCESS"},{"import": 1578,"src": 5515,"name": "MEM_TOP_DOWN"},{"import": 1578,"src": 5516,"name": "PIMAGE_TLS_CALLBACK"},{"import": 1457,"src": 5517,"name": "HeapFree"},{"import": 1578,"src": 5518,"name": "FILE_DEVICE_CHANGER"},{"import": 1578,"src": 5519,"name": "FILE_ACTION_ADDED"},{"import": 1578,"src": 5520,"name": "FILE_SEQUENTIAL_ONLY"},{"import": 1578,"src": 5521,"name": "FileIdBothDirectoryInfo"},{"import": 1457,"src": 5522,"name": "CreateEventExW"},{"import": 1578,"src": 5523,"name": "FileStandardInfo"},{"import": 1457,"src": 5524,"name": "DeleteFile"},{"import": 1578,"src": 5525,"name": "GUID"},{"import": 1578,"src": 5526,"name": "FILE_DEVICE_FIPS"},{"import": 1578,"src": 5527,"name": "FILE_OPEN_FOR_RECOVERY"},{"import": 1578,"src": 5528,"name": "FOREGROUND_INTENSITY"},{"import": 1578,"src": 5529,"name": "LONG"},{"import": 1578,"src": 5530,"name": "FILE_LIST_DIRECTORY"},{"import": 1578,"src": 5531,"name": "FILE_WRITE_THROUGH"},{"import": 1457,"src": 5532,"name": "GetQueuedCompletionStatus"},{"import": 1578,"src": 5533,"name": "OBJ_CASE_INSENSITIVE"},{"import": 1578,"src": 5534,"name": "MOVEFILE_REPLACE_EXISTING"},{"import": 1578,"src": 5535,"name": "STARTF_FORCEOFFFEEDBACK"},{"import": 1578,"src": 5536,"name": "FILE_SHARE_READ"},{"import": 1578,"src": 5537,"name": "FILE_DEVICE_SYSENV"},{"import": 1457,"src": 5538,"name": "GetStdHandle"},{"import": 1578,"src": 5539,"name": "FILE_DEVICE_WAVE_IN"},{"import": 1578,"src": 5540,"name": "FILE_DEVICE_PERSISTENT_MEMORY"},{"import": 1578,"src": 5541,"name": "PPS_POST_PROCESS_INIT_ROUTINE"},{"import": 1457,"src": 5542,"name": "unexpectedStatus"},{"import": 1578,"src": 5543,"name": "STANDARD_RIGHTS_REQUIRED"},{"import": 1578,"src": 5544,"name": "STD_ERROR_HANDLE"},{"import": 1457,"src": 5545,"name": "DeleteFileW"},{"import": 1578,"src": 5546,"name": "FILE_TRAVERSE"},{"import": 1578,"src": 5547,"name": "FILE_DEVICE_TAPE"},{"import": 1578,"src": 5548,"name": "MOVEFILE_WRITE_THROUGH"},{"import": 1578,"src": 5549,"name": "FOREGROUND_GREEN"},{"import": 1578,"src": 5550,"name": "FILE_ATTRIBUTE_HIDDEN"},{"import": 1578,"src": 5551,"name": "FORMAT_MESSAGE_FROM_HMODULE"},{"import": 1578,"src": 5552,"name": "FILE_SHARE_DELETE"},{"import": 1578,"src": 5553,"name": "FileStorageInfo"},{"import": 1578,"src": 5554,"name": "FILE_NAME_INFO"},{"import": 1578,"src": 5555,"name": "ULONG"},{"import": 1578,"src": 5556,"name": "FILE_DEVICE_VIDEO"},{"import": 1578,"src": 5557,"name": "FILE_DEVICE_BIOMETRIC"},{"import": 1578,"src": 5558,"name": "RTL_RUN_ONCE"},{"import": 1578,"src": 5559,"name": "GENERIC_EXECUTE"},{"import": 1578,"src": 5560,"name": "LPDWORD"},{"import": 1457,"src": 5561,"name": "CreateIoCompletionPortError"},{"import": 1578,"src": 5562,"name": "MEM_WRITE_WATCH"},{"import": 1578,"src": 5563,"name": "FILE_DEVICE_KSEC"},{"import": 1578,"src": 5564,"name": "LSTATUS"},{"import": 1578,"src": 5565,"name": "BYTE"},{"import": 1578,"src": 5566,"name": "FILE_ATTRIBUTE_DEVICE"},{"import": 1578,"src": 5567,"name": "STARTUPINFOW"},{"import": 1578,"src": 5568,"name": "HEAP_CREATE_ENABLE_EXECUTE"},{"import": 1457,"src": 5569,"name": "SetFilePointerError"},{"import": 1457,"src": 5570,"name": "GetEnvironmentVariableW"},{"import": 1578,"src": 5571,"name": "FLOAT"},{"import": 1578,"src": 5572,"name": "FILE_ATTRIBUTE_INTEGRITY_STREAM"},{"import": 1578,"src": 5573,"name": "KNOWNFOLDERID"},{"import": 1578,"src": 5574,"name": "OVERLAPPED"},{"import": 1578,"src": 5575,"name": "FILE_BEGIN"},{"import": 1457,"src": 5576,"name": "CreateEventEx"},{"import": 1578,"src": 5577,"name": "DWORD_PTR"},{"import": 1578,"src": 5578,"name": "FILE_FLAG_SEQUENTIAL_SCAN"},{"import": 1578,"src": 5579,"name": "ACCESS_MASK"},{"import": 1578,"src": 5580,"name": "CREATE_NEW"},{"import": 1578,"src": 5581,"name": "FILE_DEVICE_BLUETOOTH"},{"import": 1578,"src": 5582,"name": "PATH_MAX_WIDE"},{"import": 1457,"src": 5583,"name": "SetFileTime"},{"import": 1578,"src": 5584,"name": "CRITICAL_SECTION"},{"import": 1457,"src": 5585,"name": "GetFileSizeError"},{"import": 1578,"src": 5586,"name": "OPEN_ALWAYS"},{"import": 1457,"src": 5587,"name": "CreateFileW"},{"import": 1578,"src": 5588,"name": "FILE_WRITE_ATTRIBUTES"},{"import": 1578,"src": 5589,"name": "FILE_ATTRIBUTE_RECALL_ON_OPEN"},{"import": 1578,"src": 5590,"name": "STD_INPUT_HANDLE"},{"import": 1578,"src": 5591,"name": "FILE_DEVICE_TRANSPORT"},{"import": 1578,"src": 5592,"name": "FILE_DEVICE_ACPI"},{"import": 1578,"src": 5593,"name": "MAXIMUM_WAIT_OBJECTS"},{"import": 1457,"src": 5594,"name": "GetFileSizeEx"},{"import": 1457,"src": 5595,"name": "GetFileInformationByHandle"},{"import": 1457,"src": 5596,"name": "advapi32"},{"import": 1578,"src": 5597,"name": "FILE_NOTIFY_CHANGE_SECURITY"},{"import": 1578,"src": 5598,"name": "IMAGE_TLS_DIRECTORY32"},{"import": 1578,"src": 5599,"name": "SIZE_T"},{"import": 1578,"src": 5600,"name": "EVENT_ALL_ACCESS"},{"import": 1578,"src": 5601,"name": "KF_FLAG_DEFAULT"},{"import": 1578,"src": 5602,"name": "FOREGROUND_BLUE"},{"import": 1578,"src": 5603,"name": "FILE_DEVICE_NULL"},{"import": 1578,"src": 5604,"name": "FILE_NOTIFY_CHANGE_LAST_WRITE"},{"import": 1457,"src": 5605,"name": "GetEnvironmentStringsError"},{"import": 1578,"src": 5606,"name": "FILE_INTERNAL_INFORMATION"},{"import": 1578,"src": 5607,"name": "FILE_ANY_ACCESS"},{"import": 1578,"src": 5608,"name": "SMALL_RECT"},{"import": 1457,"src": 5609,"name": "GetStdHandleError"},{"import": 1457,"src": 5610,"name": "SetFilePointerEx_END"},{"import": 1578,"src": 5611,"name": "FILE_DEVICE_DFS"},{"import": 1578,"src": 5612,"name": "PAGE_EXECUTE"},{"import": 1578,"src": 5613,"name": "WAIT_ABANDONED"},{"import": 1578,"src": 5614,"name": "FILE_ATTRIBUTE_VIRTUAL"},{"import": 1578,"src": 5615,"name": "PEB"},{"import": 1578,"src": 5616,"name": "FILE_DIRECTORY_FILE"},{"import": 1457,"src": 5617,"name": "kernel32"},{"import": 1578,"src": 5618,"name": "FILE_DEVICE_PARALLEL_PORT"},{"import": 1578,"src": 5619,"name": "PAGE_EXECUTE_READWRITE"},{"import": 1457,"src": 5620,"name": "CreateFile"},{"import": 1457,"src": 5621,"name": "CreateProcessW"},{"import": 1457,"src": 5622,"name": "assert"},{"import": 1457,"src": 5623,"name": "MAKELANGID"},{"import": 1457,"src": 5624,"name": "math"},{"import": 1457,"src": 5625,"name": "std"},{"import": 1457,"src": 5626,"name": "maxInt"},{"import": 1457,"src": 5627,"name": "builtin"},{"import": 1457,"src": 5628,"name": "GetModuleFileNameError"},{"import": 1457,"src": 5629,"name": "mem"},{"import": 1472,"src": 162,"name": "readULEB128","kind": "const","type": 1587,"value": 869},{"import": 1472,"src": 196,"name": "readILEB128","kind": "const","type": 1588,"value": 870},{"import": 1472,"src": 5630,"name": "readILEB128Mem"},{"import": 1472,"src": 5631,"name": "readULEB128Mem"},{"import": 1472,"src": 5632,"name": "test_read_ileb128"},{"import": 1472,"src": 5633,"name": "test_read_uleb128_seq"},{"import": 1472,"src": 5634,"name": "test_read_stream_ileb128"},{"import": 1472,"src": 5635,"name": "test_read_uleb128"},{"import": 1472,"src": 5636,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1472,"src": 5637,"name": "testing"},{"import": 1472,"src": 5638,"name": "test_read_ileb128_seq"},{"import": 1472,"src": 5639,"name": "test_read_stream_uleb128"},{"import": 1147,"src": 5640,"name": "addressLessThan"},{"import": 1147,"src": 5641,"name": "address"},{"import": 1154,"src": 5642,"name": "getStream"},{"import": 1154,"src": 5643,"name": "openFile"},{"import": 1154,"src": 5644,"name": "getStreamById"},{"import": 1154,"src": 5645,"name": "openFile"},{"import": 1155,"src": 5646,"name": "loadSections"},{"import": 1155,"src": 5647,"name": "getSection"},{"import": 1155,"src": 5648,"name": "init"},{"import": 1155,"src": 5649,"name": "getPdbPath"},{"import": 1155,"src": 5650,"name": "loadHeader"},{"import": 1155,"src": 5651,"name": "loadOptionalHeader"},{"import": 1155,"src": 5652,"name": "DataDirectory","kind": "const","type": 546,"value": 1596},{"import": 1521,"src": 5653,"name": "HashStrategy","kind": "const","type": 546,"value": 1598},{"import": 1521,"src": 373,"name": "hash","kind": "const","type": 1599,"value": 871},{"import": 1521,"src": 5654,"name": "hashArray"},{"import": 1521,"src": 370,"name": "autoHash","kind": "const","type": 1386,"value": 800},{"import": 1521,"src": 5655,"name": "hashPointer"},{"import": 1521,"src": 5656,"name": "builtin"},{"import": 1521,"src": 5657,"name": "testHashDeep"},{"import": 1521,"src": 5658,"name": "Wyhash"},{"import": 1521,"src": 5659,"name": "testHash"},{"import": 1521,"src": 5660,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1521,"src": 5661,"name": "testHashDeepRecursive"},{"import": 1521,"src": 5662,"name": "testHashShallow"},{"import": 1521,"src": 5663,"name": "meta","kind": "const","type": 546,"value": 1157},{"import": 1521,"src": 5664,"name": "assert"},{"import": 1521,"src": 5665,"name": "testing"},{"import": 1521,"src": 5666,"name": "mem"},{"import": 1525,"src": 5667,"name": "isAbsoluteW"},{"import": 1525,"src": 5668,"name": "delimiter_windows"},{"import": 1525,"src": 5669,"name": "isAbsoluteWindowsC"},{"import": 1525,"src": 5670,"name": "isAbsolutePosix"},{"import": 1525,"src": 5671,"name": "dirname"},{"import": 1525,"src": 285,"name": "isAbsoluteC","kind": "const","type": 381,"value": 476},{"import": 1525,"src": 5672,"name": "relative"},{"import": 1525,"src": 5673,"name": "resolvePosix"},{"import": 1525,"src": 314,"name": "isAbsolutePosixC","kind": "const","type": 381,"value": 543},{"import": 1525,"src": 5674,"name": "basenameWindows"},{"import": 1525,"src": 5675,"name": "dirnameWindows"},{"import": 1525,"src": 5676,"name": "isAbsoluteWindows"},{"import": 1525,"src": 5677,"name": "basename"},{"import": 1525,"src": 193,"name": "joinPosix","kind": "const","type": 276,"value": 329},{"import": 1525,"src": 5678,"name": "sep_str_windows"},{"import": 1525,"src": 5679,"name": "dirnamePosix"},{"import": 1525,"src": 5680,"name": "windowsParsePath"},{"import": 1525,"src": 5681,"name": "relativeWindows"},{"import": 1525,"src": 5682,"name": "sep_str_posix"},{"import": 1525,"src": 5683,"name": "isAbsolute"},{"import": 1525,"src": 5684,"name": "delimiter_posix"},{"import": 1525,"src": 5685,"name": "joinWindows"},{"import": 1525,"src": 5686,"name": "sep"},{"import": 1525,"src": 5687,"name": "diskDesignator"},{"import": 1525,"src": 5688,"name": "resolveWindows"},{"import": 1525,"src": 5689,"name": "WindowsPath"},{"import": 1525,"src": 5690,"name": "diskDesignatorWindows"},{"import": 1525,"src": 5691,"name": "sep_str"},{"import": 1525,"src": 5692,"name": "isSep"},{"import": 1525,"src": 5693,"name": "relativePosix"},{"import": 1525,"src": 5694,"name": "resolve"},{"import": 1525,"src": 5695,"name": "sep_windows"},{"import": 1525,"src": 5696,"name": "sep_posix","kind": "const","type": 599,"value": null},{"import": 1525,"src": 5697,"name": "join","kind": "const","type": 276,"value": 329},{"import": 1525,"src": 5698,"name": "delimiter"},{"import": 1525,"src": 5699,"name": "basenamePosix"},{"import": 1525,"src": 5700,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1525,"src": 194,"name": "joinSep","kind": "const","type": 277,"value": 330},{"import": 1525,"src": 5701,"name": "asciiEqlIgnoreCase"},{"import": 1525,"src": 5702,"name": "math"},{"import": 1525,"src": 5703,"name": "testIsAbsolutePosix"},{"import": 1525,"src": 5704,"name": "debug"},{"import": 1525,"src": 5705,"name": "testing"},{"import": 1525,"src": 5706,"name": "testResolvePosix"},{"import": 1525,"src": 5707,"name": "testBasenameWindows"},{"import": 1525,"src": 5708,"name": "Allocator","kind": "const","type": 546,"value": 1169},{"import": 1525,"src": 5709,"name": "testDirnameWindows"},{"import": 1525,"src": 5710,"name": "fmt"},{"import": 1525,"src": 5711,"name": "testIsAbsoluteWindows"},{"import": 1525,"src": 5712,"name": "testBasename"},{"import": 1525,"src": 5713,"name": "testJoinPosix"},{"import": 1525,"src": 5714,"name": "testDirnamePosix"},{"import": 1525,"src": 5715,"name": "networkShareServersEql"},{"import": 1525,"src": 5716,"name": "testRelativeWindows"},{"import": 1525,"src": 5717,"name": "compareDiskDesignators"},{"import": 1525,"src": 5718,"name": "asciiUpper"},{"import": 1525,"src": 5719,"name": "testJoinWindows"},{"import": 1525,"src": 5720,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1525,"src": 5721,"name": "testResolveWindows"},{"import": 1525,"src": 5722,"name": "fs"},{"import": 1525,"src": 5723,"name": "testRelativePosix"},{"import": 1525,"src": 5724,"name": "windows"},{"import": 1525,"src": 5725,"name": "process"},{"import": 1525,"src": 5726,"name": "testBasenamePosix"},{"import": 1525,"src": 5727,"name": "assert"},{"import": 1525,"src": 5728,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1159,"src": 239,"name": "shrink","kind": "const","type": 48,"value": 393},{"import": 1159,"src": 238,"name": "realloc","kind": "const","type": 322,"value": 392},{"import": 1159,"src": 240,"name": "alloc","kind": "const","type": 323,"value": 394},{"import": 1534,"src": 5729,"name": "SpinLock","kind": "const","type": 546,"value": 1163},{"import": 1534,"src": 5730,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1534,"src": 5731,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1109,"src": 5732,"name": "Inline","kind": "const","type": 546,"value": 1609},{"import": 1573,"src": 118,"name": "initTLS","kind": "const","type": 125,"value": 175},{"import": 1573,"src": 119,"name": "allocateTLS","kind": "const","type": 126,"value": 176},{"import": 1573,"src": 120,"name": "copyTLS","kind": "const","type": 126,"value": 177},{"import": 1573,"src": 121,"name": "setThreadPointer","kind": "const","type": 127,"value": 178},{"import": 1573,"src": 5733,"name": "tls_image","kind": "var","type": 1612,"value": null},{"import": 1573,"src": 5734,"name": "builtin","kind": "const","type": 546,"value": 668},{"import": 1573,"src": 5735,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1573,"src": 5736,"name": "os","kind": "const","type": 546,"value": 1146},{"import": 1573,"src": 5737,"name": "tls_tp_points_past_tcb","kind": "const","type": 565,"value": null},{"import": 1573,"src": 5738,"name": "tls_tcb_align_size","kind": "const","type": 565,"value": null},{"import": 1573,"src": 5739,"name": "main_thread_tls_buffer","kind": "var","type": 1613,"value": "undefined"},{"import": 1573,"src": 5740,"name": "tls_variant","kind": "const","type": 1614,"value": null},{"import": 1573,"src": 5741,"name": "elf","kind": "const","type": 546,"value": 1150},{"import": 1573,"src": 5742,"name": "tls_dtv_offset","kind": "const","type": 599,"value": null},{"import": 1573,"src": 5743,"name": "DTV","kind": "const","type": 546,"value": 1615},{"import": 1573,"src": 5744,"name": "CustomData","kind": "const","type": 546,"value": 1616},{"import": 1573,"src": 5745,"name": "tls_tp_offset","kind": "const","type": 599,"value": null},{"import": 1573,"src": 5746,"name": "tls_tcb_size","kind": "const","type": 599,"value": null},{"import": 1573,"src": 5747,"name": "assert","kind": "const","type": 4,"value": 4},{"import": 1573,"src": 5748,"name": "TLSVariant","kind": "const","type": 546,"value": 1614},{"import": 1573,"src": 5749,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1573,"src": 5750,"name": "TLSImage","kind": "const","type": 546,"value": 1617},{"import": 1575,"src": 359,"name": "lookup","kind": "const","type": 516,"value": 690},{"import": 1575,"src": 361,"name": "checkver","kind": "const","type": 519,"value": 703},{"import": 1575,"src": 5751,"name": "std","kind": "const","type": 546,"value": 669},{"import": 1575,"src": 5752,"name": "elf","kind": "const","type": 546,"value": 1150},{"import": 1575,"src": 5753,"name": "maxInt","kind": "const","type": 616,"value": 766},{"import": 1575,"src": 5754,"name": "linux","kind": "const","type": 546,"value": 1455},{"import": 1575,"src": 5755,"name": "mem","kind": "const","type": 546,"value": 1143},{"import": 1578,"src": 5756,"name": "assert"},{"import": 1578,"src": 5757,"name": "std"},{"import": 1578,"src": 5758,"name": "maxInt"},{"import": 1578,"src": 5759,"name": "builtin"}],"fns": [{"src": 0,"type": 0},{"src": 1,"type": 1},{"src": 2,"type": 2},{"src": 3,"type": 3},{"src": 4,"type": 4},{"src": 5,"type": 5},{"src": 6,"type": 5},{"src": 7,"type": 5},{"src": 8,"type": 5},{"src": 9,"type": 5},{"src": 10,"type": 5},{"src": 11,"type": 5},{"src": 12,"type": 5},{"src": 13,"type": 5},{"src": 14,"type": 5},{"src": 15,"type": 6},{"src": 16,"type": 7},{"src": 17,"type": 8},{"src": 18,"type": 9},{"src": 19,"type": 10},{"src": 20,"type": 11},{"src": 21,"type": 12},{"src": 22,"type": 13},{"src": 23,"type": 14},{"src": 24,"type": 15},{"src": 25,"type": 16},{"src": 26,"type": 17},{"src": 27,"type": 18},{"src": 28,"type": 19},{"src": 29,"type": 1},{"src": 30,"type": 2},{"src": 31,"type": 3},{"src": 32,"type": 20},{"src": 33,"type": 21},{"src": 34,"type": 20},{"src": 35,"type": 20},{"src": 36,"type": 20},{"src": 37,"type": 22},{"src": 38,"type": 23},{"src": 39,"type": 24},{"src": 40,"type": 24},{"src": 32,"type": 25},{"src": 33,"type": 26},{"src": 34,"type": 25},{"src": 35,"type": 25},{"src": 36,"type": 25},{"src": 37,"type": 27},{"src": 38,"type": 28},{"src": 39,"type": 29},{"src": 40,"type": 29},{"src": 41,"type": 25},{"src": 32,"type": 30},{"src": 33,"type": 31},{"src": 34,"type": 30},{"src": 35,"type": 30},{"src": 36,"type": 30},{"src": 37,"type": 32},{"src": 38,"type": 33},{"src": 39,"type": 34},{"src": 40,"type": 34},{"src": 42,"type": 35},{"src": 43,"type": 35},{"src": 44,"type": 36},{"src": 45,"type": 36},{"src": 46,"type": 37},{"src": 33,"type": 38},{"src": 47,"type": 39},{"src": 48,"type": 40},{"src": 49,"type": 41},{"src": 50,"type": 42},{"src": 51,"type": 43},{"src": 52,"type": 44},{"src": 53,"type": 45},{"src": 54,"type": 46},{"src": 55,"type": 47},{"src": 56,"type": 47},{"src": 57,"type": 48},{"src": 58,"type": 49},{"src": 59,"type": 50},{"src": 60,"type": 51},{"src": 61,"type": 52},{"src": 62,"type": 53},{"src": 63,"type": 54},{"src": 64,"type": 55},{"src": 65,"type": 56},{"src": 66,"type": 57},{"src": 67,"type": 52},{"src": 68,"type": 58},{"src": 69,"type": 59},{"src": 70,"type": 60},{"src": 62,"type": 61},{"src": 63,"type": 62},{"src": 68,"type": 63},{"src": 70,"type": 64},{"src": 62,"type": 65},{"src": 63,"type": 66},{"src": 68,"type": 67},{"src": 70,"type": 68},{"src": 71,"type": 69},{"src": 72,"type": 70},{"src": 62,"type": 71},{"src": 63,"type": 72},{"src": 68,"type": 73},{"src": 73,"type": 74},{"src": 74,"type": 75},{"src": 75,"type": 76},{"src": 76,"type": 77},{"src": 77,"type": 78},{"src": 78,"type": 79},{"src": 74,"type": 80},{"src": 79,"type": 81},{"src": 80,"type": 82},{"src": 63,"type": 83},{"src": 74,"type": 84},{"src": 81,"type": 85},{"src": 82,"type": 86},{"src": 83,"type": 87},{"src": 84,"type": 88},{"src": 85,"type": 85},{"src": 86,"type": 89},{"src": 87,"type": 90},{"src": 88,"type": 91},{"src": 89,"type": 20},{"src": 90,"type": 92},{"src": 91,"type": 20},{"src": 92,"type": 93},{"src": 33,"type": 94},{"src": 93,"type": 95},{"src": 89,"type": 25},{"src": 94,"type": 96},{"src": 95,"type": 97},{"src": 91,"type": 25},{"src": 92,"type": 98},{"src": 96,"type": 96},{"src": 89,"type": 30},{"src": 91,"type": 30},{"src": 92,"type": 99},{"src": 97,"type": 100},{"src": 98,"type": 101},{"src": 99,"type": 102},{"src": 100,"type": 103},{"src": 101,"type": 104},{"src": 102,"type": 103},{"src": 103,"type": 105},{"src": 104,"type": 106},{"src": 33,"type": 107},{"src": 105,"type": 34},{"src": 105,"type": 34},{"src": 105,"type": 34},{"src": 105,"type": 34},{"src": 106,"type": 108},{"src": 107,"type": 47},{"src": 108,"type": 52},{"src": 109,"type": 54},{"src": 72,"type": 109},{"src": 110,"type": 110},{"src": 63,"type": 111},{"src": 109,"type": 62},{"src": 72,"type": 112},{"src": 110,"type": 113},{"src": 63,"type": 114},{"src": 109,"type": 66},{"src": 110,"type": 115},{"src": 63,"type": 116},{"src": 111,"type": 117},{"src": 109,"type": 72},{"src": 72,"type": 118},{"src": 110,"type": 119},{"src": 112,"type": 120},{"src": 113,"type": 121},{"src": 114,"type": 122},{"src": 115,"type": 123},{"src": 116,"type": 124},{"src": 117,"type": 82},{"src": 109,"type": 83},{"src": 118,"type": 125},{"src": 119,"type": 126},{"src": 120,"type": 126},{"src": 121,"type": 127},{"src": 122,"type": 128},{"src": 123,"type": 129},{"src": 124,"type": 130},{"src": 125,"type": 131},{"src": 126,"type": 132},{"src": 127,"type": 133},{"src": 128,"type": 134},{"src": 129,"type": 135},{"src": 130,"type": 136},{"src": 131,"type": 137},{"src": 132,"type": 138},{"src": 133,"type": 139},{"src": 134,"type": 140},{"src": 135,"type": 141},{"src": 136,"type": 142},{"src": 114,"type": 143},{"src": 137,"type": 144},{"src": 138,"type": 145},{"src": 139,"type": 146},{"src": 140,"type": 147},{"src": 141,"type": 148},{"src": 59,"type": 149},{"src": 61,"type": 150},{"src": 66,"type": 151},{"src": 67,"type": 150},{"src": 142,"type": 152},{"src": 143,"type": 153},{"src": 144,"type": 154},{"src": 145,"type": 155},{"src": 143,"type": 156},{"src": 144,"type": 157},{"src": 145,"type": 158},{"src": 144,"type": 159},{"src": 145,"type": 160},{"src": 116,"type": 161},{"src": 146,"type": 162},{"src": 147,"type": 163},{"src": 63,"type": 164},{"src": 110,"type": 165},{"src": 148,"type": 166},{"src": 149,"type": 167},{"src": 150,"type": 168},{"src": 151,"type": 169},{"src": 152,"type": 170},{"src": 152,"type": 171},{"src": 152,"type": 172},{"src": 153,"type": 173},{"src": 154,"type": 174},{"src": 155,"type": 175},{"src": 117,"type": 176},{"src": 155,"type": 177},{"src": 156,"type": 162},{"src": 157,"type": 178},{"src": 158,"type": 179},{"src": 159,"type": 180},{"src": 160,"type": 181},{"src": 152,"type": 182},{"src": 161,"type": 183},{"src": 162,"type": 184},{"src": 159,"type": 185},{"src": 152,"type": 186},{"src": 163,"type": 187},{"src": 164,"type": 188},{"src": 165,"type": 189},{"src": 166,"type": 190},{"src": 167,"type": 191},{"src": 159,"type": 192},{"src": 163,"type": 193},{"src": 164,"type": 194},{"src": 165,"type": 195},{"src": 166,"type": 196},{"src": 167,"type": 197},{"src": 163,"type": 198},{"src": 164,"type": 199},{"src": 165,"type": 200},{"src": 166,"type": 201},{"src": 167,"type": 202},{"src": 168,"type": 203},{"src": 169,"type": 204},{"src": 152,"type": 205},{"src": 170,"type": 206},{"src": 164,"type": 207},{"src": 165,"type": 208},{"src": 166,"type": 209},{"src": 171,"type": 210},{"src": 172,"type": 211},{"src": 173,"type": 212},{"src": 174,"type": 213},{"src": 175,"type": 214},{"src": 176,"type": 215},{"src": 177,"type": 216},{"src": 178,"type": 217},{"src": 159,"type": 218},{"src": 163,"type": 219},{"src": 164,"type": 220},{"src": 165,"type": 221},{"src": 166,"type": 222},{"src": 167,"type": 223},{"src": 179,"type": 224},{"src": 70,"type": 225},{"src": 159,"type": 226},{"src": 163,"type": 227},{"src": 164,"type": 228},{"src": 165,"type": 229},{"src": 166,"type": 230},{"src": 167,"type": 231},{"src": 84,"type": 232},{"src": 180,"type": 233},{"src": 181,"type": 234},{"src": 182,"type": 235},{"src": 183,"type": 236},{"src": 184,"type": 237},{"src": 185,"type": 238},{"src": 158,"type": 239},{"src": 186,"type": 240},{"src": 155,"type": 241},{"src": 117,"type": 242},{"src": 84,"type": 243},{"src": 84,"type": 244},{"src": 187,"type": 245},{"src": 188,"type": 246},{"src": 152,"type": 247},{"src": 159,"type": 248},{"src": 163,"type": 249},{"src": 164,"type": 250},{"src": 165,"type": 251},{"src": 166,"type": 252},{"src": 167,"type": 253},{"src": 189,"type": 254},{"src": 190,"type": 255},{"src": 152,"type": 256},{"src": 159,"type": 257},{"src": 163,"type": 258},{"src": 164,"type": 259},{"src": 165,"type": 260},{"src": 166,"type": 261},{"src": 167,"type": 262},{"src": 158,"type": 263},{"src": 152,"type": 264},{"src": 191,"type": 265},{"src": 171,"type": 266},{"src": 162,"type": 267},{"src": 159,"type": 268},{"src": 163,"type": 269},{"src": 164,"type": 270},{"src": 165,"type": 271},{"src": 166,"type": 272},{"src": 167,"type": 273},{"src": 114,"type": 274},{"src": 192,"type": 275},{"src": 193,"type": 276},{"src": 194,"type": 277},{"src": 195,"type": 278},{"src": 144,"type": 279},{"src": 145,"type": 280},{"src": 196,"type": 281},{"src": 197,"type": 282},{"src": 198,"type": 283},{"src": 84,"type": 284},{"src": 199,"type": 285},{"src": 200,"type": 286},{"src": 201,"type": 287},{"src": 202,"type": 288},{"src": 84,"type": 289},{"src": 203,"type": 290},{"src": 84,"type": 291},{"src": 84,"type": 292},{"src": 84,"type": 293},{"src": 84,"type": 294},{"src": 204,"type": 295},{"src": 205,"type": 296},{"src": 206,"type": 297},{"src": 84,"type": 298},{"src": 207,"type": 299},{"src": 208,"type": 300},{"src": 84,"type": 301},{"src": 209,"type": 302},{"src": 210,"type": 303},{"src": 211,"type": 24},{"src": 211,"type": 24},{"src": 56,"type": 303},{"src": 212,"type": 29},{"src": 212,"type": 29},{"src": 212,"type": 29},{"src": 213,"type": 95},{"src": 214,"type": 95},{"src": 215,"type": 95},{"src": 216,"type": 95},{"src": 33,"type": 304},{"src": 217,"type": 305},{"src": 218,"type": 306},{"src": 109,"type": 111},{"src": 109,"type": 114},{"src": 109,"type": 116},{"src": 219,"type": 307},{"src": 220,"type": 308},{"src": 221,"type": 309},{"src": 222,"type": 310},{"src": 223,"type": 311},{"src": 224,"type": 312},{"src": 225,"type": 86},{"src": 226,"type": 313},{"src": 227,"type": 314},{"src": 228,"type": 315},{"src": 229,"type": 316},{"src": 230,"type": 288},{"src": 231,"type": 317},{"src": 232,"type": 318},{"src": 233,"type": 316},{"src": 234,"type": 319},{"src": 235,"type": 320},{"src": 236,"type": 138},{"src": 237,"type": 321},{"src": 238,"type": 322},{"src": 239,"type": 48},{"src": 240,"type": 323},{"src": 241,"type": 324},{"src": 242,"type": 325},{"src": 243,"type": 326},{"src": 244,"type": 327},{"src": 245,"type": 328},{"src": 246,"type": 329},{"src": 247,"type": 330},{"src": 248,"type": 330},{"src": 249,"type": 331},{"src": 80,"type": 176},{"src": 117,"type": 332},{"src": 80,"type": 332},{"src": 109,"type": 164},{"src": 250,"type": 190},{"src": 250,"type": 196},{"src": 250,"type": 201},{"src": 171,"type": 333},{"src": 250,"type": 209},{"src": 251,"type": 334},{"src": 252,"type": 335},{"src": 253,"type": 336},{"src": 254,"type": 337},{"src": 254,"type": 338},{"src": 254,"type": 339},{"src": 254,"type": 340},{"src": 254,"type": 341},{"src": 255,"type": 342},{"src": 256,"type": 343},{"src": 257,"type": 344},{"src": 70,"type": 345},{"src": 72,"type": 346},{"src": 171,"type": 347},{"src": 250,"type": 222},{"src": 63,"type": 348},{"src": 250,"type": 230},{"src": 127,"type": 349},{"src": 258,"type": 350},{"src": 259,"type": 351},{"src": 260,"type": 352},{"src": 127,"type": 353},{"src": 127,"type": 354},{"src": 250,"type": 252},{"src": 250,"type": 261},{"src": 250,"type": 272},{"src": 80,"type": 242},{"src": 171,"type": 355},{"src": 127,"type": 356},{"src": 261,"type": 357},{"src": 127,"type": 358},{"src": 110,"type": 359},{"src": 127,"type": 360},{"src": 127,"type": 361},{"src": 127,"type": 362},{"src": 127,"type": 363},{"src": 127,"type": 364},{"src": 262,"type": 365},{"src": 263,"type": 366},{"src": 127,"type": 367},{"src": 264,"type": 366},{"src": 265,"type": 95},{"src": 266,"type": 95},{"src": 267,"type": 95},{"src": 268,"type": 95},{"src": 269,"type": 368},{"src": 270,"type": 369},{"src": 88,"type": 370},{"src": 271,"type": 47},{"src": 272,"type": 86},{"src": 273,"type": 313},{"src": 274,"type": 371},{"src": 275,"type": 372},{"src": 276,"type": 373},{"src": 277,"type": 374},{"src": 278,"type": 126},{"src": 279,"type": 375},{"src": 280,"type": 376},{"src": 281,"type": 377},{"src": 109,"type": 378},{"src": 282,"type": 379},{"src": 283,"type": 48},{"src": 284,"type": 380},{"src": 285,"type": 381},{"src": 286,"type": 382},{"src": 287,"type": 383},{"src": 288,"type": 383},{"src": 289,"type": 383},{"src": 290,"type": 384},{"src": 109,"type": 385},{"src": 110,"type": 386},{"src": 109,"type": 387},{"src": 110,"type": 388},{"src": 109,"type": 389},{"src": 110,"type": 390},{"src": 109,"type": 391},{"src": 110,"type": 392},{"src": 291,"type": 393},{"src": 292,"type": 394},{"src": 155,"type": 395},{"src": 117,"type": 396},{"src": 155,"type": 397},{"src": 63,"type": 398},{"src": 109,"type": 399},{"src": 110,"type": 400},{"src": 109,"type": 348},{"src": 109,"type": 401},{"src": 110,"type": 402},{"src": 231,"type": 317},{"src": 293,"type": 403},{"src": 294,"type": 404},{"src": 295,"type": 48},{"src": 296,"type": 405},{"src": 297,"type": 406},{"src": 298,"type": 407},{"src": 231,"type": 408},{"src": 231,"type": 408},{"src": 109,"type": 409},{"src": 110,"type": 410},{"src": 109,"type": 66},{"src": 109,"type": 411},{"src": 110,"type": 412},{"src": 231,"type": 317},{"src": 231,"type": 413},{"src": 231,"type": 408},{"src": 299,"type": 414},{"src": 231,"type": 317},{"src": 231,"type": 413},{"src": 231,"type": 408},{"src": 231,"type": 408},{"src": 231,"type": 415},{"src": 231,"type": 408},{"src": 231,"type": 415},{"src": 231,"type": 317},{"src": 300,"type": 86},{"src": 301,"type": 416},{"src": 302,"type": 417},{"src": 303,"type": 417},{"src": 304,"type": 127},{"src": 305,"type": 417},{"src": 306,"type": 418},{"src": 307,"type": 418},{"src": 308,"type": 419},{"src": 309,"type": 95},{"src": 310,"type": 420},{"src": 84,"type": 421},{"src": 311,"type": 422},{"src": 312,"type": 5},{"src": 88,"type": 423},{"src": 313,"type": 424},{"src": 314,"type": 381},{"src": 315,"type": 425},{"src": 109,"type": 385},{"src": 109,"type": 387},{"src": 109,"type": 389},{"src": 109,"type": 391},{"src": 109,"type": 398},{"src": 109,"type": 399},{"src": 109,"type": 401},{"src": 277,"type": 374},{"src": 316,"type": 426},{"src": 316,"type": 426},{"src": 109,"type": 409},{"src": 109,"type": 411},{"src": 277,"type": 374},{"src": 316,"type": 427},{"src": 316,"type": 426},{"src": 277,"type": 374},{"src": 316,"type": 427},{"src": 316,"type": 426},{"src": 316,"type": 426},{"src": 277,"type": 374},{"src": 316,"type": 426},{"src": 277,"type": 374},{"src": 277,"type": 374},{"src": 317,"type": 428},{"src": 318,"type": 429},{"src": 319,"type": 430},{"src": 320,"type": 431},{"src": 321,"type": 430},{"src": 322,"type": 95},{"src": 127,"type": 432},{"src": 88,"type": 433},{"src": 88,"type": 434},{"src": 323,"type": 435},{"src": 324,"type": 436},{"src": 325,"type": 352},{"src": 326,"type": 437},{"src": 327,"type": 438},{"src": 328,"type": 439},{"src": 329,"type": 440},{"src": 88,"type": 441},{"src": 330,"type": 439},{"src": 88,"type": 442},{"src": 331,"type": 443},{"src": 331,"type": 444},{"src": 88,"type": 445},{"src": 88,"type": 446},{"src": 88,"type": 447},{"src": 84,"type": 448},{"src": 332,"type": 449},{"src": 333,"type": 426},{"src": 333,"type": 426},{"src": 333,"type": 427},{"src": 333,"type": 426},{"src": 333,"type": 427},{"src": 333,"type": 426},{"src": 333,"type": 426},{"src": 333,"type": 426},{"src": 334,"type": 450},{"src": 335,"type": 451},{"src": 336,"type": 452},{"src": 337,"type": 453},{"src": 338,"type": 454},{"src": 231,"type": 408},{"src": 84,"type": 455},{"src": 84,"type": 456},{"src": 84,"type": 457},{"src": 339,"type": 458},{"src": 340,"type": 459},{"src": 341,"type": 459},{"src": 342,"type": 460},{"src": 342,"type": 461},{"src": 343,"type": 462},{"src": 343,"type": 463},{"src": 343,"type": 464},{"src": 343,"type": 465},{"src": 343,"type": 466},{"src": 343,"type": 467},{"src": 343,"type": 468},{"src": 344,"type": 469},{"src": 84,"type": 470},{"src": 345,"type": 440},{"src": 346,"type": 439},{"src": 84,"type": 471},{"src": 84,"type": 472},{"src": 84,"type": 473},{"src": 84,"type": 474},{"src": 84,"type": 475},{"src": 84,"type": 476},{"src": 127,"type": 477},{"src": 347,"type": 478},{"src": 347,"type": 479},{"src": 348,"type": 480},{"src": 316,"type": 426},{"src": 127,"type": 481},{"src": 127,"type": 482},{"src": 127,"type": 483},{"src": 349,"type": 484},{"src": 350,"type": 485},{"src": 351,"type": 485},{"src": 352,"type": 486},{"src": 127,"type": 487},{"src": 127,"type": 488},{"src": 342,"type": 489},{"src": 342,"type": 490},{"src": 342,"type": 491},{"src": 342,"type": 492},{"src": 342,"type": 493},{"src": 342,"type": 494},{"src": 342,"type": 495},{"src": 353,"type": 496},{"src": 127,"type": 497},{"src": 127,"type": 498},{"src": 127,"type": 499},{"src": 127,"type": 500},{"src": 127,"type": 501},{"src": 127,"type": 502},{"src": 127,"type": 503},{"src": 231,"type": 317},{"src": 354,"type": 478},{"src": 354,"type": 479},{"src": 333,"type": 426},{"src": 231,"type": 408},{"src": 231,"type": 408},{"src": 231,"type": 317},{"src": 355,"type": 504},{"src": 356,"type": 505},{"src": 231,"type": 506},{"src": 127,"type": 507},{"src": 127,"type": 508},{"src": 127,"type": 509},{"src": 127,"type": 510},{"src": 127,"type": 511},{"src": 127,"type": 512},{"src": 127,"type": 513},{"src": 231,"type": 408},{"src": 231,"type": 317},{"src": 231,"type": 317},{"src": 231,"type": 408},{"src": 231,"type": 408},{"src": 277,"type": 374},{"src": 357,"type": 514},{"src": 358,"type": 515},{"src": 316,"type": 426},{"src": 316,"type": 426},{"src": 277,"type": 374},{"src": 359,"type": 516},{"src": 316,"type": 517},{"src": 231,"type": 518},{"src": 231,"type": 506},{"src": 231,"type": 506},{"src": 316,"type": 426},{"src": 277,"type": 374},{"src": 277,"type": 374},{"src": 316,"type": 426},{"src": 316,"type": 426},{"src": 333,"type": 426},{"src": 333,"type": 426},{"src": 360,"type": 126},{"src": 361,"type": 519},{"src": 333,"type": 517},{"src": 277,"type": 520},{"src": 316,"type": 517},{"src": 316,"type": 517},{"src": 333,"type": 426},{"src": 333,"type": 426},{"src": 333,"type": 426},{"src": 347,"type": 521},{"src": 333,"type": 517},{"src": 333,"type": 517},{"src": 354,"type": 521},{"src": 362,"type": 522},{"src": 363,"type": 523},{"src": 364,"type": 524},{"src": 365,"type": 525},{"src": 366,"type": 526},{"src": 56,"type": 527},{"src": 367,"type": 528},{"src": 368,"type": 529},{"src": 369,"type": 530},{"src": 370,"type": 531},{"src": 371,"type": 532},{"src": 372,"type": 533},{"src": 373,"type": 531},{"src": 374,"type": 534},{"src": 375,"type": 535},{"src": 60,"type": 536},{"src": 376,"type": 537},{"src": 377,"type": 538},{"src": 377,"type": 538},{"src": 377,"type": 538},{"src": 378,"type": 538},{"src": 379,"type": 537},{"src": 380,"type": 539},{"src": 381,"type": 540},{"src": 382,"type": 541},{"src": 382,"type": 542},{"src": 382,"type": 543},{"src": 383,"type": 544},{"src": 384,"type": 540},{"src": 377,"type": 538},{"src": 382,"type": 538},{"src": 385,"type": 545},{"src": 386,"type": 550},{"src": 387,"type": 553},{"src": 388,"type": 556},{"src": 389,"type": 559},{"src": 390,"type": 562},{"src": 391,"type": 567},{"src": 76,"type": 571},{"src": 392,"type": 574},{"src": 393,"type": 580},{"src": 394,"type": 583},{"src": 395,"type": 590},{"src": 396,"type": 593},{"src": 397,"type": 598},{"src": 398,"type": 600},{"src": 399,"type": 601},{"src": 400,"type": 604},{"src": 401,"type": 606},{"src": 402,"type": 611},{"src": 403,"type": 614},{"src": 404,"type": 616},{"src": 93,"type": 619},{"src": 405,"type": 620},{"src": 406,"type": 627},{"src": 407,"type": 628},{"src": 408,"type": 630},{"src": 409,"type": 632},{"src": 410,"type": 635},{"src": 411,"type": 639},{"src": 412,"type": 645},{"src": 210,"type": 658},{"src": 413,"type": 660},{"src": 414,"type": 662},{"src": 79,"type": 1069},{"src": 84,"type": 1076},{"src": 866,"type": 1077},{"src": 868,"type": 1078},{"src": 212,"type": 1079},{"src": 143,"type": 1080},{"src": 291,"type": 1081},{"src": 155,"type": 1082},{"src": 144,"type": 1083},{"src": 866,"type": 1095},{"src": 893,"type": 1096},{"src": 211,"type": 1097},{"src": 866,"type": 1104},{"src": 903,"type": 1105},{"src": 105,"type": 1106},{"src": 909,"type": 1107},{"src": 910,"type": 1108},{"src": 940,"type": 1131},{"src": 1054,"type": 1180},{"src": 184,"type": 1257},{"src": 365,"type": 1385},{"src": 370,"type": 1386},{"src": 358,"type": 1418},{"src": 382,"type": 1419},{"src": 355,"type": 1420},{"src": 349,"type": 1421},{"src": 195,"type": 1422},{"src": 117,"type": 1423},{"src": 60,"type": 1424},{"src": 292,"type": 1425},{"src": 297,"type": 1426},{"src": 80,"type": 1427},{"src": 145,"type": 1428},{"src": 306,"type": 1430},{"src": 309,"type": 1431},{"src": 383,"type": 1432},{"src": 214,"type": 1433},{"src": 114,"type": 1434},{"src": 116,"type": 1435},{"src": 216,"type": 1436},{"src": 213,"type": 1437},{"src": 215,"type": 1438},{"src": 56,"type": 1439},{"src": 307,"type": 1440},{"src": 115,"type": 1441},{"src": 338,"type": 1442},{"src": 308,"type": 1443},{"src": 204,"type": 1470},{"src": 181,"type": 1471},{"src": 182,"type": 1473},{"src": 28,"type": 1474},{"src": 183,"type": 1475},{"src": 88,"type": 1476},{"src": 255,"type": 1477},{"src": 251,"type": 1479},{"src": 190,"type": 1480},{"src": 252,"type": 1483},{"src": 254,"type": 1484},{"src": 253,"type": 1485},{"src": 199,"type": 1486},{"src": 198,"type": 1487},{"src": 257,"type": 1488},{"src": 154,"type": 1490},{"src": 256,"type": 1493},{"src": 172,"type": 1495},{"src": 342,"type": 1502},{"src": 231,"type": 1503},{"src": 333,"type": 1504},{"src": 127,"type": 1505},{"src": 77,"type": 1506},{"src": 347,"type": 1507},{"src": 277,"type": 1508},{"src": 78,"type": 1509},{"src": 4263,"type": 1511},{"src": 354,"type": 1512},{"src": 316,"type": 1513},{"src": 33,"type": 1522},{"src": 4361,"type": 1523},{"src": 4374,"type": 1524},{"src": 331,"type": 1530},{"src": 343,"type": 1531},{"src": 72,"type": 1539},{"src": 166,"type": 1540},{"src": 109,"type": 1541},{"src": 63,"type": 1542},{"src": 250,"type": 1543},{"src": 110,"type": 1544},{"src": 70,"type": 1545},{"src": 377,"type": 1555},{"src": 4876,"type": 663},{"src": 162,"type": 1587},{"src": 196,"type": 1588},{"src": 373,"type": 1599}],"errors": [{"src": 5760,"name": "InputOutput"},{"src": 5761,"name": "SystemResources"},{"src": 5762,"name": "IsDir"},{"src": 5763,"name": "OperationAborted"},{"src": 5764,"name": "BrokenPipe"},{"src": 5765,"name": "ConnectionResetByPeer"},{"src": 5766,"name": "WouldBlock"},{"src": 5767,"name": "Unexpected"},{"src": 5768,"name": "DiskQuota"},{"src": 5769,"name": "FileTooBig"},{"src": 5770,"name": "InputOutput"},{"src": 5771,"name": "NoSpaceLeft"},{"src": 5772,"name": "AccessDenied"},{"src": 5773,"name": "BrokenPipe"},{"src": 5774,"name": "SystemResources"},{"src": 5775,"name": "OperationAborted"},{"src": 5776,"name": "WouldBlock"},{"src": 5777,"name": "Unseekable"},{"src": 5778,"name": "EndOfStream"},{"src": 5779,"name": "OutOfBounds"},{"src": 5780,"name": "EndOfStream"},{"src": 5781,"name": "Overflow"},{"src": 5782,"name": "InvalidCharacter"},{"src": 5783,"name": "OutOfMemory"},{"src": 5784,"name": "InvalidFormat"},{"src": 5785,"name": "SharingViolation"},{"src": 5786,"name": "PathAlreadyExists"},{"src": 5787,"name": "FileNotFound"},{"src": 5788,"name": "AccessDenied"},{"src": 5789,"name": "PipeBusy"},{"src": 5790,"name": "NameTooLong"},{"src": 5791,"name": "InvalidUtf8"},{"src": 5792,"name": "BadPathName"},{"src": 5793,"name": "SymLinkLoop"},{"src": 5794,"name": "ProcessFdQuotaExceeded"},{"src": 5795,"name": "SystemFdQuotaExceeded"},{"src": 5796,"name": "NoDevice"},{"src": 5797,"name": "FileTooBig"},{"src": 5798,"name": "NoSpaceLeft"},{"src": 5799,"name": "NotDir"},{"src": 5800,"name": "DeviceBusy"},{"src": 5801,"name": "Unexpected"},{"src": 5802,"name": "SystemResources"},{"src": 5803,"name": "IsDir"},{"src": 5804,"name": "MissingPalette"},{"src": 5805,"name": "RLEStreamIncomplete"},{"src": 5806,"name": "UnsupportedFormat"},{"src": 5807,"name": "InvalidFileFormat"},{"src": 5808,"name": "SystemResources"},{"src": 5809,"name": "AccessDenied"},{"src": 5810,"name": "InvalidCharacter"},{"src": 5811,"name": "Overflow"},{"src": 5812,"name": "Overflow"},{"src": 5813,"name": "Overflow"},{"src": 5814,"name": "AccessDenied"},{"src": 5815,"name": "FileNotFound"},{"src": 5816,"name": "NameTooLong"},{"src": 5817,"name": "PathAlreadyExists"},{"src": 5818,"name": "FileSystem"},{"src": 5819,"name": "PermissionDenied"},{"src": 5811,"name": "Overflow"},{"src": 5820,"name": "MemoryMappingNotSupported"},{"src": 5821,"name": "AccessDenied"},{"src": 5822,"name": "PermissionDenied"},{"src": 5823,"name": "LockedMemoryLimitExceeded"},{"src": 5824,"name": "OutOfMemory"},{"src": 5813,"name": "Overflow"},{"src": 5825,"name": "InvalidDebugInfo"},{"src": 5826,"name": "MissingDebugInfo"},{"src": 5811,"name": "Overflow"},{"src": 5827,"name": "EndOfFile"},{"src": 5828,"name": "OutOfMemory"},{"src": 5829,"name": "OutOfMemory"},{"src": 5830,"name": "EnvironmentVariableNotFound"},{"src": 5831,"name": "InvalidUtf8"},{"src": 5832,"name": "SystemCannotYield"},{"src": 5833,"name": "TimedOut"},{"src": 5834,"name": "TimerUnsupported"},{"src": 5835,"name": "UnsupportedClock"},{"src": 5836,"name": "BufferTooSmall"},{"src": 5837,"name": "AccessDenied"},{"src": 5838,"name": "SymLinkLoop"},{"src": 5839,"name": "NameTooLong"},{"src": 5840,"name": "FileNotFound"},{"src": 5841,"name": "SystemResources"},{"src": 5842,"name": "NotDir"},{"src": 5843,"name": "SystemResources"},{"src": 5844,"name": "NameTooLong"}],"astNodes": [{"file": 19,"line": 438,"col": 4,"docs": " This function is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n","fields": [5845,5846]},{"file": 7,"line": 574,"col": 4,"docs": " constructs a new Vec3.\n","fields": [5847,5848,5849]},{"file": 7,"line": 579,"col": 4,"docs": " constructs a new Vec4.\n","fields": [5850,5851,5852,5853]},{"file": 7,"line": 569,"col": 4,"docs": " constructs a new Vec2.\n","fields": [5854,5855]},{"file": 23,"line": 209,"col": 4,"docs": " This function invokes undefined behavior when `ok` is `false`.\n In Debug and ReleaseSafe modes, calls to this function are always\n generated, and the `unreachable` statement triggers a panic.\n In ReleaseFast and ReleaseSmall modes, calls to this function are\n optimized away, and in fact the optimizer is able to use the assertion\n in its heuristics.\n Inside a test block, it is best to use the `std.testing` module rather\n than this function, because this function may not detect a test failure\n in ReleaseFast and ReleaseSmall mode. Outside of a test block, this assert\n function is the correct function to use.\n","fields": [5856]},{"file": 7,"line": 585,"col": 0},{"file": 7,"line": 602,"col": 0},{"file": 7,"line": 619,"col": 0},{"file": 7,"line": 638,"col": 0},{"file": 7,"line": 655,"col": 0},{"file": 7,"line": 670,"col": 0},{"file": 7,"line": 753,"col": 0},{"file": 9,"line": 251,"col": 0},{"file": 9,"line": 265,"col": 0},{"file": 9,"line": 279,"col": 0},{"file": 4,"line": 203,"col": 0,"fields": [5857,5858]},{"file": 4,"line": 310,"col": 4,"docs": " Loads a netbpm image from the given file path.\n Allocates required memory by the given allocator.\n","fields": [5859,5860]},{"file": 4,"line": 240,"col": 0,"fields": [5861,5862]},{"file": 4,"line": 108,"col": 0,"fields": [5863]},{"file": 4,"line": 116,"col": 0,"fields": [5864]},{"file": 4,"line": 257,"col": 0,"fields": [5865,5866,5867]},{"file": 4,"line": 223,"col": 0,"fields": [5868,5869]},{"file": 4,"line": 247,"col": 0,"fields": [5870,5871,5872]},{"file": 4,"line": 162,"col": 0,"fields": [5873,5874]},{"file": 4,"line": 271,"col": 0,"fields": [5875,5876,5877]},{"file": 4,"line": 143,"col": 0,"docs": " skips whitespace and comments, then reads a number from the stream.\n this function reads one whitespace behind the number as a terminator.\n","fields": [5878,5879]},{"file": 4,"line": 288,"col": 0,"fields": [5880,5881,5882]},{"file": 36,"line": 82,"col": 0,"fields": []},{"file": 23,"line": 223,"col": 4,"fields": [5883,5884,5885,5886]},{"file": 7,"line": 211,"col": 8,"fields": [5887,5888,5889]},{"file": 7,"line": 316,"col": 8,"fields": [5890,5891,5892,5893]},{"file": 7,"line": 166,"col": 8,"fields": [5894,5895]},{"file": 7,"line": 19,"col": 12,"docs": " adds all components from `a` with the components of `b`.\n","fields": [5896,5897]},{"file": 33,"line": 391,"col": 4,"docs": "Compares two of any type for equality. Containers are compared on a field-by-field basis,\n where possible. Pointers are not followed.\n","fields": [5898,5899]},{"file": 7,"line": 28,"col": 12,"docs": " subtracts all components from `a` with the components of `b`.\n","fields": [5900,5901]},{"file": 7,"line": 37,"col": 12,"docs": " multiplies all components from `a` with the components of `b`.\n","fields": [5902,5903]},{"file": 7,"line": 46,"col": 12,"docs": " divides all components from `a` by the components of `b`.\n","fields": [5904,5905]},{"file": 7,"line": 55,"col": 12,"docs": " multiplies all components by a scalar value.\n","fields": [5906,5907]},{"file": 7,"line": 65,"col": 12,"docs": " returns the dot product of two vectors.\n This is the sum of products of all components.\n","fields": [5908,5909]},{"file": 7,"line": 79,"col": 12,"docs": " returns the squared magnitude of the vector.\n","fields": [5910]},{"file": 7,"line": 74,"col": 12,"docs": " returns the magnitude of the vector.\n","fields": [5911]},{"file": 7,"line": 224,"col": 8,"docs": " calculates the cross product. result will be perpendicular to a and b.\n","fields": [5912,5913]},{"file": 7,"line": 233,"col": 8,"docs": " converts the vector from an homogeneous position (w=1).\n","fields": [5914]},{"file": 7,"line": 243,"col": 8,"docs": " converts the vector from an homogeneous direction (w=0).\n","fields": [5915]},{"file": 7,"line": 252,"col": 8,"fields": [5916]},{"file": 7,"line": 260,"col": 8,"fields": [5917]},{"file": 7,"line": 416,"col": 8,"docs": " performs matrix multiplication of a*b\n","fields": [5918,5919]},{"file": 7,"line": 432,"col": 8,"docs": " transposes the matrix.\n this will swap columns with rows.\n","fields": [5920]},{"file": 7,"line": 330,"col": 8,"docs": " multiplies the vector with a matrix.\n","fields": [5921,5922]},{"file": 34,"line": 1302,"col": 4,"docs": " Returns an handle to the current working directory that is open for traversal.\n Closing the returned `Dir` is checked illegal behavior. Iterating over the result is illegal behavior.\n On POSIX targets, this function is comptime-callable.\n","fields": []},{"file": 34,"line": 778,"col": 8,"docs": " Deprecated; call `openFile` directly.\n","fields": [5923,5924]},{"file": 9,"line": 165,"col": 4,"fields": [5925,5926]},{"file": 35,"line": 673,"col": 16,"fields": [5927]},{"file": 35,"line": 699,"col": 12,"fields": [5928,5929,5930,5931,5932]},{"file": 35,"line": 684,"col": 12,"fields": [5933,5934,5935]},{"file": 20,"line": 1491,"col": 4,"docs": " Round an address up to the nearest aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [5936,5937]},{"file": 21,"line": 246,"col": 4,"docs": " Returns the smaller number. When one of the parameter's type's full range fits in the other,\n the return type is the smaller type.\n","fields": [5938,5939]},{"file": 35,"line": 710,"col": 12,"fields": [5940,5941,5942,5943,5944]},{"file": 40,"line": 306,"col": 8,"fields": [5945]},{"file": 15,"line": 58,"col": 12,"docs": " Returns the number of bytes read. If the number read would be smaller than buf.len,\n error.EndOfStream is returned instead.\n","fields": [5946,5947]},{"file": 20,"line": 1331,"col": 4,"docs": "Given a pointer to a single item, returns a slice of the underlying bytes, preserving constness.\n","fields": [5948]},{"file": 15,"line": 46,"col": 12,"docs": " Returns the number of bytes read. If the number read is smaller than buf.len, it\n means the stream reached the end. Reaching the end of a stream is not an error\n condition.\n","fields": [5949,5950]},{"file": 9,"line": 53,"col": 12,"fields": [5951,5952,5953,5954]},{"file": 20,"line": 103,"col": 8,"docs": " Allocates an array of `n` items of type `T` and sets all the\n items to `undefined`. Depending on the Allocator\n implementation, it may be required to call `free` once the\n memory is no longer needed, to avoid a resource leak. If the\n `Allocator` implementation is unknown, then correct code will\n call `free` when done.\n\n For allocating a single item, see `create`.\n","fields": [5955,5956,5957]},{"file": 9,"line": 207,"col": 4,"fields": [5958]},{"file": 9,"line": 214,"col": 4,"fields": [5959]},{"file": 15,"line": 174,"col": 12,"docs": " Reads 1 byte from the stream or returns `error.EndOfStream`.\n","fields": [5960]},{"file": 15,"line": 32,"col": 12,"docs": " Returns the number of bytes read. It may be less than buffer.len.\n If the number of bytes read is 0, it means end of stream.\n End of stream is not an error condition.\n","fields": [5961,5962]},{"file": 9,"line": 133,"col": 12,"fields": [5963]},{"file": 9,"line": 245,"col": 4,"fields": [5964]},{"file": 20,"line": 79,"col": 8,"docs": " Returns a pointer to undefined memory.\n Call `destroy` with the result to free the memory.\n","fields": [5965,5966]},{"file": 40,"line": 174,"col": 8,"docs": " Repositions read/write file offset relative to the end.\n","fields": [5967,5968]},{"file": 20,"line": 87,"col": 8,"docs": " `ptr` should be the return value of `create`, or otherwise\n have the same address and alignment property.\n","fields": [5969,5970]},{"file": 40,"line": 138,"col": 8,"docs": " Upon success, the stream is in an uninitialized state. To continue using it,\n you must use the open() function.\n","fields": [5971]},{"file": 4,"line": 57,"col": 12,"docs": " tries to set a pixel in the image.\n","fields": [5972,5973,5974,5975]},{"file": 40,"line": 52,"col": 8,"docs": " Deprecated; call `std.fs.Dir.openFile` directly.\n","fields": [5976]},{"file": 20,"line": 355,"col": 4,"docs": " Compares two slices and returns whether they are equal.\n","fields": [5977,5978,5979]},{"file": 28,"line": 1007,"col": 4,"fields": [5980,5981,5982]},{"file": 28,"line": 1037,"col": 4,"fields": [5983,5984,5985]},{"file": 15,"line": 206,"col": 12,"fields": [5986,5987]},{"file": 20,"line": 551,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n Assumes the endianness of memory is foreign, so it must byte-swap.\n","fields": [5988,5989]},{"file": 36,"line": 137,"col": 0,"fields": []},{"file": 23,"line": 2413,"col": 0,"fields": []},{"file": 23,"line": 55,"col": 4,"fields": []},{"file": 16,"line": 37,"col": 12,"fields": [5990,5991,5992]},{"file": 22,"line": 178,"col": 4,"docs": " Causes abnormal process termination.\n If linking against libc, this calls the abort() libc function. Otherwise\n it raises SIGABRT followed by SIGKILL and finally lo\n","fields": []},{"file": 23,"line": 183,"col": 4,"docs": " Tries to print a stack trace to stderr, unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [5993]},{"file": 23,"line": 91,"col": 4,"docs": " Tries to print the current stack trace to stderr, unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [5994]},{"file": 23,"line": 48,"col": 4,"fields": [5995,5996]},{"file": 7,"line": 143,"col": 12,"docs": " returns a new vector where each component is the maximum of the components of the input vectors.\n","fields": [5997,5998]},{"file": 7,"line": 186,"col": 8,"docs": " multiplies the vector with a matrix.\n","fields": [5999,6000]},{"file": 7,"line": 134,"col": 12,"docs": " returns a new vector where each component is the minimum of the components of the input vectors.\n","fields": [6001,6002]},{"file": 7,"line": 85,"col": 12,"docs": " returns either a normalized vector (`length() = 1`) or `zero` if the vector\n has length 0.\n","fields": [6003]},{"file": 62,"line": 15,"col": 4,"docs": " Returns the square root of x.\n\n Special Cases:\n  - sqrt(+inf)  = +inf\n  - sqrt(+-0)   = +-0\n  - sqrt(x)     = nan if x < 0\n  - sqrt(nan)   = nan\n TODO Decide if all this logic should be implemented directly in the @sqrt bultin function.\n","fields": [6004]},{"file": 7,"line": 285,"col": 8,"docs": " transforms a homogeneous direction.\n","fields": [6005,6006]},{"file": 7,"line": 269,"col": 8,"docs": " multiplies the vector with a matrix.\n","fields": [6007,6008]},{"file": 7,"line": 280,"col": 8,"docs": " transforms a homogeneous position.\n","fields": [6009,6010]},{"file": 7,"line": 500,"col": 8,"docs": " creates a rotation matrix around a certain axis.\n","fields": [6011,6012]},{"file": 7,"line": 542,"col": 8,"docs": " creates matrix that will scale a homogeneous matrix.\n","fields": [6013]},{"file": 7,"line": 518,"col": 8,"docs": " creates matrix that will scale a homogeneous matrix.\n","fields": [6014]},{"file": 7,"line": 475,"col": 8,"docs": " Creates a look-at matrix.\n The matrix will create a transformation that can be used\n as a camera transform.\n the camera is located at `eye` and will look at `center`.\n `up` is the direction from the screen center to the upper screen border.\n","fields": [6015,6016,6017]},{"file": 7,"line": 485,"col": 8,"docs": " creates a perspective transformation matrix.\n `fov` is the field of view in radians,\n `aspect` is the screen aspect ratio (width / height)\n `near` is the distance of the near clip plane, whereas `far` is the distance to the far clip plane.\n","fields": [6018,6019,6020,6021]},{"file": 7,"line": 449,"col": 8,"docs": " Creates a look-at matrix.\n The matrix will create a transformation that can be used\n as a camera transform.\n the camera is located at `eye` and will look into `direction`.\n `up` is the direction from the screen center to the upper screen border.\n","fields": [6022,6023,6024]},{"file": 7,"line": 530,"col": 8,"docs": " creates matrix that will translate a homogeneous matrix.\n","fields": [6025,6026,6027]},{"file": 7,"line": 556,"col": 8,"docs": " creates an orthogonal projection matrix.\n `left`, `right`, `bottom` and `top` are the borders of the screen whereas `near` and `far` define the\n distance of the near and far clipping planes.\n","fields": [6028,6029,6030,6031,6032,6033]},{"file": 7,"line": 341,"col": 4,"fields": [6034,6035]},{"file": 34,"line": 697,"col": 8,"docs": " Opens a file for reading or writing, without attempting to create a new file.\n Call `File.close` to release the resource.\n Asserts that the path parameter has no null bytes.\n","fields": [6036,6037,6038]},{"file": 20,"line": 1512,"col": 4,"docs": " Round an address up to the previous aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [6039,6040]},{"file": 40,"line": 340,"col": 8,"fields": [6041,6042]},{"file": 20,"line": 107,"col": 8,"fields": [6043,6044,6045,6046]},{"file": 20,"line": 230,"col": 8,"docs": " Free an array allocated with `alloc`. To free a single item,\n see `destroy`.\n","fields": [6047,6048]},{"file": 22,"line": 2491,"col": 4,"docs": " Repositions read/write file offset relative to the end.\n","fields": [6049,6050]},{"file": 22,"line": 92,"col": 4,"docs": " Closes the file descriptor.\n This function is not capable of returning any indication of failure. An\n application which wants to ensure writes have succeeded before closing\n must call `fsync` before `close`.\n Note: The Zig standard library does not support POSIX thread cancellation.\n","fields": [6051]},{"file": 28,"line": 1083,"col": 4,"fields": [6052,6053]},{"file": 21,"line": 709,"col": 4,"docs": " Cast an integer to a different integer type. If the value doesn't fit,\n return an error.\n","fields": [6054,6055]},{"file": 21,"line": 305,"col": 4,"fields": [6056,6057,6058]},{"file": 21,"line": 310,"col": 4,"fields": [6059,6060,6061]},{"file": 20,"line": 543,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n Assumes the endianness of memory is native. This means the function can\n simply pointer cast memory.\n","fields": [6062,6063]},{"file": 59,"line": 173,"col": 4,"fields": []},{"file": 59,"line": 301,"col": 4,"fields": [6064]},{"file": 59,"line": 273,"col": 4,"fields": [6065]},{"file": 59,"line": 117,"col": 4,"fields": [6066]},{"file": 22,"line": 251,"col": 4,"docs": " Exits the program cleanly with the specified status code.\n","fields": [6067]},{"file": 36,"line": 187,"col": 0,"fields": [6068,6069,6070]},{"file": 22,"line": 2856,"col": 4,"docs": " Examine and change a signal action.\n","fields": [6071,6072,6073]},{"file": 27,"line": 64,"col": 4,"fields": []},{"file": 40,"line": 313,"col": 8,"fields": [6074]},{"file": 28,"line": 88,"col": 4,"docs": " Renders fmt string with args, calling output with slices of bytes.\n If `output` returns an error, the error is returned from `format` and\n `output` is not called again.\n\n The format string must be comptime known and may contain placeholders following\n this format:\n `{[position][specifier]:[fill][alignment][width].[precision]}`\n\n Each word between `[` and `]` is a parameter you have to replace with something:\n\n - *position* is the index of the argument that should be inserted\n - *specifier* is a type-dependent formatting option that determines how a type should formatted (see below)\n - *fill* is a single character which is used to pad the formatted text\n - *alignment* is one of the three characters `<`, `^` or `>`. they define if the text is *left*, *center*, or *right* aligned\n - *width* is the total width of the field in characters\n - *precision* specifies how many decimals a formatted number should have\n\n Note that most of the parameters are optional and may be omitted. Also you can leave out separators like `:` and `.` when\n all parameters after the separator are omitted.\n Only exception is the *fill* parameter. If *fill* is required, one has to specify *alignment* as well, as otherwise\n the digits after `:` is interpreted as *width*, not *fill*.\n\n The *specifier* has several options for types:\n - `x` and `X`:\n   - format the non-numeric value as a string of bytes in hexadecimal notation (\"binary dump\") in either lower case or upper case\n   - output numeric value in hexadecimal notation\n - `s`: print a pointer-to-many as a c-string, use zero-termination\n - `B` and `Bi`: output a memory size in either metric (1000) or power-of-two (1024) based notation. works for both float and integer values.\n - `e`: output floating point value in scientific notation\n - `d`: output numeric value in decimal notation\n - `b`: output integer value in binary notation\n - `c`: output integer as an ASCII character. Integer type must have 8 bits at max.\n - `*`: output the address of the value instead of the value itself.\n\n If a formatted user type contains a function of the type\n ```\n fn format(value: ?, comptime fmt: []const u8, options: std.fmt.FormatOptions, context: var, comptime Errors: type, output: fn (@TypeOf(context), []const u8) Errors!void) Errors!void\n ```\n with `?` being the type formatted, this function will be called instead of the default implementation.\n This allows user types to be formatted in a logical manner instead of dumping all fields of the type.\n\n A user type may be a `struct`, `union` or `enum` type.\n","fields": [6075,6076,6077,6078,6079]},{"file": 22,"line": 210,"col": 4,"fields": [6080]},{"file": 23,"line": 74,"col": 4,"fields": []},{"file": 23,"line": 810,"col": 4,"docs": " TODO once https://github.com/ziglang/zig/issues/3157 is fully implemented,\n make this `noasync fn` and remove the individual noasync calls.\n","fields": [6081]},{"file": 23,"line": 2371,"col": 0,"fields": []},{"file": 11,"line": 606,"col": 8,"fields": [6082]},{"file": 11,"line": 567,"col": 8,"fields": [6083]},{"file": 23,"line": 1041,"col": 0,"fields": [6084]},{"file": 34,"line": 1481,"col": 4,"fields": []},{"file": 40,"line": 189,"col": 8,"fields": [6085]},{"file": 22,"line": 2242,"col": 4,"docs": " Map files or devices into memory.\n Use of a mapped region can result in these signals:\n * SIGSEGV - Attempted write into a region mapped as read-only.\n * SIGBUS - Attempted  access to a portion of the buffer that does not correspond to the file\n","fields": [6086,6087,6088,6089,6090,6091]},{"file": 18,"line": 47,"col": 8,"fields": [6092]},{"file": 23,"line": 1016,"col": 4,"fields": [6093,6094,6095]},{"file": 22,"line": 2280,"col": 4,"docs": " Deletes the mappings for the specified address range, causing\n further references to addresses within the range to generate invalid memory references.\n Note that while POSIX allows unmapping a region in the middle of an existing mapping,\n Zig's munmap function does not, for two reasons:\n * It violates the Zig principle that resource deallocation must succeed.\n * The Windows function, VirtualFree, has this restriction.\n","fields": [6096]},{"file": 26,"line": 371,"col": 8,"fields": [6097,6098,6099]},{"file": 18,"line": 19,"col": 12,"fields": [6100,6101]},{"file": 15,"line": 244,"col": 12,"docs": " Reads an integer with the same size as the given enum's tag type. If the integer matches\n an enum tag, casts the integer to the enum tag and returns it. Otherwise, returns an error.\n TODO optimization taking advantage of most fields being in order\n","fields": [6102,6103,6104]},{"file": 15,"line": 212,"col": 12,"fields": [6105,6106,6107]},{"file": 20,"line": 598,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n","fields": [6108,6109,6110]},{"file": 18,"line": 23,"col": 12,"fields": [6111]},{"file": 18,"line": 15,"col": 12,"fields": [6112,6113]},{"file": 23,"line": 996,"col": 0,"fields": [6114,6115]},{"file": 26,"line": 503,"col": 8,"fields": [6116,6117]},{"file": 26,"line": 499,"col": 8,"fields": [6118]},{"file": 23,"line": 1008,"col": 4,"docs": " Initialize DWARF info. The caller has the responsibility to initialize most\n the DwarfInfo fields before calling. These fields can be left undefined:\n * abbrev_table_list\n * compile_unit_list\n","fields": [6119,6120]},{"file": 8,"line": 35,"col": 12,"docs": " Deinitialize with `deinit` or use `toOwnedSlice`.\n","fields": [6121]},{"file": 23,"line": 1288,"col": 4,"fields": [6122]},{"file": 23,"line": 2351,"col": 0,"fields": [6123,6124,6125]},{"file": 15,"line": 200,"col": 12,"fields": [6126,6127]},{"file": 18,"line": 27,"col": 12,"fields": [6128]},{"file": 23,"line": 1489,"col": 4,"docs": " Gets an already existing AbbrevTable given the abbrev_offset, or if not found,\n seeks in the stream and parses it.\n","fields": [6129,6130]},{"file": 8,"line": 58,"col": 12,"docs": " Return contents as a slice. Only valid while the list\n doesn't change size.\n","fields": [6131]},{"file": 8,"line": 138,"col": 12,"docs": " Extend the list by 1 element. Allocates more memory as\n necessary.\n","fields": [6132,6133]},{"file": 23,"line": 1503,"col": 4,"fields": [6134]},{"file": 23,"line": 1224,"col": 8,"fields": [6135]},{"file": 54,"line": 3,"col": 4,"fields": [6136,6137]},{"file": 8,"line": 217,"col": 12,"docs": " Increase length by 1, returning pointer to the new item.\n","fields": [6138]},{"file": 8,"line": 206,"col": 12,"fields": [6139,6140]},{"file": 8,"line": 93,"col": 12,"docs": " Return the maximum number of items the list can hold\n without allocating more memory.\n","fields": [6141]},{"file": 20,"line": 148,"col": 8,"docs": " This function requests a new byte size for an existing allocation,\n which can be larger, smaller, or the same size as the old memory\n allocation.\n This function is preferred over `shrink`, because it can fail, even\n when shrinking. This gives the allocator a chance to perform a\n cheap shrink operation if possible, or otherwise return OutOfMemory,\n indicating that the caller should keep their capacity, for example\n in `std.ArrayList.shrink`.\n If you need guaranteed success, call `shrink`.\n If `new_n` is 0, this is the same as `free` and it always succeeds.\n","fields": [6142,6143,6144]},{"file": 8,"line": 223,"col": 12,"fields": [6145]},{"file": 23,"line": 1528,"col": 4,"fields": [6146,6147,6148]},{"file": 23,"line": 2095,"col": 0,"fields": [6149,6150]},{"file": 8,"line": 192,"col": 12,"docs": " Adjust the list's length to `new_len`. Doesn't initialize\n added items if any.\n","fields": [6151,6152]},{"file": 8,"line": 64,"col": 12,"docs": " Return list as const slice. Only valid while the list\n doesn't change size.\n","fields": [6153]},{"file": 23,"line": 2046,"col": 0,"fields": [6154,6155,6156,6157]},{"file": 23,"line": 1812,"col": 4,"fields": [6158,6159]},{"file": 23,"line": 1852,"col": 4,"fields": [6160,6161,6162]},{"file": 23,"line": 1714,"col": 4,"fields": [6163,6164]},{"file": 23,"line": 1844,"col": 4,"fields": [6165,6166]},{"file": 23,"line": 1819,"col": 4,"fields": [6167,6168]},{"file": 23,"line": 1796,"col": 4,"fields": [6169]},{"file": 23,"line": 1390,"col": 4,"fields": [6170]},{"file": 23,"line": 83,"col": 0,"fields": []},{"file": 23,"line": 261,"col": 4,"fields": [6171,6172,6173,6174,6175]},{"file": 23,"line": 353,"col": 4,"docs": " TODO once https://github.com/ziglang/zig/issues/3157 is fully implemented,\n make this `noasync fn` and remove the individual noasync calls.\n","fields": [6176,6177,6178,6179]},{"file": 23,"line": 751,"col": 4,"fields": [6180,6181,6182,6183]},{"file": 23,"line": 1234,"col": 8,"docs": " This function works in freestanding mode.\n fn printLineFromFile(out_stream: var, line_info: LineInfo) !void\n","fields": [6184,6185,6186,6187,6188]},{"file": 23,"line": 1455,"col": 4,"fields": [6189,6190]},{"file": 23,"line": 1827,"col": 4,"fields": [6191,6192]},{"file": 23,"line": 1548,"col": 4,"fields": [6193,6194,6195]},{"file": 15,"line": 182,"col": 12,"docs": " Same as `readByte` except the returned byte is signed.\n","fields": [6196]},{"file": 23,"line": 1228,"col": 8,"fields": [6197]},{"file": 23,"line": 1959,"col": 0,"fields": [6198,6199]},{"file": 23,"line": 1902,"col": 8,"fields": [6200,6201,6202,6203]},{"file": 23,"line": 1924,"col": 8,"fields": [6204]},{"file": 56,"line": 86,"col": 4,"docs": " Naively combines a series of paths with the native path seperator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [6205,6206]},{"file": 56,"line": 35,"col": 0,"docs": " This is different from mem.join in that the separator will not be repeated if\n it is found at the end or beginning of a pair of consecutive paths.\n","fields": [6207,6208,6209]},{"file": 20,"line": 244,"col": 4,"docs": " Copy all of source into dest at position 0.\n dest.len must be >= source.len.\n dest.ptr must be <= src.ptr.\n","fields": [6210,6211,6212]},{"file": 54,"line": 56,"col": 4,"fields": [6213,6214]},{"file": 23,"line": 1276,"col": 4,"fields": [6215,6216]},{"file": 23,"line": 755,"col": 0,"fields": [6217,6218,6219,6220,6221,6222,6223]},{"file": 23,"line": 1150,"col": 0,"fields": [6224,6225]},{"file": 40,"line": 288,"col": 8,"fields": [6226,6227]},{"file": 16,"line": 41,"col": 12,"fields": [6228,6229]},{"file": 16,"line": 25,"col": 12,"fields": [6230,6231]},{"file": 23,"line": 1875,"col": 4,"fields": [6232]},{"file": 23,"line": 321,"col": 4,"fields": [6233,6234,6235,6236]},{"file": 23,"line": 285,"col": 8,"fields": [6237]},{"file": 23,"line": 301,"col": 4,"fields": [6238]},{"file": 41,"line": 181,"col": 12,"fields": []},{"file": 41,"line": 195,"col": 12,"fields": [6239]},{"file": 41,"line": 253,"col": 16,"docs": " Release the held lock.\n","fields": [6240]},{"file": 21,"line": 297,"col": 4,"fields": [6241,6242]},{"file": 7,"line": 177,"col": 4,"fields": [6243,6244]},{"file": 7,"line": 289,"col": 4,"fields": [6245,6246]},{"file": 63,"line": 15,"col": 4,"docs": " Returns the cosine of the radian value x.\n\n Special Cases:\n  - cos(+-inf) = nan\n  - cos(nan)   = nan\n","fields": [6247]},{"file": 64,"line": 16,"col": 4,"docs": " Returns the sine of the radian value x.\n\n Special Cases:\n  - sin(+-0)   = +-0\n  - sin(+-inf) = nan\n  - sin(nan)   = nan\n","fields": [6248]},{"file": 65,"line": 16,"col": 4,"docs": " Returns the absolute value of x.\n\n Special Cases:\n  - fabs(+-inf) = +inf\n  - fabs(nan)   = nan\n","fields": [6249]},{"file": 66,"line": 16,"col": 4,"docs": " Returns the tangent of the radian value x.\n\n Special Cases:\n  - tan(+-0)   = +-0\n  - tan(+-inf) = nan\n  - tan(nan)   = nan\n","fields": [6250]},{"file": 22,"line": 2801,"col": 4,"docs": " Used to convert a slice to a null terminated slice on the stack.\n TODO https://github.com/ziglang/zig/issues/287\n","fields": [6251]},{"file": 34,"line": 708,"col": 8,"docs": " Same as `openFile` but the path parameter is null-terminated.\n","fields": [6252,6253,6254]},{"file": 52,"line": 42,"col": 4,"docs": " Get the errno from a syscall return value, or 0 for no error.\n","fields": [6255]},{"file": 52,"line": 448,"col": 4,"docs": " Can only be called on 64 bit systems. For 32 bit see `llseek`.\n","fields": [6256,6257,6258]},{"file": 22,"line": 2825,"col": 4,"docs": " Call this when you made a syscall or something that sets errno\n and you get an unexpected error.\n","fields": [6259]},{"file": 52,"line": 431,"col": 4,"fields": [6260]},{"file": 58,"line": 19,"col": 4,"fields": [6261,6262,6263]},{"file": 52,"line": 457,"col": 4,"fields": [6264]},{"file": 23,"line": 2386,"col": 4,"fields": []},{"file": 36,"line": 208,"col": 0,"fields": []},{"file": 52,"line": 679,"col": 4,"fields": [6265,6266,6267]},{"file": 40,"line": 110,"col": 8,"fields": [6268]},{"file": 27,"line": 52,"col": 0,"fields": []},{"file": 40,"line": 354,"col": 8,"fields": [6269,6270]},{"file": 28,"line": 319,"col": 4,"fields": [6271,6272,6273,6274,6275,6276,6277]},{"file": 52,"line": 675,"col": 4,"fields": [6278,6279,6280]},{"file": 52,"line": 671,"col": 4,"fields": []},{"file": 52,"line": 470,"col": 4,"fields": [6281,6282]},{"file": 35,"line": 523,"col": 8,"fields": [6283]},{"file": 11,"line": 634,"col": 8,"fields": [6284]},{"file": 11,"line": 574,"col": 8,"fields": [6285]},{"file": 35,"line": 183,"col": 4,"fields": [6286,6287,6288,6289,6290]},{"file": 35,"line": 143,"col": 4,"fields": [6291,6292,6293,6294,6295]},{"file": 35,"line": 56,"col": 4,"fields": [6296,6297,6298]},{"file": 34,"line": 1322,"col": 4,"docs": " Same as `openFileAbsolute` but the path parameter is null-terminated.\n","fields": [6299,6300]},{"file": 40,"line": 221,"col": 8,"fields": [6301]},{"file": 52,"line": 182,"col": 4,"fields": [6302,6303,6304,6305,6306,6307]},{"file": 18,"line": 61,"col": 4,"fields": [6308,6309]},{"file": 18,"line": 72,"col": 4,"fields": [6310,6311]},{"file": 18,"line": 79,"col": 4,"fields": [6312,6313]},{"file": 18,"line": 93,"col": 4,"fields": [6314]},{"file": 18,"line": 98,"col": 4,"fields": [6315]},{"file": 52,"line": 214,"col": 4,"fields": [6316,6317]},{"file": 20,"line": 159,"col": 8,"docs": " This is the same as `realloc`, except caller may additionally request\n a new alignment, which can be larger, smaller, or the same as the old\n allocation.\n","fields": [6318,6319,6320,6321]},{"file": 23,"line": 2020,"col": 0,"fields": [6322]},{"file": 23,"line": 1983,"col": 0,"fields": [6323,6324,6325]},{"file": 23,"line": 1977,"col": 0,"fields": [6326,6327,6328]},{"file": 23,"line": 1988,"col": 0,"fields": [6329,6330,6331,6332]},{"file": 23,"line": 1970,"col": 0,"fields": [6333,6334,6335]},{"file": 23,"line": 2015,"col": 0,"fields": [6336,6337]},{"file": 23,"line": 2032,"col": 0,"fields": [6338,6339,6340]},{"file": 35,"line": 606,"col": 8,"fields": [6341]},{"file": 38,"line": 130,"col": 4,"docs": " Caller must free returned memory.\n TODO make this go through libc when we have it\n","fields": [6342,6343]},{"file": 40,"line": 144,"col": 8,"docs": " Test whether the file refers to a terminal.\n See also `supportsAnsiEscapeCodes`.\n","fields": [6344]},{"file": 22,"line": 293,"col": 4,"docs": " Returns the number of bytes that were read, which can be less than\n buf.len. If 0 bytes were read, that means EOF.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [6345,6346]},{"file": 41,"line": 189,"col": 12,"fields": [6347]},{"file": 41,"line": 202,"col": 8,"fields": [6348]},{"file": 41,"line": 265,"col": 8,"fields": [6349]},{"file": 63,"line": 45,"col": 0,"fields": [6350,6351]},{"file": 64,"line": 46,"col": 0,"fields": [6352,6353]},{"file": 65,"line": 33,"col": 0,"fields": [6354]},{"file": 66,"line": 39,"col": 0,"fields": [6355,6356]},{"file": 22,"line": 704,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n `file_path` is relative to the open directory handle `dir_fd`.\n See also `openat`.\n","fields": [6357,6358,6359,6360]},{"file": 58,"line": 29,"col": 4,"fields": [6361,6362,6363,6364]},{"file": 58,"line": 10,"col": 4,"fields": [6365,6366]},{"file": 23,"line": 2395,"col": 4,"docs": " Attaches a global SIGSEGV handler which calls @panic(\"segmentation fault\");\n","fields": []},{"file": 36,"line": 242,"col": 4,"fields": []},{"file": 58,"line": 92,"col": 4,"fields": []},{"file": 58,"line": 40,"col": 4,"fields": [6367,6368,6369,6370,6371]},{"file": 40,"line": 294,"col": 8,"fields": [6372,6373]},{"file": 28,"line": 558,"col": 4,"fields": [6374,6375,6376,6377,6378,6379]},{"file": 58,"line": 2,"col": 4,"fields": [6380]},{"file": 35,"line": 585,"col": 4,"fields": [6381,6382,6383,6384,6385]},{"file": 35,"line": 565,"col": 4,"fields": [6386,6387,6388]},{"file": 35,"line": 545,"col": 4,"fields": [6389,6390,6391]},{"file": 13,"line": 77,"col": 12,"docs": " Insert a new node at the head.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [6392,6393]},{"file": 35,"line": 596,"col": 4,"fields": [6394,6395,6396,6397,6398]},{"file": 13,"line": 58,"col": 12,"docs": " Initialize a linked list.\n\n Returns:\n     An empty linked list.\n","fields": []},{"file": 56,"line": 132,"col": 4,"fields": [6399]},{"file": 22,"line": 2034,"col": 4,"fields": [6400]},{"file": 42,"line": 507,"col": 8,"fields": [6401]},{"file": 42,"line": 511,"col": 8,"fields": [6402]},{"file": 42,"line": 515,"col": 8,"fields": [6403]},{"file": 58,"line": 65,"col": 4,"fields": [6404,6405,6406,6407,6408,6409,6410]},{"file": 15,"line": 218,"col": 12,"fields": [6411,6412,6413,6414]},{"file": 20,"line": 520,"col": 4,"docs": " Reads an integer from memory with size equal to bytes.len.\n T specifies the return type, which must be large enough to store\n the result.\n","fields": [6415,6416,6417]},{"file": 35,"line": 632,"col": 4,"fields": [6418,6419,6420,6421,6422]},{"file": 35,"line": 617,"col": 4,"fields": [6423,6424,6425]},{"file": 35,"line": 654,"col": 4,"fields": [6426,6427,6428,6429,6430]},{"file": 22,"line": 885,"col": 4,"docs": " Get an environment variable.\n See also `getenvC`.\n TODO make this go through libc when we have it\n","fields": [6431]},{"file": 20,"line": 387,"col": 4,"docs": " Copies ::m to newly allocated memory. Caller is responsible to free it.\n","fields": [6432,6433,6434]},{"file": 22,"line": 1518,"col": 4,"docs": " Test whether a file descriptor refers to a terminal.\n","fields": [6435]},{"file": 52,"line": 240,"col": 4,"fields": [6436,6437,6438]},{"file": 57,"line": 43,"col": 8,"fields": []},{"file": 43,"line": 23,"col": 8,"fields": []},{"file": 43,"line": 27,"col": 8,"fields": [6439]},{"file": 43,"line": 48,"col": 8,"docs": " Wait for the event to be set by blocking the current thread.\n","fields": [6440]},{"file": 57,"line": 56,"col": 8,"docs": " Hint to the cpu that execution is spinning\n for the given amount of iterations.\n","fields": [6441]},{"file": 43,"line": 38,"col": 8,"docs": " Sets the event if not already set and\n wakes up all the threads waiting on the event.\n","fields": [6442]},{"file": 67,"line": 6,"col": 4,"docs": " Returns whether x is a nan.\n","fields": [6443]},{"file": 68,"line": 6,"col": 4,"docs": " Returns whether x is an infinity, ignoring sign.\n","fields": [6444]},{"file": 69,"line": 3,"col": 4,"docs": " Returns the nan representation for type T.\n","fields": [6445]},{"file": 70,"line": 17,"col": 4,"docs": " Returns the greatest integer value less than or equal to x.\n\n Special Cases:\n  - floor(+-0)   = +-0\n  - floor(+-inf) = +-inf\n  - floor(nan)   = nan\n","fields": [6446]},{"file": 52,"line": 416,"col": 4,"fields": [6447,6448,6449,6450]},{"file": 23,"line": 2430,"col": 0,"fields": [6451,6452,6453]},{"file": 3,"line": 4,"col": 4,"fields": []},{"file": 22,"line": 455,"col": 4,"docs": " Write to a file descriptor. Keeps trying if it gets interrupted.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n TODO evented I/O integration is disabled until\n https://github.com/ziglang/zig/issues/3557 is solved.\n","fields": [6454,6455]},{"file": 56,"line": 209,"col": 4,"fields": [6456]},{"file": 52,"line": 869,"col": 4,"fields": [6457,6458]},{"file": 28,"line": 477,"col": 0,"fields": [6459,6460,6461,6462,6463,6464]},{"file": 22,"line": 3230,"col": 4,"fields": []},{"file": 43,"line": 187,"col": 4,"fields": []},{"file": 43,"line": 191,"col": 4,"fields": [6465]},{"file": 43,"line": 210,"col": 4,"fields": [6466,6467]},{"file": 43,"line": 203,"col": 4,"fields": [6468]},{"file": 70,"line": 61,"col": 0,"fields": [6469]},{"file": 23,"line": 110,"col": 4,"docs": " Tries to print the stack trace starting from the supplied base pointer to stderr,\n unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [6470,6471]},{"file": 44,"line": 99,"col": 8,"docs": " Create a new progress node.\n Call `Node.end` when done.\n TODO solve https://github.com/ziglang/zig/issues/2765 and then change this\n API to return Progress rather than accept it as a parameter.\n","fields": [6472,6473,6474]},{"file": 40,"line": 149,"col": 8,"docs": " Test whether ANSI escape codes will be treated as such.\n","fields": [6475]},{"file": 37,"line": 125,"col": 8,"docs": " Initialize the timer structure.\n","fields": []},{"file": 44,"line": 57,"col": 12,"docs": " Create a new child progress node.\n Call `Node.end` when done.\n TODO solve https://github.com/ziglang/zig/issues/2765 and then change this\n API to set `self.parent.recently_updated_child` with the return value.\n Until that is fixed you probably want to call `activate` on the return value.\n","fields": [6476,6477,6478]},{"file": 44,"line": 90,"col": 12,"docs": " Tell the parent node that this node is actively being worked on.\n","fields": [6479]},{"file": 44,"line": 125,"col": 8,"docs": " Updates the terminal and resets `self.next_refresh_timestamp`.\n","fields": [6480]},{"file": 44,"line": 74,"col": 12,"fields": [6481]},{"file": 44,"line": 176,"col": 8,"fields": [6482,6483,6484]},{"file": 52,"line": 348,"col": 4,"fields": [6485,6486,6487]},{"file": 28,"line": 499,"col": 4,"fields": [6488,6489,6490,6491,6492,6493]},{"file": 52,"line": 963,"col": 4,"fields": []},{"file": 43,"line": 250,"col": 8,"fields": [6494,6495]},{"file": 52,"line": 104,"col": 4,"fields": [6496,6497,6498,6499]},{"file": 43,"line": 243,"col": 8,"fields": [6500,6501]},{"file": 21,"line": 96,"col": 4,"fields": [6502]},{"file": 22,"line": 903,"col": 4,"docs": " Get an environment variable with a null-terminated name.\n See also `getenv`.\n","fields": [6503]},{"file": 22,"line": 2763,"col": 4,"fields": [6504,6505]},{"file": 22,"line": 2740,"col": 4,"fields": [6506,6507]},{"file": 28,"line": 1121,"col": 4,"fields": [6508,6509,6510]},{"file": 44,"line": 186,"col": 4,"fields": [6511,6512,6513,6514]},{"file": 37,"line": 154,"col": 8,"docs": " Reads the timer value since start or the last reset in nanoseconds\n","fields": [6515]},{"file": 44,"line": 117,"col": 8,"docs": " Updates the terminal if enough time has passed since last update.\n","fields": [6516]},{"file": 44,"line": 68,"col": 12,"docs": " This is the same as calling `start` and then `end` on the returned `Node`.\n","fields": [6517]},{"file": 28,"line": 892,"col": 4,"fields": [6518,6519,6520,6521,6522,6523,6524]},{"file": 52,"line": 108,"col": 4,"fields": [6525,6526,6527]},{"file": 20,"line": 370,"col": 4,"fields": [6528,6529]},{"file": 52,"line": 527,"col": 4,"fields": [6530,6531]},{"file": 52,"line": 499,"col": 4,"fields": [6532,6533]},{"file": 28,"line": 1108,"col": 0,"fields": [6534,6535]},{"file": 37,"line": 178,"col": 4,"fields": []},{"file": 28,"line": 945,"col": 0,"fields": [6536,6537,6538,6539,6540,6541,6542]},{"file": 20,"line": 364,"col": 4,"fields": [6543,6544]},{"file": 52,"line": 514,"col": 0,"fields": [6545,6546]},{"file": 28,"line": 1096,"col": 0,"fields": [6547,6548]},{"file": 20,"line": 270,"col": 4,"fields": [6549,6550,6551]},{"file": 60,"line": 6,"col": 4,"fields": [6552,6553]},{"file": 52,"line": 31,"col": 4,"docs": " See `std.elf` for the constants.\n","fields": [6554]},{"file": 60,"line": 79,"col": 0,"fields": [6555,6556,6557,6558]},{"file": 12,"line": 527,"col": 8,"fields": [6559]},{"file": 12,"line": 535,"col": 8,"fields": [6560,6561]},{"file": 30,"line": 663,"col": 4,"fields": [6562,6563]},{"file": 12,"line": 541,"col": 4,"fields": [6564]},{"file": 40,"line": 179,"col": 8,"docs": " Repositions read/write file offset relative to the beginning.\n","fields": [6565,6566]},{"file": 12,"line": 543,"col": 8,"fields": [6567]},{"file": 22,"line": 2434,"col": 4,"docs": " Repositions read/write file offset relative to the beginning.\n","fields": [6568,6569]},{"file": 45,"line": 136,"col": 8,"fields": [6570]},{"file": 55,"line": 165,"col": 4,"docs": " Provides generic hashing for any eligible type.\n Only hashes `key` itself, pointers are not followed.\n Slices are rejected to avoid ambiguity on the user's intention.\n","fields": [6571,6572]},{"file": 45,"line": 162,"col": 8,"fields": [6573]},{"file": 45,"line": 41,"col": 8,"fields": [6574]},{"file": 55,"line": 75,"col": 4,"docs": " Provides generic hashing for any eligible type.\n Strategy is provided to determine if pointers should be followed or not.\n","fields": [6575,6576,6577]},{"file": 45,"line": 73,"col": 8,"fields": [6578,6579]},{"file": 45,"line": 144,"col": 8,"fields": [6580,6581]},{"file": 45,"line": 26,"col": 0,"fields": [6582,6583,6584]},{"file": 45,"line": 11,"col": 0,"fields": [6585,6586]},{"file": 45,"line": 16,"col": 0,"fields": [6587]},{"file": 45,"line": 30,"col": 0,"fields": [6588,6589,6590]},{"file": 45,"line": 20,"col": 0,"fields": [6591,6592]},{"file": 45,"line": 62,"col": 8,"fields": [6593,6594]},{"file": 20,"line": 570,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n Assumes the endianness of memory is native. This means the function can\n simply pointer cast memory.\n","fields": [6595,6596]},{"file": 21,"line": 932,"col": 4,"fields": [6597,6598,6599]},{"file": 45,"line": 48,"col": 4,"fields": [6600,6601]},{"file": 8,"line": 15,"col": 4,"fields": [6602,6603]},{"file": 33,"line": 554,"col": 4,"docs": " Given a type, reference all the declarations inside, so that the semantic analyzer sees them.\n","fields": [6604]},{"file": 33,"line": 102,"col": 4,"fields": [6605]},{"file": 8,"line": 11,"col": 4,"docs": " List of items.\n\n This is a wrapper around an array of T values. Initialize with\n `init`.\n","fields": [6606]},{"file": 10,"line": 9,"col": 4,"docs": " Many producer, many consumer, non-allocating, thread-safe.\n Uses a mutex to protect access.\n","fields": [6607]},{"file": 20,"line": 1312,"col": 0,"fields": [6608]},{"file": 12,"line": 32,"col": 4,"fields": [6609,6610,6611,6612]},{"file": 9,"line": 35,"col": 0,"fields": [6613]},{"file": 13,"line": 192,"col": 4,"docs": " A tail queue is headed by a pair of pointers, one to the head of the\n list and the other to the tail of the list. The elements are doubly\n linked so that an arbitrary element can be removed without a need to\n traverse the list. New elements can be added to the list before or\n after an existing element, at the head of the list, or at the end of\n the list. A tail queue may be traversed in either direction.\n","fields": [6614]},{"file": 15,"line": 15,"col": 4,"fields": [6615]},{"file": 12,"line": 525,"col": 4,"fields": [6616]},{"file": 47,"line": 219,"col": 4,"fields": [6617]},{"file": 33,"line": 88,"col": 4,"fields": [6618]},{"file": 12,"line": 533,"col": 4,"fields": [6619]},{"file": 47,"line": 308,"col": 4,"fields": [6620]},{"file": 4,"line": 31,"col": 4,"docs": " Generic image datatype that contains pixels of type `T`.\n","fields": [6621]},{"file": 62,"line": 66,"col": 4,"docs": " Returns the return type `sqrt` will return given an operand of type `T`.\n","fields": [6622]},{"file": 16,"line": 13,"col": 4,"docs": " TODO this is not integrated with evented I/O yet.\n https://github.com/ziglang/zig/issues/3557\n","fields": [6623]},{"file": 21,"line": 882,"col": 4,"fields": [6624]},{"file": 21,"line": 875,"col": 4,"fields": [6625]},{"file": 7,"line": 16,"col": 0,"fields": [6626]},{"file": 71,"line": 20,"col": 4,"docs": " Returns the base-2 logarithm of x.\n\n Special Cases:\n  - log2(+inf)  = +inf\n  - log2(0)     = -inf\n  - log2(x)     = nan if x < 0\n  - log2(nan)   = nan\n","fields": [6627]},{"file": 21,"line": 227,"col": 4,"docs": " Given two types, returns the smallest one which is capable of holding the\n full range of the minimum value.\n","fields": [6628,6629]},{"file": 13,"line": 14,"col": 4,"docs": " A singly-linked list is headed by a single forward pointer. The elements\n are singly linked for minimum space and pointer manipulation overhead at\n the expense of O(n) removal for arbitrary elements. New elements can be\n added to the list after an existing element or at the head of the list.\n A singly-linked list may only be traversed in the forward direction.\n Singly-linked lists are ideal for applications with large datasets and\n few or no removals or for implementing a LIFO queue.\n","fields": [6630]},{"file": 17,"line": 8,"col": 4,"docs": " Many reader, many writer, non-allocating, thread-safe\n Uses a spinlock to protect push() and pop()\n When building in single threaded mode, this is a simple linked list.\n","fields": [6631]},{"file": 18,"line": 3,"col": 4,"fields": [6632,6633]},{"file": 47,"line": 250,"col": 4,"fields": [6634]},{"file": 47,"line": 114,"col": 12,"fields": [6635]},{"file": 21,"line": 421,"col": 4,"fields": [6636]},{"file": 47,"line": 112,"col": 4,"fields": [6637]},{"file": 8,"line": 21,"col": 11,"fields": [6638,6639,6640]},{"file": 0,"line": 0,"col": 0,"fields": []},{"file": 9,"line": 9,"col": 19,"fields": [6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657]},{"file": 23,"line": 1767,"col": 25,"fields": [6658,6659,6660,6661]},{"file": 10,"line": 10,"col": 11,"fields": [6662,6663,6664]},{"file": 11,"line": 7,"col": 19,"fields": [6665,6666]},{"file": 12,"line": 33,"col": 11,"fields": [6667,6668,6669,6670,6671]},{"file": 23,"line": 1197,"col": 18,"fields": [6672,6673,6674]},{"file": 9,"line": 36,"col": 11,"fields": [6675,6676,6677,6678,6679]},{"file": 23,"line": 1761,"col": 26,"fields": [6680,6681]},{"file": 31,"line": 256,"col": 20,"fields": [6682]},{"file": 13,"line": 193,"col": 11,"fields": [6683,6684,6685]},{"file": 14,"line": 20,"col": 20,"fields": [6686,6687]},{"file": 15,"line": 16,"col": 11,"fields": [6688]},{"file": 23,"line": 1774,"col": 19,"fields": [6689,6690]},{"file": 23,"line": 1807,"col": 17,"fields": [6691,6692]},{"file": 23,"line": 1862,"col": 18,"fields": [6693,6694,6695,6696]},{"file": 4,"line": 32,"col": 11,"fields": [6697,6698,6699,6700]},{"file": 16,"line": 14,"col": 11,"fields": [6701]},{"file": 7,"line": 17,"col": 11,"fields": []},{"file": 7,"line": 197,"col": 17,"fields": [6702,6703,6704]},{"file": 23,"line": 1752,"col": 20,"fields": [6705,6706,6707,6708]},{"file": 13,"line": 15,"col": 11,"fields": [6709]},{"file": 17,"line": 9,"col": 11,"fields": [6710,6711]},{"file": 46,"line": 54,"col": 22,"fields": [6712,6713,6714]},{"file": 18,"line": 4,"col": 11,"fields": [6715,6716,6717,6718]},{"file": 23,"line": 2305,"col": 13,"fields": [6719,6720]},{"file": 9,"line": 3,"col": 16,"fields": [6721,6722,6723]},{"file": 7,"line": 154,"col": 17,"fields": [6724,6725]},{"file": 4,"line": 0,"col": 0,"fields": []},{"file": 11,"line": 11,"col": 19,"fields": [6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6747,6748,6749,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762]},{"file": 4,"line": 24,"col": 18,"fields": [6763,6764,6765]},{"file": 7,"line": 300,"col": 17,"fields": [6766,6767,6768,6769]},{"file": 5,"line": 0,"col": 0,"fields": []},{"file": 19,"line": 116,"col": 21,"fields": [6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794]},{"file": 6,"line": 0,"col": 0,"fields": []},{"file": 7,"line": 0,"col": 0,"fields": []},{"file": 1,"line": 0,"col": 0,"fields": []},{"file": 2,"line": 0,"col": 0,"fields": []},{"file": 3,"line": 0,"col": 0,"fields": []},{"file": 19,"line": 460,"col": 78},{"file": 7,"line": 380,"col": 17,"fields": [6795]},{"file": 34,"line": 366,"col": 16,"fields": [6796]},{"file": 35,"line": 668,"col": 19,"fields": [6797,6798,6799]},{"file": 40,"line": 333,"col": 25,"fields": [6800,6801]},{"file": 40,"line": 11,"col": 17,"fields": [6802]},{"file": 9,"line": 198,"col": 19,"fields": [6803,6804]},{"file": 19,"line": 45,"col": 23,"fields": [6805,6806]},{"file": 23,"line": 245,"col": 58},{"file": 7,"line": 353,"col": 17,"fields": [6807]},{"file": 7,"line": 366,"col": 17,"fields": [6808]},{"file": 40,"line": 28,"col": 26,"fields": [6809,6810]},{"file": 40,"line": 347,"col": 26,"fields": [6811,6812]},{"file": 18,"line": 33,"col": 34,"fields": [6813,6814,6815,6816]},{"file": 19,"line": 352,"col": 19,"fields": [6817,6818]},{"file": 23,"line": 1206,"col": 22,"fields": [6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829]},{"file": 23,"line": 190,"col": 85},{"file": 23,"line": 1243,"col": 103},{"file": 23,"line": 1245,"col": 75},{"file": 23,"line": 1881,"col": 26,"fields": [6830,6831,6832,6833,6834,6835,6836,6837,6838,6839,6840,6841,6842,6843,6844,6845,6846]},{"file": 23,"line": 1869,"col": 21,"fields": [6847,6848,6849,6850]},{"file": 23,"line": 765,"col": 114},{"file": 23,"line": 790,"col": 62},{"file": 23,"line": 1265,"col": 106},{"file": 23,"line": 1269,"col": 78},{"file": 23,"line": 194,"col": 58},{"file": 23,"line": 98,"col": 85},{"file": 23,"line": 281,"col": 26,"fields": [6851,6852]},{"file": 23,"line": 102,"col": 58},{"file": 41,"line": 165,"col": 4,"fields": [6853]},{"file": 41,"line": 249,"col": 25,"fields": [6854]},{"file": 28,"line": 16,"col": 26,"fields": [6855,6856,6857,6858]},{"file": 35,"line": 514,"col": 27,"fields": [6859,6860,6861,6862]},{"file": 11,"line": 51,"col": 21,"fields": [6863,6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6877,6878,6879,6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892,6893,6894,6895,6896,6897,6898,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912]},{"file": 35,"line": 601,"col": 33,"fields": [6913,6914,6915]},{"file": 22,"line": 2827,"col": 50},{"file": 42,"line": 520,"col": 21,"fields": [6916,6917]},{"file": 42,"line": 488,"col": 17,"fields": [6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932]},{"file": 43,"line": 13,"col": 23,"fields": [6933]},{"file": 36,"line": 259,"col": 47},{"file": 43,"line": 181,"col": 20,"fields": [6934]},{"file": 23,"line": 2438,"col": 79},{"file": 23,"line": 2439,"col": 79},{"file": 44,"line": 42,"col": 21,"fields": [6935,6936,6937,6938,6939,6940]},{"file": 3,"line": 19,"col": 43},{"file": 3,"line": 24,"col": 67},{"file": 3,"line": 33,"col": 34},{"file": 3,"line": 29,"col": 45},{"file": 3,"line": 30,"col": 73},{"file": 3,"line": 40,"col": 50},{"file": 3,"line": 42,"col": 52},{"file": 23,"line": 117,"col": 85},{"file": 44,"line": 132,"col": 77},{"file": 44,"line": 136,"col": 76},{"file": 44,"line": 144,"col": 48},{"file": 44,"line": 149,"col": 51},{"file": 44,"line": 153,"col": 68},{"file": 44,"line": 154,"col": 57},{"file": 44,"line": 157,"col": 68},{"file": 44,"line": 158,"col": 54},{"file": 44,"line": 165,"col": 44},{"file": 45,"line": 130,"col": 19,"fields": [6941,6942,6943]},{"file": 45,"line": 37,"col": 24,"fields": [6944,6945]},{"file": 8,"line": 0,"col": 0,"fields": []},{"file": 9,"line": 0,"col": 0,"fields": []},{"file": 10,"line": 0,"col": 0,"fields": []},{"file": 13,"line": 197,"col": 25,"fields": [6946,6947,6948]},{"file": 11,"line": 0,"col": 0,"fields": []},{"file": 11,"line": 262,"col": 20,"fields": [6949,6950,6951,6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964,6965,6966,6967,6968,6969,6970]},{"file": 11,"line": 306,"col": 22,"fields": [6971,6972,6973]},{"file": 12,"line": 0,"col": 0,"fields": []},{"file": 12,"line": 49,"col": 23,"fields": [6974,6975]},{"file": 12,"line": 54,"col": 22,"fields": [6976,6977,6978]},{"file": 39,"line": 251,"col": 21,"fields": [6979,6980,6981,6982,6983]},{"file": 31,"line": 260,"col": 22,"fields": [6984,6985,6986,6987,6988,6989,6990,6991,6992,6993]},{"file": 13,"line": 0,"col": 0,"fields": []},{"file": 14,"line": 0,"col": 0,"docs": " TODO mege this with `std.fs`\n","fields": []},{"file": 14,"line": 24,"col": 23,"fields": [6994,6995,6996]},{"file": 14,"line": 30,"col": 20,"fields": [6997,6998,6999,7000,7001,7002,7003]},{"file": 15,"line": 0,"col": 0,"fields": []},{"file": 23,"line": 1779,"col": 18,"fields": [7004,7005,7006,7007,7008,7009,7010,7011,7012,7013]},{"file": 16,"line": 0,"col": 0,"fields": []},{"file": 13,"line": 19,"col": 25,"fields": [7014,7015]},{"file": 17,"line": 0,"col": 0,"fields": []},{"file": 17,"line": 17,"col": 25,"fields": [7016,7017]},{"file": 46,"line": 29,"col": 27,"fields": [7018,7019,7020]},{"file": 18,"line": 0,"col": 0,"fields": []},{"file": 4,"line": 12,"col": 19,"fields": [7021,7022,7023]},{"file": 4,"line": 66,"col": 19,"fields": [7024,7025,7026]},{"file": 4,"line": 100,"col": 15,"fields": [7027,7028,7029,7030,7031]},{"file": 19,"line": 0,"col": 0,"fields": []},{"file": 19,"line": 211,"col": 23,"fields": [7032,7033,7034]},{"file": 19,"line": 183,"col": 22,"fields": [7035,7036,7037]},{"file": 19,"line": 225,"col": 27,"fields": [7038,7039]},{"file": 19,"line": 158,"col": 24,"fields": [7040,7041,7042,7043,7044,7045,7046]},{"file": 19,"line": 243,"col": 26,"fields": [7047,7048]},{"file": 19,"line": 195,"col": 32,"fields": [7049,7050,7051]},{"file": 19,"line": 307,"col": 28,"fields": [7052,7053,7054]},{"file": 19,"line": 267,"col": 22,"fields": [7055,7056,7057,7058]},{"file": 19,"line": 219,"col": 25,"fields": [7059]},{"file": 19,"line": 250,"col": 21,"fields": [7060,7061,7062,7063]},{"file": 19,"line": 300,"col": 23,"fields": [7064,7065]},{"file": 19,"line": 152,"col": 22,"fields": [7066]},{"file": 19,"line": 259,"col": 27,"fields": [7067,7068,7069]},{"file": 19,"line": 203,"col": 28,"fields": [7070,7071,7072]},{"file": 19,"line": 294,"col": 25,"fields": [7073]},{"file": 19,"line": 232,"col": 22,"fields": [7074,7075]},{"file": 19,"line": 284,"col": 19,"fields": [7076,7077,7078,7079,7080]},{"file": 19,"line": 276,"col": 22,"fields": [7081,7082,7083]},{"file": 19,"line": 145,"col": 20,"fields": [7084,7085]},{"file": 6,"line": 2,"col": 18,"fields": [7086,7087,7088]},{"file": 19,"line": 359,"col": 23,"fields": [7089,7090,7091]},{"file": 19,"line": 86,"col": 17,"fields": [7092,7093,7094,7095]},{"file": 19,"line": 95,"col": 30,"fields": [7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109]},{"file": 19,"line": 382,"col": 24,"fields": [7110,7111]},{"file": 19,"line": 423,"col": 19,"fields": [7112,7113]},{"file": 19,"line": 52,"col": 26,"fields": [7114,7115,7116,7117]},{"file": 19,"line": 72,"col": 24,"fields": [7118,7119,7120,7121,7122,7123,7124,7125,7126]},{"file": 19,"line": 61,"col": 24,"fields": [7127,7128,7129,7130,7131,7132]},{"file": 20,"line": 0,"col": 0,"fields": []},{"file": 21,"line": 0,"col": 0,"fields": []},{"file": 48,"line": 8,"col": 19,"fields": [7133]},{"file": 22,"line": 16,"col": 0,"fields": []},{"file": 23,"line": 0,"col": 0,"fields": []},{"file": 24,"line": 0,"col": 0,"fields": []},{"file": 25,"line": 0,"col": 0,"fields": []},{"file": 26,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 0,"col": 0,"fields": []},{"file": 28,"line": 0,"col": 0,"fields": []},{"file": 29,"line": 0,"col": 0,"fields": []},{"file": 30,"line": 0,"col": 0,"fields": []},{"file": 31,"line": 0,"col": 0,"fields": []},{"file": 32,"line": 0,"col": 0,"fields": []},{"file": 33,"line": 0,"col": 0,"fields": []},{"file": 34,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 0,"col": 0,"fields": []},{"file": 36,"line": 2,"col": 0,"fields": []},{"file": 37,"line": 0,"col": 0,"fields": []},{"file": 44,"line": 9,"col": 21,"fields": [7134,7135,7136,7137,7138,7139,7140,7141,7142]},{"file": 57,"line": 3,"col": 21,"fields": [7143]},{"file": 38,"line": 0,"col": 0,"fields": []},{"file": 39,"line": 0,"col": 0,"fields": []},{"file": 20,"line": 15,"col": 22,"fields": [7144,7145]},{"file": 9,"line": 149,"col": 18,"fields": [7146,7147,7148,7149]},{"file": 40,"line": 0,"col": 0,"fields": []},{"file": 40,"line": 205,"col": 21,"fields": [7150,7151,7152,7153,7154]},{"file": 9,"line": 199,"col": 16,"fields": [7155,7156]},{"file": 49,"line": 792,"col": 22,"fields": [7157,7158,7159,7160]},{"file": 26,"line": 346,"col": 16,"fields": [7161,7162,7163,7164,7165,7166,7167,7168,7169,7170,7171,7172,7173]},{"file": 26,"line": 309,"col": 15,"fields": [7174,7175,7176,7177,7178]},{"file": 26,"line": 880,"col": 15,"fields": [7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270,7271,7272,7273,7274,7275,7276,7277,7278,7279,7280,7281,7282,7283,7284,7285,7286,7287,7288,7289,7290,7291,7292,7293,7294,7295,7296,7297,7298,7299,7300,7301,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7316,7317,7318,7319,7320,7321,7322,7323,7324,7325,7326,7327,7328,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7348,7349,7350,7351,7352,7353,7354,7355]},{"file": 26,"line": 333,"col": 26,"fields": [7356,7357,7358,7359,7360,7361,7362,7363,7364,7365]},{"file": 23,"line": 1219,"col": 24,"fields": [7366,7367]},{"file": 23,"line": 1802,"col": 12,"fields": [7368,7369,7370]},{"file": 23,"line": 1792,"col": 17,"fields": [7371,7372]},{"file": 41,"line": 0,"col": 0,"fields": []},{"file": 41,"line": 176,"col": 21,"fields": [7373,7374]},{"file": 11,"line": 103,"col": 26,"fields": [7375,7376,7377,7378,7379,7380,7381,7382,7383,7384,7385,7386,7387,7388,7389,7390,7391,7392,7393,7394,7395,7396,7397]},{"file": 11,"line": 128,"col": 26,"fields": [7398,7399,7400,7401,7402,7403,7404,7405,7406]},{"file": 11,"line": 139,"col": 28,"fields": [7407,7408,7409]},{"file": 42,"line": 1,"col": 0,"fields": []},{"file": 43,"line": 0,"col": 0,"fields": []},{"file": 49,"line": 1100,"col": 4,"fields": [7410,7411,7412,7413]},{"file": 43,"line": 242,"col": 23,"fields": []},{"file": 37,"line": 99,"col": 18,"fields": [7414,7415,7416]},{"file": 44,"line": 0,"col": 0,"fields": []},{"file": 28,"line": 1104,"col": 24,"fields": [7417]},{"file": 26,"line": 700,"col": 25,"fields": [7418,7419,7420,7421,7422,7423,7424]},{"file": 30,"line": 628,"col": 18,"fields": [7425,7426,7427,7428,7429]},{"file": 45,"line": 0,"col": 0,"fields": []},{"file": 9,"line": 142,"col": 19,"fields": [7430,7431,7432,7433]},{"file": 31,"line": 261,"col": 17,"fields": [7434,7435]},{"file": 14,"line": 482,"col": 27,"fields": [7436,7437]},{"file": 46,"line": 14,"col": 17,"fields": [7438,7439,7440,7441,7442,7443,7444,7445]},{"file": 14,"line": 83,"col": 26,"fields": [7446]},{"file": 14,"line": 65,"col": 25,"fields": [7447,7448,7449,7450]},{"file": 14,"line": 74,"col": 30,"fields": [7451,7452,7453,7454]},{"file": 14,"line": 47,"col": 28,"fields": [7455,7456,7457,7458]},{"file": 14,"line": 39,"col": 27,"fields": [7459,7460,7461]},{"file": 14,"line": 56,"col": 27,"fields": [7462,7463,7464,7465]},{"file": 23,"line": 1747,"col": 16,"fields": [7466,7467]},{"file": 46,"line": 0,"col": 0,"fields": []},{"file": 46,"line": 46,"col": 23,"fields": [7468,7469,7470]},{"file": 19,"line": 173,"col": 25,"fields": [7471,7472,7473,7474]},{"file": 19,"line": 314,"col": 25,"fields": [7475,7476,7477]},{"file": 19,"line": 386,"col": 25,"fields": [7478,7479,7480,7481,7482,7483,7484,7485]},{"file": 47,"line": 0,"col": 0,"fields": []},{"file": 48,"line": 0,"col": 0,"fields": []},{"file": 48,"line": 38,"col": 18,"fields": [7486,7487]},{"file": 49,"line": 0,"col": 0,"fields": []},{"file": 50,"line": 0,"col": 0,"fields": []},{"file": 51,"line": 0,"col": 0,"docs": " Platform-dependent types and values that are used along with OS-specific APIs.\n These are imported into `std.c`, `std.os`, and `std.os.linux`.\n Root source files can define `os.bits` and these will additionally be added\n to the namespace.\n","fields": []},{"file": 51,"line": 26,"col": 24,"fields": [7488,7489]},{"file": 49,"line": 784,"col": 4,"fields": [7490,7491,7492,7493]},{"file": 49,"line": 1037,"col": 20,"fields": [7494,7495,7496]},{"file": 52,"line": 7,"col": 0,"fields": []},{"file": 42,"line": 600,"col": 23,"fields": [7497,7498,7499,7500,7501,7502]},{"file": 53,"line": 6,"col": 0,"fields": []},{"file": 42,"line": 539,"col": 20,"fields": [7503,7504,7505,7506,7507,7508,7509,7510,7511,7512,7513]},{"file": 49,"line": 846,"col": 23,"fields": [7514,7515,7516,7517]},{"file": 51,"line": 21,"col": 18,"fields": [7518,7519]},{"file": 49,"line": 856,"col": 15,"fields": [7520,7521]},{"file": 42,"line": 594,"col": 23,"fields": [7522,7523,7524]},{"file": 49,"line": 760,"col": 20,"fields": [7525,7526,7527,7528]},{"file": 49,"line": 1043,"col": 19,"fields": [7529,7530]},{"file": 54,"line": 0,"col": 0,"fields": []},{"file": 23,"line": 1182,"col": 20,"fields": [7531,7532,7533]},{"file": 23,"line": 29,"col": 15,"fields": [7534,7535,7536,7537,7538,7539,7540]},{"file": 26,"line": 667,"col": 23,"fields": [7541,7542,7543,7544,7545,7546,7547,7548]},{"file": 26,"line": 623,"col": 22,"fields": [7549,7550,7551,7552,7553,7554]},{"file": 26,"line": 713,"col": 26,"fields": [7555,7556]},{"file": 26,"line": 751,"col": 25,"fields": [7557,7558]},{"file": 26,"line": 564,"col": 23,"fields": [7559,7560,7561,7562,7563,7564,7565,7566,7567,7568,7569,7570,7571,7572]},{"file": 27,"line": 18,"col": 17,"fields": [7573,7574]},{"file": 28,"line": 10,"col": 22,"fields": [7575,7576,7577]},{"file": 30,"line": 53,"col": 20,"fields": [7578,7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589]},{"file": 30,"line": 40,"col": 32,"fields": [7590,7591,7592,7593,7594,7595,7596,7597,7598]},{"file": 30,"line": 462,"col": 16,"fields": [7599,7600,7601,7602,7603,7604]},{"file": 30,"line": 492,"col": 12,"fields": [7605,7606]},{"file": 31,"line": 32,"col": 17,"fields": [7607,7608,7609,7610,7611,7612,7613]},{"file": 31,"line": 235,"col": 23,"fields": [7614,7615]},{"file": 31,"line": 225,"col": 19,"fields": [7616,7617,7618,7619,7620,7621,7622]},{"file": 55,"line": 0,"col": 0,"fields": []},{"file": 56,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 55,"col": 22,"fields": []},{"file": 57,"line": 0,"col": 0,"fields": []},{"file": 57,"line": 6,"col": 18,"fields": [7623,7624]},{"file": 39,"line": 205,"col": 23,"fields": [7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636]},{"file": 39,"line": 10,"col": 27,"fields": [7637,7638,7639,7640,7641,7642,7643,7644]},{"file": 49,"line": 1048,"col": 29,"fields": [7645,7646,7647,7648,7649]},{"file": 14,"line": 496,"col": 24,"fields": [7650,7651]},{"file": 46,"line": 917,"col": 24,"fields": [7652,7653,7654,7655,7656,7657,7658]},{"file": 19,"line": 321,"col": 31,"fields": [7659,7660,7661,7662,7663,7664,7665,7666]},{"file": 58,"line": 0,"col": 0,"fields": []},{"file": 59,"line": 0,"col": 0,"fields": []},{"file": 60,"line": 0,"col": 0,"fields": []},{"file": 61,"line": 2,"col": 0,"fields": []},{"file": 26,"line": 753,"col": 10,"fields": [7667]},{"file": 31,"line": 236,"col": 26,"fields": [7668,7669]},{"file": 55,"line": 7,"col": 25,"fields": [7670,7671,7672]},{"file": 49,"line": 1050,"col": 12,"fields": [7673,7674]},{"file": 49,"line": 1070,"col": 14,"fields": [7675,7676,7677]},{"file": 49,"line": 1081,"col": 13,"fields": [7678,7679]},{"file": 49,"line": 1085,"col": 12,"fields": [7680,7681,7682]},{"file": 19,"line": 333,"col": 35,"fields": [7683,7684,7685]},{"file": 59,"line": 43,"col": 19,"fields": [7686,7687]},{"file": 59,"line": 99,"col": 12,"fields": [7688,7689]},{"file": 59,"line": 96,"col": 19,"fields": []},{"file": 59,"line": 105,"col": 17,"fields": [7690,7691,7692,7693,7694,7695]},{"file": 42,"line": 548,"col": 11,"fields": [7696,7697,7698]},{"file": 42,"line": 553,"col": 13,"fields": [7699]},{"file": 49,"line": 1051,"col": 15,"fields": [7700,7701]},{"file": 49,"line": 1061,"col": 16,"fields": [7702,7703]},{"file": 49,"line": 1073,"col": 15,"fields": [7704,7705]},{"file": 49,"line": 1052,"col": 20,"fields": [7706,7707]},{"file": 49,"line": 1056,"col": 19,"fields": [7708,7709]},{"file": 49,"line": 1063,"col": 21,"fields": [7710,7711,7712]},{"file": 49,"line": 1074,"col": 22,"fields": [7713,7714]},{"file": 8,"line": 86,"col": 12,"docs": " Sets the value at index `i`, asserting that the value is in range.\n","fields": [7715,7716,7717]},{"file": 8,"line": 80,"col": 12,"docs": " Sets the value at index `i`, or returns `error.OutOfBounds` if\n the index is not in range.\n","fields": [7718,7719,7720]},{"file": 8,"line": 74,"col": 12,"docs": " Safely access ptr to index i of the list.\n","fields": [7721,7722]},{"file": 8,"line": 45,"col": 12,"docs": " Initialize with capacity to hold at least num elements.\n Deinitialize with `deinit` or use `toOwnedSlice`.\n","fields": [7723,7724]},{"file": 8,"line": 145,"col": 12,"docs": " Extend the list by 1 element, but asserting `self.capacity`\n is sufficient to hold an additional item.\n","fields": [7725,7726]},{"file": 8,"line": 177,"col": 12,"docs": " Removes the element at the specified index and returns it\n or an error.OutOfBounds is returned. If no error then\n the empty slot is filled from the end of the list.\n","fields": [7727,7728]},{"file": 8,"line": 69,"col": 12,"docs": " Safely access index i of the list.\n","fields": [7729,7730]},{"file": 8,"line": 165,"col": 12,"docs": " Removes the element at the specified index and returns it.\n The empty slot is filled from the end of the list.\n","fields": [7731,7732]},{"file": 8,"line": 232,"col": 12,"docs": " Remove and return the last element from the list. Asserts\n the list has at least one item.\n","fields": [7733]},{"file": 8,"line": 184,"col": 12,"docs": " Append the slice of items to the list. Allocates more\n memory as necessary.\n","fields": [7734,7735]},{"file": 8,"line": 128,"col": 12,"docs": " Insert slice `items` at index `n`. Moves\n `list[n .. list.len]` to make room.\n","fields": [7736,7737,7738]},{"file": 8,"line": 100,"col": 12,"docs": " ArrayList takes ownership of the passed in slice. The slice must have been\n allocated with `allocator`.\n Deinitialize with `deinit` or use `toOwnedSlice`.\n","fields": [7739,7740]},{"file": 8,"line": 32,"col": 12},{"file": 8,"line": 118,"col": 12,"docs": " Insert `item` at index `n`. Moves `list[n .. list.len]`\n to make room.\n","fields": [7741,7742,7743]},{"file": 8,"line": 52,"col": 12,"docs": " Release all allocated memory.\n","fields": [7744]},{"file": 8,"line": 198,"col": 12,"docs": " Reduce allocated capacity to `new_len`.\n","fields": [7745,7746]},{"file": 8,"line": 31,"col": 12},{"file": 8,"line": 109,"col": 12,"docs": " The caller owns the returned memory. ArrayList becomes empty.\n","fields": [7747]},{"file": 8,"line": 152,"col": 12,"docs": " Remove the element at index `i` from the list and return\n its value. Asserts the array has at least one item.\n","fields": [7748,7749]},{"file": 8,"line": 238,"col": 12,"docs": " Like `pop` but returns `null` if empty.\n","fields": [7750]},{"file": 8,"line": 22,"col": 8},{"file": 0,"line": 1,"col": 4,"docs": " provides linear algebra with focus on game dev.\n"},{"file": 0,"line": 7,"col": 4,"docs": " provides a PCX loader\n"},{"file": 0,"line": 4,"col": 4,"docs": " provides a NetBMP loader\n"},{"file": 0,"line": 19,"col": 4,"docs": " provides functions and types to work with colors\n"},{"file": 0,"line": 22,"col": 4,"docs": " provides some useful math functions\n"},{"file": 9,"line": 28,"col": 4},{"file": 10,"line": 105,"col": 12,"fields": [7751]},{"file": 10,"line": 113,"col": 12,"fields": [7752,7753,7754]},{"file": 10,"line": 16,"col": 12},{"file": 10,"line": 26,"col": 12,"fields": [7755,7756]},{"file": 10,"line": 18,"col": 12,"fields": []},{"file": 10,"line": 59,"col": 12,"fields": [7757,7758]},{"file": 10,"line": 42,"col": 12,"fields": [7759]},{"file": 10,"line": 15,"col": 12},{"file": 10,"line": 76,"col": 12,"docs": " Thread-safe with get() and remove(). Returns whether node was actually removed.\n","fields": [7760,7761]},{"file": 10,"line": 99,"col": 12,"fields": [7762]},{"file": 11,"line": 525,"col": 8,"fields": [7763]},{"file": 11,"line": 663,"col": 8,"fields": [7764]},{"file": 11,"line": 322,"col": 8,"fields": [7765,7766]},{"file": 11,"line": 581,"col": 8,"fields": [7767]},{"file": 11,"line": 320,"col": 8},{"file": 11,"line": 599,"col": 8,"fields": [7768]},{"file": 11,"line": 511,"col": 8,"fields": [7769]},{"file": 11,"line": 371,"col": 8,"fields": [7770,7771]},{"file": 11,"line": 588,"col": 8,"fields": [7772]},{"file": 11,"line": 457,"col": 8,"fields": [7773]},{"file": 11,"line": 537,"col": 8,"fields": [7774]},{"file": 11,"line": 613,"col": 8,"fields": [7775]},{"file": 11,"line": 518,"col": 8,"fields": [7776]},{"file": 11,"line": 641,"col": 8,"fields": [7777]},{"file": 11,"line": 592,"col": 8,"fields": [7778]},{"file": 11,"line": 365,"col": 8,"fields": [7779,7780]},{"file": 11,"line": 332,"col": 8,"docs": " Returned slice must be freed by the caller.\n","fields": [7781,7782,7783]},{"file": 11,"line": 547,"col": 8,"fields": [7784]},{"file": 11,"line": 11,"col": 8},{"file": 11,"line": 723,"col": 8,"fields": [7785]},{"file": 11,"line": 262,"col": 8},{"file": 11,"line": 306,"col": 8},{"file": 11,"line": 659,"col": 8,"fields": [7786]},{"file": 11,"line": 452,"col": 8},{"file": 11,"line": 379,"col": 8,"fields": [7787,7788]},{"file": 11,"line": 655,"col": 8,"fields": [7789]},{"file": 11,"line": 287,"col": 8},{"file": 11,"line": 312,"col": 8},{"file": 11,"line": 727,"col": 8},{"file": 11,"line": 478,"col": 8,"fields": [7790]},{"file": 11,"line": 557,"col": 8,"fields": [7791]},{"file": 11,"line": 51,"col": 8},{"file": 11,"line": 648,"col": 8,"fields": [7792]},{"file": 11,"line": 295,"col": 8},{"file": 11,"line": 387,"col": 8,"fields": [7793]},{"file": 11,"line": 620,"col": 8,"fields": [7794]},{"file": 11,"line": 735,"col": 8,"fields": [7795]},{"file": 11,"line": 488,"col": 8,"fields": [7796]},{"file": 11,"line": 627,"col": 8,"fields": [7797]},{"file": 11,"line": 402,"col": 8,"fields": [7798,7799]},{"file": 11,"line": 498,"col": 4,"fields": [7800]},{"file": 12,"line": 284,"col": 12,"fields": [7801]},{"file": 12,"line": 170,"col": 12,"docs": " Increases capacity so that the hash map will be at most\n 60% full when expected_count items are put into it\n","fields": [7802,7803]},{"file": 12,"line": 132,"col": 12,"docs": " If key exists this function cannot fail.\n If there is an existing item with `key`, then the result\n kv pointer points to it, and found_existing is true.\n Otherwise, puts a new item with undefined value, and\n the kv pointer points to it. Caller should then initialize\n the data.\n","fields": [7804,7805]},{"file": 12,"line": 208,"col": 12,"docs": " Calls put() and asserts that no kv pair is clobbered.\n","fields": [7806,7807,7808]},{"file": 12,"line": 275,"col": 12,"fields": [7809]},{"file": 12,"line": 49,"col": 12,"docs": " A *KV is a mutable pointer into this HashMap's internal storage.\n Modifying the key is undefined behavior.\n Modifying the value is harmless.\n *KV pointers become invalid whenever this HashMap is modified,\n and then any access to the *KV is undefined behavior.\n"},{"file": 12,"line": 221,"col": 12,"fields": [7810,7811]},{"file": 12,"line": 60,"col": 12},{"file": 12,"line": 113,"col": 12,"fields": [7812]},{"file": 12,"line": 212,"col": 12,"fields": [7813,7814,7815]},{"file": 12,"line": 109,"col": 12,"fields": [7816]},{"file": 12,"line": 151,"col": 12,"fields": [7817,7818,7819]},{"file": 12,"line": 228,"col": 12,"fields": [7820,7821]},{"file": 12,"line": 202,"col": 12,"docs": " Returns the kv pair that was already there.\n","fields": [7822,7823,7824]},{"file": 12,"line": 65,"col": 12},{"file": 12,"line": 99,"col": 12,"fields": [7825]},{"file": 12,"line": 122,"col": 12,"fields": [7826]},{"file": 12,"line": 232,"col": 12,"fields": [7827,7828]},{"file": 12,"line": 237,"col": 12,"docs": " Returns any kv pair that was removed.\n","fields": [7829,7830]},{"file": 12,"line": 271,"col": 12,"docs": " Calls remove(), asserts that a kv pair is removed, and discards it.\n","fields": [7831,7832]},{"file": 12,"line": 159,"col": 8,"fields": [7833]},{"file": 12,"line": 304,"col": 8,"fields": [7834,7835]},{"file": 12,"line": 408,"col": 8,"fields": [7836,7837]},{"file": 12,"line": 42,"col": 8},{"file": 12,"line": 294,"col": 8,"fields": [7838]},{"file": 12,"line": 313,"col": 8,"fields": [7839]},{"file": 12,"line": 412,"col": 8,"fields": [7840,7841]},{"file": 12,"line": 319,"col": 8},{"file": 12,"line": 326,"col": 8,"docs": " Returns a pointer to the new entry.\n Asserts that there is enough space for the new item.\n","fields": [7842,7843]},{"file": 12,"line": 54,"col": 8},{"file": 12,"line": 178,"col": 8,"docs": " Sets the capacity to the new capacity if the new\n capacity is greater than the current capacity.\n New capacity must be a power of two.\n","fields": [7844,7845]},{"file": 12,"line": 393,"col": 8,"fields": [7846,7847]},{"file": 9,"line": 39,"col": 8},{"file": 9,"line": 37,"col": 8},{"file": 13,"line": 295,"col": 12,"docs": " Insert a new node at the end of the list.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [7848,7849]},{"file": 13,"line": 397,"col": 12,"docs": " Allocate and initialize a node and its data.\n\n Arguments:\n     data: The data to put inside the node.\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [7850,7851,7852]},{"file": 13,"line": 197,"col": 12,"docs": " Node inside the linked list wrapping the actual data.\n"},{"file": 13,"line": 385,"col": 12,"docs": " Deallocate a node.\n\n Arguments:\n     node: Pointer to the node to deallocate.\n     allocator: Dynamic memory allocator.\n","fields": [7853,7854,7855]},{"file": 13,"line": 309,"col": 12,"docs": " Insert a new node at the beginning of the list.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [7856,7857]},{"file": 13,"line": 353,"col": 12,"docs": " Remove and return the last node in the list.\n\n Returns:\n     A pointer to the last node in the list.\n","fields": [7858]},{"file": 13,"line": 232,"col": 12,"docs": " Insert a new node after an existing one.\n\n Arguments:\n     node: Pointer to a node in the list.\n     new_node: Pointer to the new node to insert.\n","fields": [7859,7860,7861]},{"file": 13,"line": 219,"col": 12,"docs": " Initialize a linked list.\n\n Returns:\n     An empty linked list.\n","fields": []},{"file": 13,"line": 253,"col": 12,"docs": " Insert a new node before an existing one.\n\n Arguments:\n     node: Pointer to a node in the list.\n     new_node: Pointer to the new node to insert.\n","fields": [7862,7863,7864]},{"file": 13,"line": 274,"col": 12,"docs": " Concatenate list2 onto the end of list1, removing all entries from the former.\n\n Arguments:\n     list1: the list to concatenate onto\n     list2: the list to be concatenated\n","fields": [7865,7866]},{"file": 13,"line": 328,"col": 12,"docs": " Remove a node from the list.\n\n Arguments:\n     node: Pointer to the node to be removed.\n","fields": [7867,7868]},{"file": 13,"line": 363,"col": 12,"docs": " Remove and return the first node in the list.\n\n Returns:\n     A pointer to the first node in the list.\n","fields": [7869]},{"file": 13,"line": 376,"col": 12,"docs": " Allocate a new node.\n\n Arguments:\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [7870,7871]},{"file": 13,"line": 194,"col": 8},{"file": 14,"line": 24,"col": 8},{"file": 14,"line": 30,"col": 8},{"file": 15,"line": 233,"col": 12,"fields": [7872,7873]},{"file": 15,"line": 226,"col": 12,"fields": [7874,7875]},{"file": 15,"line": 90,"col": 12,"docs": " Allocates enough memory to hold all the contents of the stream. If the allocated\n memory would be greater than `max_size`, returns `error.StreamTooLong`.\n Caller owns returned memory.\n If this function returns an error, the contents from the stream read so far are lost.\n","fields": [7876,7877,7878]},{"file": 15,"line": 102,"col": 12,"docs": " Replaces `buffer` contents by reading from the stream until `delimiter` is found.\n Does not include the delimiter in the result.\n If `buffer.len()` would exceed `max_size`, `error.StreamTooLong` is returned and the contents\n read from the stream so far are lost.\n","fields": [7879,7880,7881,7882]},{"file": 15,"line": 194,"col": 12,"docs": " Reads a foreign-endian integer\n","fields": [7883,7884]},{"file": 15,"line": 19,"col": 12},{"file": 15,"line": 187,"col": 12,"docs": " Reads a native-endian integer\n","fields": [7885,7886]},{"file": 15,"line": 163,"col": 12,"docs": " Reads from the stream until specified byte is found, discarding all data,\n including the delimiter.\n If end-of-stream is found, this function succeeds.\n","fields": [7887,7888]},{"file": 15,"line": 18,"col": 12},{"file": 15,"line": 138,"col": 12,"docs": " Reads from the stream until specified byte is found. If the buffer is not\n large enough to hold the entire contents, `error.StreamTooLong` is returned.\n If end-of-stream is found, returns the rest of the stream. If this\n function is called again after that, returns null.\n Returns a slice of the stream data, with ptr equal to `buf.ptr`. The\n delimiter byte is not included in the returned slice.\n","fields": [7889,7890,7891]},{"file": 15,"line": 124,"col": 12,"docs": " Allocates enough memory to read until `delimiter`. If the allocated\n memory would be greater than `max_size`, returns `error.StreamTooLong`.\n Caller owns returned memory.\n If this function returns an error, the contents from the stream read so far are lost.\n","fields": [7892,7893,7894,7895]},{"file": 15,"line": 66,"col": 12,"docs": " Replaces `buffer` contents by reading from the stream until it is finished.\n If `buffer.len()` would exceed `max_size`, `error.StreamTooLong` is returned and\n the contents read from the stream are lost.\n","fields": [7896,7897,7898]},{"file": 15,"line": 17,"col": 8},{"file": 4,"line": 45,"col": 12,"docs": " releases the memory held by this instance.\n","fields": [7899]},{"file": 4,"line": 50,"col": 12,"docs": " tries to get a pixel from the image.\n","fields": [7900,7901,7902]},{"file": 4,"line": 33,"col": 8},{"file": 16,"line": 18,"col": 12},{"file": 16,"line": 68,"col": 12,"fields": [7903,7904,7905]},{"file": 16,"line": 80,"col": 12,"fields": [7906,7907,7908,7909]},{"file": 16,"line": 55,"col": 12,"docs": " Write a native-endian integer.\n","fields": [7910,7911,7912]},{"file": 16,"line": 16,"col": 12},{"file": 16,"line": 62,"col": 12,"docs": " Write a foreign-endian integer.\n","fields": [7913,7914,7915]},{"file": 16,"line": 46,"col": 12,"fields": [7916,7917,7918]},{"file": 16,"line": 74,"col": 12,"fields": [7919,7920,7921]},{"file": 16,"line": 15,"col": 8},{"file": 7,"line": 107,"col": 12,"docs": " swizzle vector fields into a new vector type.\n swizzle(\"xxx\") will return a Vec3 with three times the x component.\n swizzle will return a vector or scalar type with the same number of components as the\n `components` string.\n `components` may be any sequence of `x`, `y`, `z`, `w`, `0` and `1`.\n The letters will be replaced by the corresponding component, the digits will be replaced\n by the corresponding literal value.\n\n Examples:\n - `vec4(1,2,3,4).swizzle(\"wzyx\") == vec4(4, 3, 2, 1)`\n - `vec4(1,2,3,4).swizzle(\"xyx\") == vec3(1,2,1)`\n - `vec2(1,2).swizzle(\"xyxy\") == vec4(1,2,1,2)`\n - `vec2(3,4).swizzle(\"xy01\") == vec4(3, 4, 0, 1)`\n\n","fields": [7922,7923]},{"file": 7,"line": 205,"col": 8},{"file": 7,"line": 219,"col": 8,"fields": [7924,7925,7926,7927,7928,7929]},{"file": 7,"line": 204,"col": 8},{"file": 7,"line": 207,"col": 8},{"file": 7,"line": 206,"col": 8},{"file": 7,"line": 198,"col": 4},{"file": 13,"line": 136,"col": 12,"docs": " Allocate and initialize a node and its data.\n\n Arguments:\n     data: The data to put inside the node.\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [7930,7931,7932]},{"file": 13,"line": 19,"col": 12,"docs": " Node inside the linked list wrapping the actual data.\n"},{"file": 13,"line": 124,"col": 12,"docs": " Deallocate a node.\n\n Arguments:\n     node: Pointer to the node to deallocate.\n     allocator: Dynamic memory allocator.\n","fields": [7933,7934,7935]},{"file": 13,"line": 69,"col": 12,"docs": " Insert a new node after an existing one.\n\n Arguments:\n     node: Pointer to a node in the list.\n     new_node: Pointer to the new node to insert.\n","fields": [7936,7937,7938]},{"file": 13,"line": 86,"col": 12,"docs": " Remove a node from the list.\n\n Arguments:\n     node: Pointer to the node to be removed.\n","fields": [7939,7940]},{"file": 13,"line": 115,"col": 12,"docs": " Allocate a new node.\n\n Arguments:\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [7941,7942]},{"file": 13,"line": 102,"col": 12,"docs": " Remove and return the first node in the list.\n\n Returns:\n     A pointer to the first node in the list.\n","fields": [7943]},{"file": 13,"line": 16,"col": 8},{"file": 17,"line": 49,"col": 12,"fields": [7944]},{"file": 17,"line": 22,"col": 12,"fields": []},{"file": 17,"line": 15,"col": 12},{"file": 17,"line": 31,"col": 12,"docs": " push operation, but only if you are the first item in the stack. if you did not succeed in\n being the first item in the stack, returns the other item that was there.\n","fields": [7945,7946]},{"file": 17,"line": 17,"col": 12},{"file": 17,"line": 36,"col": 12,"fields": [7947,7948]},{"file": 17,"line": 64,"col": 12,"fields": [7949]},{"file": 17,"line": 13,"col": 8},{"file": 18,"line": 6,"col": 12},{"file": 18,"line": 7,"col": 12},{"file": 18,"line": 5,"col": 8},{"file": 7,"line": 161,"col": 8},{"file": 7,"line": 173,"col": 8,"fields": [7950,7951,7952,7953,7954,7955]},{"file": 7,"line": 160,"col": 8},{"file": 7,"line": 162,"col": 8},{"file": 7,"line": 155,"col": 4},{"file": 4,"line": 12,"col": 4,"docs": " one of the three types a netbpm graphic could be stored in.\n"},{"file": 4,"line": 24,"col": 4,"docs": " RGB pixel value.\n"},{"file": 4,"line": 66,"col": 4,"docs": " A decoded anymap. Contains either a black-and-white, grayscale or RGB image.\n"},{"file": 4,"line": 100,"col": 0},{"file": 4,"line": 0,"col": 0},{"file": 7,"line": 309,"col": 8},{"file": 7,"line": 325,"col": 8,"fields": [7956,7957,7958,7959,7960,7961]},{"file": 7,"line": 308,"col": 8},{"file": 7,"line": 311,"col": 8},{"file": 7,"line": 312,"col": 8},{"file": 7,"line": 310,"col": 8},{"file": 7,"line": 301,"col": 4},{"file": 5,"line": 2,"col": 4,"fields": [7962]},{"file": 5,"line": 6,"col": 4,"fields": [7963]},{"file": 5,"line": 0,"col": 0},{"file": 19,"line": 211,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 183,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 225,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 158,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 243,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 195,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 307,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 267,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 239,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 219,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 250,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 300,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 152,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 259,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 203,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 294,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 232,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 284,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 276,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 145,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 6,"line": 2,"col": 4},{"file": 6,"line": 0,"col": 0},{"file": 7,"line": 197,"col": 4,"docs": " 3-dimensional vector type.\n"},{"file": 7,"line": 300,"col": 4,"docs": " 4-dimensional vector type.\n"},{"file": 7,"line": 366,"col": 4,"docs": " 3 by 3 matrix type.\n"},{"file": 7,"line": 380,"col": 4,"docs": " 4 by 4 matrix type.\n"},{"file": 7,"line": 154,"col": 4,"docs": " 2-dimensional vector type.\n"},{"file": 7,"line": 353,"col": 4,"docs": " 2 by 2 matrix type.\n"},{"file": 7,"line": 6,"col": 0,"fields": [7964]},{"file": 7,"line": 0,"col": 0},{"file": 7,"line": 583,"col": 0},{"file": 19,"line": 359,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 12,"col": 4},{"file": 1,"line": 7,"col": 4},{"file": 1,"line": 9,"col": 4},{"file": 19,"line": 45,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 3,"col": 4},{"file": 19,"line": 95,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 10,"col": 4},{"file": 19,"line": 382,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 86,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 423,"col": 4,"docs": " This function type is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 3,"col": 4,"docs": " Deprecated: use `std.Target.Os`.\n"},{"file": 19,"line": 374,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 9,"col": 4,"docs": " Deprecated: use `std.Target.Abi`.\n"},{"file": 19,"line": 52,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 14,"col": 4},{"file": 19,"line": 116,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 18,"col": 4},{"file": 1,"line": 16,"col": 4},{"file": 19,"line": 72,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 13,"col": 4},{"file": 19,"line": 367,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 11,"col": 4},{"file": 1,"line": 8,"col": 4},{"file": 1,"line": 2,"col": 4},{"file": 19,"line": 345,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 112,"col": 4},{"file": 19,"line": 61,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 12,"col": 4,"docs": " Deprecated: use `std.Target.ObjectFormat`.\n"},{"file": 1,"line": 5,"col": 4},{"file": 19,"line": 430,"col": 4,"docs": " This function type is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 4,"col": 4},{"file": 19,"line": 6,"col": 4,"docs": " Deprecated: use `std.Target.Arch`.\n"},{"file": 1,"line": 15,"col": 4},{"file": 19,"line": 15,"col": 4,"docs": " Deprecated: use `std.Target.SubSystem`.\n"},{"file": 19,"line": 21,"col": 4,"docs": " `explicit_subsystem` is missing when the subsystem is automatically detected,\n so Zig standard library has the subsystem detection logic here. This should generally be\n used rather than `explicit_subsystem`.\n On non-Windows targets, this is `null`.\n"},{"file": 19,"line": 352,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 434,"col": 4,"docs": " This function is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 17,"col": 4},{"file": 1,"line": 6,"col": 4},{"file": 2,"line": 51,"col": 4},{"file": 2,"line": 9,"col": 4},{"file": 2,"line": 30,"col": 4},{"file": 2,"line": 20,"col": 4},{"file": 2,"line": 13,"col": 4},{"file": 2,"line": 12,"col": 4},{"file": 2,"line": 50,"col": 4},{"file": 2,"line": 25,"col": 4},{"file": 2,"line": 5,"col": 4},{"file": 2,"line": 39,"col": 4},{"file": 2,"line": 54,"col": 4},{"file": 2,"line": 35,"col": 4},{"file": 2,"line": 6,"col": 4},{"file": 2,"line": 36,"col": 4},{"file": 2,"line": 62,"col": 4},{"file": 2,"line": 7,"col": 4},{"file": 2,"line": 38,"col": 4},{"file": 2,"line": 64,"col": 4},{"file": 2,"line": 29,"col": 4},{"file": 2,"line": 0,"col": 4},{"file": 2,"line": 45,"col": 4},{"file": 2,"line": 37,"col": 4},{"file": 2,"line": 19,"col": 4},{"file": 2,"line": 61,"col": 4},{"file": 2,"line": 46,"col": 4},{"file": 2,"line": 8,"col": 4},{"file": 2,"line": 43,"col": 4},{"file": 2,"line": 40,"col": 4},{"file": 2,"line": 28,"col": 4},{"file": 2,"line": 27,"col": 4},{"file": 2,"line": 23,"col": 4},{"file": 2,"line": 47,"col": 4},{"file": 2,"line": 18,"col": 4},{"file": 2,"line": 48,"col": 4},{"file": 2,"line": 56,"col": 4},{"file": 2,"line": 4,"col": 4},{"file": 2,"line": 32,"col": 4},{"file": 2,"line": 33,"col": 4},{"file": 2,"line": 42,"col": 4},{"file": 2,"line": 60,"col": 4},{"file": 2,"line": 31,"col": 4},{"file": 2,"line": 34,"col": 4},{"file": 2,"line": 59,"col": 4},{"file": 2,"line": 58,"col": 4},{"file": 2,"line": 52,"col": 4},{"file": 2,"line": 53,"col": 4},{"file": 2,"line": 41,"col": 4},{"file": 2,"line": 44,"col": 4},{"file": 2,"line": 67,"col": 4},{"file": 2,"line": 2,"col": 4},{"file": 2,"line": 11,"col": 4},{"file": 2,"line": 16,"col": 4},{"file": 2,"line": 63,"col": 4},{"file": 2,"line": 17,"col": 4},{"file": 2,"line": 24,"col": 4},{"file": 2,"line": 55,"col": 4},{"file": 2,"line": 65,"col": 4},{"file": 2,"line": 15,"col": 4},{"file": 2,"line": 10,"col": 4},{"file": 2,"line": 66,"col": 4},{"file": 2,"line": 1,"col": 4},{"file": 2,"line": 21,"col": 4},{"file": 2,"line": 14,"col": 4},{"file": 2,"line": 57,"col": 4},{"file": 2,"line": 49,"col": 4},{"file": 2,"line": 3,"col": 4},{"file": 2,"line": 22,"col": 4},{"file": 3,"line": 2,"col": 0},{"file": 3,"line": 1,"col": 0},{"file": 3,"line": 0,"col": 0},{"file": 7,"line": 385,"col": 8,"docs": " zero matrix.\n"},{"file": 7,"line": 404,"col": 8,"fields": [7965,7966,7967,7968,7969,7970]},{"file": 7,"line": 381,"col": 8},{"file": 7,"line": 395,"col": 8,"docs": " identitiy matrix\n"},{"file": 34,"line": 859,"col": 8,"docs": " Deprecated; call `openDirListC` directly.\n","fields": [7971,7972]},{"file": 34,"line": 748,"col": 8,"docs": " Same as `createFile` but the path parameter is null-terminated.\n","fields": [7973,7974,7975]},{"file": 34,"line": 1077,"col": 8,"docs": " Read value of a symbolic link.\n The return value is a slice of `buffer`, from index `0`.\n Asserts that the path parameter has no null bytes.\n","fields": [7976,7977,7978]},{"file": 34,"line": 664,"col": 8},{"file": 34,"line": 1067,"col": 8,"docs": " Same as `deleteDir` except the parameter is UTF16LE, NT prefixed.\n This function is Windows-only.\n","fields": [7979,7980]},{"file": 34,"line": 1028,"col": 8},{"file": 34,"line": 788,"col": 8,"docs": " Deprecated; call `openFileW` directly.\n","fields": [7981,7982]},{"file": 34,"line": 737,"col": 8,"docs": " Creates, opens, or overwrites a file with write access.\n Call `File.close` on the result when done.\n Asserts that the path parameter has no null bytes.\n","fields": [7983,7984,7985]},{"file": 34,"line": 783,"col": 8,"docs": " Deprecated; call `openFileC` directly.\n","fields": [7986,7987]},{"file": 34,"line": 689,"col": 8,"fields": [7988]},{"file": 34,"line": 933,"col": 8,"docs": " Same as `openDirTraverse` except the path parameter is UTF16LE, NT-prefixed.\n This function is Windows-only.\n","fields": [7989,7990]},{"file": 34,"line": 764,"col": 8,"docs": " Same as `createFile` but Windows-only and the path parameter is\n [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded.\n","fields": [7991,7992,7993]},{"file": 34,"line": 726,"col": 8,"docs": " Same as `openFile` but Windows-only and the path parameter is\n [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded.\n","fields": [7994,7995,7996]},{"file": 34,"line": 1047,"col": 8,"docs": " Returns `error.DirNotEmpty` if the directory is not empty.\n To delete a directory recursively, see `deleteTree`.\n Asserts that the path parameter has no null bytes.\n","fields": [7997,7998]},{"file": 34,"line": 369,"col": 8},{"file": 34,"line": 637,"col": 8,"fields": [7999]},{"file": 34,"line": 941,"col": 8,"docs": " Same as `openDirList` except the path parameter is UTF16LE, NT-prefixed.\n This function is Windows-only.\n","fields": [8000,8001]},{"file": 34,"line": 911,"col": 8,"docs": " Same as `openDirList` except the parameter is null-terminated.\n","fields": [8002,8003]},{"file": 34,"line": 685,"col": 8,"docs": " Deprecated; call `cwd().openDirListC` directly.\n","fields": [8004]},{"file": 34,"line": 900,"col": 8,"docs": " Same as `openDirTraverse` except the parameter is null-terminated.\n","fields": [8005,8006]},{"file": 34,"line": 888,"col": 8,"docs": " Opens a directory at the given path with the ability to access subpaths and list contents\n of the result. If the ability to list contents is unneeded, `openDirTraverse` acts the\n same and may be more efficient.\n\n Call `close` on the result when done.\n\n Asserts that the path parameter has no null bytes.\n","fields": [8007,8008]},{"file": 34,"line": 1146,"col": 8,"docs": " Whether `full_path` describes a symlink, file, or directory, this function\n removes it. If it cannot be removed because it is a non-empty directory,\n this function recursively removes its entries and then tries again.\n This operation is not atomic on most file systems.\n","fields": [8009,8010]},{"file": 34,"line": 680,"col": 8,"docs": " Deprecated; call `cwd().openDirList` directly.\n","fields": [8011]},{"file": 34,"line": 792,"col": 8,"fields": [8012,8013,8014,8015]},{"file": 34,"line": 854,"col": 8,"docs": " Deprecated; call `openDirList` directly.\n","fields": [8016,8017]},{"file": 34,"line": 1021,"col": 8,"docs": " Same as `deleteFile` except the parameter is WTF-16 encoded.\n","fields": [8018,8019]},{"file": 34,"line": 870,"col": 8,"docs": " Opens a directory at the given path with the ability to access subpaths\n of the result. Calling `iterate` on the result is illegal behavior; to\n list the contents of a directory, open it with `openDirList`.\n\n Call `close` on the result when done.\n\n Asserts that the path parameter has no null bytes.\n","fields": [8020,8021]},{"file": 34,"line": 1090,"col": 8,"docs": " On success, caller owns returned buffer.\n If the file is larger than `max_bytes`, returns `error.FileTooBig`.\n","fields": [8022,8023,8024,8025]},{"file": 34,"line": 1292,"col": 8,"docs": " Writes content to the file system, creating a new file if it does not exist, truncating\n if it already exists.\n","fields": [8026,8027,8028]},{"file": 34,"line": 1005,"col": 8,"docs": " Delete a file name and possibly the file it refers to, based on an open directory handle.\n Asserts that the path parameter has no null bytes.\n","fields": [8029,8030]},{"file": 34,"line": 388,"col": 8},{"file": 34,"line": 1116,"col": 8},{"file": 34,"line": 1058,"col": 8,"docs": " Same as `deleteDir` except the parameter is null-terminated.\n","fields": [8031,8032]},{"file": 34,"line": 1001,"col": 8},{"file": 34,"line": 1096,"col": 8,"docs": " On success, caller owns returned buffer.\n If the file is larger than `max_bytes`, returns `error.FileTooBig`.\n","fields": [8033,8034,8035,8036,8037]},{"file": 34,"line": 1013,"col": 8,"docs": " Same as `deleteFile` except the parameter is null-terminated.\n","fields": [8038,8039]},{"file": 34,"line": 1084,"col": 8,"docs": " Same as `readLink`, except the `pathname` parameter is null-terminated.\n","fields": [8040,8041,8042]},{"file": 34,"line": 920,"col": 4,"fields": [8043,8044,8045]},{"file": 34,"line": 386,"col": 4},{"file": 34,"line": 947,"col": 4,"fields": [8046,8047,8048]},{"file": 40,"line": 337,"col": 12},{"file": 40,"line": 338,"col": 12},{"file": 40,"line": 34,"col": 8,"docs": " TODO https://github.com/ziglang/zig/issues/3802\n"},{"file": 40,"line": 320,"col": 8,"fields": [8049]},{"file": 40,"line": 25,"col": 8},{"file": 40,"line": 198,"col": 8,"fields": [8050]},{"file": 40,"line": 62,"col": 8,"docs": " Deprecated; call `std.fs.Dir.openFileW` directly.\n","fields": [8051]},{"file": 40,"line": 57,"col": 8,"docs": " Deprecated; call `std.fs.Dir.openFileC` directly.\n","fields": [8052]},{"file": 40,"line": 87,"col": 8,"docs": " Deprecated; call `std.fs.Dir.createFile` directly.\n","fields": [8053,8054]},{"file": 40,"line": 67,"col": 8,"docs": " Deprecated; call `std.fs.Dir.createFile` directly.\n","fields": [8055]},{"file": 40,"line": 15,"col": 8},{"file": 40,"line": 255,"col": 8},{"file": 40,"line": 205,"col": 8},{"file": 40,"line": 333,"col": 8,"docs": " Implementation of io.InStream trait for File\n"},{"file": 40,"line": 28,"col": 8,"docs": " TODO https://github.com/ziglang/zig/issues/3802\n"},{"file": 40,"line": 169,"col": 8,"docs": " Repositions read/write file offset relative to the current offset.\n","fields": [8056,8057]},{"file": 40,"line": 286,"col": 8},{"file": 40,"line": 196,"col": 8},{"file": 40,"line": 166,"col": 8},{"file": 40,"line": 185,"col": 8,"fields": [8058]},{"file": 40,"line": 298,"col": 8,"fields": [8059,8060]},{"file": 40,"line": 20,"col": 8},{"file": 40,"line": 82,"col": 8,"docs": " Deprecated; call `std.fs.Dir.createFileW` directly.\n","fields": [8061,8062]},{"file": 40,"line": 347,"col": 8,"docs": " Implementation of io.OutStream trait for File\n"},{"file": 40,"line": 77,"col": 8,"docs": " Deprecated; call `std.fs.Dir.createFileC` directly.\n","fields": [8063,8064]},{"file": 40,"line": 72,"col": 8,"docs": " Deprecated; call `std.fs.Dir.createFile` directly.\n","fields": [8065,8066]},{"file": 40,"line": 103,"col": 8,"docs": " Deprecated; call `std.fs.Dir.createFileW` directly.\n","fields": [8067,8068]},{"file": 40,"line": 183,"col": 8},{"file": 40,"line": 219,"col": 8},{"file": 40,"line": 361,"col": 8,"docs": " Implementation of io.SeekableStream trait for File\n"},{"file": 40,"line": 292,"col": 8},{"file": 40,"line": 120,"col": 8,"docs": " Test for the existence of `path`.\n `path` is UTF8-encoded.\n In general it is recommended to avoid this function. For example,\n instead of testing if a file exists and then opening it, just\n open it and handle the error for file not found.\n TODO: deprecate this and move it to `std.fs.Dir`.\n","fields": [8069]},{"file": 40,"line": 261,"col": 8,"docs": " The underlying file system may have a different granularity than nanoseconds,\n and therefore this function cannot guarantee any precision will be stored.\n Further, the maximum value is limited by the system ABI. When a value is provided\n that exceeds this range, the value is clamped to the maximum.\n","fields": [8070,8071,8072]},{"file": 40,"line": 132,"col": 8,"docs": " Same as `access` except the parameter is null-terminated UTF16LE-encoded.\n TODO: deprecate this and move it to `std.fs.Dir`.\n","fields": [8073]},{"file": 40,"line": 126,"col": 8,"docs": " Same as `access` except the parameter is null-terminated.\n TODO: deprecate this and move it to `std.fs.Dir`.\n","fields": [8074]},{"file": 40,"line": 95,"col": 8,"docs": " Deprecated; call `std.fs.Dir.createFileC` directly.\n","fields": [8075,8076]},{"file": 9,"line": 199,"col": 4},{"file": 7,"line": 357,"col": 8,"docs": " identitiy matrix\n"},{"file": 7,"line": 370,"col": 8,"docs": " identitiy matrix\n"},{"file": 40,"line": 351,"col": 12},{"file": 40,"line": 352,"col": 12},{"file": 18,"line": 38,"col": 8},{"file": 18,"line": 39,"col": 8},{"file": 18,"line": 37,"col": 8},{"file": 18,"line": 35,"col": 8},{"file": 18,"line": 36,"col": 8},{"file": 18,"line": 34,"col": 4},{"file": 23,"line": 1219,"col": 8},{"file": 23,"line": 296,"col": 4},{"file": 41,"line": 185,"col": 12,"fields": [8077]},{"file": 41,"line": 249,"col": 12,"docs": " Returned when the lock is acquired. Call release to\n release.\n"},{"file": 41,"line": 173,"col": 8},{"file": 41,"line": 174,"col": 8},{"file": 41,"line": 176,"col": 8},{"file": 41,"line": 172,"col": 8},{"file": 41,"line": 170,"col": 8,"docs": " number of times to spin trying to acquire the lock.\n https://webkit.org/blog/6161/locking-in-webkit/\n"},{"file": 35,"line": 535,"col": 8,"fields": [8078]},{"file": 35,"line": 521,"col": 4},{"file": 11,"line": 103,"col": 12},{"file": 11,"line": 203,"col": 12,"fields": [8079]},{"file": 11,"line": 128,"col": 12},{"file": 11,"line": 148,"col": 12,"fields": [8080]},{"file": 11,"line": 139,"col": 12},{"file": 11,"line": 144,"col": 12},{"file": 35,"line": 658,"col": 8,"fields": [8081]},{"file": 43,"line": 43,"col": 8,"docs": " Resets the event to its original, unset state.\n","fields": [8082]},{"file": 43,"line": 55,"col": 8,"docs": " Wait for the event to be set by blocking the current thread.\n A timeout in nanoseconds can be provided as a hint for how\n long the thread should block on the unset event before throwind error.TimedOut.\n","fields": [8083,8084]},{"file": 43,"line": 32,"col": 8,"docs": " Returns whether or not the event is currenetly set\n","fields": [8085]},{"file": 43,"line": 16,"col": 8},{"file": 43,"line": 217,"col": 8},{"file": 43,"line": 185,"col": 4},{"file": 43,"line": 199,"col": 4,"fields": [8086]},{"file": 43,"line": 223,"col": 4},{"file": 43,"line": 184,"col": 4},{"file": 43,"line": 242,"col": 4},{"file": 43,"line": 195,"col": 4,"fields": [8087]},{"file": 43,"line": 277,"col": 4},{"file": 45,"line": 170,"col": 8,"fields": [8088,8089]},{"file": 45,"line": 119,"col": 8,"fields": [8090,8091]},{"file": 8,"line": 0,"col": 0},{"file": 8,"line": 5,"col": 0},{"file": 8,"line": 439,"col": 0},{"file": 8,"line": 1,"col": 0},{"file": 8,"line": 2,"col": 0},{"file": 8,"line": 3,"col": 0},{"file": 8,"line": 4,"col": 0},{"file": 9,"line": 9,"col": 4},{"file": 9,"line": 142,"col": 4},{"file": 9,"line": 149,"col": 4},{"file": 9,"line": 3,"col": 4,"docs": " rgb color tuple with 8 bit color values.\n"},{"file": 9,"line": 0,"col": 0},{"file": 9,"line": 198,"col": 0},{"file": 10,"line": 1,"col": 0},{"file": 10,"line": 151,"col": 0},{"file": 10,"line": 3,"col": 0},{"file": 10,"line": 150,"col": 0},{"file": 10,"line": 0,"col": 0},{"file": 10,"line": 221,"col": 0,"fields": [8092]},{"file": 10,"line": 2,"col": 0},{"file": 10,"line": 5,"col": 0},{"file": 10,"line": 4,"col": 0},{"file": 10,"line": 136,"col": 0},{"file": 10,"line": 239,"col": 0,"fields": [8093]},{"file": 13,"line": 202,"col": 16,"fields": [8094]},{"file": 11,"line": 7,"col": 4,"docs": " TODO Nearly all the functions in this namespace would be\n better off if https://github.com/ziglang/zig/issues/425\n was solved.\n"},{"file": 11,"line": 2,"col": 0},{"file": 11,"line": 0,"col": 0},{"file": 11,"line": 1,"col": 0},{"file": 12,"line": 551,"col": 4,"fields": [8095]},{"file": 12,"line": 28,"col": 4,"fields": [8096]},{"file": 12,"line": 559,"col": 4,"fields": [8097,8098]},{"file": 12,"line": 15,"col": 4,"fields": [8099,8100]},{"file": 12,"line": 24,"col": 4,"fields": [8101,8102]},{"file": 12,"line": 20,"col": 4,"docs": " Builtin hashmap for strings as keys.\n","fields": [8103]},{"file": 12,"line": 10,"col": 0},{"file": 12,"line": 8,"col": 0},{"file": 12,"line": 4,"col": 0},{"file": 12,"line": 0,"col": 0},{"file": 12,"line": 1,"col": 0},{"file": 12,"line": 6,"col": 0},{"file": 12,"line": 3,"col": 0},{"file": 12,"line": 13,"col": 0},{"file": 12,"line": 9,"col": 0},{"file": 12,"line": 12,"col": 0},{"file": 12,"line": 7,"col": 0},{"file": 12,"line": 2,"col": 0},{"file": 12,"line": 5,"col": 0},{"file": 31,"line": 261,"col": 4},{"file": 13,"line": 0,"col": 0},{"file": 13,"line": 5,"col": 0},{"file": 13,"line": 1,"col": 0},{"file": 13,"line": 2,"col": 0},{"file": 13,"line": 3,"col": 0},{"file": 13,"line": 4,"col": 0},{"file": 14,"line": 270,"col": 4,"docs": " data must outlive the returned frame\n","fields": [8104,8105,8106]},{"file": 14,"line": 18,"col": 4},{"file": 14,"line": 236,"col": 4},{"file": 14,"line": 454,"col": 4,"docs": " Creates if does not exist. Does not truncate.\n","fields": [8107,8108]},{"file": 14,"line": 617,"col": 4,"docs": " contents must remain alive until writeFile completes.\n","fields": [8109,8110,8111,8112]},{"file": 14,"line": 134,"col": 4,"fields": [8113,8114,8115]},{"file": 14,"line": 239,"col": 4,"docs": " data - just the inner references - must live until preadv frame completes.\n","fields": [8116,8117,8118,8119]},{"file": 14,"line": 294,"col": 4,"fields": [8120,8121,8122]},{"file": 14,"line": 92,"col": 4,"docs": " data - just the inner references - must live until pwritev frame completes.\n","fields": [8123,8124,8125,8126]},{"file": 14,"line": 174,"col": 4,"docs": " iovecs must live until pwritev frame completes.\n","fields": [8127,8128,8129]},{"file": 14,"line": 423,"col": 4,"docs": " Creates if does not exist. Truncates the file if it exists.\n Uses the default mode.\n","fields": [8130]},{"file": 14,"line": 723,"col": 4},{"file": 14,"line": 89,"col": 4},{"file": 14,"line": 1392,"col": 4},{"file": 14,"line": 730,"col": 4,"fields": [8131]},{"file": 14,"line": 365,"col": 4,"fields": [8132,8133,8134]},{"file": 14,"line": 333,"col": 4,"docs": " iovecs must live until preadv frame completes\n","fields": [8135,8136,8137]},{"file": 14,"line": 20,"col": 4},{"file": 14,"line": 122,"col": 4,"docs": " data must outlive the returned frame\n","fields": [8138,8139,8140]},{"file": 14,"line": 207,"col": 4,"docs": " iovecs must live until pwritev frame completes.\n","fields": [8141,8142]},{"file": 14,"line": 1367,"col": 4},{"file": 14,"line": 482,"col": 4,"docs": " This abstraction helps to close file handles in defer expressions\n without the possibility of failure and without the use of suspend points.\n Start a `CloseOperation` before opening a file, so that you can defer\n `CloseOperation.finish`.\n If you call `setHandle` then finishing will close the fd; otherwise finishing\n will deallocate the `CloseOperation`.\n"},{"file": 14,"line": 428,"col": 4,"docs": " Creates if does not exist. Truncates the file if it exists.\n","fields": [8143,8144]},{"file": 14,"line": 683,"col": 4,"docs": " The frame resumes when the last data has been confirmed written, but before the file handle\n is closed.\n Caller owns returned memory.\n","fields": [8145,8146,8147]},{"file": 14,"line": 399,"col": 4,"fields": [8148]},{"file": 14,"line": 612,"col": 4,"docs": " contents must remain alive until writeFile completes.\n TODO make this atomic or provide writeFileAtomic and rename this one to writeFileTruncate\n","fields": [8149,8150,8151]},{"file": 14,"line": 708,"col": 4},{"file": 14,"line": 0,"col": 0},{"file": 14,"line": 8,"col": 0},{"file": 14,"line": 719,"col": 0,"fields": [8152]},{"file": 14,"line": 1304,"col": 0},{"file": 14,"line": 5,"col": 0},{"file": 14,"line": 15,"col": 0},{"file": 14,"line": 4,"col": 0},{"file": 14,"line": 1319,"col": 0,"fields": [8153]},{"file": 14,"line": 2,"col": 0},{"file": 14,"line": 11,"col": 0},{"file": 14,"line": 630,"col": 0,"fields": [8154,8155]},{"file": 14,"line": 1,"col": 0},{"file": 14,"line": 10,"col": 0},{"file": 14,"line": 7,"col": 0},{"file": 14,"line": 713,"col": 0,"fields": [8156,8157]},{"file": 14,"line": 9,"col": 0},{"file": 14,"line": 645,"col": 0,"fields": [8158,8159,8160,8161]},{"file": 14,"line": 3,"col": 0},{"file": 14,"line": 6,"col": 0},{"file": 14,"line": 83,"col": 12},{"file": 14,"line": 65,"col": 12},{"file": 14,"line": 74,"col": 12},{"file": 14,"line": 47,"col": 12},{"file": 14,"line": 39,"col": 12},{"file": 14,"line": 56,"col": 12},{"file": 15,"line": 9,"col": 4},{"file": 15,"line": 10,"col": 4},{"file": 15,"line": 1,"col": 0},{"file": 15,"line": 2,"col": 0},{"file": 15,"line": 3,"col": 0},{"file": 15,"line": 0,"col": 0},{"file": 15,"line": 4,"col": 0},{"file": 15,"line": 6,"col": 0},{"file": 15,"line": 7,"col": 0},{"file": 15,"line": 5,"col": 0},{"file": 16,"line": 6,"col": 4},{"file": 16,"line": 5,"col": 4},{"file": 16,"line": 1,"col": 0},{"file": 16,"line": 0,"col": 0},{"file": 16,"line": 2,"col": 0},{"file": 16,"line": 3,"col": 0},{"file": 13,"line": 45,"col": 16,"docs": " Remove a node from the list.\n\n Arguments:\n     node: Pointer to the node to be removed.\n Returns:\n     node removed\n","fields": [8162]},{"file": 13,"line": 34,"col": 16,"docs": " Insert a new node after the current one.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [8163,8164]},{"file": 13,"line": 23,"col": 16,"fields": [8165]},{"file": 17,"line": 1,"col": 0},{"file": 17,"line": 85,"col": 0},{"file": 17,"line": 84,"col": 0},{"file": 17,"line": 70,"col": 0},{"file": 17,"line": 148,"col": 0,"fields": [8166]},{"file": 17,"line": 2,"col": 0},{"file": 17,"line": 3,"col": 0},{"file": 17,"line": 0,"col": 0},{"file": 17,"line": 71,"col": 0},{"file": 17,"line": 165,"col": 0,"fields": [8167]},{"file": 46,"line": 46,"col": 12},{"file": 46,"line": 34,"col": 12},{"file": 46,"line": 44,"col": 12},{"file": 46,"line": 52,"col": 12},{"file": 46,"line": 71,"col": 12},{"file": 46,"line": 82,"col": 8},{"file": 46,"line": 66,"col": 8},{"file": 18,"line": 33,"col": 4},{"file": 18,"line": 0,"col": 0},{"file": 18,"line": 1,"col": 0},{"file": 4,"line": 73,"col": 8,"docs": " releases the data held by the contents of this image.\n","fields": [8168]},{"file": 4,"line": 91,"col": 8,"docs": " returns the height of the contained image.\n","fields": [8169]},{"file": 4,"line": 82,"col": 8,"docs": " returns the width of the contained image.\n","fields": [8170]},{"file": 4,"line": 67,"col": 4},{"file": 19,"line": 466,"col": 0},{"file": 19,"line": 465,"col": 0},{"file": 19,"line": 173,"col": 12,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 19,"line": 314,"col": 12,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 6,"line": 9,"col": 8,"fields": [8171,8172,8173]},{"file": 6,"line": 17,"col": 8,"fields": [8174]},{"file": 6,"line": 3,"col": 8},{"file": 19,"line": 386,"col": 8},{"file": 20,"line": 374,"col": 4,"fields": [8175,8176]},{"file": 20,"line": 1468,"col": 4,"docs": "Given a pointer to an array, returns a pointer to a portion of that array, preserving constness.\n","fields": [8177,8178,8179]},{"file": 20,"line": 1234,"col": 4,"docs": " In-place order reversal of a slice\n","fields": [8180,8181]},{"file": 20,"line": 712,"col": 4,"docs": " Writes a twos-complement big-endian integer to memory.\n Asserts that buffer.len >= T.bit_count / 8.\n The bit count of T must be divisible by 8.\n Any extra bytes in buffer before writing the integer are set to zero. To\n avoid the branch to check for extra buffer bytes, use writeIntBig instead.\n","fields": [8182,8183,8184]},{"file": 20,"line": 1371,"col": 4,"docs": "Given any value, returns a copy of its bytes in an array.\n","fields": [8185]},{"file": 20,"line": 1251,"col": 4,"docs": " In-place rotation of the values in an array ([0 1 2 3] becomes [1 2 3 0] if we rotate by 1)\n Assumes 0 <= amount <= items.len\n","fields": [8186,8187,8188]},{"file": 20,"line": 1448,"col": 4,"docs": "Given a pointer to an array of bytes, returns a value of the specified type backed by a\n copy of those bytes.\n","fields": [8189,8190]},{"file": 20,"line": 664,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, but\n the integer bit width must be divisible by 8.\n This function stores in foreign endian, which means it does a @byteSwap first.\n","fields": [8191,8192,8193]},{"file": 20,"line": 857,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that\n are separated by bytes in `delimiter`.\n separate(\"abc|def||ghi\", \"|\")\n will return slices for \"abc\", \"def\", \"\", \"ghi\", null, in that order.\n If `delimiter` does not exist in buffer,\n the iterator will return `buffer`, null, in that order.\n The delimiter length must not be zero.\n See also the related function `tokenize`.\n It is planned to rename this function to `split` before 1.0.0, like this:\n pub fn split(buffer: []const u8, delimiter: []const u8) SplitIterator {\n","fields": [8194,8195]},{"file": 20,"line": 955,"col": 4},{"file": 20,"line": 1215,"col": 4,"fields": [8196,8197]},{"file": 20,"line": 898,"col": 4,"fields": [8198,8199,8200]},{"file": 20,"line": 438,"col": 4,"fields": [8201,8202,8203,8204]},{"file": 20,"line": 726,"col": 4},{"file": 20,"line": 471,"col": 4,"fields": [8205,8206,8207]},{"file": 20,"line": 681,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, but\n the integer bit width must be divisible by 8.\n","fields": [8208,8209,8210,8211]},{"file": 20,"line": 1227,"col": 4,"fields": [8212,8213,8214]},{"file": 20,"line": 429,"col": 4,"docs": " Linear search for the last index of a scalar value inside a slice.\n","fields": [8215,8216,8217]},{"file": 20,"line": 695,"col": 4,"docs": " Writes a twos-complement little-endian integer to memory.\n Asserts that buf.len >= T.bit_count / 8.\n The bit count of T must be divisible by 8.\n Any extra bytes in buffer after writing the integer are set to zero. To\n avoid the branch to check for extra buffer bytes, use writeIntLittle\n instead.\n","fields": [8218,8219,8220]},{"file": 20,"line": 1203,"col": 4,"fields": [8221,8222]},{"file": 20,"line": 461,"col": 4,"fields": [8223,8224,8225,8226]},{"file": 20,"line": 590,"col": 4},{"file": 20,"line": 668,"col": 4},{"file": 20,"line": 394,"col": 4,"docs": " Remove values from the beginning of a slice.\n","fields": [8227,8228,8229]},{"file": 20,"line": 1522,"col": 4,"docs": " Given an address and an alignment, return true if the address is a multiple of the alignment\n The alignment must be a power of 2 and greater than 0.\n","fields": [8230,8231]},{"file": 20,"line": 742,"col": 4,"docs": " Writes a twos-complement integer to memory, with the specified endianness.\n Asserts that buf.len >= T.bit_count / 8.\n The bit count of T must be evenly divisible by 8.\n Any extra bytes in buffer not part of the integer are set to zero, with\n respect to endianness. To avoid the branch to check for extra buffer bytes,\n use writeInt instead.\n","fields": [8232,8233,8234,8235]},{"file": 20,"line": 983,"col": 4,"docs": " Naively combines a series of slices with a separator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [8236,8237,8238]},{"file": 20,"line": 1018,"col": 4,"docs": " Copies each T from slices into a new slice that exactly holds all the elements.\n","fields": [8239,8240,8241]},{"file": 20,"line": 1405,"col": 4,"docs": "Given a pointer to an array of bytes, returns a pointer to a value of the specified type\n backed by those bytes, preserving constness.\n","fields": [8242,8243]},{"file": 20,"line": 1281,"col": 4,"docs": " Converts an integer from specified endianness to host endianness.\n","fields": [8244,8245,8246]},{"file": 20,"line": 489,"col": 4,"fields": [8247,8248,8249,8250]},{"file": 20,"line": 1297,"col": 4,"docs": " Converts an integer which has host endianness to little endian.\n","fields": [8251,8252]},{"file": 20,"line": 609,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n","fields": [8253,8254,8255]},{"file": 20,"line": 1289,"col": 4,"docs": " Converts an integer which has host endianness to the desired endianness.\n","fields": [8256,8257,8258]},{"file": 20,"line": 277,"col": 4,"docs": " Zero initializes the type.\n This can be used to zero initialize a C-struct.\n","fields": [8259]},{"file": 20,"line": 450,"col": 4,"fields": [8260,8261,8262]},{"file": 20,"line": 320,"col": 4,"fields": [8263,8264,8265]},{"file": 20,"line": 916,"col": 4},{"file": 20,"line": 1265,"col": 4,"docs": " Converts a little-endian integer to host endianness.\n","fields": [8266,8267]},{"file": 20,"line": 1273,"col": 4,"docs": " Converts a big-endian integer to host endianness.\n","fields": [8268,8269]},{"file": 20,"line": 424,"col": 4,"docs": " Linear search for the index of a scalar value inside a slice.\n","fields": [8270,8271,8272]},{"file": 20,"line": 1305,"col": 4,"docs": " Converts an integer which has host endianness to big endian.\n","fields": [8273,8274]},{"file": 20,"line": 656,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, and\n accepts any integer bit width.\n This function stores in native endian, which means it is implemented as a simple\n memory store.\n","fields": [8275,8276,8277]},{"file": 20,"line": 15,"col": 4},{"file": 20,"line": 446,"col": 4,"fields": [8278,8279,8280]},{"file": 20,"line": 560,"col": 4},{"file": 20,"line": 342,"col": 4,"docs": " Returns true if lhs < rhs, false otherwise\n","fields": [8281,8282,8283]},{"file": 20,"line": 907,"col": 4,"fields": [8284,8285,8286]},{"file": 20,"line": 408,"col": 4,"docs": " Remove values from the beginning and end of a slice.\n","fields": [8287,8288,8289]},{"file": 20,"line": 795,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that are not\n any of the bytes in `delimiter_bytes`.\n tokenize(\"   abc def    ghi  \", \" \")\n Will return slices for \"abc\", \"def\", \"ghi\", null, in that order.\n If `buffer` is empty, the iterator will return null.\n If `delimiter_bytes` does not exist in buffer,\n the iterator will return `buffer`, null, in that order.\n See also the related function `separate`.\n","fields": [8290,8291]},{"file": 20,"line": 731,"col": 4},{"file": 20,"line": 585,"col": 4},{"file": 20,"line": 401,"col": 4,"docs": " Remove values from the end of a slice.\n","fields": [8292,8293,8294]},{"file": 20,"line": 302,"col": 4,"fields": [8295,8296]},{"file": 20,"line": 673,"col": 4},{"file": 20,"line": 10,"col": 4},{"file": 20,"line": 478,"col": 4,"docs": " Find the index in a slice of a sub-slice, searching from the end backwards.\n To start looking at a different index, slice the haystack first.\n TODO is there even a better algorithm for this?\n","fields": [8297,8298,8299]},{"file": 20,"line": 555,"col": 4},{"file": 20,"line": 581,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n Assumes the endianness of memory is foreign, so it must byte-swap.\n","fields": [8300,8301]},{"file": 20,"line": 257,"col": 4,"docs": " Copy all of source into dest at position 0.\n dest.len must be >= source.len.\n dest.ptr must be >= src.ptr.\n","fields": [8302,8303,8304]},{"file": 20,"line": 379,"col": 4,"docs": " Returns true if all elements in a slice are equal to the scalar value provided\n","fields": [8305,8306,8307]},{"file": 20,"line": 1389,"col": 0,"fields": [8308,8309]},{"file": 20,"line": 1115,"col": 0,"fields": []},{"file": 20,"line": 6,"col": 0},{"file": 20,"line": 1461,"col": 0,"fields": [8310,8311]},{"file": 20,"line": 2,"col": 0},{"file": 20,"line": 4,"col": 0},{"file": 20,"line": 3,"col": 0},{"file": 20,"line": 1,"col": 0},{"file": 20,"line": 8,"col": 0},{"file": 20,"line": 7,"col": 0},{"file": 20,"line": 1064,"col": 0,"fields": []},{"file": 20,"line": 0,"col": 0},{"file": 20,"line": 5,"col": 0},{"file": 21,"line": 143,"col": 4},{"file": 21,"line": 140,"col": 4},{"file": 21,"line": 141,"col": 4},{"file": 21,"line": 184,"col": 4},{"file": 21,"line": 144,"col": 4},{"file": 21,"line": 80,"col": 4},{"file": 21,"line": 152,"col": 4},{"file": 21,"line": 169,"col": 4},{"file": 21,"line": 65,"col": 4},{"file": 21,"line": 529,"col": 4},{"file": 21,"line": 44,"col": 4},{"file": 21,"line": 385,"col": 4,"docs": " Rotates right. Only unsigned values can be rotated.\n Negative shift values results in shift modulo the bit count.\n","fields": [8312,8313,8314]},{"file": 21,"line": 655,"col": 4,"docs": " Returns the absolute value of the integer parameter.\n Result is an unsigned integer.\n","fields": [8315]},{"file": 21,"line": 164,"col": 4},{"file": 21,"line": 944,"col": 4,"docs": " See also `CompareOperator`.\n"},{"file": 21,"line": 146,"col": 4},{"file": 21,"line": 69,"col": 4},{"file": 21,"line": 561,"col": 4,"fields": [8316,8317,8318]},{"file": 21,"line": 787,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two).\n Only unsigned integers can be used. Zero is not an allowed input.\n If the value doesn't fit, returns an error.\n","fields": [8319,8320]},{"file": 21,"line": 183,"col": 4},{"file": 21,"line": 71,"col": 4},{"file": 21,"line": 357,"col": 4,"docs": " Shifts right. Overflowed bits are truncated.\n A negative shift amount results in a left shift.\n","fields": [8321,8322,8323]},{"file": 21,"line": 180,"col": 4},{"file": 21,"line": 187,"col": 4},{"file": 21,"line": 48,"col": 4},{"file": 21,"line": 37,"col": 4},{"file": 21,"line": 28,"col": 4,"docs": " 2/sqrt(π)\n"},{"file": 21,"line": 181,"col": 4},{"file": 21,"line": 148,"col": 4},{"file": 21,"line": 191,"col": 4},{"file": 21,"line": 128,"col": 4,"fields": []},{"file": 21,"line": 84,"col": 4},{"file": 21,"line": 88,"col": 4},{"file": 21,"line": 833,"col": 4,"fields": [8324,8325]},{"file": 21,"line": 182,"col": 4},{"file": 21,"line": 859,"col": 4,"fields": [8326,8327]},{"file": 21,"line": 150,"col": 4},{"file": 21,"line": 607,"col": 4,"fields": [8328,8329,8330]},{"file": 21,"line": 52,"col": 4},{"file": 21,"line": 34,"col": 4,"docs": " 1/sqrt(2)\n"},{"file": 21,"line": 956,"col": 4,"docs": " Given two numbers, this function returns the order they are with respect to each other.\n","fields": [8331,8332]},{"file": 21,"line": 188,"col": 4},{"file": 21,"line": 173,"col": 4},{"file": 21,"line": 186,"col": 4},{"file": 21,"line": 47,"col": 4},{"file": 21,"line": 77,"col": 4},{"file": 21,"line": 166,"col": 4},{"file": 21,"line": 742,"col": 4,"fields": [8333]},{"file": 21,"line": 62,"col": 4},{"file": 21,"line": 72,"col": 4},{"file": 21,"line": 50,"col": 4},{"file": 21,"line": 142,"col": 4},{"file": 21,"line": 190,"col": 4},{"file": 21,"line": 167,"col": 4},{"file": 21,"line": 136,"col": 4,"fields": []},{"file": 21,"line": 87,"col": 4},{"file": 21,"line": 56,"col": 4},{"file": 21,"line": 157,"col": 4},{"file": 21,"line": 19,"col": 4,"docs": " log10(e)\n"},{"file": 21,"line": 54,"col": 4},{"file": 21,"line": 161,"col": 4},{"file": 21,"line": 176,"col": 4},{"file": 21,"line": 78,"col": 4},{"file": 21,"line": 838,"col": 4,"fields": [8334,8335]},{"file": 21,"line": 160,"col": 4},{"file": 21,"line": 7,"col": 4,"docs": " Euler's number (e)\n"},{"file": 21,"line": 775,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two).\n Only unsigned integers can be used. Zero is not an allowed input.\n Result is a type with 1 more bit than the input type.\n","fields": [8336,8337]},{"file": 21,"line": 57,"col": 4},{"file": 21,"line": 172,"col": 4},{"file": 21,"line": 159,"col": 4},{"file": 21,"line": 324,"col": 4,"fields": [8338,8339,8340]},{"file": 21,"line": 81,"col": 4},{"file": 21,"line": 147,"col": 4},{"file": 21,"line": 51,"col": 4},{"file": 21,"line": 149,"col": 4},{"file": 21,"line": 969,"col": 4,"docs": " See also `Order`.\n"},{"file": 21,"line": 59,"col": 4},{"file": 21,"line": 630,"col": 4,"fields": [8341,8342,8343]},{"file": 21,"line": 25,"col": 4,"docs": " ln(10)\n"},{"file": 21,"line": 315,"col": 4,"fields": [8344,8345,8346]},{"file": 21,"line": 199,"col": 4,"fields": [8347]},{"file": 21,"line": 68,"col": 4},{"file": 21,"line": 165,"col": 4},{"file": 21,"line": 58,"col": 4},{"file": 21,"line": 747,"col": 4,"fields": [8348,8349]},{"file": 21,"line": 170,"col": 4},{"file": 21,"line": 45,"col": 4},{"file": 21,"line": 177,"col": 4},{"file": 21,"line": 63,"col": 4},{"file": 21,"line": 41,"col": 4},{"file": 21,"line": 432,"col": 4,"fields": [8350,8351]},{"file": 21,"line": 74,"col": 4},{"file": 21,"line": 404,"col": 4,"docs": " Rotates left. Only unsigned values can be rotated.\n Negative shift values results in shift modulo the bit count.\n","fields": [8352,8353,8354]},{"file": 21,"line": 31,"col": 4,"docs": " sqrt(2)\n"},{"file": 21,"line": 175,"col": 4},{"file": 21,"line": 124,"col": 4,"fields": []},{"file": 21,"line": 320,"col": 4,"fields": [8355]},{"file": 21,"line": 734,"col": 4,"docs": " Align cast a pointer but return an error if it's the wrong alignment\n","fields": [8356,8357]},{"file": 21,"line": 60,"col": 4},{"file": 21,"line": 155,"col": 4},{"file": 21,"line": 151,"col": 4},{"file": 21,"line": 40,"col": 4},{"file": 21,"line": 38,"col": 4},{"file": 21,"line": 582,"col": 4,"fields": [8358,8359,8360]},{"file": 21,"line": 686,"col": 4,"docs": " Returns the negation of the integer parameter.\n Result is a signed integer.\n","fields": [8361]},{"file": 21,"line": 154,"col": 4},{"file": 21,"line": 75,"col": 4},{"file": 21,"line": 39,"col": 4},{"file": 21,"line": 53,"col": 4},{"file": 21,"line": 158,"col": 4},{"file": 21,"line": 120,"col": 4,"fields": []},{"file": 21,"line": 992,"col": 4,"docs": " This function does the same thing as comparison operators, however the\n operator is a runtime-known enum value. Works on any operands that\n support comparison operators.\n","fields": [8362,8363,8364]},{"file": 21,"line": 331,"col": 4,"docs": " Shifts left. Overflowed bits are truncated.\n A negative shift amount results in a right shift.\n","fields": [8365,8366,8367]},{"file": 21,"line": 22,"col": 4,"docs": " ln(2)\n"},{"file": 21,"line": 193,"col": 4},{"file": 21,"line": 86,"col": 4},{"file": 21,"line": 46,"col": 4},{"file": 21,"line": 66,"col": 4},{"file": 21,"line": 132,"col": 4,"fields": []},{"file": 21,"line": 83,"col": 4},{"file": 21,"line": 153,"col": 4},{"file": 21,"line": 179,"col": 4},{"file": 21,"line": 156,"col": 4},{"file": 21,"line": 163,"col": 4},{"file": 21,"line": 185,"col": 4},{"file": 21,"line": 90,"col": 4,"fields": [8368,8369,8370,8371]},{"file": 21,"line": 145,"col": 4},{"file": 21,"line": 212,"col": 4,"fields": [8372]},{"file": 21,"line": 13,"col": 4,"docs": " Circle constant (τ)\n"},{"file": 21,"line": 171,"col": 4},{"file": 21,"line": 178,"col": 4},{"file": 21,"line": 731,"col": 4},{"file": 21,"line": 10,"col": 4,"docs": " Archimedes' constant (π)\n"},{"file": 21,"line": 16,"col": 4,"docs": " log2(e)\n"},{"file": 21,"line": 162,"col": 4},{"file": 21,"line": 507,"col": 4,"fields": [8373]},{"file": 21,"line": 540,"col": 4,"fields": [8374,8375,8376]},{"file": 21,"line": 168,"col": 4},{"file": 21,"line": 174,"col": 4},{"file": 21,"line": 535,"col": 0,"fields": []},{"file": 21,"line": 572,"col": 0,"fields": []},{"file": 21,"line": 821,"col": 0,"fields": []},{"file": 21,"line": 3,"col": 0},{"file": 21,"line": 0,"col": 0},{"file": 21,"line": 618,"col": 0,"fields": []},{"file": 21,"line": 2,"col": 0},{"file": 21,"line": 804,"col": 0,"fields": []},{"file": 21,"line": 641,"col": 0,"fields": []},{"file": 21,"line": 763,"col": 0,"fields": []},{"file": 21,"line": 500,"col": 0,"fields": []},{"file": 21,"line": 595,"col": 0,"fields": []},{"file": 21,"line": 4,"col": 0},{"file": 21,"line": 1,"col": 0},{"file": 21,"line": 524,"col": 0,"fields": []},{"file": 21,"line": 551,"col": 0,"fields": []},{"file": 48,"line": 27,"col": 8,"docs": " Represents a unique ID per thread.\n May be an integer or pointer depending on the platform.\n On Linux and POSIX, this is the same as Handle.\n"},{"file": 48,"line": 74,"col": 8,"fields": [8377]},{"file": 48,"line": 32,"col": 8},{"file": 48,"line": 370,"col": 8,"fields": []},{"file": 48,"line": 16,"col": 8,"docs": " Represents a kernel thread handle.\n May be an integer or a pointer depending on the platform.\n On Linux and POSIX, this is the same as Id.\n"},{"file": 48,"line": 70,"col": 8,"docs": " Returns the handle of this thread.\n On Linux and POSIX, this is the same as Id.\n On Linux, it is possible that the thread spawned with `spawn`\n finishes executing entirely before the clone syscall completes. In this\n case, this function will return 0 rather than the no-longer-existing thread's\n pid.\n","fields": [8378]},{"file": 48,"line": 53,"col": 8,"docs": " Returns the ID of the calling thread.\n Makes a syscall every time the function is called.\n On Linux and POSIX, this Id is the same as a Handle.\n","fields": []},{"file": 48,"line": 363,"col": 8},{"file": 48,"line": 11,"col": 8},{"file": 48,"line": 143,"col": 8,"docs": " caller must call wait on the returned thread\n fn startFn(@TypeOf(context)) T\n where T is u8, noreturn, void, or !void\n caller must call wait on the returned thread\n","fields": [8379,8380]},{"file": 48,"line": 109,"col": 8},{"file": 49,"line": 608,"col": 4},{"file": 49,"line": 184,"col": 4},{"file": 49,"line": 415,"col": 4},{"file": 49,"line": 186,"col": 4},{"file": 49,"line": 654,"col": 4},{"file": 49,"line": 930,"col": 4},{"file": 49,"line": 464,"col": 4},{"file": 49,"line": 689,"col": 4},{"file": 49,"line": 624,"col": 4},{"file": 49,"line": 135,"col": 4},{"file": 42,"line": 414,"col": 4,"docs": " mark it as an executable\n"},{"file": 49,"line": 257,"col": 4},{"file": 42,"line": 269,"col": 4},{"file": 42,"line": 442,"col": 4},{"file": 42,"line": 257,"col": 4},{"file": 49,"line": 258,"col": 4},{"file": 42,"line": 186,"col": 4},{"file": 22,"line": 1796,"col": 4,"fields": [8381]},{"file": 49,"line": 460,"col": 4},{"file": 49,"line": 570,"col": 4},{"file": 42,"line": 14,"col": 4},{"file": 42,"line": 248,"col": 4},{"file": 49,"line": 432,"col": 4},{"file": 50,"line": 133,"col": 4,"docs": " Level 2 not synchronized\n"},{"file": 50,"line": 293,"col": 4,"docs": " Cannot assign requested address\n"},{"file": 42,"line": 301,"col": 4},{"file": 49,"line": 1261,"col": 4},{"file": 49,"line": 1435,"col": 4},{"file": 42,"line": 427,"col": 4},{"file": 49,"line": 380,"col": 4},{"file": 50,"line": 136,"col": 4,"docs": " Level 3 halted\n"},{"file": 42,"line": 71,"col": 4},{"file": 49,"line": 571,"col": 4},{"file": 49,"line": 774,"col": 4},{"file": 42,"line": 101,"col": 4},{"file": 42,"line": 173,"col": 4},{"file": 42,"line": 453,"col": 4},{"file": 49,"line": 1237,"col": 4},{"file": 49,"line": 84,"col": 4},{"file": 51,"line": 26,"col": 4},{"file": 49,"line": 1370,"col": 4},{"file": 49,"line": 501,"col": 4},{"file": 49,"line": 532,"col": 4},{"file": 49,"line": 295,"col": 4},{"file": 49,"line": 300,"col": 4},{"file": 42,"line": 32,"col": 4},{"file": 50,"line": 344,"col": 4,"docs": " Stale NFS file handle\n"},{"file": 42,"line": 308,"col": 4},{"file": 49,"line": 187,"col": 4},{"file": 49,"line": 409,"col": 4},{"file": 49,"line": 34,"col": 4},{"file": 49,"line": 629,"col": 4},{"file": 49,"line": 76,"col": 4},{"file": 49,"line": 208,"col": 4},{"file": 50,"line": 58,"col": 4,"docs": " Not a directory\n"},{"file": 49,"line": 558,"col": 4},{"file": 42,"line": 139,"col": 4},{"file": 49,"line": 362,"col": 12},{"file": 42,"line": 444,"col": 4},{"file": 42,"line": 202,"col": 4},{"file": 50,"line": 169,"col": 4,"docs": " Invalid slot\n"},{"file": 49,"line": 339,"col": 4},{"file": 49,"line": 443,"col": 4},{"file": 42,"line": 89,"col": 4},{"file": 42,"line": 184,"col": 4},{"file": 49,"line": 389,"col": 4},{"file": 42,"line": 217,"col": 4},{"file": 42,"line": 278,"col": 4},{"file": 49,"line": 355,"col": 12},{"file": 42,"line": 303,"col": 4},{"file": 49,"line": 249,"col": 4},{"file": 49,"line": 540,"col": 4},{"file": 42,"line": 131,"col": 4},{"file": 49,"line": 554,"col": 4},{"file": 49,"line": 30,"col": 4},{"file": 49,"line": 1391,"col": 4},{"file": 49,"line": 1263,"col": 4},{"file": 22,"line": 2390,"col": 4,"fields": [8382,8383,8384,8385,8386]},{"file": 49,"line": 808,"col": 4},{"file": 49,"line": 232,"col": 4},{"file": 49,"line": 638,"col": 4},{"file": 42,"line": 351,"col": 4},{"file": 50,"line": 64,"col": 4,"docs": " Invalid argument\n"},{"file": 50,"line": 314,"col": 4,"docs": " Transport endpoint is already connected\n"},{"file": 42,"line": 140,"col": 4},{"file": 22,"line": 2151,"col": 4,"docs": " add a watch to an initialized inotify instance\n","fields": [8387,8388,8389]},{"file": 49,"line": 1426,"col": 4},{"file": 42,"line": 190,"col": 4},{"file": 42,"line": 253,"col": 4},{"file": 49,"line": 568,"col": 4},{"file": 42,"line": 172,"col": 4},{"file": 22,"line": 2671,"col": 4,"fields": [8390,8391,8392]},{"file": 49,"line": 29,"col": 4},{"file": 49,"line": 194,"col": 4},{"file": 50,"line": 220,"col": 4,"docs": " Value too large for defined data type\n"},{"file": 49,"line": 1213,"col": 4},{"file": 22,"line": 3319,"col": 4,"fields": [8393]},{"file": 49,"line": 445,"col": 4},{"file": 22,"line": 1314,"col": 4},{"file": 49,"line": 26,"col": 4},{"file": 49,"line": 937,"col": 4},{"file": 49,"line": 776,"col": 4},{"file": 50,"line": 142,"col": 4,"docs": " Link number out of range\n"},{"file": 49,"line": 909,"col": 4},{"file": 49,"line": 584,"col": 4},{"file": 42,"line": 122,"col": 4},{"file": 49,"line": 157,"col": 12},{"file": 22,"line": 2889,"col": 4,"fields": [8394,8395]},{"file": 49,"line": 1396,"col": 4},{"file": 49,"line": 731,"col": 4,"fields": [8396]},{"file": 49,"line": 911,"col": 4},{"file": 49,"line": 939,"col": 4},{"file": 22,"line": 2816,"col": 4},{"file": 42,"line": 243,"col": 4},{"file": 42,"line": 180,"col": 4},{"file": 50,"line": 112,"col": 4,"docs": " Function not implemented\n"},{"file": 49,"line": 1247,"col": 4},{"file": 49,"line": 643,"col": 4},{"file": 49,"line": 436,"col": 4},{"file": 49,"line": 1283,"col": 4},{"file": 50,"line": 368,"col": 4,"docs": " Wrong medium type\n"},{"file": 49,"line": 1034,"col": 4},{"file": 50,"line": 37,"col": 4,"docs": " Permission denied\n"},{"file": 42,"line": 144,"col": 4},{"file": 49,"line": 695,"col": 4},{"file": 22,"line": 1617,"col": 4},{"file": 49,"line": 502,"col": 4},{"file": 42,"line": 435,"col": 4},{"file": 42,"line": 107,"col": 4},{"file": 42,"line": 167,"col": 4},{"file": 49,"line": 888,"col": 4},{"file": 49,"line": 127,"col": 4,"docs": " MAP_FIXED which doesn't unmap underlying mapping\n"},{"file": 49,"line": 398,"col": 4},{"file": 42,"line": 165,"col": 4},{"file": 42,"line": 62,"col": 4},{"file": 49,"line": 331,"col": 4},{"file": 42,"line": 292,"col": 4},{"file": 42,"line": 250,"col": 4},{"file": 42,"line": 290,"col": 4},{"file": 22,"line": 2093,"col": 4,"fields": [8397,8398,8399,8400]},{"file": 49,"line": 980,"col": 4},{"file": 22,"line": 1025,"col": 4},{"file": 22,"line": 3285,"col": 4,"fields": [8401,8402]},{"file": 49,"line": 478,"col": 4},{"file": 49,"line": 541,"col": 4},{"file": 49,"line": 1412,"col": 4},{"file": 49,"line": 661,"col": 4},{"file": 49,"line": 719,"col": 4,"fields": [8403]},{"file": 49,"line": 284,"col": 4},{"file": 49,"line": 934,"col": 4},{"file": 42,"line": 35,"col": 4},{"file": 49,"line": 262,"col": 4},{"file": 49,"line": 391,"col": 4},{"file": 49,"line": 906,"col": 4},{"file": 49,"line": 239,"col": 4},{"file": 49,"line": 361,"col": 12},{"file": 42,"line": 405,"col": 4,"docs": " only give out 32bit addresses\n"},{"file": 49,"line": 866,"col": 4},{"file": 42,"line": 169,"col": 4},{"file": 49,"line": 566,"col": 4},{"file": 42,"line": 76,"col": 4},{"file": 49,"line": 329,"col": 4},{"file": 49,"line": 637,"col": 4},{"file": 49,"line": 278,"col": 4},{"file": 49,"line": 1225,"col": 4},{"file": 49,"line": 488,"col": 4},{"file": 49,"line": 173,"col": 4},{"file": 22,"line": 3044,"col": 4,"docs": " Transmit a message to another socket.\n\n The `sendto` call may be used only when the socket is in a connected state (so that the intended\n recipient  is  known). The  following call\n\n     send(sockfd, buf, len, flags);\n\n is equivalent to\n\n     sendto(sockfd, buf, len, flags, NULL, 0);\n\n If  sendto()  is used on a connection-mode (`SOCK_STREAM`, `SOCK_SEQPACKET`) socket, the arguments\n `dest_addr` and `addrlen` are asserted to be `null` and `0` respectively, and asserted\n that the socket was actually connected.\n Otherwise, the address of the target is given by `dest_addr` with `addrlen` specifying  its  size.\n\n If the message is too long to pass atomically through the underlying protocol,\n `SendError.MessageTooBig` is returned, and the message is not transmitted.\n\n There is no  indication  of  failure  to  deliver.\n\n When the message does not fit into the send buffer of  the  socket,  `sendto`  normally  blocks,\n unless  the socket has been placed in nonblocking I/O mode.  In nonblocking mode it would fail\n with `SendError.WouldBlock`.  The `select` call may be used  to  determine when it is\n possible to send more data.\n","fields": [8404,8405,8406,8407,8408]},{"file": 49,"line": 736,"col": 4},{"file": 42,"line": 208,"col": 4},{"file": 49,"line": 462,"col": 4},{"file": 49,"line": 1442,"col": 4},{"file": 50,"line": 308,"col": 4,"docs": " Connection reset by peer\n"},{"file": 49,"line": 23,"col": 4},{"file": 49,"line": 1432,"col": 4},{"file": 49,"line": 321,"col": 4},{"file": 49,"line": 229,"col": 4},{"file": 50,"line": 376,"col": 4,"docs": " DNS server returned answer with no data\n"},{"file": 42,"line": 158,"col": 4},{"file": 49,"line": 474,"col": 4},{"file": 49,"line": 67,"col": 4,"docs": " Apply to the entire subtree\n"},{"file": 49,"line": 299,"col": 4},{"file": 42,"line": 24,"col": 4},{"file": 42,"line": 156,"col": 4},{"file": 49,"line": 407,"col": 4},{"file": 42,"line": 334,"col": 4},{"file": 49,"line": 341,"col": 4},{"file": 49,"line": 1228,"col": 4},{"file": 42,"line": 118,"col": 4},{"file": 49,"line": 210,"col": 4},{"file": 42,"line": 151,"col": 4},{"file": 22,"line": 3304,"col": 4},{"file": 49,"line": 919,"col": 4},{"file": 50,"line": 424,"col": 4,"docs": " Domain name is too long\n"},{"file": 42,"line": 251,"col": 4},{"file": 49,"line": 519,"col": 4},{"file": 49,"line": 802,"col": 4},{"file": 22,"line": 2065,"col": 4,"fields": []},{"file": 42,"line": 183,"col": 4},{"file": 49,"line": 325,"col": 4},{"file": 49,"line": 1222,"col": 4},{"file": 42,"line": 64,"col": 4},{"file": 22,"line": 1450,"col": 4,"fields": [8409,8410,8411]},{"file": 49,"line": 589,"col": 4},{"file": 22,"line": 72,"col": 4,"docs": " See also `getenv`. Populated by startup code before main().\n"},{"file": 42,"line": 117,"col": 4},{"file": 49,"line": 523,"col": 4},{"file": 49,"line": 549,"col": 4},{"file": 42,"line": 276,"col": 4},{"file": 49,"line": 926,"col": 4},{"file": 49,"line": 914,"col": 4},{"file": 49,"line": 371,"col": 12},{"file": 49,"line": 646,"col": 4},{"file": 49,"line": 513,"col": 4},{"file": 49,"line": 158,"col": 12},{"file": 49,"line": 330,"col": 4},{"file": 49,"line": 539,"col": 4},{"file": 22,"line": 77,"col": 4,"docs": " Populated by startup code before main().\n Not available on Windows. See `std.process.args`\n for obtaining the process arguments.\n"},{"file": 42,"line": 126,"col": 4},{"file": 22,"line": 2209,"col": 4},{"file": 22,"line": 1406,"col": 4},{"file": 22,"line": 120,"col": 4,"docs": " Obtain a series of random bytes. These bytes can be used to seed user-space\n random number generators or for cryptographic purposes.\n When linking against libc, this calls the\n appropriate OS-specific library call. Otherwise it uses the zig standard\n library implementation.\n","fields": [8412]},{"file": 49,"line": 172,"col": 4},{"file": 49,"line": 496,"col": 4},{"file": 22,"line": 26,"col": 4},{"file": 49,"line": 468,"col": 4},{"file": 42,"line": 445,"col": 4},{"file": 49,"line": 268,"col": 4},{"file": 42,"line": 36,"col": 4},{"file": 42,"line": 73,"col": 4},{"file": 42,"line": 395,"col": 4},{"file": 49,"line": 87,"col": 4},{"file": 50,"line": 70,"col": 4,"docs": " Too many open files\n"},{"file": 49,"line": 335,"col": 4},{"file": 49,"line": 433,"col": 4},{"file": 49,"line": 1281,"col": 4},{"file": 49,"line": 1451,"col": 4},{"file": 42,"line": 315,"col": 4},{"file": 42,"line": 399,"col": 4},{"file": 42,"line": 281,"col": 4},{"file": 49,"line": 875,"col": 4},{"file": 49,"line": 676,"col": 4},{"file": 22,"line": 113,"col": 4},{"file": 42,"line": 84,"col": 4},{"file": 42,"line": 136,"col": 4},{"file": 22,"line": 339,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [8413,8414]},{"file": 49,"line": 886,"col": 4},{"file": 49,"line": 1253,"col": 4},{"file": 22,"line": 917,"col": 4,"docs": " The result is a slice of out_buffer, indexed from 0.\n","fields": [8415]},{"file": 50,"line": 394,"col": 4,"docs": " Misformatted DNS query\n"},{"file": 49,"line": 715,"col": 4,"fields": [8416]},{"file": 42,"line": 157,"col": 4},{"file": 49,"line": 377,"col": 4},{"file": 42,"line": 450,"col": 4},{"file": 22,"line": 2841,"col": 4,"fields": [8417,8418]},{"file": 49,"line": 477,"col": 4},{"file": 42,"line": 164,"col": 4},{"file": 49,"line": 191,"col": 4},{"file": 49,"line": 320,"col": 4},{"file": 42,"line": 374,"col": 4},{"file": 50,"line": 320,"col": 4,"docs": " Cannot send after transport endpoint shutdown\n"},{"file": 42,"line": 33,"col": 4},{"file": 42,"line": 434,"col": 4},{"file": 42,"line": 159,"col": 4},{"file": 50,"line": 256,"col": 4,"docs": " Too many users\n"},{"file": 42,"line": 88,"col": 4},{"file": 42,"line": 235,"col": 4},{"file": 49,"line": 1163,"col": 4,"docs": " needs io_uring_enter wakeup\n"},{"file": 42,"line": 104,"col": 4},{"file": 42,"line": 209,"col": 4},{"file": 50,"line": 268,"col": 4,"docs": " Protocol wrong type for socket\n"},{"file": 22,"line": 1290,"col": 4,"docs": " Same as `mkdir` but the parameter is a null-terminated UTF8-encoded string.\n","fields": [8419,8420]},{"file": 49,"line": 271,"col": 4},{"file": 49,"line": 559,"col": 4},{"file": 42,"line": 289,"col": 4},{"file": 42,"line": 353,"col": 4},{"file": 50,"line": 46,"col": 4,"docs": " Device or resource busy\n"},{"file": 49,"line": 657,"col": 4},{"file": 49,"line": 137,"col": 4},{"file": 42,"line": 244,"col": 4},{"file": 42,"line": 21,"col": 4},{"file": 49,"line": 1368,"col": 4},{"file": 49,"line": 305,"col": 4},{"file": 49,"line": 1415,"col": 4},{"file": 42,"line": 368,"col": 4},{"file": 49,"line": 101,"col": 4,"docs": " Mask for type of mapping\n"},{"file": 49,"line": 688,"col": 4},{"file": 49,"line": 1371,"col": 4},{"file": 49,"line": 1271,"col": 4},{"file": 49,"line": 753,"col": 4,"fields": [8421]},{"file": 49,"line": 414,"col": 4},{"file": 42,"line": 319,"col": 4},{"file": 42,"line": 371,"col": 4},{"file": 49,"line": 107,"col": 4,"docs": " don't use a file\n"},{"file": 42,"line": 116,"col": 4},{"file": 50,"line": 365,"col": 4,"docs": " No medium found\n"},{"file": 49,"line": 473,"col": 4},{"file": 42,"line": 225,"col": 4},{"file": 49,"line": 69,"col": 4},{"file": 49,"line": 600,"col": 4},{"file": 22,"line": 2519,"col": 4,"docs": " Returns the read/write file offset relative to the beginning.\n","fields": [8422]},{"file": 49,"line": 692,"col": 4},{"file": 50,"line": 199,"col": 4,"docs": " Advertise error\n"},{"file": 49,"line": 439,"col": 4},{"file": 50,"line": 287,"col": 4,"docs": " Address family not supported by protocol\n"},{"file": 49,"line": 1421,"col": 4},{"file": 22,"line": 823,"col": 4,"docs": " This function must allocate memory to add a null terminating bytes on path and each arg.\n It must also convert to KEY=VALUE\\0 format for environment variables, and include null\n pointers after the args and after the environment variables.\n `argv_slice[0]` is the executable path.\n This function also uses the PATH environment variable to get the full path to the executable.\n","fields": [8423,8424,8425]},{"file": 49,"line": 618,"col": 4},{"file": 49,"line": 581,"col": 4},{"file": 50,"line": 373,"col": 4,"docs": " DNS server returned answer with no data\n"},{"file": 22,"line": 2590,"col": 4,"docs": " Same as `realpath` except `pathname` is null-terminated.\n","fields": [8426,8427]},{"file": 49,"line": 334,"col": 4},{"file": 22,"line": 2547,"col": 4},{"file": 50,"line": 280,"col": 4,"docs": " Operation not supported on transport endpoint\n"},{"file": 42,"line": 147,"col": 4},{"file": 22,"line": 1340,"col": 4,"docs": " Same as `rmdir` except the parameter is null-terminated.\n","fields": [8428]},{"file": 49,"line": 52,"col": 4,"docs": " Allow empty relative pathname\n"},{"file": 50,"line": 79,"col": 4,"docs": " File too large\n"},{"file": 42,"line": 207,"col": 4},{"file": 42,"line": 422,"col": 4},{"file": 49,"line": 1035,"col": 4},{"file": 22,"line": 2814,"col": 4,"docs": " Whether or not error.Unexpected will print its value and a stack trace.\n if this happens the fix is to add the error code to the corresponding\n switch expression, possibly introduce a new error in the error set, and\n send a patch to Zig.\n"},{"file": 42,"line": 148,"col": 4},{"file": 42,"line": 189,"col": 4},{"file": 42,"line": 326,"col": 4},{"file": 49,"line": 428,"col": 4},{"file": 22,"line": 367,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [8429,8430,8431]},{"file": 42,"line": 205,"col": 4},{"file": 49,"line": 607,"col": 4},{"file": 22,"line": 544,"col": 4,"docs": " Write multiple buffers to a file descriptor, with a position offset.\n Keeps trying if it gets interrupted.\n","fields": [8432,8433,8434]},{"file": 49,"line": 297,"col": 4},{"file": 50,"line": 55,"col": 4,"docs": " No such device\n"},{"file": 42,"line": 272,"col": 4},{"file": 49,"line": 195,"col": 4},{"file": 49,"line": 569,"col": 4},{"file": 42,"line": 288,"col": 4},{"file": 22,"line": 1576,"col": 4},{"file": 49,"line": 876,"col": 4},{"file": 50,"line": 415,"col": 4,"docs": " Error reading file\n"},{"file": 49,"line": 413,"col": 4},{"file": 42,"line": 378,"col": 4},{"file": 49,"line": 291,"col": 4},{"file": 42,"line": 55,"col": 4},{"file": 49,"line": 1276,"col": 4},{"file": 49,"line": 1385,"col": 4},{"file": 42,"line": 63,"col": 4},{"file": 49,"line": 942,"col": 4},{"file": 42,"line": 48,"col": 4},{"file": 49,"line": 259,"col": 4},{"file": 22,"line": 2621,"col": 4,"docs": " Same as `realpath` except `pathname` is null-terminated and UTF16LE-encoded.\n","fields": [8435,8436]},{"file": 49,"line": 296,"col": 4},{"file": 22,"line": 2289,"col": 4},{"file": 42,"line": 228,"col": 4},{"file": 49,"line": 1423,"col": 4},{"file": 42,"line": 16,"col": 4},{"file": 49,"line": 450,"col": 4},{"file": 49,"line": 475,"col": 4},{"file": 49,"line": 1438,"col": 4},{"file": 50,"line": 118,"col": 4,"docs": " Too many symbolic links encountered\n"},{"file": 49,"line": 546,"col": 4},{"file": 50,"line": 184,"col": 4,"docs": " Out of streams resources\n"},{"file": 49,"line": 24,"col": 4},{"file": 49,"line": 1269,"col": 4},{"file": 42,"line": 358,"col": 4},{"file": 42,"line": 268,"col": 4},{"file": 49,"line": 1427,"col": 4},{"file": 49,"line": 756,"col": 4,"fields": [8437]},{"file": 49,"line": 1246,"col": 4},{"file": 42,"line": 386,"col": 4},{"file": 49,"line": 573,"col": 4},{"file": 42,"line": 58,"col": 4},{"file": 22,"line": 2211,"col": 4,"fields": []},{"file": 49,"line": 495,"col": 4},{"file": 49,"line": 674,"col": 4},{"file": 42,"line": 119,"col": 4},{"file": 49,"line": 198,"col": 4},{"file": 42,"line": 25,"col": 4},{"file": 49,"line": 64,"col": 4,"docs": " - Don't sync attributes with the server\n"},{"file": 49,"line": 666,"col": 4},{"file": 50,"line": 235,"col": 4,"docs": " Accessing a corrupted shared library\n"},{"file": 50,"line": 347,"col": 4,"docs": " Structure needs cleaning\n"},{"file": 42,"line": 325,"col": 4},{"file": 22,"line": 2354,"col": 4},{"file": 49,"line": 264,"col": 4},{"file": 49,"line": 575,"col": 4},{"file": 50,"line": 382,"col": 4,"docs": " DNS server returned general failure\n"},{"file": 49,"line": 831,"col": 4,"docs": " UNIX domain socket address\n"},{"file": 49,"line": 80,"col": 4},{"file": 42,"line": 260,"col": 4},{"file": 42,"line": 238,"col": 4},{"file": 49,"line": 679,"col": 4},{"file": 49,"line": 178,"col": 4},{"file": 42,"line": 432,"col": 4},{"file": 50,"line": 28,"col": 4,"docs": " No child processes\n"},{"file": 50,"line": 274,"col": 4,"docs": " Protocol not supported\n"},{"file": 42,"line": 112,"col": 4},{"file": 49,"line": 269,"col": 4},{"file": 42,"line": 102,"col": 4},{"file": 42,"line": 188,"col": 4},{"file": 49,"line": 121,"col": 4,"docs": " create a huge page mapping\n"},{"file": 49,"line": 738,"col": 4},{"file": 49,"line": 199,"col": 4},{"file": 42,"line": 242,"col": 4},{"file": 42,"line": 115,"col": 4},{"file": 49,"line": 326,"col": 4},{"file": 42,"line": 97,"col": 4},{"file": 42,"line": 525,"col": 4},{"file": 49,"line": 1250,"col": 4},{"file": 49,"line": 533,"col": 4},{"file": 49,"line": 1267,"col": 4},{"file": 49,"line": 936,"col": 4},{"file": 22,"line": 998,"col": 4,"fields": [8438,8439,8440]},{"file": 50,"line": 178,"col": 4,"docs": " No data available\n"},{"file": 49,"line": 595,"col": 4},{"file": 49,"line": 481,"col": 4},{"file": 42,"line": 168,"col": 4},{"file": 49,"line": 202,"col": 4},{"file": 49,"line": 328,"col": 4},{"file": 42,"line": 339,"col": 4},{"file": 50,"line": 43,"col": 4,"docs": " Block device required\n"},{"file": 42,"line": 163,"col": 4},{"file": 50,"line": 202,"col": 4,"docs": " Srmount error\n"},{"file": 49,"line": 735,"col": 4},{"file": 49,"line": 408,"col": 4},{"file": 50,"line": 16,"col": 4,"docs": " No such device or address\n"},{"file": 49,"line": 337,"col": 4},{"file": 49,"line": 1243,"col": 4},{"file": 42,"line": 69,"col": 4},{"file": 49,"line": 49,"col": 4,"docs": " Suppress terminal automount traversal\n"},{"file": 49,"line": 614,"col": 4},{"file": 49,"line": 535,"col": 4},{"file": 42,"line": 15,"col": 4},{"file": 49,"line": 1380,"col": 4},{"file": 42,"line": 18,"col": 4},{"file": 42,"line": 96,"col": 4},{"file": 22,"line": 1058,"col": 4,"docs": " Same as `unlink` except the parameter is a null terminated UTF8-encoded string.\n","fields": [8441]},{"file": 49,"line": 625,"col": 4},{"file": 49,"line": 552,"col": 4},{"file": 22,"line": 656,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n See also `openC`.\n","fields": [8442,8443,8444]},{"file": 49,"line": 492,"col": 4},{"file": 49,"line": 272,"col": 4},{"file": 22,"line": 1256,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated UTF16LE encoded byte arrays.\n Assumes target is Windows.\n","fields": [8445,8446]},{"file": 49,"line": 370,"col": 12},{"file": 49,"line": 430,"col": 4},{"file": 42,"line": 306,"col": 4},{"file": 49,"line": 274,"col": 4},{"file": 42,"line": 304,"col": 4},{"file": 49,"line": 168,"col": 4},{"file": 49,"line": 904,"col": 4},{"file": 49,"line": 872,"col": 4},{"file": 42,"line": 123,"col": 4},{"file": 49,"line": 536,"col": 4},{"file": 42,"line": 38,"col": 4},{"file": 42,"line": 129,"col": 4},{"file": 49,"line": 697,"col": 4},{"file": 42,"line": 133,"col": 4},{"file": 49,"line": 528,"col": 4},{"file": 49,"line": 402,"col": 4},{"file": 42,"line": 317,"col": 4},{"file": 49,"line": 263,"col": 4},{"file": 49,"line": 1037,"col": 4},{"file": 49,"line": 632,"col": 4},{"file": 49,"line": 1381,"col": 4},{"file": 42,"line": 132,"col": 4},{"file": 49,"line": 1403,"col": 4},{"file": 22,"line": 208,"col": 4},{"file": 50,"line": 406,"col": 4,"docs": " Could not contact DNS servers\n"},{"file": 22,"line": 1100,"col": 4,"docs": " Same as `unlinkat` but `file_path` is a null-terminated string.\n","fields": [8447,8448,8449]},{"file": 49,"line": 514,"col": 4},{"file": 42,"line": 22,"col": 4},{"file": 42,"line": 372,"col": 4},{"file": 49,"line": 1445,"col": 4},{"file": 22,"line": 30,"col": 4},{"file": 42,"line": 296,"col": 4},{"file": 49,"line": 510,"col": 4},{"file": 50,"line": 421,"col": 4,"docs": " Application terminated lookup\n"},{"file": 42,"line": 214,"col": 4},{"file": 49,"line": 685,"col": 4},{"file": 49,"line": 206,"col": 4},{"file": 49,"line": 1448,"col": 4},{"file": 49,"line": 944,"col": 4,"fields": [8450]},{"file": 42,"line": 141,"col": 4},{"file": 49,"line": 351,"col": 12},{"file": 49,"line": 390,"col": 4},{"file": 22,"line": 663,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n See also `open`.\n","fields": [8451,8452,8453]},{"file": 49,"line": 940,"col": 4},{"file": 42,"line": 121,"col": 4},{"file": 42,"line": 359,"col": 4},{"file": 49,"line": 1285,"col": 4},{"file": 42,"line": 380,"col": 4},{"file": 50,"line": 97,"col": 4,"docs": " Math argument out of domain of func\n"},{"file": 49,"line": 935,"col": 4},{"file": 42,"line": 338,"col": 4},{"file": 42,"line": 61,"col": 4},{"file": 22,"line": 1376,"col": 4,"docs": " Changes the current working directory of the calling process.\n `dir_path` is recommended to be a UTF-8 encoded string.\n","fields": [8454]},{"file": 49,"line": 1446,"col": 4},{"file": 42,"line": 178,"col": 4},{"file": 42,"line": 60,"col": 4},{"file": 50,"line": 356,"col": 4,"docs": " Is a named type file\n"},{"file": 49,"line": 327,"col": 4},{"file": 42,"line": 352,"col": 4},{"file": 22,"line": 1870,"col": 4},{"file": 22,"line": 734,"col": 4,"fields": [8455,8456]},{"file": 49,"line": 302,"col": 4},{"file": 49,"line": 442,"col": 4},{"file": 49,"line": 634,"col": 4},{"file": 49,"line": 750,"col": 4,"fields": [8457]},{"file": 49,"line": 227,"col": 4},{"file": 50,"line": 7,"col": 4,"docs": " No such process\n"},{"file": 49,"line": 524,"col": 4},{"file": 42,"line": 330,"col": 4},{"file": 22,"line": 240,"col": 4,"fields": [8458,8459]},{"file": 49,"line": 277,"col": 4},{"file": 42,"line": 224,"col": 4},{"file": 42,"line": 232,"col": 4},{"file": 42,"line": 215,"col": 4},{"file": 42,"line": 282,"col": 4},{"file": 49,"line": 175,"col": 4},{"file": 50,"line": 205,"col": 4,"docs": " Communication error on send\n"},{"file": 49,"line": 527,"col": 4},{"file": 42,"line": 85,"col": 4},{"file": 49,"line": 698,"col": 4},{"file": 49,"line": 675,"col": 4},{"file": 49,"line": 1274,"col": 4},{"file": 49,"line": 85,"col": 4},{"file": 49,"line": 1238,"col": 4},{"file": 42,"line": 93,"col": 4},{"file": 42,"line": 348,"col": 4},{"file": 49,"line": 915,"col": 4},{"file": 42,"line": 429,"col": 4},{"file": 49,"line": 658,"col": 4},{"file": 22,"line": 1279,"col": 4,"docs": " Create a directory.\n `mode` is ignored on Windows.\n","fields": [8460,8461]},{"file": 42,"line": 273,"col": 4},{"file": 42,"line": 74,"col": 4},{"file": 42,"line": 333,"col": 4},{"file": 42,"line": 327,"col": 4},{"file": 49,"line": 635,"col": 4},{"file": 42,"line": 393,"col": 4},{"file": 42,"line": 433,"col": 4},{"file": 50,"line": 25,"col": 4,"docs": " Bad file number\n"},{"file": 50,"line": 22,"col": 4,"docs": " Exec format error\n"},{"file": 22,"line": 2341,"col": 4,"docs": " Call from Windows-specific code if you already have a UTF-16LE encoded, null terminated string.\n Otherwise use `access` or `accessC`.\n TODO currently this ignores `mode`.\n","fields": [8462,8463]},{"file": 42,"line": 300,"col": 4},{"file": 49,"line": 238,"col": 4},{"file": 49,"line": 537,"col": 4},{"file": 22,"line": 2785,"col": 4},{"file": 49,"line": 487,"col": 4},{"file": 22,"line": 3113,"col": 4},{"file": 22,"line": 2142,"col": 4},{"file": 49,"line": 286,"col": 4},{"file": 50,"line": 223,"col": 4,"docs": " Name not unique on network\n"},{"file": 49,"line": 1424,"col": 4},{"file": 42,"line": 321,"col": 4},{"file": 42,"line": 324,"col": 4},{"file": 42,"line": 417,"col": 4,"docs": " pages are locked\n"},{"file": 42,"line": 199,"col": 4},{"file": 49,"line": 480,"col": 4},{"file": 49,"line": 58,"col": 4,"docs": " - Do whatever stat() does\n"},{"file": 49,"line": 231,"col": 4},{"file": 42,"line": 143,"col": 4},{"file": 49,"line": 744,"col": 4,"fields": [8464]},{"file": 42,"line": 78,"col": 4},{"file": 22,"line": 1429,"col": 4,"docs": " Same as `readlink` except `file_path` is null-terminated.\n","fields": [8465,8466]},{"file": 50,"line": 139,"col": 4,"docs": " Level 3 reset\n"},{"file": 49,"line": 1383,"col": 4},{"file": 42,"line": 361,"col": 4},{"file": 49,"line": 656,"col": 4},{"file": 49,"line": 243,"col": 4},{"file": 49,"line": 410,"col": 4},{"file": 49,"line": 511,"col": 4},{"file": 42,"line": 95,"col": 4},{"file": 49,"line": 270,"col": 4},{"file": 49,"line": 908,"col": 4},{"file": 49,"line": 340,"col": 4},{"file": 49,"line": 490,"col": 4},{"file": 49,"line": 256,"col": 4},{"file": 42,"line": 600,"col": 4},{"file": 49,"line": 444,"col": 4},{"file": 49,"line": 505,"col": 4},{"file": 49,"line": 246,"col": 4},{"file": 50,"line": 296,"col": 4,"docs": " Network is down\n"},{"file": 49,"line": 526,"col": 4},{"file": 49,"line": 702,"col": 4},{"file": 49,"line": 454,"col": 4},{"file": 49,"line": 683,"col": 4},{"file": 49,"line": 628,"col": 4},{"file": 42,"line": 271,"col": 4},{"file": 49,"line": 401,"col": 4},{"file": 22,"line": 1601,"col": 4,"fields": [8467,8468,8469]},{"file": 49,"line": 388,"col": 4},{"file": 49,"line": 273,"col": 4},{"file": 50,"line": 157,"col": 4,"docs": " Invalid request descriptor\n"},{"file": 22,"line": 28,"col": 4},{"file": 49,"line": 869,"col": 4},{"file": 50,"line": 193,"col": 4,"docs": " Object is remote\n"},{"file": 22,"line": 2314,"col": 4,"docs": " Same as `access` except `path` is null-terminated.\n","fields": [8470,8471]},{"file": 50,"line": 229,"col": 4,"docs": " Remote address changed\n"},{"file": 42,"line": 195,"col": 4},{"file": 49,"line": 1379,"col": 4},{"file": 49,"line": 314,"col": 4},{"file": 42,"line": 182,"col": 4},{"file": 49,"line": 561,"col": 4},{"file": 49,"line": 694,"col": 4},{"file": 49,"line": 353,"col": 12},{"file": 49,"line": 189,"col": 4},{"file": 49,"line": 961,"col": 4},{"file": 49,"line": 522,"col": 4},{"file": 49,"line": 304,"col": 4},{"file": 42,"line": 363,"col": 4},{"file": 49,"line": 593,"col": 4},{"file": 42,"line": 241,"col": 4},{"file": 42,"line": 146,"col": 4},{"file": 22,"line": 2407,"col": 4,"fields": [8472,8473,8474,8475,8476]},{"file": 49,"line": 687,"col": 4},{"file": 49,"line": 306,"col": 4},{"file": 49,"line": 503,"col": 4},{"file": 22,"line": 1689,"col": 4,"fields": [8477,8478]},{"file": 42,"line": 41,"col": 4},{"file": 49,"line": 317,"col": 4},{"file": 49,"line": 167,"col": 4},{"file": 49,"line": 890,"col": 4},{"file": 42,"line": 256,"col": 4},{"file": 50,"line": 271,"col": 4,"docs": " Protocol not available\n"},{"file": 42,"line": 468,"col": 4},{"file": 49,"line": 132,"col": 4},{"file": 22,"line": 764,"col": 4,"docs": " Like `execve` except the parameters are null-terminated,\n matching the syscall API on all targets. This removes the need for an allocator.\n This function ignores PATH environment variable. See `execvpeC` for that.\n","fields": [8479,8480,8481]},{"file": 42,"line": 94,"col": 4},{"file": 50,"line": 124,"col": 4,"docs": " No message of desired type\n"},{"file": 42,"line": 397,"col": 4},{"file": 49,"line": 251,"col": 4},{"file": 49,"line": 530,"col": 4},{"file": 42,"line": 197,"col": 4},{"file": 49,"line": 534,"col": 4},{"file": 49,"line": 383,"col": 4},{"file": 22,"line": 2423,"col": 4,"fields": [8482,8483]},{"file": 42,"line": 236,"col": 4},{"file": 22,"line": 2738,"col": 4},{"file": 42,"line": 34,"col": 4},{"file": 42,"line": 30,"col": 4},{"file": 49,"line": 516,"col": 4},{"file": 49,"line": 500,"col": 4},{"file": 49,"line": 118,"col": 4,"docs": " give out an address that is best suited for process/thread stacks\n"},{"file": 42,"line": 77,"col": 4},{"file": 49,"line": 1219,"col": 4},{"file": 22,"line": 33,"col": 4},{"file": 49,"line": 667,"col": 4},{"file": 49,"line": 1376,"col": 4},{"file": 49,"line": 319,"col": 4},{"file": 49,"line": 1450,"col": 4},{"file": 22,"line": 3175,"col": 4},{"file": 49,"line": 182,"col": 4},{"file": 49,"line": 316,"col": 4},{"file": 22,"line": 32,"col": 4},{"file": 49,"line": 82,"col": 4},{"file": 42,"line": 259,"col": 4},{"file": 49,"line": 655,"col": 4},{"file": 42,"line": 384,"col": 4},{"file": 42,"line": 381,"col": 4},{"file": 49,"line": 1126,"col": 4,"docs": " io_context is polled\n"},{"file": 42,"line": 138,"col": 4},{"file": 49,"line": 347,"col": 12},{"file": 49,"line": 72,"col": 4},{"file": 42,"line": 287,"col": 4},{"file": 49,"line": 197,"col": 4},{"file": 49,"line": 465,"col": 4},{"file": 42,"line": 28,"col": 4},{"file": 22,"line": 238,"col": 4},{"file": 42,"line": 203,"col": 4},{"file": 49,"line": 307,"col": 4},{"file": 42,"line": 52,"col": 4},{"file": 42,"line": 170,"col": 4},{"file": 49,"line": 1027,"col": 4},{"file": 42,"line": 142,"col": 4},{"file": 49,"line": 1393,"col": 4},{"file": 42,"line": 42,"col": 4},{"file": 42,"line": 430,"col": 4},{"file": 49,"line": 1436,"col": 4},{"file": 49,"line": 1394,"col": 4},{"file": 49,"line": 171,"col": 4},{"file": 49,"line": 1453,"col": 4},{"file": 42,"line": 538,"col": 4},{"file": 42,"line": 51,"col": 4},{"file": 49,"line": 225,"col": 4,"docs": " per-IO O_APPEND\n"},{"file": 42,"line": 99,"col": 4},{"file": 22,"line": 3145,"col": 4,"fields": [8484,8485,8486,8487,8488]},{"file": 49,"line": 406,"col": 4},{"file": 49,"line": 193,"col": 4},{"file": 42,"line": 365,"col": 4},{"file": 49,"line": 303,"col": 4},{"file": 49,"line": 354,"col": 12},{"file": 49,"line": 520,"col": 4},{"file": 49,"line": 282,"col": 4},{"file": 22,"line": 1364,"col": 4},{"file": 50,"line": 88,"col": 4,"docs": " Read-only file system\n"},{"file": 42,"line": 367,"col": 4},{"file": 49,"line": 368,"col": 12},{"file": 49,"line": 599,"col": 4},{"file": 49,"line": 451,"col": 4},{"file": 42,"line": 26,"col": 4},{"file": 50,"line": 73,"col": 4,"docs": " Not a typewriter\n"},{"file": 42,"line": 128,"col": 4},{"file": 22,"line": 874,"col": 4,"fields": [8489,8490]},{"file": 42,"line": 120,"col": 4},{"file": 50,"line": 232,"col": 4,"docs": " Can not access a needed shared library\n"},{"file": 49,"line": 924,"col": 4},{"file": 49,"line": 1242,"col": 4},{"file": 49,"line": 396,"col": 4},{"file": 42,"line": 537,"col": 4},{"file": 42,"line": 388,"col": 4},{"file": 50,"line": 154,"col": 4,"docs": " Invalid exchange\n"},{"file": 49,"line": 434,"col": 4},{"file": 49,"line": 405,"col": 4},{"file": 49,"line": 814,"col": 4,"docs": " IPv4 socket address\n"},{"file": 50,"line": 277,"col": 4,"docs": " Socket type not supported\n"},{"file": 42,"line": 341,"col": 4},{"file": 49,"line": 664,"col": 4},{"file": 49,"line": 1278,"col": 4},{"file": 50,"line": 19,"col": 4,"docs": " Arg list too long\n"},{"file": 49,"line": 999,"col": 4},{"file": 49,"line": 916,"col": 4},{"file": 49,"line": 313,"col": 4},{"file": 49,"line": 615,"col": 4},{"file": 49,"line": 1134,"col": 4},{"file": 22,"line": 1727,"col": 4,"docs": " Accept a connection on a socket.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [8491,8492,8493,8494]},{"file": 22,"line": 85,"col": 4,"docs": " To obtain errno, call this function with the return value of the\n system function call. For some systems this will obtain the value directly\n from the return code; for others it will use a thread-local errno variable.\n Therefore, this function only returns a well-defined value when it is called\n directly after the system function call which one wants to learn the errno\n value of.\n"},{"file": 49,"line": 917,"col": 4},{"file": 22,"line": 1224,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated byte arrays.\n","fields": [8495,8496]},{"file": 49,"line": 196,"col": 4},{"file": 49,"line": 141,"col": 4},{"file": 49,"line": 174,"col": 4},{"file": 42,"line": 302,"col": 4},{"file": 49,"line": 1377,"col": 4},{"file": 49,"line": 562,"col": 4},{"file": 49,"line": 1203,"col": 4,"docs": " use fixed fileset\n"},{"file": 49,"line": 1132,"col": 4,"docs": " sq_thread_cpu is valid\n"},{"file": 49,"line": 659,"col": 4},{"file": 42,"line": 377,"col": 4},{"file": 50,"line": 323,"col": 4,"docs": " Too many references: cannot splice\n"},{"file": 42,"line": 81,"col": 4},{"file": 22,"line": 3259,"col": 4,"docs": " Set a socket's options.\n","fields": [8497,8498,8499,8500]},{"file": 49,"line": 650,"col": 4},{"file": 49,"line": 932,"col": 4},{"file": 49,"line": 138,"col": 4},{"file": 22,"line": 1211,"col": 4,"docs": " Change the name or location of a file.\n","fields": [8501,8502]},{"file": 22,"line": 1554,"col": 4,"fields": [8503]},{"file": 50,"line": 317,"col": 4,"docs": " Transport endpoint is not connected\n"},{"file": 49,"line": 416,"col": 4},{"file": 49,"line": 707,"col": 4,"fields": [8504]},{"file": 50,"line": 326,"col": 4,"docs": " Connection timed out\n"},{"file": 49,"line": 139,"col": 4},{"file": 49,"line": 308,"col": 4},{"file": 42,"line": 312,"col": 4},{"file": 49,"line": 467,"col": 4},{"file": 49,"line": 142,"col": 4},{"file": 42,"line": 181,"col": 4},{"file": 42,"line": 539,"col": 4},{"file": 42,"line": 192,"col": 4},{"file": 22,"line": 27,"col": 4},{"file": 22,"line": 1129,"col": 4,"docs": " Same as `unlinkat` but `sub_path_w` is UTF16LE, NT prefixed. Windows only.\n","fields": [8505,8506,8507]},{"file": 42,"line": 198,"col": 4},{"file": 42,"line": 227,"col": 4},{"file": 49,"line": 1456,"col": 4},{"file": 49,"line": 309,"col": 4},{"file": 49,"line": 161,"col": 12},{"file": 49,"line": 576,"col": 4},{"file": 50,"line": 61,"col": 4,"docs": " Is a directory\n"},{"file": 49,"line": 596,"col": 4},{"file": 42,"line": 114,"col": 4},{"file": 50,"line": 305,"col": 4,"docs": " Software caused connection abort\n"},{"file": 22,"line": 3303,"col": 4},{"file": 49,"line": 594,"col": 4},{"file": 42,"line": 535,"col": 4},{"file": 49,"line": 310,"col": 4},{"file": 49,"line": 452,"col": 4},{"file": 50,"line": 412,"col": 4,"docs": " End of file\n"},{"file": 49,"line": 927,"col": 4},{"file": 49,"line": 741,"col": 4,"fields": [8508]},{"file": 49,"line": 696,"col": 4},{"file": 49,"line": 1378,"col": 4},{"file": 49,"line": 484,"col": 4},{"file": 49,"line": 1443,"col": 4},{"file": 22,"line": 3118,"col": 4,"fields": [8509,8510]},{"file": 22,"line": 791,"col": 4,"docs": " Like `execvpe` except the parameters are null-terminated,\n matching the syscall API on all targets. This removes the need for an allocator.\n This function also uses the PATH environment variable to get the full path to the executable.\n If `file` is an absolute path, this is the same as `execveC`.\n","fields": [8511,8512,8513]},{"file": 49,"line": 438,"col": 4},{"file": 49,"line": 525,"col": 4},{"file": 49,"line": 213,"col": 4,"docs": " high priority request, poll if possible\n"},{"file": 42,"line": 258,"col": 4},{"file": 49,"line": 470,"col": 4},{"file": 42,"line": 127,"col": 4},{"file": 49,"line": 33,"col": 4},{"file": 49,"line": 550,"col": 4},{"file": 22,"line": 2431,"col": 4},{"file": 42,"line": 134,"col": 4},{"file": 49,"line": 921,"col": 4},{"file": 22,"line": 2931,"col": 4,"fields": [8514,8515,8516,8517,8518,8519,8520]},{"file": 49,"line": 88,"col": 4},{"file": 22,"line": 3132,"col": 4},{"file": 42,"line": 125,"col": 4},{"file": 49,"line": 476,"col": 4},{"file": 49,"line": 384,"col": 4},{"file": 49,"line": 922,"col": 4},{"file": 49,"line": 1212,"col": 4},{"file": 49,"line": 160,"col": 12},{"file": 49,"line": 1221,"col": 4},{"file": 49,"line": 805,"col": 4},{"file": 42,"line": 47,"col": 4},{"file": 42,"line": 111,"col": 4},{"file": 49,"line": 925,"col": 4},{"file": 49,"line": 671,"col": 4},{"file": 49,"line": 188,"col": 4},{"file": 42,"line": 154,"col": 4},{"file": 22,"line": 3275,"col": 4},{"file": 50,"line": 409,"col": 4,"docs": " Timeout while contacting DNS servers\n"},{"file": 42,"line": 171,"col": 4},{"file": 49,"line": 701,"col": 4},{"file": 22,"line": 2904,"col": 4,"fields": [8521]},{"file": 42,"line": 350,"col": 4},{"file": 49,"line": 420,"col": 4},{"file": 49,"line": 966,"col": 4},{"file": 49,"line": 841,"col": 4},{"file": 49,"line": 799,"col": 4},{"file": 49,"line": 466,"col": 4},{"file": 49,"line": 312,"col": 4},{"file": 22,"line": 3104,"col": 4,"docs": " Transmit a message to another socket.\n\n The `send` call may be used only when the socket is in a connected state (so that the intended\n recipient  is  known).   The  only  difference  between `send` and `write` is the presence of\n flags.  With a zero flags argument, `send` is equivalent to  `write`.   Also,  the  following\n call\n\n     send(sockfd, buf, len, flags);\n\n is equivalent to\n\n     sendto(sockfd, buf, len, flags, NULL, 0);\n\n There is no  indication  of  failure  to  deliver.\n\n When the message does not fit into the send buffer of  the  socket,  `send`  normally  blocks,\n unless  the socket has been placed in nonblocking I/O mode.  In nonblocking mode it would fail\n with `SendError.WouldBlock`.  The `select` call may be used  to  determine when it is\n possible to send more data.\n","fields": [8522,8523,8524]},{"file": 50,"line": 388,"col": 4,"docs": " DNS server does not implement requested operation\n"},{"file": 49,"line": 846,"col": 4},{"file": 42,"line": 92,"col": 4},{"file": 49,"line": 266,"col": 4},{"file": 49,"line": 739,"col": 4},{"file": 42,"line": 402,"col": 4},{"file": 49,"line": 285,"col": 4},{"file": 50,"line": 217,"col": 4,"docs": " Not a data message\n"},{"file": 49,"line": 203,"col": 4},{"file": 50,"line": 241,"col": 4,"docs": " Attempting to link in too many shared libraries\n"},{"file": 49,"line": 1280,"col": 4},{"file": 49,"line": 933,"col": 4},{"file": 42,"line": 174,"col": 4},{"file": 49,"line": 1417,"col": 4},{"file": 49,"line": 1397,"col": 4},{"file": 50,"line": 49,"col": 4,"docs": " File exists\n"},{"file": 22,"line": 2183,"col": 4},{"file": 42,"line": 83,"col": 4},{"file": 49,"line": 1373,"col": 4},{"file": 49,"line": 801,"col": 4},{"file": 49,"line": 75,"col": 4},{"file": 49,"line": 703,"col": 4},{"file": 49,"line": 678,"col": 4},{"file": 49,"line": 509,"col": 4},{"file": 22,"line": 2057,"col": 4},{"file": 49,"line": 177,"col": 4},{"file": 42,"line": 57,"col": 4},{"file": 22,"line": 2463,"col": 4,"docs": " Repositions read/write file offset relative to the current offset.\n","fields": [8525,8526]},{"file": 49,"line": 711,"col": 4,"fields": [8527]},{"file": 50,"line": 362,"col": 4,"docs": " Quota exceeded\n"},{"file": 50,"line": 265,"col": 4,"docs": " Message too long\n"},{"file": 42,"line": 448,"col": 4},{"file": 49,"line": 1422,"col": 4},{"file": 42,"line": 82,"col": 4},{"file": 49,"line": 393,"col": 4},{"file": 42,"line": 440,"col": 4},{"file": 42,"line": 335,"col": 4},{"file": 42,"line": 322,"col": 4},{"file": 42,"line": 329,"col": 4},{"file": 49,"line": 1437,"col": 4},{"file": 42,"line": 270,"col": 4},{"file": 49,"line": 910,"col": 4},{"file": 42,"line": 247,"col": 4},{"file": 49,"line": 412,"col": 4},{"file": 42,"line": 153,"col": 4},{"file": 49,"line": 204,"col": 4},{"file": 49,"line": 176,"col": 4},{"file": 49,"line": 590,"col": 4},{"file": 50,"line": 353,"col": 4,"docs": " No XENIX semaphores available\n"},{"file": 49,"line": 1129,"col": 4,"docs": " SQ poll thread\n"},{"file": 49,"line": 1447,"col": 4},{"file": 50,"line": 190,"col": 4,"docs": " Package not installed\n"},{"file": 49,"line": 265,"col": 4},{"file": 49,"line": 156,"col": 12},{"file": 50,"line": 359,"col": 4,"docs": " Remote I/O error\n"},{"file": 49,"line": 585,"col": 4},{"file": 42,"line": 211,"col": 4},{"file": 49,"line": 941,"col": 4},{"file": 22,"line": 958,"col": 4,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`.\n A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent\n one; the latter case is known as a dangling link.\n If `sym_link_path` exists, it will not be overwritten.\n See also `symlinkC` and `symlinkW`.\n","fields": [8528,8529]},{"file": 49,"line": 98,"col": 4,"docs": " share + validate extension flags\n"},{"file": 49,"line": 404,"col": 4},{"file": 49,"line": 423,"col": 4},{"file": 49,"line": 1165,"col": 4},{"file": 49,"line": 461,"col": 4},{"file": 42,"line": 56,"col": 4},{"file": 49,"line": 1206,"col": 4,"docs": " issue after inflight IO\n"},{"file": 50,"line": 385,"col": 4,"docs": " Domain name not found\n"},{"file": 49,"line": 907,"col": 4},{"file": 49,"line": 878,"col": 4},{"file": 42,"line": 191,"col": 4},{"file": 49,"line": 747,"col": 4,"fields": [8530]},{"file": 42,"line": 218,"col": 4},{"file": 49,"line": 422,"col": 4},{"file": 49,"line": 115,"col": 4,"docs": " do not block on IO\n"},{"file": 49,"line": 241,"col": 4},{"file": 42,"line": 185,"col": 4},{"file": 49,"line": 322,"col": 4},{"file": 22,"line": 1261,"col": 4},{"file": 42,"line": 212,"col": 4},{"file": 49,"line": 923,"col": 4},{"file": 49,"line": 881,"col": 4},{"file": 49,"line": 563,"col": 4},{"file": 42,"line": 446,"col": 4},{"file": 42,"line": 299,"col": 4},{"file": 49,"line": 447,"col": 4},{"file": 49,"line": 905,"col": 4},{"file": 49,"line": 192,"col": 4},{"file": 42,"line": 318,"col": 4},{"file": 50,"line": 127,"col": 4,"docs": " Identifier removed\n"},{"file": 49,"line": 233,"col": 4},{"file": 22,"line": 1487,"col": 4,"fields": [8531,8532]},{"file": 42,"line": 53,"col": 4},{"file": 22,"line": 2787,"col": 4,"fields": [8533]},{"file": 42,"line": 175,"col": 4},{"file": 50,"line": 259,"col": 4,"docs": " Socket operation on non-socket\n"},{"file": 49,"line": 578,"col": 4},{"file": 49,"line": 357,"col": 12},{"file": 42,"line": 49,"col": 4},{"file": 49,"line": 1406,"col": 4},{"file": 22,"line": 1809,"col": 4},{"file": 42,"line": 370,"col": 4},{"file": 22,"line": 2384,"col": 4},{"file": 42,"line": 194,"col": 4},{"file": 49,"line": 822,"col": 4,"docs": " IPv6 socket address\n"},{"file": 42,"line": 193,"col": 4},{"file": 49,"line": 1374,"col": 4},{"file": 49,"line": 298,"col": 4},{"file": 49,"line": 555,"col": 4},{"file": 22,"line": 29,"col": 4},{"file": 49,"line": 261,"col": 4},{"file": 49,"line": 586,"col": 4},{"file": 42,"line": 245,"col": 4},{"file": 42,"line": 261,"col": 4},{"file": 22,"line": 3177,"col": 4,"fields": [8534,8535,8536]},{"file": 49,"line": 387,"col": 4},{"file": 49,"line": 565,"col": 4},{"file": 49,"line": 133,"col": 4},{"file": 49,"line": 1249,"col": 4},{"file": 50,"line": 332,"col": 4,"docs": " Host is down\n"},{"file": 49,"line": 378,"col": 4},{"file": 49,"line": 1273,"col": 4},{"file": 49,"line": 1375,"col": 4},{"file": 49,"line": 579,"col": 4},{"file": 49,"line": 518,"col": 4},{"file": 49,"line": 400,"col": 4},{"file": 50,"line": 103,"col": 4,"docs": " Resource deadlock would occur\n"},{"file": 49,"line": 771,"col": 4},{"file": 22,"line": 2360,"col": 4,"docs": " Creates a unidirectional data channel that can be used for interprocess communication.\n","fields": []},{"file": 49,"line": 301,"col": 4},{"file": 42,"line": 230,"col": 4},{"file": 50,"line": 391,"col": 4,"docs": " DNS server refused query\n"},{"file": 49,"line": 71,"col": 4},{"file": 49,"line": 621,"col": 4},{"file": 42,"line": 161,"col": 4},{"file": 22,"line": 852,"col": 4,"fields": [8537,8538]},{"file": 49,"line": 323,"col": 4},{"file": 42,"line": 307,"col": 4},{"file": 42,"line": 75,"col": 4},{"file": 42,"line": 379,"col": 4},{"file": 49,"line": 1022,"col": 4},{"file": 42,"line": 297,"col": 4},{"file": 49,"line": 538,"col": 4},{"file": 49,"line": 684,"col": 4},{"file": 49,"line": 181,"col": 4},{"file": 49,"line": 240,"col": 4},{"file": 50,"line": 172,"col": 4,"docs": " Bad font file format\n"},{"file": 49,"line": 112,"col": 4,"docs": " populate (prefault) pagetables\n"},{"file": 49,"line": 548,"col": 4},{"file": 42,"line": 366,"col": 4},{"file": 49,"line": 613,"col": 4},{"file": 42,"line": 428,"col": 4},{"file": 49,"line": 636,"col": 4},{"file": 42,"line": 145,"col": 4},{"file": 49,"line": 1402,"col": 4},{"file": 42,"line": 343,"col": 4},{"file": 51,"line": 21,"col": 4},{"file": 49,"line": 201,"col": 4},{"file": 42,"line": 221,"col": 4},{"file": 49,"line": 417,"col": 4},{"file": 49,"line": 1279,"col": 4},{"file": 49,"line": 40,"col": 4,"docs": " Do not follow symbolic links\n"},{"file": 49,"line": 880,"col": 4},{"file": 49,"line": 651,"col": 4},{"file": 49,"line": 504,"col": 4},{"file": 50,"line": 31,"col": 4,"docs": " Try again\n"},{"file": 50,"line": 82,"col": 4,"docs": " No space left on device\n"},{"file": 22,"line": 2075,"col": 4},{"file": 22,"line": 2865,"col": 4},{"file": 49,"line": 165,"col": 4},{"file": 49,"line": 1248,"col": 4},{"file": 49,"line": 279,"col": 4},{"file": 22,"line": 2979,"col": 4},{"file": 49,"line": 1441,"col": 4},{"file": 49,"line": 242,"col": 4},{"file": 49,"line": 245,"col": 4},{"file": 49,"line": 1354,"col": 4},{"file": 49,"line": 972,"col": 4},{"file": 49,"line": 365,"col": 12},{"file": 49,"line": 254,"col": 4},{"file": 49,"line": 1387,"col": 4},{"file": 49,"line": 185,"col": 4},{"file": 49,"line": 948,"col": 4,"fields": [8539]},{"file": 49,"line": 855,"col": 4},{"file": 49,"line": 1433,"col": 4},{"file": 49,"line": 1215,"col": 4},{"file": 49,"line": 1444,"col": 4},{"file": 49,"line": 311,"col": 4},{"file": 42,"line": 54,"col": 4},{"file": 49,"line": 704,"col": 4},{"file": 49,"line": 356,"col": 12},{"file": 22,"line": 2372,"col": 4,"fields": [8540]},{"file": 50,"line": 418,"col": 4,"docs": " Out of memory\n"},{"file": 49,"line": 699,"col": 4},{"file": 42,"line": 187,"col": 4},{"file": 49,"line": 498,"col": 4},{"file": 42,"line": 213,"col": 4},{"file": 42,"line": 382,"col": 4},{"file": 22,"line": 54,"col": 4,"docs": " Applications can override the `system` API layer in their root source file.\n Otherwise, when linking libc, this is the C API.\n When not linking libc, it is the OS-specific system interface.\n"},{"file": 49,"line": 235,"col": 4},{"file": 50,"line": 121,"col": 4,"docs": " Operation would block\n"},{"file": 42,"line": 447,"col": 4},{"file": 49,"line": 515,"col": 4},{"file": 49,"line": 386,"col": 4},{"file": 22,"line": 2221,"col": 4},{"file": 22,"line": 2902,"col": 4},{"file": 49,"line": 360,"col": 12},{"file": 50,"line": 262,"col": 4,"docs": " Destination address required\n"},{"file": 42,"line": 91,"col": 4},{"file": 49,"line": 363,"col": 12},{"file": 49,"line": 564,"col": 4},{"file": 42,"line": 283,"col": 4},{"file": 42,"line": 219,"col": 4},{"file": 49,"line": 22,"col": 4},{"file": 49,"line": 1372,"col": 4},{"file": 49,"line": 1220,"col": 4},{"file": 42,"line": 346,"col": 4},{"file": 42,"line": 223,"col": 4},{"file": 49,"line": 681,"col": 4},{"file": 22,"line": 1477,"col": 4,"fields": [8541]},{"file": 22,"line": 1387,"col": 4,"docs": " Same as `chdir` except the parameter is null-terminated.\n","fields": [8542]},{"file": 42,"line": 162,"col": 4},{"file": 49,"line": 237,"col": 4},{"file": 49,"line": 1460,"col": 4},{"file": 49,"line": 992,"col": 4},{"file": 50,"line": 4,"col": 4,"docs": " No such file or directory\n"},{"file": 22,"line": 1329,"col": 4,"docs": " Deletes an empty directory.\n","fields": [8543]},{"file": 49,"line": 469,"col": 4},{"file": 49,"line": 627,"col": 4},{"file": 42,"line": 109,"col": 4},{"file": 42,"line": 390,"col": 4},{"file": 22,"line": 2303,"col": 4,"docs": " check user's permissions for a file\n TODO currently this assumes `mode` is `F_OK` on Windows.\n","fields": [8544,8545]},{"file": 42,"line": 200,"col": 4},{"file": 49,"line": 645,"col": 4},{"file": 50,"line": 85,"col": 4,"docs": " Illegal seek\n"},{"file": 42,"line": 357,"col": 4},{"file": 49,"line": 928,"col": 4},{"file": 49,"line": 497,"col": 4},{"file": 49,"line": 619,"col": 4},{"file": 42,"line": 216,"col": 4},{"file": 49,"line": 1265,"col": 4},{"file": 50,"line": 350,"col": 4,"docs": " Not a XENIX named type file\n"},{"file": 49,"line": 46,"col": 4,"docs": " Follow symbolic links.\n"},{"file": 49,"line": 1270,"col": 4},{"file": 42,"line": 439,"col": 4},{"file": 42,"line": 50,"col": 4},{"file": 22,"line": 2157,"col": 4,"docs": " Same as `inotify_add_watch` except pathname is null-terminated.\n","fields": [8546,8547,8548]},{"file": 49,"line": 77,"col": 4},{"file": 22,"line": 2580,"col": 4,"docs": " Return the canonicalized absolute pathname.\n Expands all symbolic links and resolves references to `.`, `..`, and\n extra `/` characters in `pathname`.\n The return value is a slice of `out_buffer`, but not necessarily from the beginning.\n See also `realpathC` and `realpathW`.\n","fields": [8549,8550]},{"file": 50,"line": 166,"col": 4,"docs": " Invalid request code\n"},{"file": 42,"line": 87,"col": 4},{"file": 49,"line": 426,"col": 4},{"file": 49,"line": 1251,"col": 4},{"file": 49,"line": 560,"col": 4},{"file": 49,"line": 104,"col": 4,"docs": " Interpret addr exactly\n"},{"file": 42,"line": 454,"col": 4},{"file": 22,"line": 2014,"col": 4,"fields": [8551,8552]},{"file": 49,"line": 1211,"col": 4},{"file": 50,"line": 106,"col": 4,"docs": " File name too long\n"},{"file": 49,"line": 367,"col": 12},{"file": 49,"line": 418,"col": 4},{"file": 42,"line": 309,"col": 4},{"file": 42,"line": 558,"col": 4},{"file": 49,"line": 587,"col": 4},{"file": 49,"line": 471,"col": 4},{"file": 49,"line": 691,"col": 4},{"file": 49,"line": 597,"col": 4},{"file": 42,"line": 331,"col": 4},{"file": 42,"line": 27,"col": 4},{"file": 42,"line": 420,"col": 4,"docs": " don't check for reservations\n"},{"file": 49,"line": 472,"col": 4},{"file": 42,"line": 124,"col": 4},{"file": 49,"line": 333,"col": 4},{"file": 49,"line": 89,"col": 4},{"file": 49,"line": 542,"col": 4},{"file": 49,"line": 397,"col": 4},{"file": 49,"line": 1384,"col": 4},{"file": 49,"line": 336,"col": 4},{"file": 50,"line": 214,"col": 4,"docs": " RFS specific error\n"},{"file": 49,"line": 348,"col": 12},{"file": 42,"line": 86,"col": 4},{"file": 49,"line": 1121,"col": 4},{"file": 42,"line": 364,"col": 4},{"file": 42,"line": 237,"col": 4},{"file": 49,"line": 276,"col": 4},{"file": 49,"line": 804,"col": 4},{"file": 42,"line": 204,"col": 4},{"file": 49,"line": 287,"col": 4},{"file": 42,"line": 231,"col": 4},{"file": 22,"line": 1782,"col": 4},{"file": 42,"line": 520,"col": 4},{"file": 49,"line": 591,"col": 4},{"file": 49,"line": 1388,"col": 4},{"file": 49,"line": 124,"col": 4,"docs": " perform synchronous page faults for the mapping\n"},{"file": 42,"line": 451,"col": 4},{"file": 49,"line": 283,"col": 4},{"file": 50,"line": 163,"col": 4,"docs": " No anode\n"},{"file": 50,"line": 34,"col": 4,"docs": " Out of memory\n"},{"file": 42,"line": 166,"col": 4},{"file": 50,"line": 130,"col": 4,"docs": " Channel number out of range\n"},{"file": 49,"line": 395,"col": 4},{"file": 42,"line": 246,"col": 4},{"file": 49,"line": 183,"col": 4},{"file": 49,"line": 267,"col": 4},{"file": 49,"line": 349,"col": 12},{"file": 49,"line": 1214,"col": 4},{"file": 49,"line": 1000,"col": 4},{"file": 49,"line": 623,"col": 4},{"file": 49,"line": 207,"col": 4},{"file": 49,"line": 419,"col": 4},{"file": 49,"line": 1382,"col": 4},{"file": 42,"line": 226,"col": 4},{"file": 49,"line": 441,"col": 4},{"file": 49,"line": 1003,"col": 4,"fields": [8553]},{"file": 50,"line": 109,"col": 4,"docs": " No record locks available\n"},{"file": 42,"line": 275,"col": 4},{"file": 50,"line": 187,"col": 4,"docs": " Machine is not on the network\n"},{"file": 49,"line": 280,"col": 4},{"file": 49,"line": 800,"col": 4},{"file": 49,"line": 884,"col": 4},{"file": 49,"line": 453,"col": 4},{"file": 22,"line": 911,"col": 4},{"file": 49,"line": 929,"col": 4},{"file": 42,"line": 354,"col": 4},{"file": 50,"line": 148,"col": 4,"docs": " No CSI structure available\n"},{"file": 49,"line": 134,"col": 4},{"file": 49,"line": 483,"col": 4},{"file": 49,"line": 440,"col": 4},{"file": 49,"line": 1092,"col": 4},{"file": 42,"line": 323,"col": 4},{"file": 49,"line": 1392,"col": 4},{"file": 42,"line": 392,"col": 4},{"file": 49,"line": 521,"col": 4},{"file": 49,"line": 705,"col": 4},{"file": 49,"line": 162,"col": 12},{"file": 42,"line": 135,"col": 4},{"file": 49,"line": 544,"col": 4},{"file": 49,"line": 1405,"col": 4},{"file": 22,"line": 618,"col": 4},{"file": 42,"line": 293,"col": 4},{"file": 49,"line": 1386,"col": 4},{"file": 42,"line": 210,"col": 4},{"file": 49,"line": 429,"col": 4},{"file": 42,"line": 332,"col": 4},{"file": 42,"line": 594,"col": 4},{"file": 49,"line": 43,"col": 4,"docs": " Remove directory instead of unlinking file\n"},{"file": 42,"line": 155,"col": 4},{"file": 49,"line": 169,"col": 4},{"file": 49,"line": 448,"col": 4},{"file": 49,"line": 836,"col": 4},{"file": 50,"line": 329,"col": 4,"docs": " Connection refused\n"},{"file": 49,"line": 642,"col": 4},{"file": 50,"line": 226,"col": 4,"docs": " File descriptor in bad state\n"},{"file": 42,"line": 425,"col": 4},{"file": 49,"line": 598,"col": 4},{"file": 49,"line": 494,"col": 4},{"file": 42,"line": 177,"col": 4},{"file": 49,"line": 456,"col": 4},{"file": 42,"line": 137,"col": 4},{"file": 49,"line": 1266,"col": 4},{"file": 49,"line": 463,"col": 4},{"file": 50,"line": 94,"col": 4,"docs": " Broken pipe\n"},{"file": 49,"line": 55,"col": 4,"docs": " Type of synchronisation required from statx()\n"},{"file": 49,"line": 92,"col": 4,"docs": " Share changes\n"},{"file": 49,"line": 604,"col": 4},{"file": 49,"line": 1107,"col": 4},{"file": 42,"line": 385,"col": 4},{"file": 22,"line": 1418,"col": 4,"docs": " Read value of a symbolic link.\n The return value is a slice of `out_buffer` from index 0.\n","fields": [8554,8555]},{"file": 50,"line": 76,"col": 4,"docs": " Text file busy\n"},{"file": 42,"line": 559,"col": 4},{"file": 49,"line": 1458,"col": 4},{"file": 49,"line": 867,"col": 4},{"file": 49,"line": 359,"col": 12},{"file": 49,"line": 78,"col": 4},{"file": 42,"line": 46,"col": 4},{"file": 49,"line": 236,"col": 4},{"file": 49,"line": 913,"col": 4},{"file": 42,"line": 222,"col": 4},{"file": 42,"line": 314,"col": 4},{"file": 49,"line": 673,"col": 4},{"file": 49,"line": 1414,"col": 4},{"file": 42,"line": 320,"col": 4},{"file": 42,"line": 313,"col": 4},{"file": 50,"line": 1,"col": 4,"docs": " Operation not permitted\n"},{"file": 49,"line": 140,"col": 4},{"file": 22,"line": 2174,"col": 4,"docs": " remove an existing watch from an inotify instance\n","fields": [8556,8557]},{"file": 50,"line": 67,"col": 4,"docs": " File table overflow\n"},{"file": 42,"line": 17,"col": 4},{"file": 50,"line": 290,"col": 4,"docs": " Address already in use\n"},{"file": 49,"line": 543,"col": 4},{"file": 49,"line": 421,"col": 4},{"file": 49,"line": 603,"col": 4},{"file": 49,"line": 358,"col": 12},{"file": 50,"line": 281,"col": 4},{"file": 42,"line": 264,"col": 4},{"file": 49,"line": 773,"col": 4},{"file": 49,"line": 70,"col": 4},{"file": 42,"line": 438,"col": 4},{"file": 22,"line": 2833,"col": 4},{"file": 49,"line": 1282,"col": 4},{"file": 22,"line": 1980,"col": 4,"fields": [8558]},{"file": 50,"line": 13,"col": 4,"docs": " I/O error\n"},{"file": 49,"line": 952,"col": 4,"fields": [8559]},{"file": 49,"line": 601,"col": 4},{"file": 42,"line": 376,"col": 4},{"file": 49,"line": 572,"col": 4},{"file": 42,"line": 286,"col": 4},{"file": 42,"line": 424,"col": 4},{"file": 42,"line": 265,"col": 4},{"file": 42,"line": 443,"col": 4},{"file": 42,"line": 342,"col": 4},{"file": 42,"line": 98,"col": 4},{"file": 49,"line": 315,"col": 4},{"file": 22,"line": 1082,"col": 4},{"file": 22,"line": 1835,"col": 4,"fields": [8560,8561,8562,8563]},{"file": 42,"line": 355,"col": 4},{"file": 49,"line": 1452,"col": 4},{"file": 49,"line": 553,"col": 4},{"file": 49,"line": 920,"col": 4},{"file": 42,"line": 20,"col": 4},{"file": 22,"line": 1950,"col": 4,"docs": " Initiate a connection on a socket.\n","fields": [8564,8565,8566]},{"file": 49,"line": 938,"col": 4},{"file": 22,"line": 3225,"col": 4},{"file": 49,"line": 219,"col": 4,"docs": " per-IO O_SYNC\n"},{"file": 49,"line": 252,"col": 4},{"file": 42,"line": 349,"col": 4},{"file": 50,"line": 335,"col": 4,"docs": " No route to host\n"},{"file": 49,"line": 529,"col": 4},{"file": 49,"line": 653,"col": 4},{"file": 42,"line": 67,"col": 4},{"file": 49,"line": 617,"col": 4},{"file": 49,"line": 366,"col": 12},{"file": 49,"line": 1434,"col": 4},{"file": 50,"line": 10,"col": 4,"docs": " Interrupted system call\n"},{"file": 50,"line": 115,"col": 4,"docs": " Directory not empty\n"},{"file": 49,"line": 556,"col": 4},{"file": 42,"line": 294,"col": 4},{"file": 50,"line": 379,"col": 4,"docs": " DNS server claims query was misformatted\n"},{"file": 49,"line": 592,"col": 4},{"file": 42,"line": 266,"col": 4},{"file": 49,"line": 663,"col": 4},{"file": 49,"line": 324,"col": 4},{"file": 42,"line": 267,"col": 4},{"file": 50,"line": 91,"col": 4,"docs": " Too many links\n"},{"file": 50,"line": 397,"col": 4,"docs": " Misformatted domain name\n"},{"file": 49,"line": 1367,"col": 4},{"file": 49,"line": 281,"col": 4},{"file": 42,"line": 391,"col": 4},{"file": 49,"line": 1428,"col": 4},{"file": 49,"line": 577,"col": 4},{"file": 42,"line": 45,"col": 4},{"file": 49,"line": 631,"col": 4},{"file": 49,"line": 1454,"col": 4},{"file": 42,"line": 255,"col": 4},{"file": 50,"line": 208,"col": 4,"docs": " Protocol error\n"},{"file": 49,"line": 294,"col": 4},{"file": 49,"line": 248,"col": 4},{"file": 42,"line": 239,"col": 4},{"file": 42,"line": 262,"col": 4},{"file": 22,"line": 276,"col": 4},{"file": 49,"line": 222,"col": 4,"docs": " per-IO, return -EAGAIN if operation would block\n"},{"file": 42,"line": 79,"col": 4},{"file": 49,"line": 292,"col": 4},{"file": 42,"line": 176,"col": 4},{"file": 22,"line": 1497,"col": 4,"fields": [8567]},{"file": 50,"line": 238,"col": 4,"docs": " .lib section in a.out corrupted\n"},{"file": 22,"line": 1004,"col": 4,"fields": [8568,8569,8570]},{"file": 49,"line": 486,"col": 4},{"file": 22,"line": 435,"col": 4},{"file": 49,"line": 485,"col": 4},{"file": 42,"line": 19,"col": 4},{"file": 49,"line": 1390,"col": 4},{"file": 49,"line": 394,"col": 4},{"file": 49,"line": 1449,"col": 4},{"file": 42,"line": 280,"col": 4},{"file": 49,"line": 255,"col": 4},{"file": 42,"line": 105,"col": 4},{"file": 42,"line": 44,"col": 4},{"file": 49,"line": 1268,"col": 4},{"file": 42,"line": 336,"col": 4},{"file": 42,"line": 152,"col": 4},{"file": 49,"line": 626,"col": 4},{"file": 49,"line": 1389,"col": 4},{"file": 49,"line": 369,"col": 12},{"file": 22,"line": 3314,"col": 4,"fields": [8571,8572]},{"file": 49,"line": 531,"col": 4},{"file": 42,"line": 103,"col": 4},{"file": 49,"line": 1033,"col": 4},{"file": 42,"line": 285,"col": 4},{"file": 42,"line": 39,"col": 4},{"file": 49,"line": 1264,"col": 4},{"file": 42,"line": 277,"col": 4},{"file": 42,"line": 229,"col": 4},{"file": 22,"line": 1507,"col": 4,"fields": [8573,8574]},{"file": 49,"line": 1395,"col": 4},{"file": 49,"line": 877,"col": 4},{"file": 49,"line": 435,"col": 4},{"file": 42,"line": 291,"col": 4},{"file": 49,"line": 86,"col": 4},{"file": 42,"line": 284,"col": 4},{"file": 49,"line": 670,"col": 4},{"file": 49,"line": 517,"col": 4},{"file": 50,"line": 250,"col": 4,"docs": " Interrupted system call should be restarted\n"},{"file": 42,"line": 37,"col": 4},{"file": 49,"line": 459,"col": 4},{"file": 49,"line": 606,"col": 4},{"file": 49,"line": 1418,"col": 4},{"file": 49,"line": 612,"col": 4},{"file": 49,"line": 723,"col": 4,"fields": [8575]},{"file": 49,"line": 660,"col": 4},{"file": 42,"line": 396,"col": 4},{"file": 49,"line": 1217,"col": 4},{"file": 50,"line": 211,"col": 4,"docs": " Multihop attempted\n"},{"file": 50,"line": 302,"col": 4,"docs": " Network dropped connection because of reset\n"},{"file": 22,"line": 1895,"col": 4,"fields": [8576,8577,8578]},{"file": 42,"line": 369,"col": 4},{"file": 49,"line": 1399,"col": 4},{"file": 49,"line": 669,"col": 4},{"file": 42,"line": 316,"col": 4},{"file": 49,"line": 640,"col": 4},{"file": 50,"line": 196,"col": 4,"docs": " Link has been severed\n"},{"file": 49,"line": 228,"col": 4},{"file": 49,"line": 200,"col": 4},{"file": 50,"line": 400,"col": 4,"docs": " Unsupported address family\n"},{"file": 49,"line": 216,"col": 4,"docs": " per-IO O_DSYNC\n"},{"file": 50,"line": 247,"col": 4,"docs": " Illegal byte sequence\n"},{"file": 42,"line": 279,"col": 4},{"file": 49,"line": 1430,"col": 4},{"file": 49,"line": 437,"col": 4},{"file": 22,"line": 747,"col": 4},{"file": 49,"line": 870,"col": 4},{"file": 22,"line": 1089,"col": 4,"docs": " Delete a file name and possibly the file it refers to, based on an open directory handle.\n Asserts that the path parameter has no null bytes.\n","fields": [8579,8580,8581]},{"file": 42,"line": 274,"col": 4},{"file": 50,"line": 160,"col": 4,"docs": " Exchange full\n"},{"file": 42,"line": 29,"col": 4},{"file": 49,"line": 332,"col": 4},{"file": 49,"line": 506,"col": 4},{"file": 49,"line": 882,"col": 4},{"file": 49,"line": 166,"col": 4},{"file": 49,"line": 491,"col": 4},{"file": 49,"line": 1209,"col": 4,"docs": " links next sqe\n"},{"file": 49,"line": 912,"col": 4},{"file": 50,"line": 284,"col": 4,"docs": " Protocol family not supported\n"},{"file": 42,"line": 233,"col": 4},{"file": 50,"line": 151,"col": 4,"docs": " Level 2 halted\n"},{"file": 49,"line": 700,"col": 4},{"file": 42,"line": 113,"col": 4},{"file": 42,"line": 437,"col": 4},{"file": 22,"line": 2130,"col": 4,"docs": " initialize an inotify instance\n","fields": [8582]},{"file": 42,"line": 360,"col": 4},{"file": 49,"line": 885,"col": 4},{"file": 42,"line": 220,"col": 4},{"file": 42,"line": 305,"col": 4},{"file": 49,"line": 648,"col": 4},{"file": 50,"line": 253,"col": 4,"docs": " Streams pipe error\n"},{"file": 42,"line": 345,"col": 4},{"file": 49,"line": 956,"col": 4},{"file": 49,"line": 760,"col": 4},{"file": 49,"line": 582,"col": 4},{"file": 49,"line": 630,"col": 4},{"file": 49,"line": 364,"col": 12},{"file": 42,"line": 80,"col": 4},{"file": 22,"line": 1047,"col": 4,"docs": " Delete a name and possibly the file it refers to.\n See also `unlinkC`.\n","fields": [8583]},{"file": 42,"line": 452,"col": 4},{"file": 49,"line": 458,"col": 4},{"file": 50,"line": 145,"col": 4,"docs": " Protocol driver not attached\n"},{"file": 49,"line": 1416,"col": 4},{"file": 22,"line": 2198,"col": 4,"docs": " `memory.len` must be page-aligned.\n","fields": [8584,8585]},{"file": 49,"line": 403,"col": 4},{"file": 49,"line": 345,"col": 12},{"file": 49,"line": 1413,"col": 4},{"file": 49,"line": 918,"col": 4},{"file": 49,"line": 32,"col": 4},{"file": 42,"line": 295,"col": 4},{"file": 22,"line": 937,"col": 4},{"file": 50,"line": 244,"col": 4,"docs": " Cannot exec a shared library directly\n"},{"file": 49,"line": 588,"col": 4},{"file": 49,"line": 620,"col": 4},{"file": 49,"line": 346,"col": 12},{"file": 49,"line": 74,"col": 4},{"file": 42,"line": 100,"col": 4},{"file": 49,"line": 602,"col": 4},{"file": 49,"line": 411,"col": 4},{"file": 49,"line": 1216,"col": 4},{"file": 49,"line": 727,"col": 4,"fields": [8586]},{"file": 42,"line": 68,"col": 4},{"file": 50,"line": 403,"col": 4,"docs": " Misformatted DNS reply\n"},{"file": 42,"line": 66,"col": 4},{"file": 22,"line": 31,"col": 4},{"file": 49,"line": 1398,"col": 4},{"file": 50,"line": 299,"col": 4,"docs": " Network is unreachable\n"},{"file": 42,"line": 196,"col": 4},{"file": 49,"line": 507,"col": 4},{"file": 42,"line": 206,"col": 4},{"file": 49,"line": 508,"col": 4},{"file": 49,"line": 792,"col": 4,"docs": " Renamed from `sigaction` to `Sigaction` to avoid conflict with the syscall.\n"},{"file": 22,"line": 2647,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.\n","fields": [8587,8588]},{"file": 42,"line": 337,"col": 4},{"file": 49,"line": 338,"col": 4},{"file": 49,"line": 253,"col": 4},{"file": 49,"line": 275,"col": 4},{"file": 49,"line": 376,"col": 4},{"file": 42,"line": 488,"col": 4,"docs": " Renamed to Stat to not conflict with the stat function.\n atime, mtime, and ctime have functions to return `timespec`,\n because although this is a POSIX API, the layout and names of\n the structs are inconsistent across operating systems, and\n in C, macros are used to hide the differences. Here we use\n methods to accomplish this.\n"},{"file": 42,"line": 240,"col": 4},{"file": 42,"line": 441,"col": 4},{"file": 49,"line": 557,"col": 4},{"file": 42,"line": 149,"col": 4},{"file": 49,"line": 647,"col": 4},{"file": 42,"line": 70,"col": 4},{"file": 22,"line": 696,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n `file_path` is relative to the open directory handle `dir_fd`.\n See also `openatC`.\n","fields": [8589,8590,8591,8592]},{"file": 22,"line": 1890,"col": 4},{"file": 42,"line": 356,"col": 4},{"file": 42,"line": 423,"col": 4},{"file": 42,"line": 456,"col": 4},{"file": 42,"line": 344,"col": 4},{"file": 42,"line": 263,"col": 4},{"file": 50,"line": 311,"col": 4,"docs": " No buffer space available\n"},{"file": 42,"line": 72,"col": 4},{"file": 49,"line": 399,"col": 4},{"file": 42,"line": 411,"col": 4,"docs": " ETXTBSY\n"},{"file": 49,"line": 583,"col": 4},{"file": 49,"line": 382,"col": 4},{"file": 42,"line": 59,"col": 4},{"file": 49,"line": 769,"col": 4,"docs": " NSIG is the total number of signals defined.\n As signal numbers are sequential, NSIG is one greater than the largest defined signal number.\n"},{"file": 49,"line": 1457,"col": 4},{"file": 42,"line": 201,"col": 4},{"file": 42,"line": 400,"col": 4},{"file": 49,"line": 806,"col": 4},{"file": 49,"line": 352,"col": 12},{"file": 22,"line": 514,"col": 4,"docs": " Write multiple buffers to a file descriptor.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [8593,8594]},{"file": 49,"line": 610,"col": 4},{"file": 49,"line": 73,"col": 4},{"file": 42,"line": 530,"col": 4},{"file": 49,"line": 61,"col": 4,"docs": " - Force the attributes to be sync'd with the server\n"},{"file": 49,"line": 250,"col": 4},{"file": 42,"line": 449,"col": 4},{"file": 22,"line": 1701,"col": 4},{"file": 22,"line": 1653,"col": 4,"docs": " addr is `*const T` where T is one of the sockaddr\n","fields": [8595,8596,8597]},{"file": 42,"line": 179,"col": 4},{"file": 22,"line": 972,"col": 4,"docs": " This is the same as `symlink` except the parameters are null-terminated pointers.\n See also `symlink`.\n","fields": [8598,8599]},{"file": 50,"line": 100,"col": 4,"docs": " Math result not representable\n"},{"file": 49,"line": 260,"col": 4},{"file": 42,"line": 249,"col": 4},{"file": 50,"line": 181,"col": 4,"docs": " Timer expired\n"},{"file": 49,"line": 190,"col": 4},{"file": 42,"line": 347,"col": 4},{"file": 49,"line": 1431,"col": 4},{"file": 50,"line": 341,"col": 4,"docs": " Operation now in progress\n"},{"file": 22,"line": 2029,"col": 4},{"file": 49,"line": 179,"col": 4},{"file": 49,"line": 1419,"col": 4},{"file": 22,"line": 1876,"col": 4,"fields": [8600,8601]},{"file": 22,"line": 3244,"col": 4},{"file": 49,"line": 37,"col": 4,"docs": " Special value used to indicate openat should use the current working directory\n"},{"file": 49,"line": 1043,"col": 4},{"file": 49,"line": 499,"col": 4},{"file": 22,"line": 1471,"col": 4},{"file": 49,"line": 1429,"col": 4},{"file": 22,"line": 1855,"col": 4,"docs": " Waits for an I/O event on an epoll file descriptor.\n Returns the number of file descriptors ready for the requested I/O,\n or zero if no file descriptor became ready during the requested timeout milliseconds.\n","fields": [8602,8603,8604]},{"file": 49,"line": 1365,"col": 4},{"file": 42,"line": 480,"col": 4},{"file": 49,"line": 512,"col": 4},{"file": 49,"line": 350,"col": 12},{"file": 49,"line": 686,"col": 4},{"file": 50,"line": 175,"col": 4,"docs": " Device not a stream\n"},{"file": 49,"line": 25,"col": 4},{"file": 49,"line": 1439,"col": 4},{"file": 49,"line": 1175,"col": 4},{"file": 49,"line": 318,"col": 4},{"file": 49,"line": 889,"col": 4},{"file": 42,"line": 310,"col": 4},{"file": 42,"line": 373,"col": 4},{"file": 42,"line": 65,"col": 4},{"file": 50,"line": 427,"col": 4,"docs": " Domain name is too long\n"},{"file": 42,"line": 130,"col": 4},{"file": 42,"line": 340,"col": 4},{"file": 42,"line": 298,"col": 4},{"file": 42,"line": 43,"col": 4},{"file": 22,"line": 2123,"col": 4},{"file": 49,"line": 95,"col": 4,"docs": " Changes are private\n"},{"file": 49,"line": 493,"col": 4},{"file": 42,"line": 110,"col": 4},{"file": 49,"line": 693,"col": 4},{"file": 50,"line": 40,"col": 4,"docs": " Bad address\n"},{"file": 49,"line": 873,"col": 4},{"file": 49,"line": 662,"col": 4},{"file": 49,"line": 289,"col": 4},{"file": 42,"line": 31,"col": 4},{"file": 42,"line": 252,"col": 4},{"file": 49,"line": 1001,"col": 4},{"file": 49,"line": 892,"col": 4},{"file": 49,"line": 1369,"col": 4},{"file": 49,"line": 1272,"col": 4},{"file": 49,"line": 633,"col": 4},{"file": 49,"line": 290,"col": 4},{"file": 42,"line": 40,"col": 4},{"file": 42,"line": 90,"col": 4},{"file": 49,"line": 446,"col": 4},{"file": 49,"line": 288,"col": 4},{"file": 49,"line": 247,"col": 4},{"file": 42,"line": 150,"col": 4},{"file": 49,"line": 130,"col": 4,"docs": " For anonymous mmap, memory could be uninitialized\n"},{"file": 42,"line": 160,"col": 4},{"file": 49,"line": 180,"col": 4},{"file": 49,"line": 424,"col": 4},{"file": 49,"line": 931,"col": 4},{"file": 42,"line": 408,"col": 4,"docs": " stack-like segment\n"},{"file": 50,"line": 338,"col": 4,"docs": " Operation already in progress\n"},{"file": 22,"line": 1908,"col": 4},{"file": 42,"line": 328,"col": 4},{"file": 42,"line": 436,"col": 4},{"file": 49,"line": 1239,"col": 4},{"file": 42,"line": 387,"col": 4},{"file": 49,"line": 482,"col": 4},{"file": 42,"line": 234,"col": 4},{"file": 49,"line": 449,"col": 4},{"file": 42,"line": 311,"col": 4},{"file": 49,"line": 622,"col": 4},{"file": 49,"line": 1292,"col": 4,"docs": " Renamed to `Statx` to not conflict with the `statx` function.\n"},{"file": 49,"line": 1401,"col": 4},{"file": 49,"line": 665,"col": 4},{"file": 42,"line": 106,"col": 4},{"file": 49,"line": 1218,"col": 4},{"file": 49,"line": 611,"col": 4},{"file": 42,"line": 108,"col": 4},{"file": 49,"line": 616,"col": 4},{"file": 49,"line": 28,"col": 4},{"file": 49,"line": 574,"col": 4},{"file": 42,"line": 254,"col": 4},{"file": 42,"line": 23,"col": 4},{"file": 50,"line": 52,"col": 4,"docs": " Cross-device link\n"},{"file": 22,"line": 1674,"col": 0},{"file": 22,"line": 17,"col": 0},{"file": 22,"line": 18,"col": 0},{"file": 22,"line": 162,"col": 0,"fields": [8605]},{"file": 22,"line": 1191,"col": 0},{"file": 22,"line": 24,"col": 0},{"file": 22,"line": 22,"col": 0},{"file": 22,"line": 20,"col": 0},{"file": 22,"line": 3305,"col": 0,"fields": [8606]},{"file": 22,"line": 21,"col": 0},{"file": 22,"line": 19,"col": 0},{"file": 22,"line": 23,"col": 0},{"file": 22,"line": 16,"col": 0},{"file": 23,"line": 1869,"col": 4},{"file": 23,"line": 139,"col": 4,"docs": " Returns a slice with the same pointer as addresses, with a potentially smaller len.\n On Windows, when first_address is not null, we ask for at least 32 stack frames,\n and then try to find the first address. If addresses.len is more than 32, we\n capture that many stack frames exactly, and then look for the first address,\n chopping off the irrelevant frames and shifting so that the returned addresses pointer\n equals the passed in addresses pointer.\n","fields": [8607,8608]},{"file": 23,"line": 331,"col": 4,"fields": [8609,8610,8611,8612]},{"file": 23,"line": 2380,"col": 4,"docs": " Whether or not the current target can print useful debug information when a segfault occurs.\n"},{"file": 23,"line": 1721,"col": 4},{"file": 23,"line": 2381,"col": 4},{"file": 23,"line": 19,"col": 4},{"file": 23,"line": 1206,"col": 4},{"file": 23,"line": 213,"col": 4,"fields": [8613,8614]},{"file": 23,"line": 1204,"col": 4},{"file": 23,"line": 1203,"col": 4},{"file": 23,"line": 281,"col": 4},{"file": 23,"line": 802,"col": 4},{"file": 23,"line": 21,"col": 4},{"file": 23,"line": 24,"col": 4},{"file": 23,"line": 2488,"col": 4,"fields": [8615]},{"file": 23,"line": 67,"col": 4,"fields": []},{"file": 23,"line": 22,"col": 4},{"file": 23,"line": 2364,"col": 4,"docs": " This should only be used in temporary test programs.\n"},{"file": 23,"line": 2,"col": 0},{"file": 23,"line": 644,"col": 0,"fields": [8616,8617]},{"file": 23,"line": 257,"col": 0},{"file": 23,"line": 2477,"col": 0,"fields": [8618]},{"file": 23,"line": 2310,"col": 0,"fields": [8619,8620,8621]},{"file": 23,"line": 8,"col": 0},{"file": 23,"line": 221,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 23,"line": 4,"col": 0},{"file": 23,"line": 1862,"col": 0},{"file": 23,"line": 979,"col": 0,"fields": [8622,8623]},{"file": 23,"line": 43,"col": 0},{"file": 23,"line": 259,"col": 0},{"file": 23,"line": 7,"col": 0},{"file": 23,"line": 1073,"col": 0,"fields": [8624]},{"file": 23,"line": 2305,"col": 0},{"file": 23,"line": 2324,"col": 0,"fields": [8625]},{"file": 23,"line": 2328,"col": 0,"fields": [8626,8627]},{"file": 23,"line": 1182,"col": 0},{"file": 23,"line": 3,"col": 0},{"file": 23,"line": 1881,"col": 0},{"file": 23,"line": 256,"col": 0},{"file": 23,"line": 14,"col": 0},{"file": 23,"line": 1792,"col": 0},{"file": 23,"line": 15,"col": 0},{"file": 23,"line": 10,"col": 0},{"file": 23,"line": 258,"col": 0},{"file": 23,"line": 255,"col": 0},{"file": 23,"line": 5,"col": 0},{"file": 23,"line": 585,"col": 0,"docs": " TODO this is a special case hack right now. clean it up and maybe make it part of std.fmt\n","fields": [8628]},{"file": 23,"line": 16,"col": 0},{"file": 23,"line": 825,"col": 0,"fields": [8629]},{"file": 23,"line": 1759,"col": 0},{"file": 23,"line": 1802,"col": 0},{"file": 23,"line": 6,"col": 0},{"file": 23,"line": 9,"col": 0},{"file": 23,"line": 13,"col": 0},{"file": 23,"line": 2392,"col": 0},{"file": 23,"line": 2369,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 23,"line": 1752,"col": 0},{"file": 23,"line": 574,"col": 0},{"file": 23,"line": 1,"col": 0},{"file": 23,"line": 2365,"col": 0},{"file": 23,"line": 42,"col": 0,"docs": " Tries to write to stderr, unbuffered, and ignores any error returned.\n Does not append a newline.\n"},{"file": 23,"line": 1779,"col": 0},{"file": 23,"line": 2366,"col": 0},{"file": 23,"line": 1767,"col": 0},{"file": 23,"line": 2102,"col": 0,"fields": [8630,8631,8632]},{"file": 23,"line": 29,"col": 0},{"file": 23,"line": 45,"col": 0},{"file": 23,"line": 46,"col": 0},{"file": 23,"line": 11,"col": 0},{"file": 23,"line": 1747,"col": 0},{"file": 23,"line": 2345,"col": 0,"fields": [8633]},{"file": 23,"line": 2318,"col": 0,"fields": [8634]},{"file": 23,"line": 0,"col": 0},{"file": 23,"line": 363,"col": 0,"fields": [8635,8636,8637,8638]},{"file": 23,"line": 690,"col": 0,"fields": [8639,8640]},{"file": 23,"line": 1774,"col": 0},{"file": 23,"line": 708,"col": 0,"fields": [8641,8642,8643,8644]},{"file": 23,"line": 1761,"col": 0},{"file": 23,"line": 17,"col": 0},{"file": 23,"line": 72,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 23,"line": 12,"col": 0},{"file": 23,"line": 1197,"col": 0},{"file": 23,"line": 2370,"col": 0},{"file": 23,"line": 254,"col": 0},{"file": 24,"line": 577,"col": 4},{"file": 24,"line": 302,"col": 4},{"file": 24,"line": 386,"col": 4},{"file": 24,"line": 615,"col": 4},{"file": 24,"line": 603,"col": 4},{"file": 24,"line": 350,"col": 4},{"file": 24,"line": 508,"col": 4},{"file": 24,"line": 490,"col": 4},{"file": 24,"line": 148,"col": 4},{"file": 24,"line": 567,"col": 4},{"file": 24,"line": 121,"col": 4},{"file": 24,"line": 515,"col": 4},{"file": 24,"line": 609,"col": 4},{"file": 24,"line": 622,"col": 4},{"file": 24,"line": 449,"col": 4},{"file": 24,"line": 421,"col": 4},{"file": 24,"line": 141,"col": 4},{"file": 24,"line": 389,"col": 4},{"file": 24,"line": 643,"col": 4},{"file": 24,"line": 303,"col": 4},{"file": 24,"line": 430,"col": 4},{"file": 24,"line": 447,"col": 4},{"file": 24,"line": 406,"col": 4},{"file": 24,"line": 325,"col": 4},{"file": 24,"line": 330,"col": 4},{"file": 24,"line": 210,"col": 4},{"file": 24,"line": 437,"col": 4},{"file": 24,"line": 232,"col": 4},{"file": 24,"line": 223,"col": 4},{"file": 24,"line": 269,"col": 4},{"file": 24,"line": 285,"col": 4},{"file": 24,"line": 660,"col": 4},{"file": 24,"line": 418,"col": 4},{"file": 24,"line": 534,"col": 4},{"file": 24,"line": 399,"col": 4},{"file": 24,"line": 474,"col": 4},{"file": 24,"line": 25,"col": 4},{"file": 24,"line": 222,"col": 4},{"file": 24,"line": 341,"col": 4},{"file": 24,"line": 433,"col": 4},{"file": 24,"line": 362,"col": 4},{"file": 24,"line": 292,"col": 4},{"file": 24,"line": 371,"col": 4},{"file": 24,"line": 174,"col": 4},{"file": 24,"line": 74,"col": 4},{"file": 24,"line": 94,"col": 4},{"file": 24,"line": 197,"col": 4},{"file": 24,"line": 340,"col": 4},{"file": 24,"line": 191,"col": 4},{"file": 24,"line": 273,"col": 4},{"file": 24,"line": 344,"col": 4},{"file": 24,"line": 464,"col": 4},{"file": 24,"line": 7,"col": 4},{"file": 24,"line": 568,"col": 4},{"file": 24,"line": 161,"col": 4},{"file": 24,"line": 552,"col": 4},{"file": 24,"line": 471,"col": 4},{"file": 24,"line": 674,"col": 4},{"file": 24,"line": 650,"col": 4},{"file": 24,"line": 81,"col": 4},{"file": 24,"line": 34,"col": 4},{"file": 24,"line": 357,"col": 4},{"file": 24,"line": 611,"col": 4},{"file": 24,"line": 649,"col": 4},{"file": 24,"line": 145,"col": 4},{"file": 24,"line": 46,"col": 4},{"file": 24,"line": 102,"col": 4},{"file": 24,"line": 107,"col": 4},{"file": 24,"line": 237,"col": 4},{"file": 24,"line": 142,"col": 4},{"file": 24,"line": 467,"col": 4},{"file": 24,"line": 29,"col": 4},{"file": 24,"line": 270,"col": 4},{"file": 24,"line": 669,"col": 4},{"file": 24,"line": 54,"col": 4},{"file": 24,"line": 673,"col": 4},{"file": 24,"line": 663,"col": 4},{"file": 24,"line": 110,"col": 4},{"file": 24,"line": 335,"col": 4},{"file": 24,"line": 492,"col": 4},{"file": 24,"line": 566,"col": 4},{"file": 24,"line": 45,"col": 4},{"file": 24,"line": 641,"col": 4},{"file": 24,"line": 153,"col": 4},{"file": 24,"line": 597,"col": 4},{"file": 24,"line": 547,"col": 4},{"file": 24,"line": 192,"col": 4},{"file": 24,"line": 205,"col": 4},{"file": 24,"line": 163,"col": 4},{"file": 24,"line": 177,"col": 4},{"file": 24,"line": 272,"col": 4},{"file": 24,"line": 578,"col": 4},{"file": 24,"line": 27,"col": 4},{"file": 24,"line": 290,"col": 4},{"file": 24,"line": 247,"col": 4},{"file": 24,"line": 347,"col": 4},{"file": 24,"line": 653,"col": 4},{"file": 24,"line": 584,"col": 4},{"file": 24,"line": 0,"col": 4},{"file": 24,"line": 323,"col": 4},{"file": 24,"line": 127,"col": 4},{"file": 24,"line": 204,"col": 4},{"file": 24,"line": 137,"col": 4},{"file": 24,"line": 87,"col": 4},{"file": 24,"line": 40,"col": 4},{"file": 24,"line": 358,"col": 4},{"file": 24,"line": 644,"col": 4},{"file": 24,"line": 588,"col": 4},{"file": 24,"line": 284,"col": 4},{"file": 24,"line": 365,"col": 4},{"file": 24,"line": 257,"col": 4},{"file": 24,"line": 31,"col": 4},{"file": 24,"line": 634,"col": 4},{"file": 24,"line": 93,"col": 4},{"file": 24,"line": 67,"col": 4},{"file": 24,"line": 445,"col": 4},{"file": 24,"line": 309,"col": 4},{"file": 24,"line": 280,"col": 4},{"file": 24,"line": 657,"col": 4},{"file": 24,"line": 454,"col": 4},{"file": 24,"line": 47,"col": 4},{"file": 24,"line": 426,"col": 4},{"file": 24,"line": 367,"col": 4},{"file": 24,"line": 392,"col": 4},{"file": 24,"line": 318,"col": 4},{"file": 24,"line": 100,"col": 4},{"file": 24,"line": 409,"col": 4},{"file": 24,"line": 607,"col": 4},{"file": 24,"line": 28,"col": 4},{"file": 24,"line": 316,"col": 4},{"file": 24,"line": 639,"col": 4},{"file": 24,"line": 672,"col": 4},{"file": 24,"line": 575,"col": 4},{"file": 24,"line": 442,"col": 4},{"file": 24,"line": 374,"col": 4},{"file": 24,"line": 52,"col": 4},{"file": 24,"line": 203,"col": 4},{"file": 24,"line": 556,"col": 4},{"file": 24,"line": 451,"col": 4},{"file": 24,"line": 666,"col": 4},{"file": 24,"line": 679,"col": 4},{"file": 24,"line": 368,"col": 4},{"file": 24,"line": 423,"col": 4},{"file": 24,"line": 612,"col": 4},{"file": 24,"line": 369,"col": 4},{"file": 24,"line": 396,"col": 4},{"file": 24,"line": 626,"col": 4},{"file": 24,"line": 432,"col": 4},{"file": 24,"line": 119,"col": 4},{"file": 24,"line": 408,"col": 4},{"file": 24,"line": 506,"col": 4},{"file": 24,"line": 668,"col": 4},{"file": 24,"line": 15,"col": 4},{"file": 24,"line": 640,"col": 4},{"file": 24,"line": 439,"col": 4},{"file": 24,"line": 520,"col": 4},{"file": 24,"line": 416,"col": 4},{"file": 24,"line": 628,"col": 4},{"file": 24,"line": 542,"col": 4},{"file": 24,"line": 459,"col": 4},{"file": 24,"line": 480,"col": 4},{"file": 24,"line": 565,"col": 4},{"file": 24,"line": 420,"col": 4},{"file": 24,"line": 401,"col": 4},{"file": 24,"line": 261,"col": 4},{"file": 24,"line": 476,"col": 4},{"file": 24,"line": 561,"col": 4},{"file": 24,"line": 132,"col": 4},{"file": 24,"line": 496,"col": 4},{"file": 24,"line": 326,"col": 4},{"file": 24,"line": 256,"col": 4},{"file": 24,"line": 133,"col": 4},{"file": 24,"line": 554,"col": 4},{"file": 24,"line": 502,"col": 4},{"file": 24,"line": 678,"col": 4},{"file": 24,"line": 23,"col": 4},{"file": 24,"line": 114,"col": 4},{"file": 24,"line": 466,"col": 4},{"file": 24,"line": 328,"col": 4},{"file": 24,"line": 629,"col": 4},{"file": 24,"line": 260,"col": 4},{"file": 24,"line": 602,"col": 4},{"file": 24,"line": 373,"col": 4},{"file": 24,"line": 665,"col": 4},{"file": 24,"line": 18,"col": 4},{"file": 24,"line": 245,"col": 4},{"file": 24,"line": 199,"col": 4},{"file": 24,"line": 160,"col": 4},{"file": 24,"line": 241,"col": 4},{"file": 24,"line": 537,"col": 4},{"file": 24,"line": 631,"col": 4},{"file": 24,"line": 509,"col": 4},{"file": 24,"line": 543,"col": 4},{"file": 24,"line": 659,"col": 4},{"file": 24,"line": 317,"col": 4},{"file": 24,"line": 590,"col": 4},{"file": 24,"line": 258,"col": 4},{"file": 24,"line": 478,"col": 4},{"file": 24,"line": 10,"col": 4},{"file": 24,"line": 546,"col": 4},{"file": 24,"line": 627,"col": 4},{"file": 24,"line": 654,"col": 4},{"file": 24,"line": 283,"col": 4},{"file": 24,"line": 343,"col": 4},{"file": 24,"line": 293,"col": 4},{"file": 24,"line": 670,"col": 4},{"file": 24,"line": 187,"col": 4},{"file": 24,"line": 282,"col": 4},{"file": 24,"line": 630,"col": 4},{"file": 24,"line": 545,"col": 4},{"file": 24,"line": 572,"col": 4},{"file": 24,"line": 24,"col": 4},{"file": 24,"line": 324,"col": 4},{"file": 24,"line": 349,"col": 4},{"file": 24,"line": 164,"col": 4},{"file": 24,"line": 591,"col": 4},{"file": 24,"line": 186,"col": 4},{"file": 24,"line": 128,"col": 4},{"file": 24,"line": 348,"col": 4},{"file": 24,"line": 551,"col": 4},{"file": 24,"line": 486,"col": 4},{"file": 24,"line": 38,"col": 4},{"file": 24,"line": 254,"col": 4},{"file": 24,"line": 570,"col": 4},{"file": 24,"line": 22,"col": 4},{"file": 24,"line": 64,"col": 4},{"file": 24,"line": 26,"col": 4},{"file": 24,"line": 623,"col": 4},{"file": 24,"line": 255,"col": 4},{"file": 24,"line": 17,"col": 4},{"file": 24,"line": 315,"col": 4},{"file": 24,"line": 387,"col": 4},{"file": 24,"line": 404,"col": 4},{"file": 24,"line": 185,"col": 4},{"file": 24,"line": 193,"col": 4},{"file": 24,"line": 339,"col": 4},{"file": 24,"line": 182,"col": 4},{"file": 24,"line": 130,"col": 4},{"file": 24,"line": 208,"col": 4},{"file": 24,"line": 131,"col": 4},{"file": 24,"line": 44,"col": 4},{"file": 24,"line": 168,"col": 4},{"file": 24,"line": 294,"col": 4},{"file": 24,"line": 57,"col": 4},{"file": 24,"line": 652,"col": 4},{"file": 24,"line": 481,"col": 4},{"file": 24,"line": 539,"col": 4},{"file": 24,"line": 456,"col": 4},{"file": 24,"line": 9,"col": 4},{"file": 24,"line": 184,"col": 4},{"file": 24,"line": 216,"col": 4},{"file": 24,"line": 242,"col": 4},{"file": 24,"line": 189,"col": 4},{"file": 24,"line": 259,"col": 4},{"file": 24,"line": 390,"col": 4},{"file": 24,"line": 646,"col": 4},{"file": 24,"line": 11,"col": 4},{"file": 24,"line": 427,"col": 4},{"file": 24,"line": 448,"col": 4},{"file": 24,"line": 411,"col": 4},{"file": 24,"line": 213,"col": 4},{"file": 24,"line": 226,"col": 4},{"file": 24,"line": 444,"col": 4},{"file": 24,"line": 321,"col": 4},{"file": 24,"line": 165,"col": 4},{"file": 24,"line": 176,"col": 4},{"file": 24,"line": 126,"col": 4},{"file": 24,"line": 637,"col": 4},{"file": 24,"line": 56,"col": 4},{"file": 24,"line": 55,"col": 4},{"file": 24,"line": 417,"col": 4},{"file": 24,"line": 377,"col": 4},{"file": 24,"line": 393,"col": 4},{"file": 24,"line": 398,"col": 4},{"file": 24,"line": 473,"col": 4},{"file": 24,"line": 167,"col": 4},{"file": 24,"line": 434,"col": 4},{"file": 24,"line": 532,"col": 4},{"file": 24,"line": 58,"col": 4},{"file": 24,"line": 562,"col": 4},{"file": 24,"line": 233,"col": 4},{"file": 24,"line": 461,"col": 4},{"file": 24,"line": 458,"col": 4},{"file": 24,"line": 238,"col": 4},{"file": 24,"line": 470,"col": 4},{"file": 24,"line": 494,"col": 4},{"file": 24,"line": 149,"col": 4},{"file": 24,"line": 608,"col": 4},{"file": 24,"line": 383,"col": 4},{"file": 24,"line": 619,"col": 4},{"file": 24,"line": 239,"col": 4},{"file": 24,"line": 413,"col": 4},{"file": 24,"line": 379,"col": 4},{"file": 24,"line": 156,"col": 4},{"file": 24,"line": 266,"col": 4},{"file": 24,"line": 120,"col": 4},{"file": 24,"line": 14,"col": 4},{"file": 24,"line": 231,"col": 4},{"file": 24,"line": 173,"col": 4},{"file": 24,"line": 355,"col": 4},{"file": 24,"line": 381,"col": 4},{"file": 24,"line": 468,"col": 4},{"file": 24,"line": 60,"col": 4},{"file": 24,"line": 221,"col": 4},{"file": 24,"line": 219,"col": 4},{"file": 24,"line": 582,"col": 4},{"file": 24,"line": 667,"col": 4},{"file": 24,"line": 162,"col": 4},{"file": 24,"line": 195,"col": 4},{"file": 24,"line": 152,"col": 4},{"file": 24,"line": 312,"col": 4},{"file": 24,"line": 271,"col": 4},{"file": 24,"line": 118,"col": 4},{"file": 24,"line": 589,"col": 4},{"file": 24,"line": 76,"col": 4},{"file": 24,"line": 636,"col": 4},{"file": 24,"line": 354,"col": 4},{"file": 24,"line": 635,"col": 4},{"file": 24,"line": 345,"col": 4},{"file": 24,"line": 179,"col": 4},{"file": 24,"line": 499,"col": 4},{"file": 24,"line": 671,"col": 4},{"file": 24,"line": 267,"col": 4},{"file": 24,"line": 209,"col": 4},{"file": 24,"line": 281,"col": 4},{"file": 24,"line": 175,"col": 4},{"file": 24,"line": 655,"col": 4},{"file": 24,"line": 146,"col": 4},{"file": 24,"line": 587,"col": 4},{"file": 24,"line": 363,"col": 4},{"file": 24,"line": 633,"col": 4},{"file": 24,"line": 435,"col": 4},{"file": 24,"line": 201,"col": 4},{"file": 24,"line": 533,"col": 4},{"file": 24,"line": 352,"col": 4},{"file": 24,"line": 576,"col": 4},{"file": 24,"line": 606,"col": 4},{"file": 24,"line": 334,"col": 4},{"file": 24,"line": 656,"col": 4},{"file": 24,"line": 196,"col": 4},{"file": 24,"line": 526,"col": 4},{"file": 24,"line": 453,"col": 4},{"file": 24,"line": 559,"col": 4},{"file": 24,"line": 83,"col": 4},{"file": 24,"line": 425,"col": 4},{"file": 24,"line": 385,"col": 4},{"file": 24,"line": 39,"col": 4},{"file": 24,"line": 172,"col": 4},{"file": 24,"line": 382,"col": 4},{"file": 24,"line": 327,"col": 4},{"file": 24,"line": 410,"col": 4},{"file": 24,"line": 306,"col": 4},{"file": 24,"line": 5,"col": 4},{"file": 24,"line": 180,"col": 4},{"file": 24,"line": 2,"col": 4},{"file": 24,"line": 485,"col": 4},{"file": 24,"line": 159,"col": 4},{"file": 24,"line": 360,"col": 4},{"file": 24,"line": 441,"col": 4},{"file": 24,"line": 484,"col": 4},{"file": 24,"line": 530,"col": 4},{"file": 24,"line": 12,"col": 4},{"file": 24,"line": 124,"col": 4},{"file": 24,"line": 519,"col": 4},{"file": 24,"line": 450,"col": 4},{"file": 24,"line": 13,"col": 4},{"file": 24,"line": 664,"col": 4},{"file": 24,"line": 522,"col": 4},{"file": 24,"line": 662,"col": 4},{"file": 24,"line": 422,"col": 4},{"file": 24,"line": 4,"col": 4},{"file": 24,"line": 395,"col": 4},{"file": 24,"line": 41,"col": 4},{"file": 24,"line": 229,"col": 4},{"file": 24,"line": 429,"col": 4},{"file": 24,"line": 378,"col": 4},{"file": 24,"line": 405,"col": 4},{"file": 24,"line": 277,"col": 4},{"file": 24,"line": 438,"col": 4},{"file": 24,"line": 415,"col": 4},{"file": 24,"line": 540,"col": 4},{"file": 24,"line": 460,"col": 4},{"file": 24,"line": 129,"col": 4},{"file": 24,"line": 36,"col": 4},{"file": 24,"line": 337,"col": 4},{"file": 24,"line": 677,"col": 4},{"file": 24,"line": 604,"col": 4},{"file": 24,"line": 419,"col": 4},{"file": 24,"line": 400,"col": 4},{"file": 24,"line": 75,"col": 4},{"file": 24,"line": 475,"col": 4},{"file": 24,"line": 99,"col": 4},{"file": 24,"line": 136,"col": 4},{"file": 24,"line": 21,"col": 4},{"file": 24,"line": 16,"col": 4},{"file": 24,"line": 518,"col": 4},{"file": 24,"line": 3,"col": 4},{"file": 24,"line": 32,"col": 4},{"file": 24,"line": 359,"col": 4},{"file": 24,"line": 144,"col": 4},{"file": 24,"line": 483,"col": 4},{"file": 24,"line": 181,"col": 4},{"file": 24,"line": 109,"col": 4},{"file": 24,"line": 463,"col": 4},{"file": 24,"line": 53,"col": 4},{"file": 24,"line": 658,"col": 4},{"file": 24,"line": 147,"col": 4},{"file": 24,"line": 211,"col": 4},{"file": 24,"line": 171,"col": 4},{"file": 24,"line": 472,"col": 4},{"file": 24,"line": 202,"col": 4},{"file": 24,"line": 68,"col": 4},{"file": 24,"line": 274,"col": 4},{"file": 24,"line": 230,"col": 4},{"file": 24,"line": 170,"col": 4},{"file": 24,"line": 212,"col": 4},{"file": 24,"line": 366,"col": 4},{"file": 24,"line": 59,"col": 4},{"file": 24,"line": 527,"col": 4},{"file": 24,"line": 500,"col": 4},{"file": 24,"line": 512,"col": 4},{"file": 24,"line": 234,"col": 4},{"file": 24,"line": 113,"col": 4},{"file": 24,"line": 279,"col": 4},{"file": 24,"line": 625,"col": 4},{"file": 24,"line": 80,"col": 4},{"file": 24,"line": 301,"col": 4},{"file": 24,"line": 356,"col": 4},{"file": 24,"line": 477,"col": 4},{"file": 24,"line": 291,"col": 4},{"file": 24,"line": 297,"col": 4},{"file": 24,"line": 240,"col": 4},{"file": 24,"line": 155,"col": 4},{"file": 24,"line": 681,"col": 4},{"file": 24,"line": 265,"col": 4},{"file": 24,"line": 574,"col": 4},{"file": 24,"line": 580,"col": 4},{"file": 24,"line": 573,"col": 4},{"file": 24,"line": 376,"col": 4},{"file": 24,"line": 675,"col": 4},{"file": 24,"line": 346,"col": 4},{"file": 24,"line": 43,"col": 4},{"file": 24,"line": 103,"col": 4},{"file": 24,"line": 598,"col": 4},{"file": 24,"line": 594,"col": 4},{"file": 24,"line": 298,"col": 4},{"file": 24,"line": 529,"col": 4},{"file": 24,"line": 388,"col": 4},{"file": 24,"line": 403,"col": 4},{"file": 24,"line": 252,"col": 4},{"file": 24,"line": 115,"col": 4},{"file": 24,"line": 370,"col": 4},{"file": 24,"line": 104,"col": 4},{"file": 24,"line": 351,"col": 4},{"file": 24,"line": 583,"col": 4},{"file": 24,"line": 65,"col": 4},{"file": 24,"line": 446,"col": 4},{"file": 24,"line": 217,"col": 4},{"file": 24,"line": 596,"col": 4},{"file": 24,"line": 63,"col": 4},{"file": 24,"line": 183,"col": 4},{"file": 24,"line": 380,"col": 4},{"file": 24,"line": 541,"col": 4},{"file": 24,"line": 125,"col": 4},{"file": 24,"line": 228,"col": 4},{"file": 24,"line": 79,"col": 4},{"file": 24,"line": 455,"col": 4},{"file": 24,"line": 647,"col": 4},{"file": 24,"line": 535,"col": 4},{"file": 24,"line": 214,"col": 4},{"file": 24,"line": 487,"col": 4},{"file": 24,"line": 391,"col": 4},{"file": 24,"line": 676,"col": 4},{"file": 24,"line": 428,"col": 4},{"file": 24,"line": 35,"col": 4},{"file": 24,"line": 412,"col": 4},{"file": 24,"line": 248,"col": 4},{"file": 24,"line": 443,"col": 4},{"file": 24,"line": 150,"col": 4},{"file": 24,"line": 268,"col": 4},{"file": 24,"line": 595,"col": 4},{"file": 24,"line": 224,"col": 4},{"file": 24,"line": 452,"col": 4},{"file": 24,"line": 593,"col": 4},{"file": 24,"line": 106,"col": 4},{"file": 24,"line": 375,"col": 4},{"file": 24,"line": 158,"col": 4},{"file": 24,"line": 424,"col": 4},{"file": 24,"line": 586,"col": 4},{"file": 24,"line": 521,"col": 4},{"file": 24,"line": 394,"col": 4},{"file": 24,"line": 397,"col": 4},{"file": 24,"line": 19,"col": 4},{"file": 24,"line": 555,"col": 4},{"file": 24,"line": 585,"col": 4},{"file": 24,"line": 314,"col": 4},{"file": 24,"line": 431,"col": 4},{"file": 24,"line": 154,"col": 4},{"file": 24,"line": 407,"col": 4},{"file": 24,"line": 319,"col": 4},{"file": 24,"line": 227,"col": 4},{"file": 24,"line": 37,"col": 4},{"file": 24,"line": 493,"col": 4},{"file": 24,"line": 495,"col": 4},{"file": 24,"line": 440,"col": 4},{"file": 24,"line": 462,"col": 4},{"file": 24,"line": 482,"col": 4},{"file": 24,"line": 479,"col": 4},{"file": 24,"line": 457,"col": 4},{"file": 24,"line": 200,"col": 4},{"file": 24,"line": 42,"col": 4},{"file": 24,"line": 169,"col": 4},{"file": 24,"line": 372,"col": 4},{"file": 24,"line": 503,"col": 4},{"file": 24,"line": 651,"col": 4},{"file": 24,"line": 402,"col": 4},{"file": 24,"line": 469,"col": 4},{"file": 24,"line": 642,"col": 4},{"file": 24,"line": 648,"col": 4},{"file": 24,"line": 288,"col": 4},{"file": 24,"line": 253,"col": 4},{"file": 24,"line": 618,"col": 4},{"file": 24,"line": 82,"col": 4},{"file": 24,"line": 414,"col": 4},{"file": 24,"line": 300,"col": 4},{"file": 24,"line": 48,"col": 4},{"file": 24,"line": 531,"col": 4},{"file": 24,"line": 1,"col": 4},{"file": 24,"line": 215,"col": 4},{"file": 24,"line": 151,"col": 4},{"file": 24,"line": 299,"col": 4},{"file": 24,"line": 30,"col": 4},{"file": 24,"line": 264,"col": 4},{"file": 24,"line": 465,"col": 4},{"file": 24,"line": 550,"col": 4},{"file": 24,"line": 661,"col": 4},{"file": 24,"line": 289,"col": 4},{"file": 24,"line": 632,"col": 4},{"file": 24,"line": 353,"col": 4},{"file": 24,"line": 599,"col": 4},{"file": 24,"line": 33,"col": 4},{"file": 24,"line": 8,"col": 4},{"file": 24,"line": 579,"col": 4},{"file": 24,"line": 218,"col": 4},{"file": 24,"line": 384,"col": 4},{"file": 24,"line": 71,"col": 4},{"file": 24,"line": 276,"col": 4},{"file": 24,"line": 111,"col": 4},{"file": 24,"line": 491,"col": 4},{"file": 24,"line": 364,"col": 4},{"file": 24,"line": 361,"col": 4},{"file": 24,"line": 524,"col": 4},{"file": 24,"line": 194,"col": 4},{"file": 24,"line": 188,"col": 4},{"file": 24,"line": 112,"col": 4},{"file": 24,"line": 680,"col": 4},{"file": 24,"line": 178,"col": 4},{"file": 24,"line": 157,"col": 4},{"file": 24,"line": 20,"col": 4},{"file": 24,"line": 117,"col": 4},{"file": 24,"line": 571,"col": 4},{"file": 24,"line": 592,"col": 4},{"file": 24,"line": 190,"col": 4},{"file": 24,"line": 544,"col": 4},{"file": 24,"line": 605,"col": 4},{"file": 24,"line": 313,"col": 4},{"file": 24,"line": 166,"col": 4},{"file": 24,"line": 275,"col": 4},{"file": 24,"line": 278,"col": 4},{"file": 24,"line": 51,"col": 4},{"file": 24,"line": 225,"col": 4},{"file": 24,"line": 6,"col": 4},{"file": 24,"line": 436,"col": 4},{"file": 24,"line": 122,"col": 4},{"file": 24,"line": 620,"col": 4},{"file": 24,"line": 198,"col": 4},{"file": 24,"line": 116,"col": 4},{"file": 24,"line": 220,"col": 4},{"file": 24,"line": 251,"col": 4},{"file": 24,"line": 123,"col": 4},{"file": 24,"line": 553,"col": 4},{"file": 24,"line": 569,"col": 4},{"file": 25,"line": 5,"col": 4},{"file": 25,"line": 3,"col": 4},{"file": 25,"line": 4,"col": 4},{"file": 25,"line": 0,"col": 4},{"file": 25,"line": 1,"col": 4},{"file": 25,"line": 6,"col": 4},{"file": 25,"line": 7,"col": 4},{"file": 25,"line": 2,"col": 4},{"file": 25,"line": 8,"col": 4},{"file": 26,"line": 261,"col": 4},{"file": 26,"line": 757,"col": 4},{"file": 26,"line": 1445,"col": 4,"docs": " Identifies a section containing compressed data.\n"},{"file": 26,"line": 1417,"col": 4,"docs": " Section occupies memory during program execution.\n"},{"file": 26,"line": 183,"col": 4},{"file": 26,"line": 122,"col": 4},{"file": 26,"line": 196,"col": 4},{"file": 26,"line": 156,"col": 4},{"file": 26,"line": 15,"col": 4},{"file": 26,"line": 228,"col": 4},{"file": 26,"line": 529,"col": 4},{"file": 26,"line": 1414,"col": 4,"docs": " Section data should be writable during execution.\n"},{"file": 26,"line": 1436,"col": 4,"docs": " This section requires special OS-specific processing to avoid incorrect\n behavior.\n"},{"file": 26,"line": 269,"col": 4},{"file": 26,"line": 170,"col": 4},{"file": 26,"line": 175,"col": 4},{"file": 26,"line": 103,"col": 4},{"file": 26,"line": 258,"col": 4},{"file": 26,"line": 29,"col": 4},{"file": 26,"line": 545,"col": 4},{"file": 26,"line": 204,"col": 4},{"file": 26,"line": 604,"col": 4},{"file": 26,"line": 1505,"col": 4,"docs": " Make code section unreadable when in execute-only mode\n"},{"file": 26,"line": 24,"col": 4},{"file": 26,"line": 51,"col": 4},{"file": 26,"line": 302,"col": 4},{"file": 26,"line": 109,"col": 4},{"file": 26,"line": 796,"col": 4},{"file": 26,"line": 106,"col": 4},{"file": 26,"line": 97,"col": 4},{"file": 26,"line": 61,"col": 4},{"file": 26,"line": 543,"col": 4},{"file": 26,"line": 592,"col": 4},{"file": 26,"line": 845,"col": 4},{"file": 26,"line": 295,"col": 4},{"file": 26,"line": 292,"col": 4},{"file": 26,"line": 255,"col": 4},{"file": 26,"line": 1423,"col": 4,"docs": " The data in this section may be merged.\n"},{"file": 26,"line": 160,"col": 4},{"file": 26,"line": 657,"col": 4},{"file": 26,"line": 1473,"col": 4,"docs": " If an object file section does not have this flag set, then it may not hold\n more than 2GB and can be freely referred to in objects using smaller code\n models. Otherwise, only objects using larger code models can refer to them.\n For example, a medium code model object can refer to data in a section that\n sets this flag besides being able to refer to data in a section that does\n not set it; likewise, a small code model object can refer only to code in a\n section that does not set this flag.\n"},{"file": 26,"line": 536,"col": 4},{"file": 26,"line": 200,"col": 4},{"file": 26,"line": 623,"col": 4},{"file": 26,"line": 118,"col": 4},{"file": 26,"line": 165,"col": 4},{"file": 26,"line": 241,"col": 4},{"file": 26,"line": 137,"col": 4},{"file": 26,"line": 1502,"col": 4,"docs": " Section data is string data by default.\n"},{"file": 26,"line": 202,"col": 4},{"file": 26,"line": 78,"col": 4},{"file": 26,"line": 1442,"col": 4,"docs": " This section holds Thread-Local Storage.\n"},{"file": 26,"line": 79,"col": 4},{"file": 26,"line": 92,"col": 4},{"file": 26,"line": 717,"col": 4},{"file": 26,"line": 541,"col": 4},{"file": 26,"line": 119,"col": 4},{"file": 26,"line": 260,"col": 4},{"file": 26,"line": 820,"col": 4},{"file": 26,"line": 154,"col": 4},{"file": 26,"line": 40,"col": 4},{"file": 26,"line": 234,"col": 4},{"file": 26,"line": 54,"col": 4},{"file": 26,"line": 159,"col": 4},{"file": 26,"line": 276,"col": 4},{"file": 26,"line": 43,"col": 4},{"file": 26,"line": 346,"col": 4},{"file": 26,"line": 64,"col": 4},{"file": 26,"line": 53,"col": 4},{"file": 26,"line": 1511,"col": 4,"docs": " Write\n"},{"file": 26,"line": 214,"col": 4},{"file": 26,"line": 115,"col": 4},{"file": 26,"line": 203,"col": 4},{"file": 26,"line": 248,"col": 4},{"file": 26,"line": 333,"col": 4,"docs": " TODO delete this in favor of Elf64_Shdr\n"},{"file": 26,"line": 240,"col": 4},{"file": 26,"line": 90,"col": 4},{"file": 26,"line": 257,"col": 4},{"file": 26,"line": 1496,"col": 4,"docs": " This section should be merged.\n"},{"file": 26,"line": 547,"col": 4},{"file": 26,"line": 194,"col": 4},{"file": 26,"line": 684,"col": 4},{"file": 26,"line": 1499,"col": 4,"docs": " Address size to be inferred from section entry size.\n"},{"file": 26,"line": 123,"col": 4},{"file": 26,"line": 263,"col": 4},{"file": 26,"line": 10,"col": 4},{"file": 26,"line": 293,"col": 4},{"file": 26,"line": 802,"col": 4},{"file": 26,"line": 305,"col": 4},{"file": 26,"line": 290,"col": 4},{"file": 26,"line": 609,"col": 4},{"file": 26,"line": 713,"col": 4},{"file": 26,"line": 1451,"col": 4,"docs": " Start of target-specific flags.\n"},{"file": 26,"line": 287,"col": 4},{"file": 26,"line": 124,"col": 4},{"file": 26,"line": 167,"col": 4},{"file": 26,"line": 16,"col": 4},{"file": 26,"line": 850,"col": 4},{"file": 26,"line": 144,"col": 4},{"file": 26,"line": 27,"col": 4},{"file": 26,"line": 32,"col": 4},{"file": 26,"line": 73,"col": 4},{"file": 26,"line": 36,"col": 4},{"file": 26,"line": 121,"col": 4},{"file": 26,"line": 215,"col": 4},{"file": 26,"line": 80,"col": 4},{"file": 26,"line": 114,"col": 4},{"file": 26,"line": 1481,"col": 4,"docs": " Section contains text/data which may be replicated in other sections.\n Linker must retain only one copy.\n"},{"file": 26,"line": 131,"col": 4},{"file": 26,"line": 745,"col": 4},{"file": 26,"line": 56,"col": 4},{"file": 26,"line": 1484,"col": 4,"docs": " Linker must generate implicit hidden weak names.\n"},{"file": 26,"line": 767,"col": 4},{"file": 26,"line": 62,"col": 4},{"file": 26,"line": 267,"col": 4},{"file": 26,"line": 860,"col": 4},{"file": 26,"line": 724,"col": 4},{"file": 26,"line": 20,"col": 4},{"file": 26,"line": 231,"col": 4},{"file": 26,"line": 283,"col": 4},{"file": 26,"line": 101,"col": 4},{"file": 26,"line": 821,"col": 4},{"file": 26,"line": 39,"col": 4},{"file": 26,"line": 1439,"col": 4,"docs": " This section is a member of a section group.\n"},{"file": 26,"line": 30,"col": 4},{"file": 26,"line": 286,"col": 4},{"file": 26,"line": 84,"col": 4},{"file": 26,"line": 116,"col": 4},{"file": 26,"line": 865,"col": 4},{"file": 26,"line": 709,"col": 4},{"file": 26,"line": 1520,"col": 4,"docs": " Bits for processor-specific semantics.\n"},{"file": 26,"line": 89,"col": 4},{"file": 26,"line": 46,"col": 4},{"file": 26,"line": 98,"col": 4},{"file": 26,"line": 31,"col": 4},{"file": 26,"line": 266,"col": 4},{"file": 26,"line": 49,"col": 4},{"file": 26,"line": 59,"col": 4},{"file": 26,"line": 781,"col": 4},{"file": 26,"line": 303,"col": 4},{"file": 26,"line": 83,"col": 4},{"file": 26,"line": 1514,"col": 4,"docs": " Read\n"},{"file": 26,"line": 128,"col": 4},{"file": 26,"line": 153,"col": 4},{"file": 26,"line": 220,"col": 4},{"file": 26,"line": 249,"col": 4},{"file": 26,"line": 75,"col": 4},{"file": 26,"line": 129,"col": 4},{"file": 26,"line": 192,"col": 4},{"file": 26,"line": 213,"col": 4},{"file": 26,"line": 152,"col": 4},{"file": 26,"line": 762,"col": 4},{"file": 26,"line": 91,"col": 4},{"file": 26,"line": 19,"col": 4},{"file": 26,"line": 1432,"col": 4,"docs": " Adds special ordering requirements for link editors.\n"},{"file": 26,"line": 185,"col": 4},{"file": 26,"line": 55,"col": 4},{"file": 26,"line": 291,"col": 4},{"file": 26,"line": 95,"col": 4},{"file": 26,"line": 306,"col": 4},{"file": 26,"line": 99,"col": 4},{"file": 26,"line": 1459,"col": 4,"docs": " All sections with the \"d\" flag are grouped together by the linker to form\n the data section and the dp register is set to the start of the section by\n the boot code.\n"},{"file": 26,"line": 35,"col": 4},{"file": 26,"line": 186,"col": 4},{"file": 26,"line": 652,"col": 4},{"file": 26,"line": 148,"col": 4},{"file": 26,"line": 28,"col": 4},{"file": 26,"line": 539,"col": 4},{"file": 26,"line": 77,"col": 4},{"file": 26,"line": 111,"col": 4},{"file": 26,"line": 751,"col": 4},{"file": 26,"line": 107,"col": 4},{"file": 26,"line": 309,"col": 4,"docs": " File types\n"},{"file": 26,"line": 230,"col": 4},{"file": 26,"line": 173,"col": 4},{"file": 26,"line": 210,"col": 4},{"file": 26,"line": 182,"col": 4},{"file": 26,"line": 532,"col": 4},{"file": 26,"line": 140,"col": 4},{"file": 26,"line": 299,"col": 4},{"file": 26,"line": 239,"col": 4},{"file": 26,"line": 677,"col": 4},{"file": 26,"line": 1508,"col": 4,"docs": " Execute\n"},{"file": 26,"line": 71,"col": 4},{"file": 26,"line": 530,"col": 4},{"file": 26,"line": 700,"col": 4},{"file": 26,"line": 48,"col": 4},{"file": 26,"line": 546,"col": 4},{"file": 26,"line": 538,"col": 4},{"file": 26,"line": 33,"col": 4},{"file": 26,"line": 158,"col": 4},{"file": 26,"line": 281,"col": 4},{"file": 26,"line": 102,"col": 4},{"file": 26,"line": 270,"col": 4},{"file": 26,"line": 631,"col": 4},{"file": 26,"line": 155,"col": 4},{"file": 26,"line": 82,"col": 4},{"file": 26,"line": 564,"col": 4},{"file": 26,"line": 74,"col": 4},{"file": 26,"line": 184,"col": 4},{"file": 26,"line": 216,"col": 4},{"file": 26,"line": 222,"col": 4},{"file": 26,"line": 227,"col": 4},{"file": 26,"line": 113,"col": 4},{"file": 26,"line": 531,"col": 4},{"file": 26,"line": 68,"col": 4},{"file": 26,"line": 256,"col": 4},{"file": 26,"line": 226,"col": 4},{"file": 26,"line": 537,"col": 4},{"file": 26,"line": 262,"col": 4},{"file": 26,"line": 272,"col": 4},{"file": 26,"line": 162,"col": 4},{"file": 26,"line": 104,"col": 4},{"file": 26,"line": 217,"col": 4},{"file": 26,"line": 243,"col": 4},{"file": 26,"line": 271,"col": 4},{"file": 26,"line": 135,"col": 4},{"file": 26,"line": 63,"col": 4},{"file": 26,"line": 179,"col": 4},{"file": 26,"line": 806,"col": 4},{"file": 26,"line": 264,"col": 4},{"file": 26,"line": 85,"col": 4},{"file": 26,"line": 23,"col": 4},{"file": 26,"line": 275,"col": 4},{"file": 26,"line": 232,"col": 4},{"file": 26,"line": 840,"col": 4},{"file": 26,"line": 134,"col": 4},{"file": 26,"line": 69,"col": 4},{"file": 26,"line": 206,"col": 4},{"file": 26,"line": 191,"col": 4},{"file": 26,"line": 161,"col": 4},{"file": 26,"line": 87,"col": 4},{"file": 26,"line": 168,"col": 4},{"file": 26,"line": 12,"col": 4},{"file": 26,"line": 229,"col": 4},{"file": 26,"line": 647,"col": 4},{"file": 26,"line": 150,"col": 4},{"file": 26,"line": 26,"col": 4},{"file": 26,"line": 141,"col": 4},{"file": 26,"line": 254,"col": 4},{"file": 26,"line": 535,"col": 4},{"file": 26,"line": 45,"col": 4},{"file": 26,"line": 22,"col": 4},{"file": 26,"line": 279,"col": 4},{"file": 26,"line": 855,"col": 4},{"file": 26,"line": 21,"col": 4},{"file": 26,"line": 237,"col": 4},{"file": 26,"line": 93,"col": 4},{"file": 26,"line": 198,"col": 4},{"file": 26,"line": 1464,"col": 4,"docs": " All sections with the \"c\" flag are grouped together by the linker to form\n the constant pool and the cp register is set to the start of the constant\n pool by the boot code.\n"},{"file": 26,"line": 37,"col": 4},{"file": 26,"line": 42,"col": 4},{"file": 26,"line": 60,"col": 4},{"file": 26,"line": 880,"col": 4,"docs": " Machine architectures\n See current registered ELF machine architectures at:\n    http://www.uxsglobal.com/developers/gabi/latest/ch4.eheader.html\n The underscore prefix is because many of these start with numbers.\n"},{"file": 26,"line": 58,"col": 4},{"file": 26,"line": 251,"col": 4},{"file": 26,"line": 189,"col": 4},{"file": 26,"line": 70,"col": 4},{"file": 26,"line": 126,"col": 4},{"file": 26,"line": 132,"col": 4},{"file": 26,"line": 100,"col": 4},{"file": 26,"line": 615,"col": 4},{"file": 26,"line": 197,"col": 4},{"file": 26,"line": 235,"col": 4},{"file": 26,"line": 142,"col": 4},{"file": 26,"line": 86,"col": 4},{"file": 26,"line": 117,"col": 4},{"file": 26,"line": 534,"col": 4},{"file": 26,"line": 47,"col": 4},{"file": 26,"line": 41,"col": 4},{"file": 26,"line": 282,"col": 4},{"file": 26,"line": 25,"col": 4},{"file": 26,"line": 96,"col": 4},{"file": 26,"line": 265,"col": 4},{"file": 26,"line": 643,"col": 4},{"file": 26,"line": 236,"col": 4},{"file": 26,"line": 1426,"col": 4,"docs": " The data in this section is null-terminated strings.\n"},{"file": 26,"line": 13,"col": 4},{"file": 26,"line": 245,"col": 4},{"file": 26,"line": 224,"col": 4},{"file": 26,"line": 738,"col": 4},{"file": 26,"line": 76,"col": 4},{"file": 26,"line": 253,"col": 4},{"file": 26,"line": 300,"col": 4},{"file": 26,"line": 38,"col": 4},{"file": 26,"line": 145,"col": 4},{"file": 26,"line": 50,"col": 4},{"file": 26,"line": 813,"col": 4},{"file": 26,"line": 284,"col": 4},{"file": 26,"line": 120,"col": 4},{"file": 26,"line": 691,"col": 4},{"file": 26,"line": 209,"col": 4},{"file": 26,"line": 1493,"col": 4,"docs": " Section must be part of global data area.\n"},{"file": 26,"line": 225,"col": 4},{"file": 26,"line": 259,"col": 4},{"file": 26,"line": 285,"col": 4},{"file": 26,"line": 791,"col": 4},{"file": 26,"line": 18,"col": 4},{"file": 26,"line": 219,"col": 4},{"file": 26,"line": 667,"col": 4},{"file": 26,"line": 870,"col": 4},{"file": 26,"line": 188,"col": 4},{"file": 26,"line": 11,"col": 4},{"file": 26,"line": 250,"col": 4},{"file": 26,"line": 273,"col": 4},{"file": 26,"line": 274,"col": 4},{"file": 26,"line": 187,"col": 4},{"file": 26,"line": 108,"col": 4},{"file": 26,"line": 639,"col": 4},{"file": 26,"line": 190,"col": 4},{"file": 26,"line": 57,"col": 4},{"file": 26,"line": 65,"col": 4},{"file": 26,"line": 1517,"col": 4,"docs": " Bits for operating system-specific semantics.\n"},{"file": 26,"line": 81,"col": 4},{"file": 26,"line": 88,"col": 4},{"file": 26,"line": 774,"col": 4},{"file": 26,"line": 542,"col": 4},{"file": 26,"line": 731,"col": 4},{"file": 26,"line": 147,"col": 4},{"file": 26,"line": 157,"col": 4},{"file": 26,"line": 112,"col": 4},{"file": 26,"line": 242,"col": 4},{"file": 26,"line": 1448,"col": 4,"docs": " This section is excluded from the final executable or shared library.\n"},{"file": 26,"line": 164,"col": 4},{"file": 26,"line": 151,"col": 4},{"file": 26,"line": 835,"col": 4},{"file": 26,"line": 544,"col": 4},{"file": 26,"line": 533,"col": 4},{"file": 26,"line": 233,"col": 4},{"file": 26,"line": 34,"col": 4},{"file": 26,"line": 149,"col": 4},{"file": 26,"line": 17,"col": 4},{"file": 26,"line": 207,"col": 4},{"file": 26,"line": 163,"col": 4},{"file": 26,"line": 277,"col": 4},{"file": 26,"line": 252,"col": 4},{"file": 26,"line": 635,"col": 4},{"file": 26,"line": 289,"col": 4},{"file": 26,"line": 44,"col": 4},{"file": 26,"line": 288,"col": 4},{"file": 26,"line": 211,"col": 4},{"file": 26,"line": 1420,"col": 4,"docs": " Section contains executable machine instructions.\n"},{"file": 26,"line": 67,"col": 4},{"file": 26,"line": 171,"col": 4},{"file": 26,"line": 247,"col": 4},{"file": 26,"line": 138,"col": 4},{"file": 26,"line": 1487,"col": 4,"docs": " Section data local to process.\n"},{"file": 26,"line": 246,"col": 4},{"file": 26,"line": 1477,"col": 4,"docs": " All sections with the GPREL flag are grouped into a global data area\n for faster accesses\n"},{"file": 26,"line": 14,"col": 4},{"file": 26,"line": 540,"col": 4},{"file": 26,"line": 181,"col": 4},{"file": 26,"line": 548,"col": 4},{"file": 26,"line": 238,"col": 4},{"file": 26,"line": 297,"col": 4},{"file": 26,"line": 1454,"col": 4,"docs": " Bits indicating processor-specific flags.\n"},{"file": 26,"line": 72,"col": 4},{"file": 26,"line": 1429,"col": 4,"docs": " A field in this section holds a section header table index.\n"},{"file": 26,"line": 66,"col": 4},{"file": 26,"line": 177,"col": 4},{"file": 26,"line": 580,"col": 4},{"file": 26,"line": 1490,"col": 4,"docs": " Do not strip this section.\n"},{"file": 26,"line": 2,"col": 0},{"file": 26,"line": 4,"col": 0},{"file": 26,"line": 6,"col": 0},{"file": 26,"line": 1,"col": 0},{"file": 26,"line": 8,"col": 0},{"file": 26,"line": 0,"col": 0},{"file": 26,"line": 7,"col": 0},{"file": 26,"line": 3,"col": 0},{"file": 26,"line": 5,"col": 0},{"file": 27,"line": 100,"col": 4,"fields": [8645]},{"file": 27,"line": 911,"col": 4},{"file": 27,"line": 28,"col": 4,"docs": " The application's chosen I/O mode. This defaults to `Mode.blocking` but can be overridden\n by `root.event_loop`.\n"},{"file": 27,"line": 86,"col": 4},{"file": 27,"line": 652,"col": 4,"docs": " Implementation of OutStream trait for Buffer\n"},{"file": 27,"line": 48,"col": 4,"fields": []},{"file": 27,"line": 1106,"col": 4,"docs": " Creates a serializer that serializes types to any stream.\n  If `is_packed` is true, the data will be bit-packed into the stream.\n  Note that the you must call `serializer.flush()` when you are done\n  writing bit-packed data in order ensure any unwritten bits are committed.\n  If `is_packed` is false, data is packed to the smallest byte. In the case\n  of packed structs, the struct will written bit-packed and with the specified\n  endianess, after which data will resume being written at the next byte boundary.\n  Types may implement a custom serialization routine with a\n  function named `serialize` in the form of:\n    pub fn serialize(self: Self, serializer: var) !void\n  which will be called when the serializer is used to serialize that type. It will\n  pass a const pointer to the type instance to be serialized and a pointer\n  to the serializer struct.\n","fields": [8646,8647,8648]},{"file": 27,"line": 673,"col": 4,"docs": " Creates a stream which allows for writing bit fields to another stream\n","fields": [8649,8650]},{"file": 27,"line": 587,"col": 4,"fields": [8651]},{"file": 27,"line": 324,"col": 4,"docs": " Creates a stream which allows for reading bit fields from another stream\n","fields": [8652,8653]},{"file": 27,"line": 18,"col": 4},{"file": 27,"line": 526,"col": 4},{"file": 27,"line": 801,"col": 4},{"file": 27,"line": 529,"col": 4,"docs": " An OutStream that doesn't write to anything.\n"},{"file": 27,"line": 849,"col": 4,"docs": " Reads all characters until the next newline into buf, and returns\n a slice of the characters read (excluding the newline character(s)).\n","fields": [8654,8655]},{"file": 27,"line": 87,"col": 4},{"file": 27,"line": 229,"col": 4,"docs": " Creates a stream which supports 'un-reading' data, so that it can be read again.\n This makes look-ahead style parsing much easier.\n","fields": [8656,8657]},{"file": 27,"line": 34,"col": 4},{"file": 27,"line": 591,"col": 4,"fields": [8658,8659]},{"file": 27,"line": 928,"col": 4,"docs": " Creates a deserializer that deserializes types from any stream.\n  If `is_packed` is true, the data stream is treated as bit-packed,\n  otherwise data is expected to be packed to the smallest byte.\n  Types may implement a custom deserialization routine with a\n  function named `deserialize` in the form of:\n    pub fn deserialize(self: *Self, deserializer: var) !void\n  which will be called when the deserializer is used to deserialize\n  that type. It will pass a pointer to the type instance to deserialize\n  into and a pointer to the deserializer struct.\n","fields": [8660,8661,8662]},{"file": 27,"line": 842,"col": 4,"fields": [8663]},{"file": 27,"line": 293,"col": 4},{"file": 27,"line": 890,"col": 4,"docs": " Reads all characters until the next newline into slice, and returns\n a slice of the characters read (excluding the newline character(s)).\n","fields": [8664,8665]},{"file": 27,"line": 104,"col": 4,"fields": [8666,8667]},{"file": 27,"line": 85,"col": 4},{"file": 27,"line": 88,"col": 4},{"file": 27,"line": 472,"col": 4,"docs": " This is a simple OutStream that writes to a fixed buffer, and returns an error\n when it runs out of space.\n"},{"file": 27,"line": 96,"col": 4,"docs": " Deprecated; use `std.fs.Dir.readFileAlloc`.\n","fields": [8668,8669]},{"file": 27,"line": 84,"col": 4},{"file": 27,"line": 91,"col": 4,"docs": " Deprecated; use `std.fs.Dir.writeFile`.\n","fields": [8670,8671]},{"file": 27,"line": 883,"col": 4,"fields": [8672]},{"file": 27,"line": 551,"col": 4,"docs": " An OutStream that counts how many bytes has been written to it.\n","fields": [8673]},{"file": 27,"line": 80,"col": 4,"fields": []},{"file": 27,"line": 1,"col": 0},{"file": 27,"line": 5,"col": 0},{"file": 27,"line": 8,"col": 0},{"file": 27,"line": 6,"col": 0},{"file": 27,"line": 13,"col": 0},{"file": 27,"line": 16,"col": 0},{"file": 27,"line": 525,"col": 0},{"file": 27,"line": 12,"col": 0},{"file": 27,"line": 14,"col": 0},{"file": 27,"line": 36,"col": 0,"fields": []},{"file": 27,"line": 2,"col": 0},{"file": 27,"line": 68,"col": 0,"fields": []},{"file": 27,"line": 0,"col": 0},{"file": 27,"line": 3,"col": 0},{"file": 27,"line": 11,"col": 0},{"file": 27,"line": 9,"col": 0},{"file": 27,"line": 15,"col": 0},{"file": 27,"line": 7,"col": 0},{"file": 27,"line": 10,"col": 0},{"file": 28,"line": 8,"col": 4},{"file": 28,"line": 1563,"col": 4,"fields": [8674]},{"file": 28,"line": 580,"col": 4,"fields": [8675,8676,8677,8678,8679]},{"file": 28,"line": 707,"col": 4,"fields": [8680,8681,8682,8683,8684]},{"file": 28,"line": 1029,"col": 4},{"file": 28,"line": 1537,"col": 4,"fields": [8685]},{"file": 28,"line": 612,"col": 4,"fields": [8686,8687,8688,8689,8690]},{"file": 28,"line": 1077,"col": 4},{"file": 28,"line": 852,"col": 4,"fields": [8691,8692,8693,8694,8695,8696]},{"file": 28,"line": 1129,"col": 4,"fields": [8697,8698,8699]},{"file": 28,"line": 16,"col": 4},{"file": 28,"line": 1117,"col": 4},{"file": 28,"line": 990,"col": 4,"fields": [8700,8701,8702,8703,8704]},{"file": 28,"line": 1127,"col": 4},{"file": 28,"line": 1570,"col": 4,"fields": [8705,8706]},{"file": 28,"line": 592,"col": 4,"fields": [8707,8708,8709,8710,8711]},{"file": 28,"line": 10,"col": 4},{"file": 28,"line": 3,"col": 0},{"file": 28,"line": 4,"col": 0},{"file": 28,"line": 1104,"col": 0},{"file": 28,"line": 1138,"col": 0,"fields": [8712,8713]},{"file": 28,"line": 1,"col": 0},{"file": 28,"line": 5,"col": 0},{"file": 28,"line": 23,"col": 0,"fields": [8714,8715,8716]},{"file": 28,"line": 998,"col": 0},{"file": 28,"line": 541,"col": 0,"fields": [8717,8718,8719,8720,8721,8722]},{"file": 28,"line": 34,"col": 0,"fields": [8723]},{"file": 28,"line": 914,"col": 0,"fields": [8724,8725,8726,8727,8728,8729,8730]},{"file": 28,"line": 1524,"col": 0,"fields": [8731,8732,8733]},{"file": 28,"line": 1160,"col": 0,"fields": [8734,8735,8736,8737,8738]},{"file": 28,"line": 0,"col": 0},{"file": 28,"line": 1002,"col": 0,"fields": [8739,8740]},{"file": 28,"line": 6,"col": 0},{"file": 28,"line": 2,"col": 0},{"file": 29,"line": 1,"col": 4},{"file": 29,"line": 2,"col": 4},{"file": 29,"line": 0,"col": 4},{"file": 30,"line": 423,"col": 4},{"file": 30,"line": 356,"col": 4,"docs": " The following variable length array appears immediately after the header.\n The structure definition follows.\n LineBlockFragmentHeader Blocks[]\n Each `LineBlockFragmentHeader` as specified below.\n"},{"file": 30,"line": 17,"col": 4},{"file": 30,"line": 311,"col": 4},{"file": 30,"line": 53,"col": 4},{"file": 30,"line": 40,"col": 4},{"file": 30,"line": 378,"col": 4,"docs": " The following two variable length arrays appear immediately after the\n header.  The structure definitions follow.\n LineNumberEntry   Lines[NumLines];\n ColumnNumberEntry Columns[NumLines];\n"},{"file": 30,"line": 451,"col": 4},{"file": 30,"line": 390,"col": 4},{"file": 30,"line": 406,"col": 4},{"file": 30,"line": 443,"col": 4},{"file": 30,"line": 328,"col": 4},{"file": 30,"line": 344,"col": 4},{"file": 30,"line": 462,"col": 4},{"file": 30,"line": 71,"col": 4},{"file": 30,"line": 103,"col": 4},{"file": 30,"line": 112,"col": 4,"docs": " Duplicate copy of SymbolRecordKind, but using the official CV names. Useful\n for reference purposes and when dealing with unknown record types.\n"},{"file": 30,"line": 313,"col": 4},{"file": 30,"line": 412,"col": 4,"docs": " Checksum bytes follow.\n"},{"file": 30,"line": 79,"col": 4},{"file": 30,"line": 339,"col": 4},{"file": 30,"line": 368,"col": 4},{"file": 30,"line": 0,"col": 0},{"file": 30,"line": 582,"col": 0},{"file": 30,"line": 7,"col": 0},{"file": 30,"line": 3,"col": 0},{"file": 30,"line": 1,"col": 0},{"file": 30,"line": 628,"col": 0},{"file": 30,"line": 5,"col": 0},{"file": 30,"line": 8,"col": 0},{"file": 30,"line": 9,"col": 0},{"file": 30,"line": 577,"col": 0,"fields": [8741,8742]},{"file": 30,"line": 2,"col": 0},{"file": 30,"line": 6,"col": 0},{"file": 30,"line": 11,"col": 0},{"file": 30,"line": 492,"col": 0},{"file": 30,"line": 4,"col": 0},{"file": 31,"line": 256,"col": 4},{"file": 31,"line": 32,"col": 4},{"file": 31,"line": 24,"col": 4},{"file": 31,"line": 0,"col": 0},{"file": 31,"line": 21,"col": 0},{"file": 31,"line": 12,"col": 0},{"file": 31,"line": 22,"col": 0},{"file": 31,"line": 20,"col": 0},{"file": 31,"line": 235,"col": 0},{"file": 31,"line": 18,"col": 0},{"file": 31,"line": 11,"col": 0},{"file": 31,"line": 1,"col": 0},{"file": 31,"line": 4,"col": 0},{"file": 31,"line": 260,"col": 0},{"file": 31,"line": 5,"col": 0},{"file": 31,"line": 245,"col": 0},{"file": 31,"line": 225,"col": 0},{"file": 31,"line": 17,"col": 0},{"file": 31,"line": 13,"col": 0},{"file": 31,"line": 2,"col": 0},{"file": 31,"line": 7,"col": 0},{"file": 31,"line": 3,"col": 0},{"file": 32,"line": 6,"col": 4},{"file": 32,"line": 10,"col": 4},{"file": 32,"line": 24,"col": 4},{"file": 32,"line": 32,"col": 4},{"file": 32,"line": 19,"col": 4},{"file": 32,"line": 5,"col": 4},{"file": 32,"line": 21,"col": 4},{"file": 32,"line": 22,"col": 4},{"file": 32,"line": 15,"col": 4},{"file": 32,"line": 27,"col": 4},{"file": 32,"line": 25,"col": 4},{"file": 32,"line": 13,"col": 4},{"file": 32,"line": 14,"col": 4},{"file": 32,"line": 1,"col": 4},{"file": 32,"line": 18,"col": 4},{"file": 32,"line": 28,"col": 4},{"file": 32,"line": 9,"col": 4},{"file": 32,"line": 4,"col": 4},{"file": 32,"line": 29,"col": 4},{"file": 32,"line": 12,"col": 0},{"file": 32,"line": 31,"col": 0},{"file": 32,"line": 0,"col": 0},{"file": 32,"line": 3,"col": 0},{"file": 32,"line": 17,"col": 0},{"file": 33,"line": 74,"col": 4,"fields": [8743]},{"file": 33,"line": 161,"col": 4,"fields": [8744]},{"file": 33,"line": 545,"col": 4,"docs": " Given a type and a name, return the field index according to source order.\n Returns `null` if the field is not found.\n","fields": [8745,8746]},{"file": 33,"line": 530,"col": 4},{"file": 33,"line": 278,"col": 4,"fields": [8747,8748]},{"file": 33,"line": 341,"col": 4,"docs": "Returns the active tag of a tagged union\n","fields": [8749]},{"file": 33,"line": 197,"col": 4,"fields": [8750,8751]},{"file": 33,"line": 7,"col": 4},{"file": 33,"line": 318,"col": 4,"fields": [8752]},{"file": 33,"line": 118,"col": 4,"fields": [8753]},{"file": 33,"line": 12,"col": 4,"fields": [8754]},{"file": 33,"line": 532,"col": 4,"fields": [8755,8756]},{"file": 33,"line": 366,"col": 4,"docs": "Given a tagged union type, and an enum, return the type of the union\n field corresponding to the enum tag.\n","fields": [8757,8758]},{"file": 33,"line": 55,"col": 4,"fields": [8759,8760]},{"file": 33,"line": 233,"col": 4,"fields": [8761]},{"file": 33,"line": 3,"col": 0},{"file": 33,"line": 1,"col": 0},{"file": 33,"line": 4,"col": 0},{"file": 33,"line": 0,"col": 0},{"file": 33,"line": 2,"col": 0},{"file": 33,"line": 9,"col": 0},{"file": 33,"line": 5,"col": 0},{"file": 33,"line": 10,"col": 0},{"file": 34,"line": 1345,"col": 4,"docs": " Same as `createFileAbsolute` but the path parameter is null-terminated.\n","fields": [8762,8763]},{"file": 34,"line": 1316,"col": 4,"docs": " Opens a file for reading or writing, without attempting to create a new file, based on an absolute path.\n Call `File.close` to release the resource.\n Asserts that the path is absolute. See `Dir.openFile` for a function that\n operates on both absolute and relative paths.\n Asserts that the path parameter has no null bytes. See `openFileAbsoluteC` for a function\n that accepts a null-terminated path.\n","fields": [8764,8765]},{"file": 34,"line": 1377,"col": 4},{"file": 34,"line": 296,"col": 4,"docs": " Calls makeDir recursively to make an entire path. Returns success if the path\n already exists and is a directory.\n This function is not atomic, and if it returns an error, the file system may\n have been modified regardless.\n TODO determine if we can remove the allocator requirement from this function\n","fields": [8766,8767]},{"file": 34,"line": 29,"col": 4,"docs": " This represents the maximum size of a UTF-8 encoded file path.\n All file system operations which return a path are guaranteed to\n fit into a UTF-8 encoded array of this length.\n The byte count includes room for a null sentinel byte.\n"},{"file": 34,"line": 1470,"col": 4,"docs": " Read value of a symbolic link.\n The return value is a slice of buffer, from index `0`.\n","fields": [8768,8769]},{"file": 34,"line": 340,"col": 4,"docs": " Same as `deleteDir` except the parameter is a null-terminated UTF16LE-encoded string.\n","fields": [8770]},{"file": 34,"line": 1446,"col": 4,"docs": " Recursively iterates over a directory.\n Must call `Walker.deinit` when done.\n `dir_path` must not end in a path separator.\n The order of returned file system entries is undefined.\n","fields": [8771,8772]},{"file": 34,"line": 18,"col": 4},{"file": 34,"line": 1515,"col": 4,"docs": " Get the path to the current executable.\n If you only need the directory, use selfExeDirPath.\n If you only want an open file handle, use openSelfExe.\n This function may return an error if the current executable\n was deleted after spawning.\n Returned value is a slice of out_buffer.\n\n On Linux, depends on procfs being mounted. If the currently executing binary has\n been deleted, the file path looks something like `/a/b/c/exe (deleted)`.\n TODO make the return type of this a null terminated pointer\n","fields": [8773]},{"file": 34,"line": 1339,"col": 4,"docs": " Creates, opens, or overwrites a file with write access, based on an absolute path.\n Call `File.close` to release the resource.\n Asserts that the path is absolute. See `Dir.createFile` for a function that\n operates on both absolute and relative paths.\n Asserts that the path parameter has no null bytes. See `createFileAbsoluteC` for a function\n that accepts a null-terminated path.\n","fields": [8774,8775]},{"file": 34,"line": 90,"col": 4,"docs": " Check the file size, mtime, and mode of `source_path` and `dest_path`. If they are equal, does nothing.\n Otherwise, atomically copies `source_path` to `dest_path`. The destination file gains the mtime,\n atime, and mode of the source file so that the next call to `updateFile` will not need a copy.\n Returns the previous status of the file before updating.\n If any of the directories do not exist for dest_path, they are created.\n TODO https://github.com/ziglang/zig/issues/2885\n","fields": [8776,8777,8778]},{"file": 34,"line": 23,"col": 4},{"file": 34,"line": 16,"col": 4},{"file": 34,"line": 330,"col": 4,"docs": " Returns `error.DirNotEmpty` if the directory is not empty.\n To delete a directory recursively, see `deleteTree`.\n","fields": [8779]},{"file": 34,"line": 161,"col": 4,"docs": " Guaranteed to be atomic. However until https://patchwork.kernel.org/patch/9636735/ is\n merged and readily available,\n there is a possibility of power loss or application termination leaving temporary files present\n in the same directory as dest_path.\n Destination file will have the same mode as the source file.\n","fields": [8780,8781]},{"file": 34,"line": 366,"col": 4},{"file": 34,"line": 13,"col": 4},{"file": 34,"line": 10,"col": 4},{"file": 34,"line": 184,"col": 4,"docs": " Guaranteed to be atomic. However until https://patchwork.kernel.org/patch/9636735/ is\n merged and readily available,\n there is a possibility of power loss or application termination leaving temporary files present\n","fields": [8782,8783,8784]},{"file": 34,"line": 1372,"col": 4,"docs": " Same as `deleteFileAbsolute` except the parameter is WTF-16 encoded.\n","fields": [8785]},{"file": 34,"line": 1366,"col": 4,"docs": " Same as `deleteFileAbsolute` except the parameter is null-terminated.\n","fields": [8786]},{"file": 34,"line": 1581,"col": 4,"docs": " `realpath`, except caller must free the returned memory.\n","fields": [8787,8788]},{"file": 34,"line": 349,"col": 4,"docs": " Removes a symlink, file, or directory.\n If `full_path` is relative, this is equivalent to `Dir.deleteTree` with the\n current working directory as the open directory handle.\n If `full_path` is absolute, this is equivalent to `Dir.deleteTree` with the\n base directory.\n","fields": [8789]},{"file": 34,"line": 1503,"col": 4},{"file": 34,"line": 1360,"col": 4,"docs": " Delete a file name and possibly the file it refers to, based on an absolute path.\n Asserts that the path is absolute. See `Dir.deleteFile` for a function that\n operates on both absolute and relative paths.\n Asserts that the path parameter has no null bytes.\n","fields": [8790]},{"file": 34,"line": 17,"col": 4},{"file": 34,"line": 277,"col": 4,"docs": " Create a new directory.\n","fields": [8791]},{"file": 34,"line": 1328,"col": 4,"docs": " Same as `openFileAbsolute` but the path parameter is WTF-16 encoded.\n","fields": [8792,8793]},{"file": 34,"line": 1556,"col": 4,"docs": " `selfExeDirPath` except allocates the result on the heap.\n Caller owns returned memory.\n","fields": [8794]},{"file": 34,"line": 15,"col": 4},{"file": 34,"line": 14,"col": 4},{"file": 34,"line": 1479,"col": 4},{"file": 34,"line": 201,"col": 4},{"file": 34,"line": 287,"col": 4,"docs": " Same as `makeDir` except the parameter is a null-terminated UTF16LE-encoded string.\n","fields": [8795]},{"file": 34,"line": 80,"col": 4,"fields": [8796,8797]},{"file": 34,"line": 11,"col": 4},{"file": 34,"line": 1351,"col": 4,"docs": " Same as `createFileAbsolute` but the path parameter is WTF-16 encoded.\n","fields": [8798,8799]},{"file": 34,"line": 40,"col": 4,"docs": " Base64, replacing the standard `+/` with `-_` so that it can be used in a file name on any filesystem.\n"},{"file": 34,"line": 19,"col": 4},{"file": 34,"line": 22,"col": 4},{"file": 34,"line": 20,"col": 4},{"file": 34,"line": 1549,"col": 4,"docs": " The result is UTF16LE-encoded.\n","fields": []},{"file": 34,"line": 1563,"col": 4,"docs": " Get the directory path that contains the current executable.\n Returned value is a slice of out_buffer.\n","fields": [8800]},{"file": 34,"line": 335,"col": 4,"docs": " Same as `deleteDir` except the parameter is a null-terminated UTF8-encoded string.\n","fields": [8801]},{"file": 34,"line": 282,"col": 4,"docs": " Same as `makeDir` except the parameter is a null-terminated UTF8-encoded string.\n","fields": [8802]},{"file": 34,"line": 46,"col": 4,"docs": " TODO remove the allocator requirement from this API\n","fields": [8803,8804,8805]},{"file": 34,"line": 1475,"col": 4,"docs": " Same as `readLink`, except the parameter is null-terminated.\n","fields": [8806,8807]},{"file": 34,"line": 0,"col": 0},{"file": 34,"line": 8,"col": 0},{"file": 34,"line": 2,"col": 0},{"file": 34,"line": 6,"col": 0},{"file": 34,"line": 4,"col": 0},{"file": 34,"line": 5,"col": 0},{"file": 34,"line": 1,"col": 0},{"file": 34,"line": 274,"col": 0},{"file": 34,"line": 75,"col": 0},{"file": 34,"line": 7,"col": 0},{"file": 34,"line": 3,"col": 0},{"file": 35,"line": 663,"col": 4},{"file": 35,"line": 36,"col": 4,"docs": " This allocator makes a syscall directly for every allocation and free.\n Thread-safe and lock-free.\n"},{"file": 35,"line": 11,"col": 4},{"file": 35,"line": 601,"col": 4},{"file": 35,"line": 717,"col": 4,"fields": [8808,8809]},{"file": 35,"line": 514,"col": 4,"docs": " This allocator takes an existing allocator, wraps it, and provides an interface\n where you can allocate without freeing, and then free it all together.\n"},{"file": 35,"line": 414,"col": 4},{"file": 35,"line": 15,"col": 4},{"file": 35,"line": 53,"col": 4,"docs": " Deprecated. Use `page_allocator`.\n"},{"file": 35,"line": 729,"col": 4,"fields": [8810]},{"file": 35,"line": 7,"col": 0},{"file": 35,"line": 43,"col": 0},{"file": 35,"line": 984,"col": 0,"fields": [8811,8812]},{"file": 35,"line": 1037,"col": 0,"fields": [8813]},{"file": 35,"line": 1,"col": 0},{"file": 35,"line": 47,"col": 0},{"file": 35,"line": 253,"col": 0,"fields": [8814]},{"file": 35,"line": 9,"col": 0},{"file": 35,"line": 0,"col": 0},{"file": 35,"line": 8,"col": 0},{"file": 35,"line": 956,"col": 0,"fields": [8815]},{"file": 35,"line": 28,"col": 0,"fields": [8816,8817,8818,8819,8820]},{"file": 35,"line": 21,"col": 0,"fields": [8821,8822,8823,8824,8825]},{"file": 35,"line": 888,"col": 0},{"file": 35,"line": 1008,"col": 0,"fields": [8826]},{"file": 35,"line": 6,"col": 0},{"file": 35,"line": 256,"col": 0},{"file": 35,"line": 254,"col": 0,"fields": [8827,8828]},{"file": 35,"line": 2,"col": 0},{"file": 35,"line": 4,"col": 0},{"file": 35,"line": 16,"col": 0},{"file": 35,"line": 13,"col": 0},{"file": 35,"line": 3,"col": 0},{"file": 35,"line": 5,"col": 0},{"file": 35,"line": 55,"col": 0},{"file": 36,"line": 4,"col": 0},{"file": 36,"line": 2,"col": 0},{"file": 36,"line": 196,"col": 0,"fields": [8829,8830,8831]},{"file": 36,"line": 3,"col": 0},{"file": 36,"line": 8,"col": 0},{"file": 36,"line": 53,"col": 0,"fields": []},{"file": 36,"line": 15,"col": 0},{"file": 36,"line": 204,"col": 0},{"file": 36,"line": 233,"col": 0,"fields": [8832]},{"file": 36,"line": 59,"col": 0,"fields": [8833,8834]},{"file": 36,"line": 6,"col": 0},{"file": 36,"line": 19,"col": 0},{"file": 36,"line": 125,"col": 0,"fields": []},{"file": 36,"line": 10,"col": 0},{"file": 36,"line": 45,"col": 0,"fields": [8835,8836,8837]},{"file": 36,"line": 5,"col": 0},{"file": 37,"line": 99,"col": 4,"docs": " A monotonic high-performance timer.\n Timer.start() must be called to initialize the struct, which captures\n   the counter frequency on windows and darwin, records the resolution,\n   and gives the user an opportunity to check for the existnece of\n   monotonic clocks without forcing them to check for error on each read.\n .resolution is in nanoseconds on all platforms but .start_time's meaning\n   depends on the OS. On Windows and Darwin it is a hardware counter\n   value that requires calculation to convert to a meaninful unit.\n"},{"file": 37,"line": 73,"col": 4},{"file": 37,"line": 31,"col": 4,"docs": " Get the posix timestamp, UTC, in milliseconds\n TODO audit this function. is it possible to return an error?\n","fields": []},{"file": 37,"line": 88,"col": 4},{"file": 37,"line": 10,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.\n","fields": [8838]},{"file": 37,"line": 89,"col": 4},{"file": 37,"line": 77,"col": 4},{"file": 37,"line": 80,"col": 4,"docs": " Divisions of a second\n"},{"file": 37,"line": 87,"col": 4},{"file": 37,"line": 72,"col": 4,"docs": " Multiples of a base unit (nanoseconds)\n"},{"file": 37,"line": 75,"col": 4},{"file": 37,"line": 25,"col": 4,"docs": " Get the posix timestamp, UTC, in seconds\n TODO audit this function. is it possible to return an error?\n","fields": []},{"file": 37,"line": 7,"col": 4},{"file": 37,"line": 76,"col": 4},{"file": 37,"line": 74,"col": 4},{"file": 37,"line": 86,"col": 4,"docs": " Common time divisions\n"},{"file": 37,"line": 82,"col": 4},{"file": 37,"line": 81,"col": 4},{"file": 37,"line": 83,"col": 4},{"file": 37,"line": 0,"col": 0},{"file": 37,"line": 5,"col": 0},{"file": 37,"line": 1,"col": 0},{"file": 37,"line": 4,"col": 0},{"file": 37,"line": 3,"col": 0},{"file": 37,"line": 2,"col": 0},{"file": 44,"line": 42,"col": 8,"docs": " Represents one unit of progress. Each node can have children nodes, or\n one can use integers with `update`.\n"},{"file": 57,"line": 19,"col": 8,"fields": []},{"file": 57,"line": 34,"col": 8,"fields": [8839]},{"file": 57,"line": 27,"col": 8,"fields": [8840]},{"file": 57,"line": 23,"col": 8,"fields": [8841]},{"file": 57,"line": 11,"col": 8},{"file": 57,"line": 6,"col": 4},{"file": 38,"line": 23,"col": 4,"docs": " Caller must free the returned memory.\n","fields": [8842]},{"file": 38,"line": 37,"col": 4,"docs": " Caller must free result when done.\n TODO make this go through libc when we have it\n","fields": [8843]},{"file": 38,"line": 13,"col": 4},{"file": 38,"line": 14,"col": 4},{"file": 38,"line": 347,"col": 4},{"file": 38,"line": 171,"col": 4},{"file": 38,"line": 454,"col": 4,"fields": [8844,8845]},{"file": 38,"line": 599,"col": 4,"fields": []},{"file": 38,"line": 515,"col": 4,"docs": " TODO this reads /etc/passwd. But sometimes the user/id mapping is in something else\n like NIS, AD, etc. See `man nss` or look at an strace for `id myuser`.\n","fields": [8846]},{"file": 38,"line": 15,"col": 4},{"file": 38,"line": 389,"col": 4,"docs": " Caller must call argsFree on result.\n","fields": [8847]},{"file": 38,"line": 500,"col": 4},{"file": 38,"line": 18,"col": 4,"docs": " The result is a slice of `out_buffer`, from index `0`.\n","fields": [8848]},{"file": 38,"line": 198,"col": 4},{"file": 38,"line": 120,"col": 4},{"file": 38,"line": 506,"col": 4,"docs": " POSIX function which gets a uid from username.\n","fields": [8849]},{"file": 38,"line": 12,"col": 4},{"file": 38,"line": 384,"col": 4,"fields": []},{"file": 38,"line": 0,"col": 0},{"file": 38,"line": 4,"col": 0},{"file": 38,"line": 7,"col": 0},{"file": 38,"line": 491,"col": 0,"fields": [8850,8851]},{"file": 38,"line": 1,"col": 0},{"file": 38,"line": 2,"col": 0},{"file": 38,"line": 5,"col": 0},{"file": 38,"line": 10,"col": 0},{"file": 38,"line": 3,"col": 0},{"file": 38,"line": 8,"col": 0},{"file": 38,"line": 9,"col": 0},{"file": 38,"line": 6,"col": 0},{"file": 39,"line": 648,"col": 4,"docs": " compiler -O level: name,,NO_SECT,0,0\n"},{"file": 39,"line": 470,"col": 4,"docs": " the object file has no undefined references\n"},{"file": 39,"line": 357,"col": 4,"docs": " local of info to split segments\n"},{"file": 39,"line": 372,"col": 4,"docs": " compressed dyld information only\n"},{"file": 39,"line": 539,"col": 4,"docs": " Contains a section of type S_THREAD_LOCAL_VARIABLES\n"},{"file": 39,"line": 293,"col": 4,"docs": " fixed VM file inclusion (internal use)\n"},{"file": 39,"line": 591,"col": 4,"docs": " global symbol: name,,NO_SECT,type,0\n"},{"file": 39,"line": 570,"col": 4,"docs": " section with only 4 byte literals\n"},{"file": 39,"line": 323,"col": 4,"docs": " sub umbrella\n"},{"file": 39,"line": 384,"col": 4,"docs": " compressed table of function start addresses\n"},{"file": 39,"line": 281,"col": 4,"docs": " unix thread (includes a stack)\n"},{"file": 39,"line": 332,"col": 4,"docs": " two-level namespace lookup hints\n"},{"file": 39,"line": 411,"col": 4,"docs": " build for AppleTV min OS version\n"},{"file": 39,"line": 582,"col": 4,"docs": " private external symbol bit\n"},{"file": 39,"line": 558,"col": 4,"docs": "  24 section attributes\n"},{"file": 39,"line": 660,"col": 4,"docs": " left bracket: 0,,NO_SECT,nesting level,address\n"},{"file": 39,"line": 75,"col": 4,"docs": " The segment load command indicates that a part of this file is to be\n mapped into the task's address space.  The size of this segment in memory,\n vmsize, maybe equal to or larger than the amount to map from this file,\n filesize.  The file is mapped starting at fileoff to the beginning of\n the segment in memory, vmaddr.  The rest of the memory of the segment,\n if any, is allocated zero fill on demand.  The segment's maximum virtual\n memory protection and initial virtual memory protection are specified\n by the maxprot and initprot fields.  If the segment has sections then the\n section structures directly follow the segment command and their size is\n reflected in cmdsize.\n"},{"file": 39,"line": 0,"col": 4},{"file": 39,"line": 657,"col": 4,"docs": " alternate entry: name,,n_sect,linenumber,address\n"},{"file": 39,"line": 314,"col": 4,"docs": " modules prebound for a dynamically\n"},{"file": 39,"line": 527,"col": 4,"docs": " When this bit is set, the binary declares it is safe for use in processes when issetugid() is true\n"},{"file": 39,"line": 476,"col": 4,"docs": " the object file is input for the dynamic linker and can't be staticly link edited again\n"},{"file": 39,"line": 612,"col": 4,"docs": " emitted with gcc2_compiled and in gcc source\n"},{"file": 39,"line": 573,"col": 4,"docs": " section with only 8 byte literals\n"},{"file": 39,"line": 447,"col": 4,"docs": " preloaded executable file\n"},{"file": 39,"line": 678,"col": 4,"docs": " second stab entry with length information\n"},{"file": 39,"line": 450,"col": 4,"docs": " dynamically bound shared library\n"},{"file": 39,"line": 606,"col": 4,"docs": " begin nsect sym: 0,,n_sect,0,address\n"},{"file": 39,"line": 567,"col": 4,"docs": " section with only literal C string\n"},{"file": 39,"line": 205,"col": 4},{"file": 39,"line": 326,"col": 4,"docs": " sub client\n"},{"file": 39,"line": 456,"col": 4,"docs": " dynamically bound bundle file\n"},{"file": 39,"line": 675,"col": 4,"docs": " end common (local name): 0,,n_sect,0,address\n"},{"file": 39,"line": 345,"col": 4,"docs": " 64-bit image routines\n"},{"file": 39,"line": 366,"col": 4,"docs": " encrypted segment information\n"},{"file": 39,"line": 515,"col": 4,"docs": " the final linked image contains external weak symbols\n"},{"file": 39,"line": 494,"col": 4,"docs": " the executable is forcing all images to use flat name space bindings\n"},{"file": 39,"line": 509,"col": 4,"docs": " safe to divide up the sections into sub-sections via symbols for dead code stripping\n"},{"file": 39,"line": 453,"col": 4,"docs": " dynamic link editor\n"},{"file": 39,"line": 536,"col": 4,"docs": " Only for use on dylibs.  When linking against a dylib that has this bit set, the static linker will automatically not create a LC_LOAD_DYLIB load command to the dylib if no symbols are being referenced from the dylib.\n"},{"file": 39,"line": 299,"col": 4,"docs": " dynamic link-edit symbol table info\n"},{"file": 39,"line": 29,"col": 4,"docs": " The symtab_command contains the offsets and sizes of the link-edit 4.3BSD\n \"stab\" style symbol table information as described in the header files\n <nlist.h> and <stab.h>.\n"},{"file": 39,"line": 296,"col": 4,"docs": " prepage command (internal use)\n"},{"file": 39,"line": 530,"col": 4,"docs": " When this bit is set on a dylib, the static linker does not need to examine dependent dylibs to see if any are re-exported\n"},{"file": 39,"line": 278,"col": 4,"docs": " thread\n"},{"file": 39,"line": 588,"col": 4,"docs": " external symbol bit, set for external symbols\n"},{"file": 39,"line": 618,"col": 4,"docs": " src line: 0,,n_sect,linenumber,address\n"},{"file": 39,"line": 405,"col": 4,"docs": " linker options in MH_OBJECT files\n"},{"file": 39,"line": 423,"col": 4,"docs": " the mach magic number\n"},{"file": 39,"line": 597,"col": 4,"docs": " procedure: name,,n_sect,linenumber,address\n"},{"file": 39,"line": 542,"col": 4,"docs": " When this bit is set, the OS will run the main executable with a non-executable heap even on platforms (e.g. i386) that don't require it. Only used in MH_EXECUTE filetypes.\n"},{"file": 39,"line": 690,"col": 4},{"file": 39,"line": 473,"col": 4,"docs": " the object file is the output of an incremental link against a base file and can't be link edited again\n"},{"file": 39,"line": 414,"col": 4,"docs": " build for Watch min OS version\n"},{"file": 39,"line": 545,"col": 4,"docs": " The code was linked for use in an application extension.\n"},{"file": 39,"line": 615,"col": 4,"docs": " register sym: name,,NO_SECT,type,register\n"},{"file": 39,"line": 393,"col": 4,"docs": " table of non-instructions in __text\n"},{"file": 39,"line": 441,"col": 4,"docs": " fixed VM shared library file\n"},{"file": 39,"line": 521,"col": 4,"docs": " When this bit is set, all stacks in the task will be given stack execution privilege.  Only used in MH_EXECUTE filetypes.\n"},{"file": 39,"line": 633,"col": 4,"docs": " local sym: name,,NO_SECT,type,offset\n"},{"file": 39,"line": 360,"col": 4,"docs": " load and re-export dylib\n"},{"file": 39,"line": 600,"col": 4,"docs": " static symbol: name,,n_sect,type,address\n"},{"file": 39,"line": 533,"col": 4,"docs": " When this bit is set, the OS will load the main executable at a random address.  Only used in MH_EXECUTE filetypes.\n"},{"file": 39,"line": 692,"col": 4},{"file": 39,"line": 369,"col": 4,"docs": " compressed dyld information\n"},{"file": 39,"line": 402,"col": 4,"docs": " 64-bit encrypted segment information\n"},{"file": 39,"line": 438,"col": 4,"docs": " demand paged executable file\n"},{"file": 39,"line": 426,"col": 4,"docs": " NXSwapInt(MH_MAGIC)\n"},{"file": 39,"line": 342,"col": 4,"docs": " 64-bit segment of this file to be mapped\n"},{"file": 39,"line": 518,"col": 4,"docs": " the final linked image uses weak symbols\n"},{"file": 39,"line": 284,"col": 4,"docs": " load a specified fixed VM shared library\n"},{"file": 39,"line": 479,"col": 4,"docs": " the object file's undefined references are bound by the dynamic linker when loaded.\n"},{"file": 39,"line": 497,"col": 4,"docs": " this umbrella guarantees no multiple defintions of symbols in its sub-images so the two-level namespace hints can always be used.\n"},{"file": 39,"line": 381,"col": 4,"docs": " build for iPhoneOS min OS version\n"},{"file": 39,"line": 112,"col": 4,"docs": " The 64-bit segment load command indicates that a part of this file is to be\n mapped into a 64-bit task's address space.  If the 64-bit segment has\n sections then section_64 structures directly follow the 64-bit segment\n command and their size is reflected in cmdsize.\n"},{"file": 39,"line": 10,"col": 4},{"file": 39,"line": 420,"col": 4,"docs": " build for platform min OS version\n"},{"file": 39,"line": 663,"col": 4,"docs": " deleted include file: name,,NO_SECT,0,sum\n"},{"file": 39,"line": 491,"col": 4,"docs": " the image is using two-level name space bindings\n"},{"file": 39,"line": 251,"col": 4},{"file": 39,"line": 503,"col": 4,"docs": " the binary is not prebound but can have its prebinding redone. only used when MH_PREBOUND is not set.\n"},{"file": 39,"line": 548,"col": 4,"docs": " The external symbols listed in the nlist symbol table do not include all the symbols listed in the dyld info.\n"},{"file": 39,"line": 688,"col": 4,"docs": " If a segment contains any sections marked with S_ATTR_DEBUG then all\n sections in that segment must have this attribute.  No section other than\n a section marked with this attribute may reference the contents of this\n section.  A section with this attribute may contain no symbols and must have\n a section type S_REGULAR.  The static linker will not copy section contents\n from sections with this attribute into its output file.  These sections\n generally contain DWARF debugging info.\n a debug section\n"},{"file": 39,"line": 329,"col": 4,"docs": " sub library\n"},{"file": 39,"line": 348,"col": 4,"docs": " the uuid\n"},{"file": 39,"line": 459,"col": 4,"docs": " shared library stub for static linking only, no section contents\n"},{"file": 39,"line": 272,"col": 4,"docs": " link-edit stab symbol table info\n"},{"file": 39,"line": 691,"col": 4},{"file": 39,"line": 666,"col": 4,"docs": " right bracket: 0,,NO_SECT,nesting level,address\n"},{"file": 39,"line": 564,"col": 4,"docs": " zero fill on demand section\n"},{"file": 39,"line": 396,"col": 4,"docs": " source version used to build binary\n"},{"file": 39,"line": 311,"col": 4,"docs": " dynamic linker identification\n"},{"file": 39,"line": 378,"col": 4,"docs": " build for MacOSX min OS version\n"},{"file": 39,"line": 243,"col": 4},{"file": 39,"line": 417,"col": 4,"docs": " arbitrary data included within a Mach-O file\n"},{"file": 39,"line": 594,"col": 4,"docs": " procedure name (f77 kludge): name,,NO_SECT,0,0\n"},{"file": 39,"line": 555,"col": 4,"docs": " The flags field of a section structure is separated into two parts a section\n type and section attributes.  The section types are mutually exclusive (it\n can only have one type) but the section attributes are not (it may have more\n than one attribute).\n 256 section types\n"},{"file": 39,"line": 561,"col": 4,"docs": " regular section\n"},{"file": 39,"line": 432,"col": 4,"docs": " NXSwapInt(MH_MAGIC_64)\n"},{"file": 39,"line": 375,"col": 4,"docs": " load upward dylib\n"},{"file": 39,"line": 506,"col": 4,"docs": " indicates that this binary binds to all two-level namespace modules of its dependent libraries. only used when MH_PREBINDABLE and MH_TWOLEVEL are both set.\n"},{"file": 39,"line": 287,"col": 4,"docs": " fixed VM shared library identification\n"},{"file": 39,"line": 485,"col": 4,"docs": " the file has its read-only and read-write segments split\n"},{"file": 39,"line": 488,"col": 4,"docs": " the shared library init routine is to be run lazily via catching memory faults to its writeable segments (obsolete)\n"},{"file": 39,"line": 636,"col": 4,"docs": " include file beginning: name,,NO_SECT,0,sum\n"},{"file": 39,"line": 524,"col": 4,"docs": " When this bit is set, the binary declares it is safe for use in processes with uid zero\n"},{"file": 39,"line": 693,"col": 4},{"file": 39,"line": 387,"col": 4,"docs": " string for dyld to treat like environment variable\n"},{"file": 39,"line": 290,"col": 4,"docs": " object identification info (obsolete)\n"},{"file": 39,"line": 609,"col": 4,"docs": " AST file path: name,,NO_SECT,0,0\n"},{"file": 39,"line": 354,"col": 4,"docs": " local of code signature\n"},{"file": 39,"line": 320,"col": 4,"docs": " sub framework\n"},{"file": 39,"line": 627,"col": 4,"docs": " source file name: name,,n_sect,0,address\n"},{"file": 39,"line": 21,"col": 4},{"file": 39,"line": 429,"col": 4,"docs": " the 64-bit mach magic number\n"},{"file": 39,"line": 305,"col": 4,"docs": " dynamically linked shared lib ident\n"},{"file": 39,"line": 351,"col": 4,"docs": " runpath additions\n"},{"file": 39,"line": 444,"col": 4,"docs": " core file\n"},{"file": 39,"line": 482,"col": 4,"docs": " the file has its dynamic undefined references prebound.\n"},{"file": 39,"line": 500,"col": 4,"docs": " do not have dyld notify the prebinding agent about this executable\n"},{"file": 39,"line": 170,"col": 4,"docs": " A segment is made up of zero or more sections.  Non-MH_OBJECT files have\n all of their segments with the proper sections in each, and padded to the\n specified segment alignment when produced by the link editor.  The first\n segment of a MH_EXECUTE and MH_FVMLIB format file contains the mach_header\n and load commands of the object file before its first section.  The zero\n fill sections are always last in their segment (in all formats).  This\n allows the zeroed segment padding to be mapped into memory where zero fill\n sections might be. The gigabyte zero fill sections, those with the section\n type S_GB_ZEROFILL, can only be in a segment with sections of this type.\n These segments are then placed after all other segments.\n\n The MH_OBJECT format has all of its sections in one segment for\n compactness.  There is no padding to a specified segment boundary and the\n mach_header and load commands are not part of the segment.\n\n Sections with the same section name, sectname, going into the same segment,\n segname, are combined by the link editor.  The resulting section is aligned\n to the maximum alignment of the combined sections and is the new section's\n alignment.  The combined sections are aligned to their original alignment in\n the combined section.  Any padded bytes to get the specified alignment are\n zeroed.\n\n The format of the relocation entries referenced by the reloff and nreloc\n fields of the section structure for mach object files is described in the\n header file <reloc.h>.\n"},{"file": 39,"line": 639,"col": 4,"docs": " #included file name: name,,n_sect,0,address\n"},{"file": 39,"line": 672,"col": 4,"docs": " end common: name,,n_sect,0,0\n"},{"file": 39,"line": 603,"col": 4,"docs": " .lcomm symbol: name,,n_sect,type,address\n"},{"file": 39,"line": 275,"col": 4,"docs": " link-edit gdb symbol table info (obsolete)\n"},{"file": 39,"line": 651,"col": 4,"docs": " parameter: name,,NO_SECT,type,offset\n"},{"file": 39,"line": 645,"col": 4,"docs": " compiler version: name,,NO_SECT,0,0\n"},{"file": 39,"line": 669,"col": 4,"docs": " begin common: name,,NO_SECT,0,0\n"},{"file": 39,"line": 363,"col": 4,"docs": " delay load of dylib until first use\n"},{"file": 39,"line": 654,"col": 4,"docs": " include file end: name,,NO_SECT,0,0\n"},{"file": 39,"line": 462,"col": 4,"docs": " companion file with only debug sections\n"},{"file": 39,"line": 579,"col": 4,"docs": " if any of these bits set, a symbolic debugging entry\n"},{"file": 39,"line": 266,"col": 4,"docs": " After MacOS X 10.1 when a new load command is added that is required to be\n understood by the dynamic linker for the image to execute properly the\n LC_REQ_DYLD bit will be or'ed into the load command constant.  If the dynamic\n linker sees such a load command it it does not understand will issue a\n \"unknown load command required for execution\" error and refuse to use the\n image.  Other load commands without this bit that are not understood will\n simply be ignored.\n"},{"file": 39,"line": 269,"col": 4,"docs": " segment of this file to be mapped\n"},{"file": 39,"line": 335,"col": 4,"docs": " prebind checksum\n"},{"file": 39,"line": 390,"col": 4,"docs": " replacement for LC_UNIXTHREAD\n"},{"file": 39,"line": 621,"col": 4,"docs": " end nsect sym: 0,,n_sect,0,address\n"},{"file": 39,"line": 408,"col": 4,"docs": " optimization hints in MH_OBJECT files\n"},{"file": 39,"line": 585,"col": 4,"docs": " mask for the type bits\n"},{"file": 39,"line": 399,"col": 4,"docs": " Code signing DRs copied from linked dylibs\n"},{"file": 39,"line": 317,"col": 4,"docs": " image routines\n"},{"file": 39,"line": 576,"col": 4,"docs": " section with only pointers to\n"},{"file": 39,"line": 630,"col": 4,"docs": " object file name: name,,0,0,st_mtime\n"},{"file": 39,"line": 435,"col": 4,"docs": " relocatable object file\n"},{"file": 39,"line": 308,"col": 4,"docs": " load a dynamic linker\n"},{"file": 39,"line": 302,"col": 4,"docs": " load a dynamically linked shared library\n"},{"file": 39,"line": 642,"col": 4,"docs": " compiler parameters: name,,NO_SECT,0,0\n"},{"file": 39,"line": 465,"col": 4,"docs": " x86_64 kexts\n"},{"file": 39,"line": 624,"col": 4,"docs": " structure elt: name,,NO_SECT,type,struct_offset\n"},{"file": 39,"line": 512,"col": 4,"docs": " the binary has been canonicalized via the unprebind operation\n"},{"file": 39,"line": 339,"col": 4,"docs": " load a dynamically linked shared library that is allowed to be missing\n (all symbols are weak imported).\n"},{"file": 39,"line": 51,"col": 0,"docs": " The linkedit_data_command contains the offsets and sizes of a blob\n of data in the __LINKEDIT segment.\n"},{"file": 20,"line": 190,"col": 8,"docs": " Prefer calling realloc to shrink if you can tolerate failure, such as\n in an ArrayList data structure with a storage capacity.\n Shrink always succeeds, and `new_n` must be <= `old_mem.len`.\n Returned slice has same alignment as old_mem.\n Shrinking to 0 is the same as calling `free`.\n","fields": [8852,8853,8854]},{"file": 20,"line": 16,"col": 8},{"file": 20,"line": 201,"col": 8,"docs": " This is the same as `shrink`, except caller may additionally request\n a new alignment, which must be smaller or the same as the old\n allocation.\n","fields": [8855,8856,8857,8858]},{"file": 9,"line": 155,"col": 8,"fields": [8859]},{"file": 40,"line": 11,"col": 4},{"file": 40,"line": 1,"col": 0},{"file": 40,"line": 7,"col": 0},{"file": 40,"line": 9,"col": 0},{"file": 40,"line": 5,"col": 0},{"file": 40,"line": 3,"col": 0},{"file": 40,"line": 0,"col": 0},{"file": 40,"line": 2,"col": 0},{"file": 40,"line": 8,"col": 0},{"file": 40,"line": 6,"col": 0},{"file": 40,"line": 4,"col": 0},{"file": 26,"line": 362,"col": 8,"docs": " Call close when done.\n","fields": [8860,8861]},{"file": 26,"line": 524,"col": 8,"fields": [8862,8863]},{"file": 26,"line": 367,"col": 8,"docs": " Call close when done.\n","fields": [8864,8865]},{"file": 26,"line": 326,"col": 8,"docs": " Beginning of processor-specific codes\n"},{"file": 26,"line": 329,"col": 8,"docs": " Processor-specific\n"},{"file": 23,"line": 1807,"col": 4},{"file": 23,"line": 1836,"col": 4,"fields": [8866,8867]},{"file": 41,"line": 31,"col": 4,"docs": " Lock may be held only once. If the same thread tries to acquire\n the same mutex twice, it deadlocks.  This type supports static\n initialization and is at most `@sizeOf(usize)` in size.  When an\n application is built in single threaded release mode, all the\n functions are no-ops. In single threaded debug mode, there is\n deadlock detection.\n\n Example usage:\n var m = Mutex.init();\n defer m.deinit();\n\n const lock = m.acquire();\n defer lock.release();\n ... critical code\n\n Non-blocking:\n if (m.tryAcquire) |lock| {\n     defer lock.release();\n     // ... critical section\n } else {\n     // ... lock not acquired\n }\n"},{"file": 41,"line": 1,"col": 0},{"file": 41,"line": 7,"col": 0},{"file": 41,"line": 4,"col": 0},{"file": 41,"line": 0,"col": 0},{"file": 41,"line": 6,"col": 0},{"file": 41,"line": 2,"col": 0},{"file": 41,"line": 338,"col": 0,"fields": [8868]},{"file": 41,"line": 3,"col": 0},{"file": 41,"line": 5,"col": 0},{"file": 41,"line": 300,"col": 0},{"file": 42,"line": 3,"col": 0},{"file": 42,"line": 12,"col": 0},{"file": 42,"line": 9,"col": 0},{"file": 42,"line": 5,"col": 0},{"file": 42,"line": 4,"col": 0},{"file": 42,"line": 8,"col": 0},{"file": 42,"line": 1,"col": 0},{"file": 42,"line": 6,"col": 0},{"file": 42,"line": 11,"col": 0},{"file": 42,"line": 2,"col": 0},{"file": 42,"line": 10,"col": 0},{"file": 43,"line": 13,"col": 4,"docs": " A resource object which supports blocking until signaled.\n Once finished, the `deinit()` method should be called for correctness.\n"},{"file": 43,"line": 1,"col": 0},{"file": 43,"line": 60,"col": 0},{"file": 43,"line": 7,"col": 0},{"file": 43,"line": 181,"col": 0},{"file": 43,"line": 9,"col": 0},{"file": 43,"line": 92,"col": 0},{"file": 43,"line": 0,"col": 0},{"file": 43,"line": 5,"col": 0},{"file": 43,"line": 3,"col": 0},{"file": 43,"line": 6,"col": 0},{"file": 43,"line": 2,"col": 0},{"file": 43,"line": 4,"col": 0},{"file": 43,"line": 8,"col": 0},{"file": 37,"line": 166,"col": 8,"docs": " Resets the timer value to 0/now.\n","fields": [8869]},{"file": 37,"line": 171,"col": 8,"docs": " Returns the current value of the timer in nanoseconds, then resets it\n","fields": [8870]},{"file": 37,"line": 111,"col": 4},{"file": 37,"line": 116,"col": 4,"docs": "At some point we may change our minds on RAW, but for now we're\n  sticking with posix standard MONOTONIC. For more information, see:\n  https://github.com/ziglang/zig/pull/933\n"},{"file": 44,"line": 9,"col": 4,"docs": " This API is non-allocating and non-fallible. The tradeoff is that users of\n this API must provide the storage for each `Progress.Node`.\n Initialize the struct directly, overriding these fields as desired:\n * `refresh_rate_ms`\n * `initial_delay_ms`\n"},{"file": 44,"line": 0,"col": 0},{"file": 44,"line": 2,"col": 0},{"file": 44,"line": 1,"col": 0},{"file": 30,"line": 638,"col": 8},{"file": 30,"line": 637,"col": 8},{"file": 30,"line": 705,"col": 4,"fields": [8871]},{"file": 30,"line": 652,"col": 4,"fields": [8872,8873]},{"file": 30,"line": 693,"col": 4,"fields": [8874,8875]},{"file": 30,"line": 699,"col": 4,"fields": [8876,8877]},{"file": 30,"line": 640,"col": 4,"fields": [8878,8879,8880]},{"file": 30,"line": 717,"col": 4,"fields": [8881,8882]},{"file": 30,"line": 709,"col": 4,"fields": [8883]},{"file": 45,"line": 130,"col": 4,"docs": " Fast non-cryptographic 64bit hash function.\n See https://github.com/wangyi-fudan/wyhash\n"},{"file": 45,"line": 3,"col": 0},{"file": 45,"line": 175,"col": 0},{"file": 45,"line": 0,"col": 0},{"file": 45,"line": 37,"col": 0},{"file": 45,"line": 1,"col": 0},{"file": 14,"line": 501,"col": 8,"fields": [8884]},{"file": 14,"line": 531,"col": 8,"docs": " Defer this after creating.\n","fields": [8885]},{"file": 14,"line": 555,"col": 8,"fields": [8886,8887]},{"file": 14,"line": 591,"col": 8,"fields": [8888]},{"file": 14,"line": 574,"col": 8,"docs": " Undo a `setHandle`.\n","fields": [8889]},{"file": 14,"line": 514,"col": 4,"fields": [8890]},{"file": 14,"line": 496,"col": 4},{"file": 14,"line": 486,"col": 4},{"file": 46,"line": 665,"col": 8,"docs": " If the build is multi-threaded and there is an event loop, then it calls `yield`. Otherwise,\n does nothing.\n","fields": []},{"file": 46,"line": 678,"col": 8,"fields": [8891]},{"file": 46,"line": 93,"col": 8},{"file": 46,"line": 615,"col": 8,"docs": " Bring your own linked list node. This means it can't fail.\n","fields": [8892,8893]},{"file": 46,"line": 110,"col": 8,"docs": " After initialization, call run().\n TODO copy elision / named return values so that the threads referencing *Loop\n have the correct pointer value.\n https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765\n","fields": [8894]},{"file": 46,"line": 674,"col": 8,"docs": " call finishOneEvent when done\n","fields": [8895]},{"file": 46,"line": 162,"col": 8,"fields": [8896]},{"file": 46,"line": 439,"col": 8,"fields": [8897,8898,8899,8900,8901]},{"file": 46,"line": 652,"col": 8,"docs": " Yielding lets the event loop run, starting any unstarted async operations.\n Note that async operations automatically start when a function yields for any other reason,\n for example, when async I/O is performed. This function is intended to be used only when\n CPU bound tasks would be waiting in the event loop but never get started because no async I/O\n is performed.\n","fields": [8902]},{"file": 46,"line": 508,"col": 8,"fields": [8903,8904]},{"file": 46,"line": 448,"col": 8,"fields": [8905,8906]},{"file": 46,"line": 29,"col": 8},{"file": 46,"line": 627,"col": 8,"fields": [8907]},{"file": 46,"line": 549,"col": 8,"fields": [8908,8909,8910]},{"file": 46,"line": 120,"col": 8,"docs": " After initialization, call run().\n This is the same as `initThreadPool` using `Thread.cpuCount` to determine the thread\n pool size.\n TODO copy elision / named return values so that the threads referencing *Loop\n have the correct pointer value.\n https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765\n","fields": [8911]},{"file": 46,"line": 533,"col": 8,"docs": " resume_node must live longer than the anyframe that it holds a reference to.\n","fields": [8912,8913,8914,8915,8916]},{"file": 46,"line": 516,"col": 8,"fields": [8917,8918,8919,8920]},{"file": 46,"line": 621,"col": 8,"fields": [8921,8922]},{"file": 46,"line": 453,"col": 8,"fields": [8923,8924,8925]},{"file": 46,"line": 512,"col": 8,"fields": [8926,8927]},{"file": 46,"line": 27,"col": 8},{"file": 46,"line": 98,"col": 8,"docs": " TODO copy elision / named return values so that the threads referencing *Loop\n have the correct pointer value.\n https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765\n","fields": [8928]},{"file": 46,"line": 504,"col": 8,"fields": [8929,8930]},{"file": 46,"line": 129,"col": 8,"docs": " Thread count is the total thread count. The thread pool size will be\n max(thread_count - 1, 0)\n","fields": [8931,8932]},{"file": 46,"line": 427,"col": 8,"docs": " resume_node must live longer than the anyframe that it holds a reference to.\n flags must contain EPOLLET\n","fields": [8933,8934,8935,8936]},{"file": 46,"line": 806,"col": 4,"fields": [8937,8938]},{"file": 46,"line": 173,"col": 4,"fields": [8939,8940]},{"file": 46,"line": 88,"col": 4},{"file": 46,"line": 89,"col": 4},{"file": 46,"line": 167,"col": 4},{"file": 46,"line": 406,"col": 4,"fields": [8941]},{"file": 46,"line": 836,"col": 4,"fields": [8942]},{"file": 46,"line": 896,"col": 4},{"file": 46,"line": 828,"col": 4,"fields": [8943,8944]},{"file": 46,"line": 713,"col": 4,"fields": [8945]},{"file": 46,"line": 906,"col": 4},{"file": 46,"line": 917,"col": 4},{"file": 46,"line": 564,"col": 4,"fields": [8946]},{"file": 46,"line": 171,"col": 4},{"file": 14,"line": 71,"col": 16},{"file": 14,"line": 80,"col": 16},{"file": 14,"line": 53,"col": 16},{"file": 14,"line": 44,"col": 16},{"file": 14,"line": 62,"col": 16},{"file": 46,"line": 14,"col": 4},{"file": 46,"line": 1,"col": 0},{"file": 46,"line": 2,"col": 0},{"file": 46,"line": 6,"col": 0},{"file": 46,"line": 943,"col": 0,"fields": [8947,8948]},{"file": 46,"line": 10,"col": 0},{"file": 46,"line": 11,"col": 0},{"file": 46,"line": 12,"col": 0},{"file": 46,"line": 0,"col": 0},{"file": 46,"line": 939,"col": 0,"fields": []},{"file": 46,"line": 9,"col": 0},{"file": 46,"line": 7,"col": 0},{"file": 46,"line": 3,"col": 0},{"file": 46,"line": 4,"col": 0},{"file": 46,"line": 5,"col": 0},{"file": 46,"line": 8,"col": 0},{"file": 19,"line": 321,"col": 16,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 47,"line": 56,"col": 4,"fields": [8949]},{"file": 47,"line": 150,"col": 4,"fields": [8950]},{"file": 47,"line": 323,"col": 4,"fields": [8951]},{"file": 47,"line": 21,"col": 4,"fields": [8952]},{"file": 47,"line": 287,"col": 4,"fields": [8953]},{"file": 47,"line": 190,"col": 4,"fields": [8954]},{"file": 47,"line": 15,"col": 4},{"file": 47,"line": 234,"col": 4,"fields": [8955]},{"file": 47,"line": 204,"col": 4,"fields": [8956]},{"file": 47,"line": 265,"col": 4,"fields": [8957]},{"file": 47,"line": 129,"col": 4,"fields": [8958]},{"file": 47,"line": 170,"col": 4,"fields": [8959]},{"file": 47,"line": 20,"col": 4},{"file": 47,"line": 79,"col": 4,"fields": [8960]},{"file": 47,"line": 1,"col": 0},{"file": 47,"line": 0,"col": 0},{"file": 47,"line": 3,"col": 0},{"file": 47,"line": 7,"col": 0},{"file": 47,"line": 4,"col": 0},{"file": 47,"line": 11,"col": 0,"fields": [8961]},{"file": 47,"line": 5,"col": 0},{"file": 47,"line": 2,"col": 0},{"file": 48,"line": 8,"col": 4},{"file": 48,"line": 0,"col": 0},{"file": 48,"line": 1,"col": 0},{"file": 48,"line": 5,"col": 0},{"file": 48,"line": 2,"col": 0},{"file": 48,"line": 4,"col": 0},{"file": 48,"line": 6,"col": 0},{"file": 48,"line": 3,"col": 0},{"file": 49,"line": 1,"col": 0},{"file": 49,"line": 2,"col": 0},{"file": 49,"line": 0,"col": 0},{"file": 49,"line": 1048,"col": 0},{"file": 49,"line": 20,"col": 0},{"file": 51,"line": 5,"col": 0},{"file": 51,"line": 6,"col": 0},{"file": 52,"line": 436,"col": 4,"docs": " Can only be called on 32 bit systems. For 64 bit see `lseek`.\n","fields": [8962,8963,8964,8965]},{"file": 52,"line": 978,"col": 4,"fields": [8966]},{"file": 52,"line": 745,"col": 4,"fields": [8967,8968,8969,8970,8971]},{"file": 52,"line": 927,"col": 4,"fields": [8972,8973,8974,8975]},{"file": 52,"line": 116,"col": 4,"fields": [8976,8977,8978]},{"file": 52,"line": 619,"col": 4,"fields": [8979,8980,8981]},{"file": 52,"line": 939,"col": 4,"fields": [8982,8983,8984,8985,8986]},{"file": 52,"line": 848,"col": 4,"fields": [8987,8988,8989,8990]},{"file": 52,"line": 806,"col": 4,"fields": [8991,8992,8993]},{"file": 52,"line": 1027,"col": 4,"fields": [8994,8995]},{"file": 52,"line": 959,"col": 4,"fields": [8996,8997]},{"file": 52,"line": 138,"col": 4,"fields": [8998,8999,9000]},{"file": 52,"line": 1046,"col": 4,"fields": [9001,9002,9003]},{"file": 52,"line": 1116,"col": 4,"fields": [9004,9005]},{"file": 52,"line": 422,"col": 4,"docs": " See also `clone` (from the arch-specific include)\n","fields": [9006,9007,9008,9009,9010]},{"file": 52,"line": 96,"col": 4,"fields": [9011,9012]},{"file": 52,"line": 627,"col": 4,"fields": [9013,9014,9015]},{"file": 52,"line": 667,"col": 4,"fields": []},{"file": 52,"line": 75,"col": 4,"fields": [9016,9017,9018]},{"file": 52,"line": 286,"col": 4,"fields": [9019,9020,9021,9022,9023]},{"file": 52,"line": 611,"col": 4,"fields": [9024]},{"file": 52,"line": 474,"col": 4,"fields": [9025,9026,9027]},{"file": 52,"line": 841,"col": 4,"fields": [9028,9029,9030,9031,9032,9033]},{"file": 52,"line": 1108,"col": 4,"fields": [9034,9035,9036,9037]},{"file": 52,"line": 1019,"col": 4,"fields": [9038,9039,9040,9041]},{"file": 52,"line": 28,"col": 4,"docs": " Set by startup code, used by `getauxval`.\n"},{"file": 52,"line": 166,"col": 4,"fields": [9042,9043,9044]},{"file": 52,"line": 71,"col": 4,"fields": [9045]},{"file": 52,"line": 877,"col": 4,"fields": [9046,9047]},{"file": 52,"line": 462,"col": 4,"fields": [9048,9049,9050]},{"file": 52,"line": 947,"col": 4,"fields": [9051,9052,9053,9054,9055]},{"file": 52,"line": 267,"col": 4,"fields": [9056,9057,9058]},{"file": 52,"line": 112,"col": 4,"fields": [9059,9060]},{"file": 52,"line": 1035,"col": 4,"fields": [9061,9062]},{"file": 52,"line": 330,"col": 4,"fields": [9063,9064,9065,9066]},{"file": 52,"line": 174,"col": 4,"fields": [9067]},{"file": 52,"line": 154,"col": 4,"fields": [9068,9069,9070,9071]},{"file": 52,"line": 1023,"col": 4,"fields": [9072]},{"file": 52,"line": 244,"col": 4,"fields": [9073,9074,9075,9076]},{"file": 52,"line": 275,"col": 4,"fields": [9077,9078,9079,9080]},{"file": 52,"line": 79,"col": 4,"fields": []},{"file": 52,"line": 314,"col": 4,"fields": [9081,9082,9083]},{"file": 52,"line": 951,"col": 4,"fields": [9084,9085]},{"file": 52,"line": 398,"col": 4,"fields": [9086,9087,9088]},{"file": 52,"line": 100,"col": 4,"fields": [9089,9090,9091,9092]},{"file": 52,"line": 67,"col": 4,"fields": [9093]},{"file": 52,"line": 47,"col": 4,"fields": [9094,9095]},{"file": 52,"line": 643,"col": 4,"fields": [9096,9097,9098]},{"file": 52,"line": 466,"col": 4,"fields": [9099,9100]},{"file": 52,"line": 158,"col": 4,"fields": [9101,9102]},{"file": 52,"line": 615,"col": 4,"fields": [9103]},{"file": 52,"line": 25,"col": 4},{"file": 52,"line": 427,"col": 4,"docs": " See also `clone` (from the arch-specific include)\n","fields": [9104,9105]},{"file": 52,"line": 659,"col": 4,"fields": [9106,9107]},{"file": 52,"line": 731,"col": 4,"fields": [9108,9109,9110]},{"file": 58,"line": 52,"col": 4,"fields": [9111,9112,9113,9114,9115,9116]},{"file": 52,"line": 834,"col": 4,"fields": [9117,9118]},{"file": 52,"line": 974,"col": 4,"fields": []},{"file": 52,"line": 539,"col": 4,"fields": [9119,9120]},{"file": 52,"line": 595,"col": 4,"fields": []},{"file": 52,"line": 535,"col": 4,"fields": [9121,9122]},{"file": 52,"line": 63,"col": 4,"fields": [9123,9124,9125]},{"file": 52,"line": 813,"col": 4,"fields": [9126,9127,9128,9129,9130,9131]},{"file": 52,"line": 1006,"col": 4,"fields": [9132,9133]},{"file": 52,"line": 862,"col": 4,"fields": [9134,9135,9136,9137]},{"file": 52,"line": 752,"col": 4,"fields": [9138,9139,9140]},{"file": 52,"line": 387,"col": 4,"fields": [9141,9142,9143,9144,9145]},{"file": 52,"line": 738,"col": 4,"fields": [9146,9147,9148,9149,9150]},{"file": 58,"line": 90,"col": 4},{"file": 52,"line": 356,"col": 4,"fields": [9151,9152]},{"file": 52,"line": 531,"col": 4,"fields": [9153,9154]},{"file": 52,"line": 218,"col": 4,"fields": [9155,9156,9157]},{"file": 52,"line": 651,"col": 4,"fields": [9158,9159]},{"file": 52,"line": 603,"col": 4,"fields": []},{"file": 52,"line": 352,"col": 4,"fields": [9160,9161,9162,9163]},{"file": 52,"line": 306,"col": 4,"fields": [9164,9165]},{"file": 52,"line": 255,"col": 4,"fields": [9166,9167,9168,9169,9170]},{"file": 52,"line": 412,"col": 4,"fields": [9171,9172]},{"file": 52,"line": 563,"col": 4,"fields": [9173,9174]},{"file": 52,"line": 967,"col": 4,"fields": [9175,9176,9177]},{"file": 52,"line": 943,"col": 4,"fields": [9178,9179,9180,9181,9182]},{"file": 52,"line": 923,"col": 4,"fields": [9183,9184,9185]},{"file": 52,"line": 990,"col": 4,"fields": [9186,9187,9188,9189,9190]},{"file": 52,"line": 334,"col": 4,"fields": [9191]},{"file": 52,"line": 1104,"col": 4,"fields": [9192,9193,9194,9195,9196]},{"file": 52,"line": 820,"col": 4,"fields": [9197,9198]},{"file": 52,"line": 452,"col": 4,"fields": [9199]},{"file": 52,"line": 1031,"col": 4,"fields": [9200,9201]},{"file": 52,"line": 344,"col": 4,"fields": [9202,9203]},{"file": 52,"line": 635,"col": 4,"fields": [9204,9205,9206]},{"file": 52,"line": 170,"col": 4,"fields": [9207,9208,9209,9210,9211]},{"file": 52,"line": 547,"col": 4,"fields": [9212]},{"file": 52,"line": 935,"col": 4,"fields": [9213,9214,9215,9216]},{"file": 52,"line": 298,"col": 4,"fields": [9217]},{"file": 52,"line": 322,"col": 4,"fields": [9218,9219]},{"file": 52,"line": 490,"col": 4,"fields": [9220,9221,9222]},{"file": 52,"line": 707,"col": 4,"fields": [9223,9224]},{"file": 58,"line": 88,"col": 4,"docs": " This matches the libc clone function.\n","fields": [9225,9226,9227,9228,9229,9230,9231]},{"file": 52,"line": 712,"col": 4,"fields": [9232,9233]},{"file": 52,"line": 178,"col": 4,"fields": [9234,9235]},{"file": 52,"line": 955,"col": 4,"fields": [9236,9237]},{"file": 52,"line": 146,"col": 4,"fields": [9238,9239,9240]},{"file": 52,"line": 125,"col": 4,"fields": [9241,9242,9243]},{"file": 52,"line": 142,"col": 4,"fields": [9244,9245]},{"file": 52,"line": 931,"col": 4,"fields": [9246,9247,9248,9249]},{"file": 52,"line": 982,"col": 4,"fields": [9250,9251,9252,9253]},{"file": 52,"line": 919,"col": 4,"fields": [9254,9255,9256]},{"file": 52,"line": 799,"col": 4,"fields": [9257,9258,9259]},{"file": 52,"line": 318,"col": 4,"fields": [9260,9261,9262,9263]},{"file": 52,"line": 759,"col": 4,"fields": [9264,9265,9266,9267]},{"file": 52,"line": 555,"col": 4,"fields": [9268]},{"file": 52,"line": 1112,"col": 4,"fields": [9269,9270]},{"file": 52,"line": 724,"col": 4,"fields": [9271,9272,9273]},{"file": 52,"line": 885,"col": 4,"fields": [9274,9275]},{"file": 52,"line": 571,"col": 4,"fields": [9276,9277]},{"file": 52,"line": 717,"col": 4,"fields": [9278,9279,9280]},{"file": 52,"line": 486,"col": 4,"fields": [9281,9282,9283]},{"file": 52,"line": 1010,"col": 4},{"file": 52,"line": 579,"col": 4,"fields": []},{"file": 52,"line": 855,"col": 4,"fields": [9284,9285,9286]},{"file": 52,"line": 134,"col": 4,"fields": [9287]},{"file": 52,"line": 901,"col": 4,"fields": [9288,9289,9290,9291,9292]},{"file": 52,"line": 92,"col": 4,"docs": " This must be inline, and inline call the syscall function, because if the\n child does a return it will clobber the parent's stack.\n It is advised to avoid this function and use clone instead, because\n the compiler is not aware of how vfork affects control flow and you may\n see different results in optimized builds.\n","fields": []},{"file": 52,"line": 478,"col": 4,"fields": [9293]},{"file": 52,"line": 210,"col": 4,"fields": [9294,9295,9296]},{"file": 52,"line": 1015,"col": 4,"fields": [9297,9298]},{"file": 52,"line": 543,"col": 4,"fields": [9299,9300]},{"file": 52,"line": 893,"col": 4,"fields": [9301,9302,9303,9304]},{"file": 52,"line": 366,"col": 4,"fields": [9305,9306,9307,9308]},{"file": 52,"line": 915,"col": 4,"fields": [9309,9310,9311]},{"file": 52,"line": 271,"col": 4,"fields": [9312,9313,9314]},{"file": 52,"line": 827,"col": 4,"fields": [9315,9316,9317]},{"file": 52,"line": 1100,"col": 4,"fields": [9318,9319]},{"file": 52,"line": 587,"col": 4,"fields": []},{"file": 52,"line": 1002,"col": 4,"fields": [9320,9321]},{"file": 52,"line": 986,"col": 4,"fields": [9322,9323,9324,9325]},{"file": 52,"line": 1039,"col": 4,"fields": [9326]},{"file": 52,"line": 7,"col": 0},{"file": 52,"line": 10,"col": 0},{"file": 52,"line": 8,"col": 0},{"file": 52,"line": 494,"col": 0},{"file": 52,"line": 11,"col": 0},{"file": 52,"line": 497,"col": 0},{"file": 52,"line": 12,"col": 0},{"file": 52,"line": 9,"col": 0},{"file": 52,"line": 13,"col": 0},{"file": 52,"line": 1044,"col": 0},{"file": 61,"line": 74,"col": 4},{"file": 61,"line": 874,"col": 4},{"file": 61,"line": 601,"col": 4},{"file": 61,"line": 784,"col": 4},{"file": 61,"line": 911,"col": 4},{"file": 61,"line": 170,"col": 4,"docs": " https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/defining-i-o-control-codes\n","fields": [9327,9328,9329,9330]},{"file": 53,"line": 190,"col": 4,"fields": [9331,9332,9333]},{"file": 61,"line": 148,"col": 4},{"file": 53,"line": 184,"col": 4},{"file": 61,"line": 89,"col": 4},{"file": 61,"line": 534,"col": 4},{"file": 61,"line": 347,"col": 4},{"file": 61,"line": 402,"col": 4},{"file": 61,"line": 748,"col": 4},{"file": 61,"line": 775,"col": 4},{"file": 61,"line": 889,"col": 4},{"file": 53,"line": 952,"col": 4,"docs": " A file time is a 64-bit value that represents the number of 100-nanosecond\n intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated\n Universal Time (UTC).\n This function returns the number of nanoseconds since the canonical epoch,\n which is the POSIX one (Jan 01, 1970 AD).\n","fields": [9334]},{"file": 61,"line": 96,"col": 4},{"file": 61,"line": 979,"col": 4},{"file": 61,"line": 466,"col": 4},{"file": 61,"line": 112,"col": 4},{"file": 53,"line": 162,"col": 4},{"file": 53,"line": 268,"col": 4,"fields": [9335,9336,9337,9338]},{"file": 61,"line": 133,"col": 4},{"file": 61,"line": 851,"col": 4},{"file": 61,"line": 708,"col": 4},{"file": 61,"line": 426,"col": 4},{"file": 61,"line": 608,"col": 4},{"file": 61,"line": 353,"col": 4},{"file": 53,"line": 238,"col": 4,"fields": [9339,9340]},{"file": 61,"line": 718,"col": 4},{"file": 61,"line": 36,"col": 4},{"file": 61,"line": 875,"col": 4},{"file": 61,"line": 52,"col": 4},{"file": 53,"line": 673,"col": 4,"fields": [9341,9342,9343,9344,9345,9346]},{"file": 61,"line": 21,"col": 4},{"file": 61,"line": 233,"col": 4},{"file": 61,"line": 416,"col": 4},{"file": 61,"line": 729,"col": 4},{"file": 61,"line": 442,"col": 4},{"file": 61,"line": 217,"col": 4},{"file": 61,"line": 909,"col": 4},{"file": 61,"line": 63,"col": 4},{"file": 53,"line": 370,"col": 4,"docs": " This function is for blocking file descriptors only. For non-blocking, see\n `WriteFileAsync`.\n","fields": [9347,9348]},{"file": 61,"line": 768,"col": 4},{"file": 61,"line": 380,"col": 4,"docs": " Return the normalized drive name. This is the default.\n"},{"file": 53,"line": 893,"col": 4,"fields": [9349]},{"file": 61,"line": 82,"col": 4},{"file": 61,"line": 27,"col": 4},{"file": 53,"line": 805,"col": 4},{"file": 61,"line": 9,"col": 4},{"file": 61,"line": 431,"col": 4},{"file": 61,"line": 702,"col": 4},{"file": 61,"line": 73,"col": 4},{"file": 61,"line": 436,"col": 4},{"file": 61,"line": 395,"col": 4,"docs": " Return the path with the volume device path.\n"},{"file": 61,"line": 894,"col": 4},{"file": 53,"line": 655,"col": 4,"fields": [9350,9351]},{"file": 61,"line": 480,"col": 4},{"file": 61,"line": 75,"col": 4},{"file": 61,"line": 551,"col": 4},{"file": 61,"line": 48,"col": 4},{"file": 61,"line": 458,"col": 4},{"file": 61,"line": 119,"col": 4},{"file": 61,"line": 852,"col": 4},{"file": 61,"line": 55,"col": 4},{"file": 61,"line": 593,"col": 4},{"file": 61,"line": 488,"col": 4},{"file": 53,"line": 333,"col": 4,"fields": [9352]},{"file": 61,"line": 572,"col": 4},{"file": 53,"line": 781,"col": 4,"fields": []},{"file": 61,"line": 357,"col": 4},{"file": 53,"line": 765,"col": 4,"fields": [9353,9354,9355]},{"file": 61,"line": 72,"col": 4},{"file": 61,"line": 154,"col": 4},{"file": 61,"line": 40,"col": 4},{"file": 61,"line": 580,"col": 4},{"file": 61,"line": 68,"col": 4},{"file": 61,"line": 111,"col": 4},{"file": 61,"line": 108,"col": 4},{"file": 61,"line": 88,"col": 4},{"file": 53,"line": 745,"col": 4},{"file": 61,"line": 456,"col": 4},{"file": 61,"line": 561,"col": 4},{"file": 61,"line": 709,"col": 4},{"file": 53,"line": 341,"col": 4},{"file": 61,"line": 704,"col": 4},{"file": 61,"line": 479,"col": 4},{"file": 61,"line": 361,"col": 4},{"file": 61,"line": 351,"col": 4},{"file": 53,"line": 154,"col": 4,"fields": [9356,9357,9358]},{"file": 61,"line": 440,"col": 4},{"file": 53,"line": 631,"col": 4},{"file": 61,"line": 140,"col": 4},{"file": 61,"line": 734,"col": 4},{"file": 61,"line": 942,"col": 4},{"file": 53,"line": 541,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_BEGIN`.\n","fields": [9359,9360]},{"file": 61,"line": 427,"col": 4},{"file": 61,"line": 406,"col": 4},{"file": 61,"line": 78,"col": 4},{"file": 61,"line": 455,"col": 4},{"file": 61,"line": 841,"col": 4},{"file": 61,"line": 730,"col": 4},{"file": 61,"line": 645,"col": 4},{"file": 61,"line": 335,"col": 4},{"file": 61,"line": 443,"col": 4},{"file": 61,"line": 56,"col": 4},{"file": 61,"line": 37,"col": 4},{"file": 53,"line": 18,"col": 4},{"file": 61,"line": 750,"col": 4},{"file": 53,"line": 599,"col": 4,"fields": [9361,9362,9363,9364]},{"file": 61,"line": 590,"col": 4},{"file": 53,"line": 465,"col": 4},{"file": 61,"line": 10,"col": 4},{"file": 61,"line": 85,"col": 4},{"file": 61,"line": 465,"col": 4},{"file": 61,"line": 870,"col": 4},{"file": 61,"line": 546,"col": 4},{"file": 61,"line": 139,"col": 4},{"file": 61,"line": 715,"col": 4},{"file": 61,"line": 453,"col": 4},{"file": 61,"line": 341,"col": 4},{"file": 61,"line": 790,"col": 4},{"file": 61,"line": 714,"col": 4},{"file": 61,"line": 621,"col": 4},{"file": 61,"line": 907,"col": 4},{"file": 61,"line": 71,"col": 4},{"file": 61,"line": 356,"col": 4},{"file": 61,"line": 438,"col": 4},{"file": 61,"line": 531,"col": 4},{"file": 53,"line": 89,"col": 4},{"file": 61,"line": 177,"col": 4},{"file": 61,"line": 225,"col": 4},{"file": 53,"line": 467,"col": 4,"fields": [9365,9366,9367]},{"file": 61,"line": 352,"col": 4},{"file": 61,"line": 880,"col": 4},{"file": 61,"line": 84,"col": 4},{"file": 61,"line": 710,"col": 4},{"file": 61,"line": 348,"col": 4},{"file": 61,"line": 484,"col": 4},{"file": 61,"line": 51,"col": 4},{"file": 61,"line": 871,"col": 4},{"file": 61,"line": 914,"col": 4},{"file": 53,"line": 757,"col": 4,"fields": [9368,9369,9370,9371]},{"file": 61,"line": 606,"col": 4},{"file": 61,"line": 721,"col": 4},{"file": 61,"line": 34,"col": 4},{"file": 61,"line": 701,"col": 4},{"file": 53,"line": 426,"col": 4,"fields": [9372,9373,9374]},{"file": 61,"line": 743,"col": 4},{"file": 61,"line": 98,"col": 4},{"file": 61,"line": 138,"col": 4},{"file": 53,"line": 473,"col": 4,"fields": [9375,9376,9377]},{"file": 61,"line": 439,"col": 4},{"file": 53,"line": 592,"col": 4},{"file": 61,"line": 536,"col": 4},{"file": 53,"line": 414,"col": 4},{"file": 61,"line": 109,"col": 4},{"file": 61,"line": 403,"col": 4},{"file": 61,"line": 490,"col": 4},{"file": 61,"line": 872,"col": 4},{"file": 61,"line": 452,"col": 4},{"file": 61,"line": 333,"col": 4},{"file": 61,"line": 67,"col": 4},{"file": 61,"line": 878,"col": 4},{"file": 61,"line": 143,"col": 4},{"file": 61,"line": 595,"col": 4},{"file": 61,"line": 428,"col": 4},{"file": 61,"line": 359,"col": 4},{"file": 61,"line": 602,"col": 4},{"file": 61,"line": 905,"col": 4},{"file": 61,"line": 1004,"col": 4},{"file": 61,"line": 7,"col": 4},{"file": 61,"line": 817,"col": 4},{"file": 61,"line": 146,"col": 4},{"file": 61,"line": 61,"col": 4},{"file": 61,"line": 53,"col": 4},{"file": 61,"line": 483,"col": 4},{"file": 61,"line": 412,"col": 4},{"file": 53,"line": 15,"col": 4},{"file": 53,"line": 343,"col": 4,"fields": [9378,9379]},{"file": 61,"line": 405,"col": 4},{"file": 61,"line": 83,"col": 4},{"file": 61,"line": 94,"col": 4},{"file": 53,"line": 256,"col": 4,"docs": " Returns `true` if there was another file, `false` otherwise.\n","fields": [9380,9381]},{"file": 61,"line": 707,"col": 4},{"file": 61,"line": 487,"col": 4},{"file": 61,"line": 544,"col": 4},{"file": 61,"line": 724,"col": 4},{"file": 61,"line": 812,"col": 4},{"file": 61,"line": 809,"col": 4},{"file": 61,"line": 434,"col": 4},{"file": 61,"line": 445,"col": 4},{"file": 61,"line": 221,"col": 4},{"file": 53,"line": 962,"col": 4,"fields": [9382]},{"file": 61,"line": 597,"col": 4},{"file": 61,"line": 474,"col": 4},{"file": 61,"line": 461,"col": 4},{"file": 53,"line": 508,"col": 4,"fields": [9383]},{"file": 61,"line": 603,"col": 4},{"file": 61,"line": 795,"col": 4},{"file": 53,"line": 91,"col": 4,"fields": [9384,9385,9386]},{"file": 61,"line": 578,"col": 4},{"file": 61,"line": 589,"col": 4},{"file": 61,"line": 45,"col": 4},{"file": 61,"line": 141,"col": 4},{"file": 61,"line": 150,"col": 4},{"file": 61,"line": 596,"col": 4},{"file": 53,"line": 1001,"col": 4,"fields": [9387,9388]},{"file": 61,"line": 8,"col": 4},{"file": 61,"line": 417,"col": 4},{"file": 61,"line": 896,"col": 4},{"file": 61,"line": 41,"col": 4},{"file": 61,"line": 867,"col": 4},{"file": 61,"line": 468,"col": 4},{"file": 53,"line": 438,"col": 4},{"file": 61,"line": 32,"col": 4},{"file": 53,"line": 298,"col": 4},{"file": 61,"line": 537,"col": 4},{"file": 61,"line": 95,"col": 4},{"file": 61,"line": 113,"col": 4},{"file": 61,"line": 415,"col": 4},{"file": 61,"line": 201,"col": 4},{"file": 61,"line": 80,"col": 4},{"file": 61,"line": 339,"col": 4},{"file": 61,"line": 793,"col": 4},{"file": 53,"line": 392,"col": 4,"docs": " The result is a slice of `buffer`, indexed from 0.\n","fields": [9389]},{"file": 61,"line": 600,"col": 4},{"file": 53,"line": 361,"col": 4},{"file": 61,"line": 485,"col": 4},{"file": 61,"line": 906,"col": 4},{"file": 61,"line": 28,"col": 4},{"file": 53,"line": 16,"col": 4},{"file": 53,"line": 513,"col": 4,"fields": [9390]},{"file": 61,"line": 759,"col": 4},{"file": 61,"line": 79,"col": 4},{"file": 61,"line": 796,"col": 4},{"file": 61,"line": 912,"col": 4},{"file": 61,"line": 791,"col": 4},{"file": 61,"line": 31,"col": 4},{"file": 61,"line": 473,"col": 4},{"file": 53,"line": 642,"col": 4,"fields": [9391]},{"file": 61,"line": 876,"col": 4},{"file": 61,"line": 712,"col": 4},{"file": 61,"line": 783,"col": 4},{"file": 61,"line": 346,"col": 4},{"file": 61,"line": 869,"col": 4},{"file": 61,"line": 592,"col": 4},{"file": 53,"line": 957,"col": 4,"fields": [9392]},{"file": 61,"line": 430,"col": 4},{"file": 61,"line": 562,"col": 4},{"file": 61,"line": 142,"col": 4},{"file": 53,"line": 663,"col": 4,"fields": []},{"file": 53,"line": 885,"col": 4,"fields": [9393,9394,9395,9396]},{"file": 61,"line": 29,"col": 4},{"file": 61,"line": 1008,"col": 4},{"file": 61,"line": 102,"col": 4},{"file": 53,"line": 17,"col": 4},{"file": 61,"line": 147,"col": 4},{"file": 61,"line": 853,"col": 4},{"file": 61,"line": 153,"col": 4},{"file": 61,"line": 770,"col": 4},{"file": 61,"line": 129,"col": 4},{"file": 61,"line": 559,"col": 4},{"file": 61,"line": 181,"col": 4},{"file": 61,"line": 543,"col": 4},{"file": 61,"line": 132,"col": 4},{"file": 61,"line": 213,"col": 4},{"file": 61,"line": 716,"col": 4},{"file": 53,"line": 980,"col": 4,"fields": [9397]},{"file": 61,"line": 948,"col": 4},{"file": 61,"line": 497,"col": 4},{"file": 61,"line": 454,"col": 4},{"file": 61,"line": 60,"col": 4},{"file": 53,"line": 863,"col": 4,"fields": [9398]},{"file": 53,"line": 785,"col": 4,"fields": [9399]},{"file": 61,"line": 533,"col": 4},{"file": 61,"line": 62,"col": 4},{"file": 61,"line": 44,"col": 4},{"file": 61,"line": 463,"col": 4},{"file": 61,"line": 104,"col": 4},{"file": 61,"line": 345,"col": 4},{"file": 61,"line": 866,"col": 4},{"file": 53,"line": 867,"col": 4,"fields": []},{"file": 61,"line": 155,"col": 4},{"file": 53,"line": 735,"col": 4,"fields": [9400,9401,9402]},{"file": 61,"line": 33,"col": 4},{"file": 53,"line": 141,"col": 4,"fields": [9403,9404,9405]},{"file": 61,"line": 464,"col": 4},{"file": 61,"line": 90,"col": 4},{"file": 61,"line": 125,"col": 4},{"file": 53,"line": 487,"col": 4,"fields": [9406,9407]},{"file": 61,"line": 591,"col": 4},{"file": 61,"line": 850,"col": 4},{"file": 53,"line": 502,"col": 4},{"file": 61,"line": 588,"col": 4},{"file": 61,"line": 16,"col": 4,"docs": " The standard output device. Initially, this is the active console screen buffer, CONOUT$.\n"},{"file": 61,"line": 556,"col": 4},{"file": 61,"line": 144,"col": 4},{"file": 61,"line": 476,"col": 4},{"file": 61,"line": 43,"col": 4},{"file": 53,"line": 704,"col": 4,"fields": [9408,9409,9410,9411,9412,9413]},{"file": 61,"line": 486,"col": 4},{"file": 61,"line": 441,"col": 4},{"file": 61,"line": 42,"col": 4},{"file": 61,"line": 576,"col": 4},{"file": 61,"line": 460,"col": 4},{"file": 61,"line": 557,"col": 4},{"file": 61,"line": 594,"col": 4},{"file": 61,"line": 575,"col": 4},{"file": 61,"line": 988,"col": 4},{"file": 61,"line": 720,"col": 4},{"file": 61,"line": 179,"col": 4},{"file": 61,"line": 731,"col": 4},{"file": 61,"line": 358,"col": 4},{"file": 61,"line": 577,"col": 4},{"file": 61,"line": 552,"col": 4},{"file": 61,"line": 849,"col": 4},{"file": 61,"line": 788,"col": 4},{"file": 61,"line": 706,"col": 4},{"file": 61,"line": 847,"col": 4},{"file": 53,"line": 769,"col": 4},{"file": 61,"line": 117,"col": 4},{"file": 61,"line": 343,"col": 4},{"file": 53,"line": 755,"col": 4},{"file": 61,"line": 421,"col": 4},{"file": 61,"line": 797,"col": 4},{"file": 61,"line": 87,"col": 4},{"file": 61,"line": 764,"col": 4},{"file": 61,"line": 785,"col": 4},{"file": 61,"line": 167,"col": 4},{"file": 61,"line": 567,"col": 4},{"file": 61,"line": 501,"col": 4},{"file": 61,"line": 717,"col": 4},{"file": 53,"line": 747,"col": 4,"fields": [9414,9415]},{"file": 61,"line": 24,"col": 4},{"file": 61,"line": 429,"col": 4},{"file": 61,"line": 470,"col": 4},{"file": 53,"line": 481,"col": 4},{"file": 61,"line": 123,"col": 4},{"file": 61,"line": 121,"col": 4},{"file": 61,"line": 910,"col": 4},{"file": 61,"line": 77,"col": 4},{"file": 53,"line": 556,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_CURRENT`.\n","fields": [9416,9417]},{"file": 61,"line": 116,"col": 4},{"file": 61,"line": 535,"col": 4},{"file": 61,"line": 106,"col": 4},{"file": 53,"line": 386,"col": 4},{"file": 61,"line": 751,"col": 4},{"file": 61,"line": 457,"col": 4},{"file": 61,"line": 1013,"col": 4},{"file": 61,"line": 193,"col": 4},{"file": 53,"line": 985,"col": 4,"docs": " Assumes an absolute path.\n","fields": [9418]},{"file": 53,"line": 876,"col": 4,"fields": []},{"file": 61,"line": 54,"col": 4},{"file": 61,"line": 342,"col": 4},{"file": 61,"line": 725,"col": 4},{"file": 53,"line": 285,"col": 4,"fields": [9419,9420,9421,9422]},{"file": 61,"line": 59,"col": 4},{"file": 61,"line": 389,"col": 4,"docs": " Return the path with a volume GUID path instead of the drive name.\n"},{"file": 61,"line": 408,"col": 4},{"file": 61,"line": 769,"col": 4},{"file": 53,"line": 283,"col": 4},{"file": 61,"line": 99,"col": 4},{"file": 53,"line": 115,"col": 4,"fields": [9423,9424,9425,9426,9427]},{"file": 61,"line": 722,"col": 4},{"file": 61,"line": 877,"col": 4},{"file": 53,"line": 789,"col": 4},{"file": 61,"line": 136,"col": 4},{"file": 61,"line": 418,"col": 4},{"file": 61,"line": 727,"col": 4},{"file": 61,"line": 22,"col": 4},{"file": 61,"line": 115,"col": 4},{"file": 61,"line": 626,"col": 4},{"file": 61,"line": 238,"col": 4},{"file": 53,"line": 22,"col": 4},{"file": 61,"line": 338,"col": 4},{"file": 53,"line": 167,"col": 4,"docs": " Call RtlGenRandom() instead of CryptGetRandom() on Windows\n https://github.com/rust-lang-nursery/rand/issues/111\n https://bugzilla.mozilla.org/show_bug.cgi?id=504270\n","fields": [9428]},{"file": 61,"line": 726,"col": 4},{"file": 61,"line": 25,"col": 4},{"file": 53,"line": 637,"col": 4,"fields": [9429]},{"file": 61,"line": 229,"col": 4},{"file": 61,"line": 542,"col": 4},{"file": 61,"line": 149,"col": 4},{"file": 61,"line": 799,"col": 4},{"file": 61,"line": 100,"col": 4},{"file": 53,"line": 852,"col": 4,"fields": [9430]},{"file": 61,"line": 698,"col": 4},{"file": 61,"line": 39,"col": 4},{"file": 61,"line": 86,"col": 4},{"file": 61,"line": 467,"col": 4},{"file": 53,"line": 230,"col": 4},{"file": 53,"line": 152,"col": 4},{"file": 61,"line": 462,"col": 4},{"file": 53,"line": 847,"col": 4},{"file": 61,"line": 97,"col": 4},{"file": 61,"line": 829,"col": 4},{"file": 61,"line": 498,"col": 4},{"file": 61,"line": 437,"col": 4},{"file": 61,"line": 131,"col": 4},{"file": 61,"line": 110,"col": 4},{"file": 61,"line": 568,"col": 4},{"file": 61,"line": 414,"col": 4},{"file": 61,"line": 70,"col": 4},{"file": 61,"line": 732,"col": 4},{"file": 61,"line": 579,"col": 4},{"file": 61,"line": 538,"col": 4},{"file": 53,"line": 928,"col": 4,"fields": []},{"file": 61,"line": 344,"col": 4},{"file": 61,"line": 392,"col": 4,"docs": " Return the path with no drive information.\n"},{"file": 61,"line": 586,"col": 4},{"file": 53,"line": 897,"col": 4},{"file": 53,"line": 1034,"col": 4,"docs": " Call this when you made a windows DLL call or something that does SetLastError\n and you get an unexpected error.\n","fields": [9431]},{"file": 61,"line": 93,"col": 4},{"file": 61,"line": 540,"col": 4},{"file": 61,"line": 839,"col": 4},{"file": 61,"line": 354,"col": 4},{"file": 61,"line": 713,"col": 4},{"file": 61,"line": 719,"col": 4},{"file": 61,"line": 114,"col": 4},{"file": 53,"line": 337,"col": 4,"fields": [9432]},{"file": 61,"line": 605,"col": 4},{"file": 61,"line": 35,"col": 4},{"file": 61,"line": 247,"col": 4},{"file": 61,"line": 122,"col": 4},{"file": 61,"line": 81,"col": 4},{"file": 61,"line": 766,"col": 4},{"file": 61,"line": 703,"col": 4},{"file": 61,"line": 126,"col": 4},{"file": 53,"line": 492,"col": 4,"fields": [9433,9434]},{"file": 61,"line": 158,"col": 4,"docs": " https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/buffer-descriptions-for-i-o-control-codes\n"},{"file": 61,"line": 477,"col": 4},{"file": 61,"line": 786,"col": 4},{"file": 61,"line": 383,"col": 4,"docs": " Return the opened file name (not normalized).\n"},{"file": 61,"line": 419,"col": 4},{"file": 61,"line": 554,"col": 4},{"file": 53,"line": 976,"col": 4,"fields": [9435]},{"file": 53,"line": 694,"col": 4,"fields": [9436]},{"file": 61,"line": 135,"col": 4},{"file": 53,"line": 1047,"col": 4,"fields": [9437]},{"file": 61,"line": 350,"col": 4},{"file": 61,"line": 705,"col": 4},{"file": 61,"line": 386,"col": 4,"docs": " Return the path with the drive letter. This is the default.\n"},{"file": 61,"line": 539,"col": 4},{"file": 61,"line": 151,"col": 4},{"file": 61,"line": 49,"col": 4},{"file": 61,"line": 492,"col": 4},{"file": 61,"line": 553,"col": 4},{"file": 61,"line": 560,"col": 4},{"file": 53,"line": 578,"col": 4,"docs": " The SetFilePointerEx function with parameters to get the current offset.\n","fields": [9438]},{"file": 61,"line": 503,"col": 4},{"file": 61,"line": 30,"col": 4},{"file": 61,"line": 541,"col": 4},{"file": 53,"line": 771,"col": 4,"fields": [9439,9440]},{"file": 61,"line": 1006,"col": 4},{"file": 61,"line": 124,"col": 4},{"file": 61,"line": 840,"col": 4},{"file": 61,"line": 65,"col": 4},{"file": 53,"line": 24,"col": 4},{"file": 61,"line": 446,"col": 4},{"file": 61,"line": 571,"col": 4},{"file": 61,"line": 425,"col": 4},{"file": 61,"line": 728,"col": 4},{"file": 53,"line": 912,"col": 4},{"file": 61,"line": 47,"col": 4},{"file": 53,"line": 253,"col": 4},{"file": 53,"line": 416,"col": 4,"fields": [9441,9442,9443]},{"file": 61,"line": 397,"col": 4},{"file": 61,"line": 493,"col": 4},{"file": 53,"line": 202,"col": 4,"fields": [9444,9445,9446,9447]},{"file": 61,"line": 491,"col": 4},{"file": 53,"line": 968,"col": 4,"docs": " Converts a number of nanoseconds since the POSIX epoch to a Windows FILETIME.\n","fields": [9448]},{"file": 61,"line": 420,"col": 4},{"file": 61,"line": 166,"col": 4},{"file": 61,"line": 581,"col": 4},{"file": 61,"line": 762,"col": 4},{"file": 53,"line": 889,"col": 4,"fields": [9449,9450,9451]},{"file": 61,"line": 118,"col": 4},{"file": 61,"line": 782,"col": 4},{"file": 61,"line": 451,"col": 4},{"file": 61,"line": 349,"col": 4},{"file": 53,"line": 104,"col": 4,"fields": [9452,9453,9454,9455]},{"file": 61,"line": 340,"col": 4},{"file": 53,"line": 446,"col": 4,"fields": [9456]},{"file": 61,"line": 648,"col": 4},{"file": 61,"line": 128,"col": 4},{"file": 61,"line": 459,"col": 4},{"file": 61,"line": 810,"col": 4},{"file": 61,"line": 58,"col": 4},{"file": 61,"line": 435,"col": 4},{"file": 61,"line": 450,"col": 4},{"file": 53,"line": 305,"col": 4,"fields": [9457,9458,9459,9460,9461]},{"file": 61,"line": 908,"col": 4},{"file": 61,"line": 563,"col": 4},{"file": 61,"line": 532,"col": 4},{"file": 61,"line": 411,"col": 4},{"file": 61,"line": 145,"col": 4},{"file": 53,"line": 528,"col": 4,"fields": [9462]},{"file": 61,"line": 107,"col": 4},{"file": 61,"line": 152,"col": 4},{"file": 61,"line": 986,"col": 4},{"file": 53,"line": 1053,"col": 4,"docs": " Call this when you made a windows NtDll call\n and you get an unexpected status.\n","fields": [9463]},{"file": 61,"line": 422,"col": 4},{"file": 61,"line": 19,"col": 4,"docs": " The standard error device. Initially, this is the active console screen buffer, CONOUT$.\n"},{"file": 53,"line": 451,"col": 4,"fields": [9464]},{"file": 61,"line": 444,"col": 4},{"file": 61,"line": 101,"col": 4},{"file": 61,"line": 564,"col": 4},{"file": 61,"line": 808,"col": 4},{"file": 61,"line": 481,"col": 4},{"file": 61,"line": 868,"col": 4},{"file": 61,"line": 410,"col": 4},{"file": 61,"line": 355,"col": 4},{"file": 61,"line": 374,"col": 4},{"file": 61,"line": 57,"col": 4},{"file": 61,"line": 105,"col": 4},{"file": 61,"line": 137,"col": 4},{"file": 61,"line": 843,"col": 4},{"file": 61,"line": 407,"col": 4},{"file": 61,"line": 38,"col": 4},{"file": 53,"line": 266,"col": 4},{"file": 61,"line": 582,"col": 4},{"file": 61,"line": 127,"col": 4},{"file": 61,"line": 773,"col": 4},{"file": 61,"line": 23,"col": 4},{"file": 61,"line": 478,"col": 4},{"file": 61,"line": 510,"col": 4},{"file": 61,"line": 570,"col": 4},{"file": 53,"line": 538,"col": 4},{"file": 53,"line": 794,"col": 4,"fields": [9465,9466,9467]},{"file": 61,"line": 26,"col": 4},{"file": 61,"line": 482,"col": 4},{"file": 61,"line": 647,"col": 4},{"file": 61,"line": 326,"col": 4},{"file": 61,"line": 566,"col": 4},{"file": 53,"line": 99,"col": 4,"fields": [9468,9469,9470,9471]},{"file": 61,"line": 50,"col": 4},{"file": 61,"line": 733,"col": 4},{"file": 61,"line": 767,"col": 4},{"file": 61,"line": 471,"col": 4},{"file": 61,"line": 134,"col": 4},{"file": 61,"line": 864,"col": 4,"docs": " > The maximum path of 32,767 characters is approximate, because the \"\\\\?\\\"\n > prefix may be expanded to a longer string by the system at run time, and\n > this expansion applies to the total length.\n from https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#maximum-path-length-limitation\n"},{"file": 53,"line": 914,"col": 4,"fields": [9472,9473,9474,9475]},{"file": 61,"line": 838,"col": 4},{"file": 53,"line": 619,"col": 4},{"file": 61,"line": 472,"col": 4},{"file": 53,"line": 61,"col": 4,"fields": [9476,9477,9478,9479,9480,9481,9482]},{"file": 61,"line": 447,"col": 4},{"file": 61,"line": 489,"col": 4},{"file": 61,"line": 13,"col": 4,"docs": " The standard input device. Initially, this is the console input buffer, CONIN$.\n"},{"file": 61,"line": 103,"col": 4},{"file": 61,"line": 120,"col": 4},{"file": 61,"line": 548,"col": 4},{"file": 53,"line": 621,"col": 4,"fields": [9483]},{"file": 53,"line": 899,"col": 4,"fields": [9484]},{"file": 53,"line": 13,"col": 4},{"file": 61,"line": 792,"col": 4},{"file": 61,"line": 760,"col": 4},{"file": 61,"line": 46,"col": 4},{"file": 61,"line": 500,"col": 4},{"file": 61,"line": 700,"col": 4},{"file": 61,"line": 807,"col": 4},{"file": 61,"line": 91,"col": 4},{"file": 61,"line": 794,"col": 4},{"file": 53,"line": 779,"col": 4},{"file": 61,"line": 209,"col": 4},{"file": 61,"line": 165,"col": 4},{"file": 61,"line": 736,"col": 4},{"file": 53,"line": 523,"col": 4},{"file": 53,"line": 567,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_END`.\n","fields": [9485,9486]},{"file": 61,"line": 76,"col": 4},{"file": 61,"line": 585,"col": 4},{"file": 61,"line": 550,"col": 4},{"file": 61,"line": 494,"col": 4},{"file": 61,"line": 920,"col": 4},{"file": 61,"line": 449,"col": 4},{"file": 53,"line": 14,"col": 4},{"file": 61,"line": 92,"col": 4},{"file": 61,"line": 587,"col": 4},{"file": 53,"line": 48,"col": 4,"fields": [9487,9488,9489,9490,9491,9492,9493]},{"file": 53,"line": 812,"col": 4,"fields": [9494,9495,9496,9497,9498,9499,9500,9501,9502,9503]},{"file": 53,"line": 9,"col": 0},{"file": 53,"line": 1028,"col": 0,"fields": [9504,9505]},{"file": 53,"line": 10,"col": 0},{"file": 53,"line": 7,"col": 0},{"file": 53,"line": 11,"col": 0},{"file": 53,"line": 6,"col": 0},{"file": 53,"line": 733,"col": 0},{"file": 53,"line": 8,"col": 0},{"file": 54,"line": 88,"col": 4,"fields": [9506,9507]},{"file": 54,"line": 28,"col": 4,"fields": [9508,9509]},{"file": 54,"line": 132,"col": 0,"fields": [9510,9511]},{"file": 54,"line": 161,"col": 0,"fields": [9512,9513,9514]},{"file": 54,"line": 122,"col": 0,"fields": [9515,9516]},{"file": 54,"line": 141,"col": 0,"fields": [9517,9518]},{"file": 54,"line": 0,"col": 0},{"file": 54,"line": 1,"col": 0},{"file": 54,"line": 150,"col": 0,"fields": [9519,9520,9521]},{"file": 54,"line": 127,"col": 0,"fields": [9522,9523]},{"file": 23,"line": 1192,"col": 4,"fields": [9524,9525]},{"file": 23,"line": 1188,"col": 4,"docs": " Returns the address from the macho file\n","fields": [9526]},{"file": 30,"line": 485,"col": 8,"fields": [9527,9528]},{"file": 30,"line": 471,"col": 8,"fields": [9529,9530,9531]},{"file": 30,"line": 479,"col": 8,"fields": [9532,9533]},{"file": 30,"line": 496,"col": 4,"fields": [9534,9535,9536]},{"file": 31,"line": 184,"col": 8,"fields": [9537]},{"file": 31,"line": 215,"col": 8,"fields": [9538,9539]},{"file": 31,"line": 43,"col": 8,"fields": [9540,9541]},{"file": 31,"line": 122,"col": 8,"fields": [9542,9543]},{"file": 31,"line": 55,"col": 8,"fields": [9544]},{"file": 31,"line": 94,"col": 4,"fields": [9545,9546]},{"file": 31,"line": 236,"col": 4},{"file": 55,"line": 7,"col": 4,"docs": " Describes how pointer types should be hashed.\n"},{"file": 55,"line": 55,"col": 4,"docs": " Helper function to hash a set of contiguous objects, from an array or slice.\n","fields": [9547,9548,9549]},{"file": 55,"line": 23,"col": 4,"docs": " Helper function to hash a pointer and mutate the strategy if needed.\n","fields": [9550,9551,9552]},{"file": 55,"line": 1,"col": 0},{"file": 55,"line": 199,"col": 0,"fields": [9553]},{"file": 55,"line": 183,"col": 0},{"file": 55,"line": 185,"col": 0,"fields": [9554]},{"file": 55,"line": 0,"col": 0},{"file": 55,"line": 206,"col": 0,"fields": [9555]},{"file": 55,"line": 192,"col": 0,"fields": [9556]},{"file": 55,"line": 4,"col": 0},{"file": 55,"line": 2,"col": 0},{"file": 55,"line": 182,"col": 0},{"file": 55,"line": 3,"col": 0},{"file": 56,"line": 148,"col": 4,"fields": [9557]},{"file": 56,"line": 21,"col": 4},{"file": 56,"line": 186,"col": 4,"fields": [9558]},{"file": 56,"line": 205,"col": 4,"fields": [9559]},{"file": 56,"line": 749,"col": 4,"docs": " If the path is a file in the current directory (no directory component)\n then returns null\n","fields": [9560]},{"file": 56,"line": 997,"col": 4,"docs": " Returns the relative path from `from` to `to`. If `from` and `to` each\n resolve to the same path (after calling `resolve` on each), a zero-length\n string is returned.\n On Windows this canonicalizes the drive to a capital letter and paths to `\\\\`.\n","fields": [9561,9562,9563]},{"file": 56,"line": 603,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another.\n It resolves \".\" and \"..\".\n The result does not have a trailing path separator.\n If all paths are relative it uses the current working directory as a starting point.\n Note: all usage of this function should be audited due to the existence of symlinks.\n Without performing actual syscalls, resolving `..` could be incorrect.\n","fields": [9564,9565]},{"file": 56,"line": 910,"col": 4,"fields": [9566]},{"file": 56,"line": 757,"col": 4,"fields": [9567]},{"file": 56,"line": 167,"col": 4,"fields": [9568]},{"file": 56,"line": 881,"col": 4,"fields": [9569]},{"file": 56,"line": 17,"col": 4},{"file": 56,"line": 791,"col": 4,"fields": [9570]},{"file": 56,"line": 262,"col": 4,"fields": [9571]},{"file": 56,"line": 1005,"col": 4,"fields": [9572,9573,9574]},{"file": 56,"line": 18,"col": 4},{"file": 56,"line": 140,"col": 4,"fields": [9575]},{"file": 56,"line": 22,"col": 4},{"file": 56,"line": 80,"col": 4,"docs": " Naively combines a series of paths with the native path seperator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [9576,9577]},{"file": 56,"line": 15,"col": 4},{"file": 56,"line": 341,"col": 4,"fields": [9578]},{"file": 56,"line": 422,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another.\n It resolves \".\" and \"..\".\n The result does not have a trailing path separator.\n If all paths are relative it uses the current working directory as a starting point.\n Each drive has its own current working directory.\n Path separators are canonicalized to '\\\\' and drives are canonicalized to capital letters.\n Note: all usage of this function should be audited due to the existence of symlinks.\n Without performing actual syscalls, resolving `..` could be incorrect.\n","fields": [9579,9580]},{"file": 56,"line": 250,"col": 4},{"file": 56,"line": 349,"col": 4,"fields": [9581]},{"file": 56,"line": 19,"col": 4},{"file": 56,"line": 25,"col": 4,"fields": [9582]},{"file": 56,"line": 1078,"col": 4,"fields": [9583,9584,9585]},{"file": 56,"line": 406,"col": 4,"docs": " On Windows, this calls `resolveWindows` and on POSIX it calls `resolvePosix`.\n","fields": [9586,9587]},{"file": 56,"line": 13,"col": 4},{"file": 56,"line": 14,"col": 4},{"file": 56,"line": 76,"col": 4},{"file": 56,"line": 23,"col": 4},{"file": 56,"line": 889,"col": 4,"fields": [9588]},{"file": 56,"line": 0,"col": 0},{"file": 56,"line": 394,"col": 0,"fields": [9589,9590]},{"file": 56,"line": 8,"col": 0},{"file": 56,"line": 246,"col": 0,"fields": [9591,9592]},{"file": 56,"line": 2,"col": 0},{"file": 56,"line": 4,"col": 0},{"file": 56,"line": 743,"col": 0,"fields": [9593]},{"file": 56,"line": 989,"col": 0,"fields": [9594,9595]},{"file": 56,"line": 7,"col": 0},{"file": 56,"line": 873,"col": 0,"fields": [9596,9597]},{"file": 56,"line": 6,"col": 0},{"file": 56,"line": 242,"col": 0,"fields": [9598,9599]},{"file": 56,"line": 981,"col": 0,"fields": [9600,9601]},{"file": 56,"line": 97,"col": 0,"fields": [9602,9603]},{"file": 56,"line": 865,"col": 0,"fields": [9604,9605]},{"file": 56,"line": 353,"col": 0,"fields": [9606,9607]},{"file": 56,"line": 1172,"col": 0,"fields": [9608,9609,9610]},{"file": 56,"line": 364,"col": 0,"fields": [9611,9612,9613]},{"file": 56,"line": 387,"col": 0,"fields": [9614]},{"file": 56,"line": 90,"col": 0,"fields": [9615,9616]},{"file": 56,"line": 1,"col": 0},{"file": 56,"line": 739,"col": 0,"fields": [9617]},{"file": 56,"line": 10,"col": 0},{"file": 56,"line": 1167,"col": 0,"fields": [9618,9619,9620]},{"file": 56,"line": 9,"col": 0},{"file": 56,"line": 11,"col": 0},{"file": 56,"line": 985,"col": 0,"fields": [9621,9622]},{"file": 56,"line": 3,"col": 0},{"file": 56,"line": 5,"col": 0},{"file": 57,"line": 3,"col": 4},{"file": 57,"line": 1,"col": 0},{"file": 57,"line": 0,"col": 0},{"file": 19,"line": 333,"col": 20,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 59,"line": 115,"col": 4},{"file": 59,"line": 4,"col": 0},{"file": 59,"line": 0,"col": 0},{"file": 59,"line": 1,"col": 0},{"file": 59,"line": 69,"col": 0},{"file": 59,"line": 63,"col": 0},{"file": 59,"line": 299,"col": 0},{"file": 59,"line": 48,"col": 0},{"file": 59,"line": 3,"col": 0},{"file": 59,"line": 89,"col": 0},{"file": 59,"line": 99,"col": 0},{"file": 59,"line": 96,"col": 0},{"file": 59,"line": 84,"col": 0},{"file": 59,"line": 55,"col": 0},{"file": 59,"line": 5,"col": 0},{"file": 59,"line": 43,"col": 0},{"file": 59,"line": 2,"col": 0},{"file": 59,"line": 105,"col": 0},{"file": 60,"line": 0,"col": 0},{"file": 60,"line": 1,"col": 0},{"file": 60,"line": 4,"col": 0},{"file": 60,"line": 2,"col": 0},{"file": 60,"line": 3,"col": 0},{"file": 61,"line": 4,"col": 0},{"file": 61,"line": 3,"col": 0},{"file": 61,"line": 5,"col": 0},{"file": 61,"line": 2,"col": 0},{"file": 22,"line": 277,"col": 4},{"file": 22,"line": 278,"col": 4},{"file": 22,"line": 279,"col": 4},{"file": 22,"line": 280,"col": 4},{"file": 22,"line": 281,"col": 4},{"file": 22,"line": 282,"col": 4},{"file": 22,"line": 284,"col": 4,"docs": " This error occurs when no global event loop is configured,\n and reading from the file descriptor would block.\n"},{"file": 22,"line": 2817,"col": 4,"docs": " The Operating System returned an undocumented error code.\n This error is in theory not possible, but it would be better\n to handle this error than to invoke undefined behavior.\n"},{"file": 22,"line": 436,"col": 4},{"file": 22,"line": 437,"col": 4},{"file": 22,"line": 438,"col": 4},{"file": 22,"line": 439,"col": 4},{"file": 22,"line": 440,"col": 4},{"file": 22,"line": 441,"col": 4},{"file": 22,"line": 442,"col": 4},{"file": 22,"line": 443,"col": 4},{"file": 22,"line": 445,"col": 4,"docs": " This error occurs when no global event loop is configured,\n and reading from the file descriptor would block.\n"},{"file": 22,"line": 2431,"col": 28},{"file": 18,"line": 36,"col": 32},{"file": 4,"line": 59,"col": 28},{"file": 15,"line": 60,"col": 48},{"file": 28,"line": 1030,"col": 4,"docs": " The result cannot fit in the type specified\n"},{"file": 28,"line": 1033,"col": 4,"docs": " The input had a byte that was not a digit\n"},{"file": 20,"line": 16,"col": 28},{"file": 4,"line": 189,"col": 20},{"file": 53,"line": 25,"col": 4},{"file": 53,"line": 26,"col": 4},{"file": 53,"line": 28,"col": 4,"docs": " When any of the path components can not be found or the file component can not\n be found. Some operating systems distinguish between path components not found and\n file components not found, but they are collapsed into FileNotFound to gain\n consistency across operating systems.\n"},{"file": 53,"line": 34,"col": 4},{"file": 53,"line": 35,"col": 4},{"file": 53,"line": 36,"col": 4},{"file": 53,"line": 38,"col": 4,"docs": " On Windows, file paths must be valid Unicode.\n"},{"file": 53,"line": 41,"col": 4,"docs": " On Windows, file paths cannot contain these characters:\n '/', '*', '?', '\"', '<', '>', '|'\n"},{"file": 22,"line": 620,"col": 4},{"file": 22,"line": 621,"col": 4},{"file": 22,"line": 622,"col": 4},{"file": 22,"line": 623,"col": 4},{"file": 22,"line": 634,"col": 4,"docs": " The file is too large to be opened. This error is unreachable\n for 64-bit targets, as well as when opening directories.\n"},{"file": 22,"line": 641,"col": 4,"docs": " A new path cannot be created because the device has no room for the new file.\n This error is only reachable when the `O_CREAT` flag is provided.\n"},{"file": 22,"line": 645,"col": 4,"docs": " A component used as a directory in the path was not, in fact, a directory, or\n `O_DIRECTORY` was specified and the path was not a directory.\n"},{"file": 22,"line": 651,"col": 4},{"file": 53,"line": 45,"col": 4},{"file": 22,"line": 629,"col": 4,"docs": " Insufficient kernel memory was available, or\n the named file is a FIFO and per-user hard limit on\n memory allocation for pipes has been reached.\n"},{"file": 22,"line": 638,"col": 4,"docs": " The path refers to directory but the `O_DIRECTORY` flag was not provided.\n"},{"file": 9,"line": 118,"col": 36},{"file": 9,"line": 247,"col": 24},{"file": 9,"line": 177,"col": 20},{"file": 9,"line": 174,"col": 20},{"file": 22,"line": 2030,"col": 4},{"file": 22,"line": 2031,"col": 4},{"file": 28,"line": 1083,"col": 44},{"file": 21,"line": 709,"col": 45},{"file": 21,"line": 305,"col": 48},{"file": 21,"line": 310,"col": 48},{"file": 22,"line": 619,"col": 4},{"file": 22,"line": 624,"col": 4},{"file": 22,"line": 626,"col": 4,"docs": " The path exceeded `MAX_PATH_BYTES` bytes.\n"},{"file": 22,"line": 649,"col": 4,"docs": " The path already exists and the `O_CREAT` and `O_EXCL` flags were provided.\n"},{"file": 22,"line": 1408,"col": 4},{"file": 22,"line": 2385,"col": 4},{"file": 22,"line": 2222,"col": 4,"docs": " The underlying filesystem of the specified file does not support memory mapping.\n"},{"file": 22,"line": 2225,"col": 4,"docs": " A file descriptor refers to a non-regular file. Or a file mapping was requested,\n but the file descriptor is not open for reading. Or `MAP_SHARED` was requested\n and `PROT_WRITE` is set, but the file descriptor is not open in `O_RDWR` mode.\n Or `PROT_WRITE` is set, but the file is append-only.\n"},{"file": 22,"line": 2231,"col": 4,"docs": " The `prot` argument asks for `PROT_EXEC` but the mapped area belongs to a file on\n a filesystem that was mounted no-exec.\n"},{"file": 22,"line": 2234,"col": 4},{"file": 22,"line": 2235,"col": 4},{"file": 23,"line": 2357,"col": 53},{"file": 23,"line": 1028,"col": 94},{"file": 23,"line": 1178,"col": 44},{"file": 35,"line": 56,"col": 68},{"file": 38,"line": 121,"col": 4},{"file": 38,"line": 122,"col": 4},{"file": 38,"line": 124,"col": 4,"docs": " See https://github.com/ziglang/zig/issues/1774\n"},{"file": 22,"line": 3226,"col": 4,"docs": " The system is not configured to allow yielding\n"},{"file": 43,"line": 268,"col": 48},{"file": 37,"line": 111,"col": 24},{"file": 22,"line": 2738,"col": 36},{"file": 28,"line": 1118,"col": 4,"docs": " As much as possible was written to the buffer, but it was too small to fit all the printed bytes.\n"},{"file": 22,"line": 1407,"col": 4},{"file": 22,"line": 1409,"col": 4},{"file": 22,"line": 1410,"col": 4},{"file": 22,"line": 1411,"col": 4},{"file": 22,"line": 1412,"col": 4},{"file": 22,"line": 1413,"col": 4},{"file": 22,"line": 2386,"col": 4},{"file": 22,"line": 2387,"col": 4},{"file": 19,"line": 438,"col": 21,"name": "msg"},{"file": 19,"line": 438,"col": 38,"name": "error_return_trace"},{"file": 7,"line": 574,"col": 12,"name": "x"},{"file": 7,"line": 574,"col": 20,"name": "y"},{"file": 7,"line": 574,"col": 28,"name": "z"},{"file": 7,"line": 579,"col": 12,"name": "x"},{"file": 7,"line": 579,"col": 20,"name": "y"},{"file": 7,"line": 579,"col": 28,"name": "z"},{"file": 7,"line": 579,"col": 36,"name": "w"},{"file": 7,"line": 569,"col": 12,"name": "x"},{"file": 7,"line": 569,"col": 20,"name": "y"},{"file": 23,"line": 209,"col": 14,"name": "ok"},{"file": 4,"line": 203,"col": 20,"name": "data"},{"file": 4,"line": 203,"col": 43,"name": "stream"},{"file": 4,"line": 310,"col": 12,"name": "allocator"},{"file": 4,"line": 310,"col": 43,"name": "path"},{"file": 4,"line": 240,"col": 23,"name": "stream"},{"file": 4,"line": 240,"col": 72,"name": "maxValue"},{"file": 4,"line": 108,"col": 16,"name": "b"},{"file": 4,"line": 116,"col": 16,"name": "stream"},{"file": 4,"line": 257,"col": 20,"name": "data"},{"file": 4,"line": 257,"col": 43,"name": "stream"},{"file": 4,"line": 257,"col": 92,"name": "maxValue"},{"file": 4,"line": 223,"col": 19,"name": "data"},{"file": 4,"line": 223,"col": 42,"name": "stream"},{"file": 4,"line": 247,"col": 21,"name": "data"},{"file": 4,"line": 247,"col": 44,"name": "stream"},{"file": 4,"line": 247,"col": 93,"name": "maxValue"},{"file": 4,"line": 162,"col": 15,"name": "allocator"},{"file": 4,"line": 162,"col": 46,"name": "stream"},{"file": 4,"line": 271,"col": 20,"name": "data"},{"file": 4,"line": 271,"col": 46,"name": "stream"},{"file": 4,"line": 271,"col": 95,"name": "maxValue"},{"file": 4,"line": 143,"col": 15,"name": "stream"},{"file": 4,"line": 143,"col": 64,"name": "buffer"},{"file": 4,"line": 288,"col": 19,"name": "data"},{"file": 4,"line": 288,"col": 45,"name": "stream"},{"file": 4,"line": 288,"col": 94,"name": "maxValue"},{"file": 23,"line": 223,"col": 18,"name": "trace"},{"file": 23,"line": 223,"col": 53,"name": "first_trace_addr"},{"file": 23,"line": 223,"col": 79,"name": "format","comptime": true},{"file": 23,"line": 223,"col": 108,"name": "args"},{"file": 7,"line": 211,"col": 15,"name": "x"},{"file": 7,"line": 211,"col": 23,"name": "y"},{"file": 7,"line": 211,"col": 31,"name": "z"},{"file": 7,"line": 316,"col": 15,"name": "x"},{"file": 7,"line": 316,"col": 23,"name": "y"},{"file": 7,"line": 316,"col": 31,"name": "z"},{"file": 7,"line": 316,"col": 39,"name": "w"},{"file": 7,"line": 166,"col": 15,"name": "x"},{"file": 7,"line": 166,"col": 23,"name": "y"},{"file": 7,"line": 19,"col": 19,"name": "a"},{"file": 7,"line": 19,"col": 28,"name": "b"},{"file": 33,"line": 391,"col": 11,"name": "a"},{"file": 33,"line": 391,"col": 19,"name": "b"},{"file": 7,"line": 28,"col": 19,"name": "a"},{"file": 7,"line": 28,"col": 28,"name": "b"},{"file": 7,"line": 37,"col": 19,"name": "a"},{"file": 7,"line": 37,"col": 28,"name": "b"},{"file": 7,"line": 46,"col": 19,"name": "a"},{"file": 7,"line": 46,"col": 28,"name": "b"},{"file": 7,"line": 55,"col": 21,"name": "a"},{"file": 7,"line": 55,"col": 30,"name": "b"},{"file": 7,"line": 65,"col": 19,"name": "a"},{"file": 7,"line": 65,"col": 28,"name": "b"},{"file": 7,"line": 79,"col": 23,"name": "a"},{"file": 7,"line": 74,"col": 22,"name": "a"},{"file": 7,"line": 224,"col": 17,"name": "a"},{"file": 7,"line": 224,"col": 26,"name": "b"},{"file": 7,"line": 233,"col": 28,"name": "a"},{"file": 7,"line": 243,"col": 29,"name": "a"},{"file": 7,"line": 252,"col": 30,"name": "a"},{"file": 7,"line": 260,"col": 31,"name": "a"},{"file": 7,"line": 416,"col": 15,"name": "a"},{"file": 7,"line": 416,"col": 24,"name": "b"},{"file": 7,"line": 432,"col": 21,"name": "a"},{"file": 7,"line": 330,"col": 21,"name": "vec"},{"file": 7,"line": 330,"col": 32,"name": "mat"},{"file": 34,"line": 778,"col": 20,"name": "self"},{"file": 34,"line": 778,"col": 31,"name": "sub_path"},{"file": 9,"line": 165,"col": 12,"name": "allocator"},{"file": 9,"line": 165,"col": 43,"name": "file"},{"file": 35,"line": 673,"col": 24,"name": "buffer"},{"file": 35,"line": 699,"col": 23,"name": "allocator"},{"file": 35,"line": 699,"col": 46,"name": "old_mem"},{"file": 35,"line": 699,"col": 61,"name": "old_align"},{"file": 35,"line": 699,"col": 77,"name": "new_size"},{"file": 35,"line": 699,"col": 94,"name": "new_align"},{"file": 35,"line": 684,"col": 21,"name": "allocator"},{"file": 35,"line": 684,"col": 44,"name": "n"},{"file": 35,"line": 684,"col": 54,"name": "alignment"},{"file": 20,"line": 1491,"col": 20,"name": "addr"},{"file": 20,"line": 1491,"col": 33,"name": "alignment"},{"file": 21,"line": 246,"col": 11,"name": "x"},{"file": 21,"line": 246,"col": 19,"name": "y"},{"file": 35,"line": 710,"col": 22,"name": "allocator"},{"file": 35,"line": 710,"col": 45,"name": "old_mem"},{"file": 35,"line": 710,"col": 60,"name": "old_align"},{"file": 35,"line": 710,"col": 76,"name": "new_size"},{"file": 35,"line": 710,"col": 93,"name": "new_align"},{"file": 40,"line": 306,"col": 20,"name": "file"},{"file": 15,"line": 58,"col": 25,"name": "self"},{"file": 15,"line": 58,"col": 38,"name": "buf"},{"file": 20,"line": 1331,"col": 15,"name": "ptr"},{"file": 15,"line": 46,"col": 24,"name": "self"},{"file": 15,"line": 46,"col": 37,"name": "buffer"},{"file": 9,"line": 53,"col": 26,"name": "allocator"},{"file": 9,"line": 53,"col": 57,"name": "header"},{"file": 9,"line": 53,"col": 73,"name": "file"},{"file": 9,"line": 53,"col": 93,"name": "stream"},{"file": 20,"line": 103,"col": 17,"name": "self"},{"file": 20,"line": 103,"col": 35,"name": "T","comptime": true},{"file": 20,"line": 103,"col": 53,"name": "n"},{"file": 9,"line": 207,"col": 12,"name": "stream"},{"file": 9,"line": 214,"col": 16,"name": "self"},{"file": 15,"line": 174,"col": 24,"name": "self"},{"file": 15,"line": 32,"col": 20,"name": "self"},{"file": 15,"line": 32,"col": 33,"name": "buffer"},{"file": 9,"line": 133,"col": 22,"name": "self"},{"file": 9,"line": 245,"col": 14,"name": "decoder"},{"file": 20,"line": 79,"col": 18,"name": "self"},{"file": 20,"line": 79,"col": 36,"name": "T","comptime": true},{"file": 40,"line": 174,"col": 23,"name": "self"},{"file": 40,"line": 174,"col": 35,"name": "offset"},{"file": 20,"line": 87,"col": 19,"name": "self"},{"file": 20,"line": 87,"col": 37,"name": "ptr"},{"file": 40,"line": 138,"col": 17,"name": "self"},{"file": 4,"line": 57,"col": 19,"name": "self"},{"file": 4,"line": 57,"col": 32,"name": "x"},{"file": 4,"line": 57,"col": 42,"name": "y"},{"file": 4,"line": 57,"col": 52,"name": "value"},{"file": 40,"line": 52,"col": 20,"name": "path"},{"file": 20,"line": 355,"col": 11,"name": "T","comptime": true},{"file": 20,"line": 355,"col": 29,"name": "a"},{"file": 20,"line": 355,"col": 43,"name": "b"},{"file": 28,"line": 1007,"col": 16,"name": "T","comptime": true},{"file": 28,"line": 1007,"col": 34,"name": "buf"},{"file": 28,"line": 1007,"col": 51,"name": "radix"},{"file": 28,"line": 1037,"col": 21,"name": "T","comptime": true},{"file": 28,"line": 1037,"col": 39,"name": "buf"},{"file": 28,"line": 1037,"col": 56,"name": "radix"},{"file": 15,"line": 206,"col": 26,"name": "self"},{"file": 15,"line": 206,"col": 39,"name": "T","comptime": true},{"file": 20,"line": 551,"col": 22,"name": "T","comptime": true},{"file": 20,"line": 551,"col": 40,"name": "bytes"},{"file": 16,"line": 37,"col": 21,"name": "self"},{"file": 16,"line": 37,"col": 34,"name": "format","comptime": true},{"file": 16,"line": 37,"col": 63,"name": "args"},{"file": 23,"line": 183,"col": 22,"name": "stack_trace"},{"file": 23,"line": 91,"col": 29,"name": "start_addr"},{"file": 23,"line": 48,"col": 12,"name": "fmt","comptime": true},{"file": 23,"line": 48,"col": 38,"name": "args"},{"file": 7,"line": 143,"col": 28,"name": "a"},{"file": 7,"line": 143,"col": 37,"name": "b"},{"file": 7,"line": 186,"col": 21,"name": "vec"},{"file": 7,"line": 186,"col": 32,"name": "mat"},{"file": 7,"line": 134,"col": 28,"name": "a"},{"file": 7,"line": 134,"col": 37,"name": "b"},{"file": 7,"line": 85,"col": 25,"name": "vec"},{"file": 62,"line": 15,"col": 12,"name": "x"},{"file": 7,"line": 285,"col": 30,"name": "vec"},{"file": 7,"line": 285,"col": 41,"name": "mat"},{"file": 7,"line": 269,"col": 21,"name": "vec"},{"file": 7,"line": 269,"col": 32,"name": "mat"},{"file": 7,"line": 280,"col": 29,"name": "vec"},{"file": 7,"line": 280,"col": 40,"name": "mat"},{"file": 7,"line": 500,"col": 27,"name": "axis"},{"file": 7,"line": 500,"col": 39,"name": "angle"},{"file": 7,"line": 542,"col": 29,"name": "v"},{"file": 7,"line": 518,"col": 23,"name": "scale"},{"file": 7,"line": 475,"col": 24,"name": "eye"},{"file": 7,"line": 475,"col": 35,"name": "center"},{"file": 7,"line": 475,"col": 49,"name": "up"},{"file": 7,"line": 485,"col": 29,"name": "fov"},{"file": 7,"line": 485,"col": 39,"name": "aspect"},{"file": 7,"line": 485,"col": 52,"name": "near"},{"file": 7,"line": 485,"col": 63,"name": "far"},{"file": 7,"line": 449,"col": 22,"name": "eye"},{"file": 7,"line": 449,"col": 33,"name": "direction"},{"file": 7,"line": 449,"col": 50,"name": "up"},{"file": 7,"line": 530,"col": 32,"name": "x"},{"file": 7,"line": 530,"col": 40,"name": "y"},{"file": 7,"line": 530,"col": 48,"name": "z"},{"file": 7,"line": 556,"col": 28,"name": "left"},{"file": 7,"line": 556,"col": 39,"name": "right"},{"file": 7,"line": 556,"col": 51,"name": "bottom"},{"file": 7,"line": 556,"col": 64,"name": "top"},{"file": 7,"line": 556,"col": 74,"name": "near"},{"file": 7,"line": 556,"col": 85,"name": "far"},{"file": 7,"line": 341,"col": 16,"name": "vec"},{"file": 7,"line": 341,"col": 27,"name": "index","comptime": true},{"file": 34,"line": 697,"col": 20,"name": "self"},{"file": 34,"line": 697,"col": 31,"name": "sub_path"},{"file": 34,"line": 697,"col": 53,"name": "flags"},{"file": 20,"line": 1512,"col": 21,"name": "addr"},{"file": 20,"line": 1512,"col": 34,"name": "alignment"},{"file": 40,"line": 340,"col": 18,"name": "in_stream"},{"file": 40,"line": 340,"col": 38,"name": "buffer"},{"file": 20,"line": 108,"col": 8,"name": "self"},{"file": 20,"line": 109,"col": 8,"name": "T","comptime": true},{"file": 20,"line": 111,"col": 8,"docs": " null means naturally aligned\n","name": "alignment","comptime": true},{"file": 20,"line": 112,"col": 8,"name": "n"},{"file": 20,"line": 230,"col": 16,"name": "self"},{"file": 20,"line": 230,"col": 34,"name": "memory"},{"file": 22,"line": 2491,"col": 17,"name": "fd"},{"file": 22,"line": 2491,"col": 27,"name": "offset"},{"file": 22,"line": 92,"col": 13,"name": "fd"},{"file": 28,"line": 1083,"col": 19,"name": "c"},{"file": 28,"line": 1083,"col": 26,"name": "radix"},{"file": 21,"line": 709,"col": 12,"name": "T","comptime": true},{"file": 21,"line": 709,"col": 30,"name": "x"},{"file": 21,"line": 305,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 305,"col": 29,"name": "a"},{"file": 21,"line": 305,"col": 35,"name": "b"},{"file": 21,"line": 310,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 310,"col": 29,"name": "a"},{"file": 21,"line": 310,"col": 35,"name": "b"},{"file": 20,"line": 543,"col": 21,"name": "T","comptime": true},{"file": 20,"line": 543,"col": 39,"name": "bytes"},{"file": 59,"line": 301,"col": 19,"name": "size"},{"file": 59,"line": 273,"col": 15,"name": "addr"},{"file": 59,"line": 117,"col": 24,"name": "addr"},{"file": 22,"line": 251,"col": 12,"name": "status"},{"file": 36,"line": 187,"col": 20,"name": "argc"},{"file": 36,"line": 187,"col": 33,"name": "argv"},{"file": 36,"line": 187,"col": 51,"name": "envp"},{"file": 22,"line": 2856,"col": 17,"name": "sig"},{"file": 22,"line": 2856,"col": 26,"name": "act"},{"file": 22,"line": 2856,"col": 49,"name": "oact"},{"file": 40,"line": 313,"col": 21,"name": "file"},{"file": 28,"line": 89,"col": 4,"name": "context"},{"file": 28,"line": 90,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 91,"col": 4,"name": "output"},{"file": 28,"line": 92,"col": 4,"name": "fmt","comptime": true},{"file": 28,"line": 93,"col": 4,"name": "args"},{"file": 22,"line": 210,"col": 13,"name": "sig"},{"file": 23,"line": 810,"col": 25,"name": "allocator"},{"file": 11,"line": 606,"col": 20,"name": "self"},{"file": 11,"line": 567,"col": 17,"name": "self"},{"file": 23,"line": 1041,"col": 26,"name": "allocator"},{"file": 40,"line": 189,"col": 21,"name": "self"},{"file": 22,"line": 2243,"col": 4,"name": "ptr"},{"file": 22,"line": 2244,"col": 4,"name": "length"},{"file": 22,"line": 2245,"col": 4,"name": "prot"},{"file": 22,"line": 2246,"col": 4,"name": "flags"},{"file": 22,"line": 2247,"col": 4,"name": "fd"},{"file": 22,"line": 2248,"col": 4,"name": "offset"},{"file": 18,"line": 47,"col": 16,"name": "slice"},{"file": 23,"line": 1017,"col": 4,"name": "allocator"},{"file": 23,"line": 1018,"col": 4,"name": "elf_seekable_stream"},{"file": 23,"line": 1019,"col": 4,"name": "elf_in_stream"},{"file": 22,"line": 2280,"col": 14,"name": "memory"},{"file": 26,"line": 372,"col": 8,"name": "allocator"},{"file": 26,"line": 373,"col": 8,"name": "seekable_stream"},{"file": 26,"line": 374,"col": 8,"name": "in"},{"file": 18,"line": 19,"col": 22,"name": "self"},{"file": 18,"line": 19,"col": 35,"name": "amt"},{"file": 15,"line": 244,"col": 24,"name": "self"},{"file": 15,"line": 244,"col": 37,"name": "Enum","comptime": true},{"file": 15,"line": 244,"col": 58,"name": "endian"},{"file": 15,"line": 212,"col": 23,"name": "self"},{"file": 15,"line": 212,"col": 36,"name": "T","comptime": true},{"file": 15,"line": 212,"col": 54,"name": "endian"},{"file": 20,"line": 598,"col": 15,"name": "T","comptime": true},{"file": 20,"line": 598,"col": 33,"name": "bytes"},{"file": 20,"line": 598,"col": 78,"name": "endian"},{"file": 18,"line": 23,"col": 25,"name": "self"},{"file": 18,"line": 15,"col": 22,"name": "self"},{"file": 18,"line": 15,"col": 35,"name": "pos"},{"file": 23,"line": 996,"col": 27,"name": "elf_file"},{"file": 23,"line": 996,"col": 47,"name": "name"},{"file": 26,"line": 503,"col": 23,"name": "elf"},{"file": 26,"line": 503,"col": 34,"name": "name"},{"file": 26,"line": 499,"col": 17,"name": "elf"},{"file": 23,"line": 1008,"col": 26,"name": "di"},{"file": 23,"line": 1008,"col": 42,"name": "allocator"},{"file": 8,"line": 35,"col": 20,"name": "allocator"},{"file": 23,"line": 1288,"col": 24,"name": "di"},{"file": 23,"line": 2351,"col": 21,"name": "E","comptime": true},{"file": 23,"line": 2351,"col": 39,"name": "in_stream"},{"file": 23,"line": 2351,"col": 67,"name": "is_64"},{"file": 15,"line": 200,"col": 29,"name": "self"},{"file": 15,"line": 200,"col": 42,"name": "T","comptime": true},{"file": 18,"line": 27,"col": 22,"name": "self"},{"file": 23,"line": 1489,"col": 22,"name": "di"},{"file": 23,"line": 1489,"col": 38,"name": "abbrev_offset"},{"file": 8,"line": 58,"col": 23,"name": "self"},{"file": 8,"line": 138,"col": 22,"name": "self"},{"file": 8,"line": 138,"col": 35,"name": "item"},{"file": 23,"line": 1503,"col": 24,"name": "di"},{"file": 23,"line": 1224,"col": 21,"name": "self"},{"file": 54,"line": 3,"col": 19,"name": "T","comptime": true},{"file": 54,"line": 3,"col": 37,"name": "in_stream"},{"file": 8,"line": 217,"col": 22,"name": "self"},{"file": 8,"line": 206,"col": 30,"name": "self"},{"file": 8,"line": 206,"col": 43,"name": "new_capacity"},{"file": 8,"line": 93,"col": 24,"name": "self"},{"file": 20,"line": 148,"col": 19,"name": "self"},{"file": 20,"line": 148,"col": 37,"name": "old_mem"},{"file": 20,"line": 148,"col": 51,"name": "new_n"},{"file": 8,"line": 223,"col": 36,"name": "self"},{"file": 23,"line": 1528,"col": 16,"name": "di"},{"file": 23,"line": 1528,"col": 32,"name": "abbrev_table"},{"file": 23,"line": 1528,"col": 66,"name": "is_64"},{"file": 23,"line": 2095,"col": 23,"name": "abbrev_table"},{"file": 23,"line": 2095,"col": 57,"name": "abbrev_code"},{"file": 8,"line": 192,"col": 22,"name": "self"},{"file": 8,"line": 192,"col": 35,"name": "new_len"},{"file": 8,"line": 64,"col": 28,"name": "self"},{"file": 23,"line": 2046,"col": 18,"name": "allocator"},{"file": 23,"line": 2046,"col": 45,"name": "in_stream"},{"file": 23,"line": 2046,"col": 61,"name": "form_id"},{"file": 23,"line": 2046,"col": 75,"name": "is_64"},{"file": 23,"line": 1812,"col": 15,"name": "self"},{"file": 23,"line": 1812,"col": 33,"name": "id"},{"file": 23,"line": 1852,"col": 21,"name": "self"},{"file": 23,"line": 1852,"col": 39,"name": "di"},{"file": 23,"line": 1852,"col": 55,"name": "id"},{"file": 23,"line": 1714,"col": 17,"name": "di"},{"file": 23,"line": 1714,"col": 33,"name": "offset"},{"file": 23,"line": 1844,"col": 18,"name": "self"},{"file": 23,"line": 1844,"col": 36,"name": "id"},{"file": 23,"line": 1819,"col": 19,"name": "self"},{"file": 23,"line": 1819,"col": 37,"name": "id"},{"file": 23,"line": 1796,"col": 20,"name": "self"},{"file": 23,"line": 1390,"col": 27,"name": "di"},{"file": 23,"line": 262,"col": 4,"name": "stack_trace"},{"file": 23,"line": 263,"col": 4,"name": "out_stream"},{"file": 23,"line": 264,"col": 4,"name": "allocator"},{"file": 23,"line": 265,"col": 4,"name": "debug_info"},{"file": 23,"line": 266,"col": 4,"name": "tty_color"},{"file": 23,"line": 353,"col": 28,"name": "debug_info"},{"file": 23,"line": 353,"col": 52,"name": "out_stream"},{"file": 23,"line": 353,"col": 69,"name": "address"},{"file": 23,"line": 353,"col": 85,"name": "tty_color"},{"file": 23,"line": 751,"col": 33,"name": "debug_info"},{"file": 23,"line": 751,"col": 57,"name": "out_stream"},{"file": 23,"line": 751,"col": 74,"name": "address"},{"file": 23,"line": 751,"col": 90,"name": "tty_color"},{"file": 23,"line": 1235,"col": 8,"name": "self"},{"file": 23,"line": 1236,"col": 8,"name": "out_stream"},{"file": 23,"line": 1237,"col": 8,"name": "address"},{"file": 23,"line": 1238,"col": 8,"name": "tty_color"},{"file": 23,"line": 1239,"col": 8,"name": "printLineFromFile","comptime": true},{"file": 23,"line": 1455,"col": 23,"name": "di"},{"file": 23,"line": 1455,"col": 39,"name": "target_address"},{"file": 23,"line": 1827,"col": 24,"name": "self"},{"file": 23,"line": 1827,"col": 42,"name": "id"},{"file": 23,"line": 1548,"col": 25,"name": "di"},{"file": 23,"line": 1548,"col": 41,"name": "compile_unit"},{"file": 23,"line": 1548,"col": 68,"name": "target_address"},{"file": 15,"line": 182,"col": 30,"name": "self"},{"file": 23,"line": 1228,"col": 22,"name": "self"},{"file": 23,"line": 1959,"col": 17,"name": "allocator"},{"file": 23,"line": 1959,"col": 44,"name": "in_stream"},{"file": 23,"line": 1902,"col": 16,"name": "is_stmt"},{"file": 23,"line": 1902,"col": 31,"name": "include_dirs"},{"file": 23,"line": 1902,"col": 65,"name": "file_entries"},{"file": 23,"line": 1902,"col": 102,"name": "target_address"},{"file": 23,"line": 1924,"col": 26,"name": "self"},{"file": 56,"line": 86,"col": 17,"name": "allocator"},{"file": 56,"line": 86,"col": 40,"name": "paths"},{"file": 56,"line": 35,"col": 11,"name": "allocator"},{"file": 56,"line": 35,"col": 34,"name": "separator"},{"file": 56,"line": 35,"col": 49,"name": "paths"},{"file": 20,"line": 244,"col": 12,"name": "T","comptime": true},{"file": 20,"line": 244,"col": 30,"name": "dest"},{"file": 20,"line": 244,"col": 41,"name": "source"},{"file": 54,"line": 56,"col": 19,"name": "T","comptime": true},{"file": 54,"line": 56,"col": 37,"name": "in_stream"},{"file": 23,"line": 1276,"col": 21,"name": "di"},{"file": 23,"line": 1276,"col": 37,"name": "address"},{"file": 23,"line": 756,"col": 4,"name": "out_stream"},{"file": 23,"line": 757,"col": 4,"name": "line_info"},{"file": 23,"line": 758,"col": 4,"name": "address"},{"file": 23,"line": 759,"col": 4,"name": "symbol_name"},{"file": 23,"line": 760,"col": 4,"name": "compile_unit_name"},{"file": 23,"line": 761,"col": 4,"name": "tty_color"},{"file": 23,"line": 762,"col": 4,"name": "printLineFromFile","comptime": true},{"file": 23,"line": 1150,"col": 26,"name": "out_stream"},{"file": 23,"line": 1150,"col": 43,"name": "line_info"},{"file": 40,"line": 288,"col": 16,"name": "self"},{"file": 40,"line": 288,"col": 28,"name": "buffer"},{"file": 16,"line": 41,"col": 25,"name": "self"},{"file": 16,"line": 41,"col": 38,"name": "byte"},{"file": 16,"line": 25,"col": 21,"name": "self"},{"file": 16,"line": 25,"col": 34,"name": "bytes"},{"file": 23,"line": 1875,"col": 14,"name": "self"},{"file": 23,"line": 321,"col": 30,"name": "out_stream"},{"file": 23,"line": 321,"col": 47,"name": "debug_info"},{"file": 23,"line": 321,"col": 71,"name": "tty_color"},{"file": 23,"line": 321,"col": 88,"name": "start_addr"},{"file": 23,"line": 285,"col": 16,"name": "first_addr"},{"file": 23,"line": 301,"col": 12,"name": "self"},{"file": 41,"line": 195,"col": 23,"name": "self"},{"file": 41,"line": 253,"col": 27,"name": "self"},{"file": 21,"line": 297,"col": 11,"name": "x"},{"file": 21,"line": 297,"col": 19,"name": "y"},{"file": 7,"line": 177,"col": 16,"name": "vec"},{"file": 7,"line": 177,"col": 27,"name": "index","comptime": true},{"file": 7,"line": 289,"col": 16,"name": "vec"},{"file": 7,"line": 289,"col": 27,"name": "index","comptime": true},{"file": 63,"line": 15,"col": 11,"name": "x"},{"file": 64,"line": 16,"col": 11,"name": "x"},{"file": 65,"line": 16,"col": 12,"name": "x"},{"file": 66,"line": 16,"col": 11,"name": "x"},{"file": 22,"line": 2801,"col": 19,"name": "file_path"},{"file": 34,"line": 708,"col": 21,"name": "self"},{"file": 34,"line": 708,"col": 32,"name": "sub_path"},{"file": 34,"line": 708,"col": 57,"name": "flags"},{"file": 52,"line": 42,"col": 16,"name": "r"},{"file": 52,"line": 448,"col": 13,"name": "fd"},{"file": 52,"line": 448,"col": 22,"name": "offset"},{"file": 52,"line": 448,"col": 35,"name": "whence"},{"file": 22,"line": 2825,"col": 23,"name": "err"},{"file": 52,"line": 431,"col": 13,"name": "fd"},{"file": 58,"line": 19,"col": 16,"name": "number"},{"file": 58,"line": 19,"col": 31,"name": "arg1"},{"file": 58,"line": 19,"col": 44,"name": "arg2"},{"file": 52,"line": 457,"col": 18,"name": "status"},{"file": 52,"line": 679,"col": 17,"name": "sig"},{"file": 52,"line": 679,"col": 26,"name": "act","noalias": true},{"file": 52,"line": 679,"col": 57,"name": "oact","noalias": true},{"file": 40,"line": 110,"col": 22,"name": "handle"},{"file": 40,"line": 354,"col": 19,"name": "out_stream"},{"file": 40,"line": 354,"col": 40,"name": "bytes"},{"file": 28,"line": 320,"col": 4,"name": "value"},{"file": 28,"line": 321,"col": 4,"name": "fmt","comptime": true},{"file": 28,"line": 322,"col": 4,"name": "options"},{"file": 28,"line": 323,"col": 4,"name": "context"},{"file": 28,"line": 324,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 325,"col": 4,"name": "output"},{"file": 28,"line": 326,"col": 4,"name": "max_depth"},{"file": 52,"line": 675,"col": 19,"name": "flags"},{"file": 52,"line": 675,"col": 31,"name": "set","noalias": true},{"file": 52,"line": 675,"col": 62,"name": "oldset","noalias": true},{"file": 52,"line": 470,"col": 13,"name": "tid"},{"file": 52,"line": 470,"col": 25,"name": "sig"},{"file": 35,"line": 523,"col": 16,"name": "child_allocator"},{"file": 11,"line": 634,"col": 18,"name": "self"},{"file": 11,"line": 574,"col": 19,"name": "self"},{"file": 35,"line": 183,"col": 15,"name": "allocator"},{"file": 35,"line": 183,"col": 38,"name": "old_mem_unaligned"},{"file": 35,"line": 183,"col": 63,"name": "old_align"},{"file": 35,"line": 183,"col": 79,"name": "new_size"},{"file": 35,"line": 183,"col": 96,"name": "new_align"},{"file": 35,"line": 143,"col": 14,"name": "allocator"},{"file": 35,"line": 143,"col": 37,"name": "old_mem_unaligned"},{"file": 35,"line": 143,"col": 62,"name": "old_align"},{"file": 35,"line": 143,"col": 78,"name": "new_size"},{"file": 35,"line": 143,"col": 95,"name": "new_align"},{"file": 35,"line": 56,"col": 13,"name": "allocator"},{"file": 35,"line": 56,"col": 36,"name": "n"},{"file": 35,"line": 56,"col": 46,"name": "alignment"},{"file": 34,"line": 1322,"col": 25,"name": "absolute_path_c"},{"file": 34,"line": 1322,"col": 57,"name": "flags"},{"file": 40,"line": 221,"col": 16,"name": "self"},{"file": 52,"line": 182,"col": 12,"name": "address"},{"file": 52,"line": 182,"col": 29,"name": "length"},{"file": 52,"line": 182,"col": 44,"name": "prot"},{"file": 52,"line": 182,"col": 57,"name": "flags"},{"file": 52,"line": 182,"col": 69,"name": "fd"},{"file": 52,"line": 182,"col": 78,"name": "offset"},{"file": 18,"line": 61,"col": 14,"name": "in_stream"},{"file": 18,"line": 61,"col": 34,"name": "dest"},{"file": 18,"line": 72,"col": 16,"name": "in_stream"},{"file": 18,"line": 72,"col": 46,"name": "pos"},{"file": 18,"line": 79,"col": 16,"name": "in_stream"},{"file": 18,"line": 79,"col": 46,"name": "amt"},{"file": 18,"line": 93,"col": 19,"name": "in_stream"},{"file": 18,"line": 98,"col": 16,"name": "in_stream"},{"file": 52,"line": 214,"col": 14,"name": "address"},{"file": 52,"line": 214,"col": 36,"name": "length"},{"file": 20,"line": 160,"col": 8,"name": "self"},{"file": 20,"line": 161,"col": 8,"name": "old_mem"},{"file": 20,"line": 162,"col": 8,"name": "new_alignment","comptime": true},{"file": 20,"line": 163,"col": 8,"name": "new_n"},{"file": 23,"line": 2020,"col": 32,"name": "in_stream"},{"file": 23,"line": 1983,"col": 23,"name": "allocator"},{"file": 23,"line": 1983,"col": 50,"name": "in_stream"},{"file": 23,"line": 1983,"col": 66,"name": "size"},{"file": 23,"line": 1977,"col": 26,"name": "allocator"},{"file": 23,"line": 1977,"col": 53,"name": "in_stream"},{"file": 23,"line": 1977,"col": 69,"name": "size"},{"file": 23,"line": 1988,"col": 26,"name": "allocator"},{"file": 23,"line": 1988,"col": 53,"name": "in_stream"},{"file": 23,"line": 1988,"col": 69,"name": "signed"},{"file": 23,"line": 1988,"col": 83,"name": "size","comptime": true},{"file": 23,"line": 1970,"col": 18,"name": "allocator"},{"file": 23,"line": 1970,"col": 45,"name": "in_stream"},{"file": 23,"line": 1970,"col": 61,"name": "size"},{"file": 23,"line": 2015,"col": 33,"name": "in_stream"},{"file": 23,"line": 2015,"col": 49,"name": "is_64"},{"file": 23,"line": 2032,"col": 21,"name": "allocator"},{"file": 23,"line": 2032,"col": 48,"name": "in_stream"},{"file": 23,"line": 2032,"col": 64,"name": "size"},{"file": 35,"line": 606,"col": 16,"name": "buffer"},{"file": 38,"line": 130,"col": 22,"name": "allocator"},{"file": 38,"line": 130,"col": 49,"name": "key"},{"file": 40,"line": 144,"col": 17,"name": "self"},{"file": 22,"line": 293,"col": 12,"name": "fd"},{"file": 22,"line": 293,"col": 22,"name": "buf"},{"file": 41,"line": 189,"col": 26,"name": "self"},{"file": 41,"line": 202,"col": 23,"name": "self"},{"file": 41,"line": 265,"col": 23,"name": "self"},{"file": 63,"line": 45,"col": 8,"name": "T","comptime": true},{"file": 63,"line": 45,"col": 26,"name": "x_"},{"file": 64,"line": 46,"col": 8,"name": "T","comptime": true},{"file": 64,"line": 46,"col": 26,"name": "x_"},{"file": 65,"line": 33,"col": 10,"name": "x"},{"file": 66,"line": 39,"col": 8,"name": "T","comptime": true},{"file": 66,"line": 39,"col": 26,"name": "x_"},{"file": 22,"line": 704,"col": 15,"name": "dir_fd"},{"file": 22,"line": 704,"col": 29,"name": "file_path"},{"file": 22,"line": 704,"col": 55,"name": "flags"},{"file": 22,"line": 704,"col": 67,"name": "mode"},{"file": 58,"line": 29,"col": 16,"name": "number"},{"file": 58,"line": 29,"col": 31,"name": "arg1"},{"file": 58,"line": 29,"col": 44,"name": "arg2"},{"file": 58,"line": 29,"col": 57,"name": "arg3"},{"file": 58,"line": 10,"col": 16,"name": "number"},{"file": 58,"line": 10,"col": 31,"name": "arg1"},{"file": 58,"line": 40,"col": 16,"name": "number"},{"file": 58,"line": 40,"col": 31,"name": "arg1"},{"file": 58,"line": 40,"col": 44,"name": "arg2"},{"file": 58,"line": 40,"col": 57,"name": "arg3"},{"file": 58,"line": 40,"col": 70,"name": "arg4"},{"file": 40,"line": 294,"col": 17,"name": "self"},{"file": 40,"line": 294,"col": 29,"name": "bytes"},{"file": 28,"line": 559,"col": 4,"name": "bytes"},{"file": 28,"line": 560,"col": 4,"name": "fmt","comptime": true},{"file": 28,"line": 561,"col": 4,"name": "options"},{"file": 28,"line": 562,"col": 4,"name": "context"},{"file": 28,"line": 563,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 564,"col": 4,"name": "output"},{"file": 58,"line": 2,"col": 16,"name": "number"},{"file": 35,"line": 585,"col": 15,"name": "allocator"},{"file": 35,"line": 585,"col": 38,"name": "old_mem"},{"file": 35,"line": 585,"col": 53,"name": "old_align"},{"file": 35,"line": 585,"col": 69,"name": "new_size"},{"file": 35,"line": 585,"col": 86,"name": "new_align"},{"file": 35,"line": 565,"col": 13,"name": "allocator"},{"file": 35,"line": 565,"col": 36,"name": "n"},{"file": 35,"line": 565,"col": 46,"name": "alignment"},{"file": 35,"line": 545,"col": 18,"name": "self"},{"file": 35,"line": 545,"col": 41,"name": "prev_len"},{"file": 35,"line": 545,"col": 58,"name": "minimum_size"},{"file": 13,"line": 77,"col": 23,"name": "list"},{"file": 13,"line": 77,"col": 36,"name": "new_node"},{"file": 35,"line": 596,"col": 14,"name": "allocator"},{"file": 35,"line": 596,"col": 37,"name": "old_mem"},{"file": 35,"line": 596,"col": 52,"name": "old_align"},{"file": 35,"line": 596,"col": 68,"name": "new_size"},{"file": 35,"line": 596,"col": 85,"name": "new_align"},{"file": 56,"line": 132,"col": 19,"name": "path_c"},{"file": 22,"line": 2034,"col": 13,"name": "fd"},{"file": 42,"line": 507,"col": 17,"name": "self"},{"file": 42,"line": 511,"col": 17,"name": "self"},{"file": 42,"line": 515,"col": 17,"name": "self"},{"file": 58,"line": 66,"col": 4,"name": "number"},{"file": 58,"line": 67,"col": 4,"name": "arg1"},{"file": 58,"line": 68,"col": 4,"name": "arg2"},{"file": 58,"line": 69,"col": 4,"name": "arg3"},{"file": 58,"line": 70,"col": 4,"name": "arg4"},{"file": 58,"line": 71,"col": 4,"name": "arg5"},{"file": 58,"line": 72,"col": 4,"name": "arg6"},{"file": 15,"line": 218,"col": 26,"name": "self"},{"file": 15,"line": 218,"col": 39,"name": "ReturnType","comptime": true},{"file": 15,"line": 218,"col": 66,"name": "endian"},{"file": 15,"line": 218,"col": 90,"name": "size"},{"file": 20,"line": 520,"col": 18,"name": "ReturnType","comptime": true},{"file": 20,"line": 520,"col": 45,"name": "bytes"},{"file": 20,"line": 520,"col": 64,"name": "endian"},{"file": 35,"line": 632,"col": 15,"name": "allocator"},{"file": 35,"line": 632,"col": 38,"name": "old_mem"},{"file": 35,"line": 632,"col": 53,"name": "old_align"},{"file": 35,"line": 632,"col": 69,"name": "new_size"},{"file": 35,"line": 632,"col": 86,"name": "new_align"},{"file": 35,"line": 617,"col": 13,"name": "allocator"},{"file": 35,"line": 617,"col": 36,"name": "n"},{"file": 35,"line": 617,"col": 46,"name": "alignment"},{"file": 35,"line": 654,"col": 14,"name": "allocator"},{"file": 35,"line": 654,"col": 37,"name": "old_mem"},{"file": 35,"line": 654,"col": 52,"name": "old_align"},{"file": 35,"line": 654,"col": 68,"name": "new_size"},{"file": 35,"line": 654,"col": 85,"name": "new_align"},{"file": 22,"line": 885,"col": 14,"name": "key"},{"file": 20,"line": 387,"col": 12,"name": "allocator"},{"file": 20,"line": 387,"col": 35,"name": "T","comptime": true},{"file": 20,"line": 387,"col": 53,"name": "m"},{"file": 22,"line": 1518,"col": 14,"name": "handle"},{"file": 52,"line": 240,"col": 12,"name": "fd"},{"file": 52,"line": 240,"col": 21,"name": "buf"},{"file": 52,"line": 240,"col": 33,"name": "count"},{"file": 43,"line": 27,"col": 18,"name": "self"},{"file": 43,"line": 48,"col": 16,"name": "self"},{"file": 57,"line": 56,"col": 20,"name": "iterations"},{"file": 43,"line": 38,"col": 15,"name": "self"},{"file": 67,"line": 6,"col": 13,"name": "x"},{"file": 68,"line": 6,"col": 13,"name": "x"},{"file": 69,"line": 3,"col": 11,"name": "T","comptime": true},{"file": 70,"line": 17,"col": 13,"name": "x"},{"file": 52,"line": 416,"col": 14,"name": "dirfd"},{"file": 52,"line": 416,"col": 26,"name": "path"},{"file": 52,"line": 416,"col": 47,"name": "flags"},{"file": 52,"line": 416,"col": 59,"name": "mode"},{"file": 23,"line": 2430,"col": 23,"name": "sig"},{"file": 23,"line": 2430,"col": 33,"name": "info"},{"file": 23,"line": 2430,"col": 60,"name": "ctx_ptr"},{"file": 22,"line": 455,"col": 13,"name": "fd"},{"file": 22,"line": 455,"col": 23,"name": "bytes"},{"file": 56,"line": 209,"col": 24,"name": "path_c"},{"file": 52,"line": 869,"col": 13,"name": "fd"},{"file": 52,"line": 869,"col": 22,"name": "stat_buf"},{"file": 28,"line": 478,"col": 4,"name": "value"},{"file": 28,"line": 479,"col": 4,"name": "fmt","comptime": true},{"file": 28,"line": 480,"col": 4,"name": "options"},{"file": 28,"line": 481,"col": 4,"name": "context"},{"file": 28,"line": 482,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 483,"col": 4,"name": "output"},{"file": 43,"line": 191,"col": 14,"name": "self"},{"file": 43,"line": 210,"col": 12,"name": "self"},{"file": 43,"line": 210,"col": 32,"name": "timeout"},{"file": 43,"line": 203,"col": 11,"name": "self"},{"file": 70,"line": 61,"col": 11,"name": "x"},{"file": 23,"line": 110,"col": 30,"name": "bp"},{"file": 23,"line": 110,"col": 41,"name": "ip"},{"file": 44,"line": 99,"col": 17,"name": "self"},{"file": 44,"line": 99,"col": 34,"name": "name"},{"file": 44,"line": 99,"col": 52,"name": "estimated_total_items"},{"file": 40,"line": 149,"col": 35,"name": "self"},{"file": 44,"line": 57,"col": 21,"name": "self"},{"file": 44,"line": 57,"col": 34,"name": "name"},{"file": 44,"line": 57,"col": 52,"name": "estimated_total_items"},{"file": 44,"line": 90,"col": 24,"name": "self"},{"file": 44,"line": 125,"col": 19,"name": "self"},{"file": 44,"line": 74,"col": 19,"name": "self"},{"file": 44,"line": 176,"col": 15,"name": "self"},{"file": 44,"line": 176,"col": 32,"name": "format","comptime": true},{"file": 44,"line": 176,"col": 61,"name": "args"},{"file": 52,"line": 348,"col": 13,"name": "fd"},{"file": 52,"line": 348,"col": 22,"name": "buf"},{"file": 52,"line": 348,"col": 40,"name": "count"},{"file": 28,"line": 500,"col": 4,"name": "value"},{"file": 28,"line": 501,"col": 4,"name": "fmt","comptime": true},{"file": 28,"line": 502,"col": 4,"name": "options"},{"file": 28,"line": 503,"col": 4,"name": "context"},{"file": 28,"line": 504,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 505,"col": 4,"name": "output"},{"file": 43,"line": 250,"col": 16,"name": "waiters"},{"file": 43,"line": 250,"col": 31,"name": "timeout"},{"file": 52,"line": 104,"col": 18,"name": "uaddr"},{"file": 52,"line": 104,"col": 37,"name": "futex_op"},{"file": 52,"line": 104,"col": 52,"name": "val"},{"file": 52,"line": 104,"col": 62,"name": "timeout"},{"file": 43,"line": 243,"col": 16,"name": "waiters"},{"file": 43,"line": 243,"col": 31,"name": "wake_count"},{"file": 21,"line": 96,"col": 17,"name": "value"},{"file": 22,"line": 903,"col": 15,"name": "key"},{"file": 22,"line": 2763,"col": 20,"name": "clk_id"},{"file": 22,"line": 2763,"col": 33,"name": "res"},{"file": 22,"line": 2740,"col": 21,"name": "clk_id"},{"file": 22,"line": 2740,"col": 34,"name": "tp"},{"file": 28,"line": 1121,"col": 16,"name": "buf"},{"file": 28,"line": 1121,"col": 27,"name": "fmt","comptime": true},{"file": 28,"line": 1121,"col": 53,"name": "args"},{"file": 44,"line": 186,"col": 16,"name": "self"},{"file": 44,"line": 186,"col": 33,"name": "end"},{"file": 44,"line": 186,"col": 46,"name": "format","comptime": true},{"file": 44,"line": 186,"col": 75,"name": "args"},{"file": 37,"line": 154,"col": 16,"name": "self"},{"file": 44,"line": 117,"col": 24,"name": "self"},{"file": 44,"line": 68,"col": 27,"name": "self"},{"file": 28,"line": 893,"col": 4,"name": "value"},{"file": 28,"line": 894,"col": 4,"name": "base"},{"file": 28,"line": 895,"col": 4,"name": "uppercase"},{"file": 28,"line": 896,"col": 4,"name": "options"},{"file": 28,"line": 897,"col": 4,"name": "context"},{"file": 28,"line": 898,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 899,"col": 4,"name": "output"},{"file": 52,"line": 108,"col": 18,"name": "uaddr"},{"file": 52,"line": 108,"col": 37,"name": "futex_op"},{"file": 52,"line": 108,"col": 52,"name": "val"},{"file": 20,"line": 370,"col": 20,"name": "T","comptime": true},{"file": 20,"line": 370,"col": 38,"name": "ptr"},{"file": 52,"line": 527,"col": 20,"name": "clk_id"},{"file": 52,"line": 527,"col": 33,"name": "tp"},{"file": 52,"line": 499,"col": 21,"name": "clk_id"},{"file": 52,"line": 499,"col": 34,"name": "tp"},{"file": 28,"line": 1108,"col": 17,"name": "context"},{"file": 28,"line": 1108,"col": 44,"name": "bytes"},{"file": 28,"line": 946,"col": 4,"name": "value"},{"file": 28,"line": 947,"col": 4,"name": "base"},{"file": 28,"line": 948,"col": 4,"name": "uppercase"},{"file": 28,"line": 949,"col": 4,"name": "options"},{"file": 28,"line": 950,"col": 4,"name": "context"},{"file": 28,"line": 951,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 952,"col": 4,"name": "output"},{"file": 20,"line": 364,"col": 11,"name": "T","comptime": true},{"file": 20,"line": 364,"col": 29,"name": "ptr"},{"file": 52,"line": 514,"col": 27,"name": "clk"},{"file": 52,"line": 514,"col": 37,"name": "ts"},{"file": 28,"line": 1096,"col": 15,"name": "digit"},{"file": 28,"line": 1096,"col": 26,"name": "uppercase"},{"file": 20,"line": 270,"col": 11,"name": "T","comptime": true},{"file": 20,"line": 270,"col": 29,"name": "dest"},{"file": 20,"line": 270,"col": 40,"name": "value"},{"file": 60,"line": 6,"col": 14,"name": "vername"},{"file": 60,"line": 6,"col": 35,"name": "name"},{"file": 52,"line": 31,"col": 17,"name": "index"},{"file": 60,"line": 79,"col": 12,"name": "def_arg"},{"file": 60,"line": 79,"col": 34,"name": "vsym_arg"},{"file": 60,"line": 79,"col": 49,"name": "vername"},{"file": 60,"line": 79,"col": 70,"name": "strings"},{"file": 12,"line": 527,"col": 16,"name": "key"},{"file": 12,"line": 535,"col": 15,"name": "a"},{"file": 12,"line": 535,"col": 21,"name": "b"},{"file": 30,"line": 663,"col": 12,"name": "self"},{"file": 30,"line": 663,"col": 30,"name": "buffer"},{"file": 12,"line": 541,"col": 21,"name": "K","comptime": true},{"file": 40,"line": 179,"col": 18,"name": "self"},{"file": 40,"line": 179,"col": 30,"name": "offset"},{"file": 12,"line": 543,"col": 16,"name": "key"},{"file": 22,"line": 2434,"col": 17,"name": "fd"},{"file": 22,"line": 2434,"col": 27,"name": "offset"},{"file": 45,"line": 136,"col": 16,"name": "seed"},{"file": 55,"line": 165,"col": 16,"name": "hasher"},{"file": 55,"line": 165,"col": 29,"name": "key"},{"file": 45,"line": 162,"col": 17,"name": "self"},{"file": 45,"line": 41,"col": 16,"name": "seed"},{"file": 55,"line": 75,"col": 12,"name": "hasher"},{"file": 55,"line": 75,"col": 25,"name": "key"},{"file": 55,"line": 75,"col": 35,"name": "strat","comptime": true},{"file": 45,"line": 73,"col": 17,"name": "self"},{"file": 45,"line": 73,"col": 41,"name": "b"},{"file": 45,"line": 144,"col": 18,"name": "self"},{"file": 45,"line": 144,"col": 33,"name": "b"},{"file": 45,"line": 26,"col": 8,"name": "a"},{"file": 45,"line": 26,"col": 16,"name": "b"},{"file": 45,"line": 26,"col": 24,"name": "seed"},{"file": 45,"line": 11,"col": 14,"name": "bytes","comptime": true},{"file": 45,"line": 11,"col": 34,"name": "data"},{"file": 45,"line": 16,"col": 23,"name": "data"},{"file": 45,"line": 30,"col": 8,"name": "a"},{"file": 45,"line": 30,"col": 16,"name": "b"},{"file": 45,"line": 30,"col": 24,"name": "seed"},{"file": 45,"line": 20,"col": 7,"name": "a"},{"file": 45,"line": 20,"col": 15,"name": "b"},{"file": 45,"line": 62,"col": 18,"name": "self"},{"file": 45,"line": 62,"col": 42,"name": "b"},{"file": 20,"line": 570,"col": 26,"name": "T","comptime": true},{"file": 20,"line": 570,"col": 44,"name": "bytes"},{"file": 21,"line": 932,"col": 15,"name": "T","comptime": true},{"file": 21,"line": 932,"col": 33,"name": "a"},{"file": 21,"line": 932,"col": 39,"name": "b"},{"file": 45,"line": 48,"col": 13,"name": "self"},{"file": 45,"line": 48,"col": 37,"name": "b"},{"file": 8,"line": 15,"col": 24,"name": "T","comptime": true},{"file": 8,"line": 15,"col": 42,"name": "alignment","comptime": true},{"file": 33,"line": 554,"col": 19,"name": "T","comptime": true},{"file": 33,"line": 102,"col": 13,"name": "T","comptime": true},{"file": 8,"line": 11,"col": 17,"name": "T","comptime": true},{"file": 10,"line": 9,"col": 13,"name": "T","comptime": true},{"file": 20,"line": 1312,"col": 21,"name": "P","comptime": true},{"file": 12,"line": 32,"col": 15,"name": "K","comptime": true},{"file": 12,"line": 32,"col": 33,"name": "V","comptime": true},{"file": 12,"line": 32,"col": 51,"name": "hash","comptime": true},{"file": 12,"line": 32,"col": 83,"name": "eql","comptime": true},{"file": 9,"line": 35,"col": 12,"name": "Pixel","comptime": true},{"file": 13,"line": 192,"col": 17,"name": "T","comptime": true},{"file": 15,"line": 15,"col": 16,"name": "ReadError","comptime": true},{"file": 12,"line": 525,"col": 24,"name": "K","comptime": true},{"file": 47,"line": 219,"col": 23,"name": "T","comptime": true},{"file": 33,"line": 88,"col": 17,"name": "T","comptime": true},{"file": 12,"line": 533,"col": 23,"name": "K","comptime": true},{"file": 47,"line": 308,"col": 18,"name": "T","comptime": true},{"file": 4,"line": 31,"col": 18,"name": "T","comptime": true},{"file": 62,"line": 66,"col": 12,"name": "T","comptime": true},{"file": 16,"line": 13,"col": 17,"name": "WriteError","comptime": true},{"file": 21,"line": 882,"col": 14,"name": "T","comptime": true},{"file": 21,"line": 875,"col": 14,"name": "T","comptime": true},{"file": 7,"line": 16,"col": 15,"name": "Self","comptime": true},{"file": 71,"line": 20,"col": 12,"name": "x"},{"file": 21,"line": 227,"col": 11,"name": "A","comptime": true},{"file": 21,"line": 227,"col": 29,"name": "B","comptime": true},{"file": 13,"line": 14,"col": 24,"name": "T","comptime": true},{"file": 17,"line": 8,"col": 13,"name": "T","comptime": true},{"file": 18,"line": 3,"col": 22,"name": "SeekErrorType","comptime": true},{"file": 18,"line": 3,"col": 52,"name": "GetSeekPosErrorType","comptime": true},{"file": 47,"line": 250,"col": 15,"name": "T","comptime": true},{"file": 47,"line": 114,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 421,"col": 15,"name": "T","comptime": true},{"file": 47,"line": 112,"col": 10,"name": "id","comptime": true},{"file": 8,"line": 27,"col": 8,"docs": " Use toSlice instead of slicing this directly, because if you don't\n specify the end position of the slice, this will potentially give\n you uninitialized memory.\n","name": "items"},{"file": 8,"line": 28,"col": 8,"name": "len"},{"file": 8,"line": 29,"col": 8,"name": "allocator"},{"file": 9,"line": 10,"col": 4,"name": "id"},{"file": 9,"line": 11,"col": 4,"name": "version"},{"file": 9,"line": 12,"col": 4,"name": "compression"},{"file": 9,"line": 13,"col": 4,"name": "bpp"},{"file": 9,"line": 14,"col": 4,"name": "xmin"},{"file": 9,"line": 15,"col": 4,"name": "ymin"},{"file": 9,"line": 16,"col": 4,"name": "xmax"},{"file": 9,"line": 17,"col": 4,"name": "ymax"},{"file": 9,"line": 18,"col": 4,"name": "horizontalDPI"},{"file": 9,"line": 19,"col": 4,"name": "verticalDPI"},{"file": 9,"line": 20,"col": 4,"name": "builtinPalette"},{"file": 9,"line": 21,"col": 4,"name": "_reserved0"},{"file": 9,"line": 22,"col": 4,"name": "planes"},{"file": 9,"line": 23,"col": 4,"name": "stride"},{"file": 9,"line": 24,"col": 4,"name": "paletteInformation"},{"file": 9,"line": 25,"col": 4,"name": "screenWidth"},{"file": 9,"line": 26,"col": 4,"name": "screenHeight"},{"file": 23,"line": 1768,"col": 4,"name": "has_children"},{"file": 23,"line": 1769,"col": 4,"name": "abbrev_code"},{"file": 23,"line": 1770,"col": 4,"name": "tag_id"},{"file": 23,"line": 1771,"col": 4,"name": "attrs"},{"file": 10,"line": 11,"col": 8,"name": "head"},{"file": 10,"line": 12,"col": 8,"name": "tail"},{"file": 10,"line": 13,"col": 8,"name": "mutex"},{"file": 11,"line": 8,"col": 4,"name": "Native"},{"file": 11,"line": 9,"col": 4,"name": "Cross"},{"file": 12,"line": 34,"col": 8,"name": "entries"},{"file": 12,"line": 35,"col": 8,"name": "size"},{"file": 12,"line": 36,"col": 8,"name": "max_distance_from_start_index"},{"file": 12,"line": 37,"col": 8,"name": "allocator"},{"file": 12,"line": 40,"col": 8,"docs": " This is used to detect bugs where a hashtable is edited while an iterator is running.\n","name": "modification_count"},{"file": 23,"line": 1198,"col": 4,"name": "bytes"},{"file": 23,"line": 1199,"col": 4,"name": "sect_debug_info"},{"file": 23,"line": 1200,"col": 4,"name": "sect_debug_line"},{"file": 9,"line": 47,"col": 8,"name": "allocator"},{"file": 9,"line": 48,"col": 8,"name": "pixels"},{"file": 9,"line": 49,"col": 8,"name": "width"},{"file": 9,"line": 50,"col": 8,"name": "height"},{"file": 9,"line": 51,"col": 8,"name": "palette"},{"file": 23,"line": 1763,"col": 4,"name": "offset"},{"file": 23,"line": 1764,"col": 4,"name": "table"},{"file": 31,"line": 257,"col": 4,"name": "header"},{"file": 13,"line": 211,"col": 8,"name": "first"},{"file": 13,"line": 212,"col": 8,"name": "last"},{"file": 13,"line": 213,"col": 8,"name": "len"},{"file": 14,"line": 21,"col": 4,"name": "msg"},{"file": 14,"line": 22,"col": 4,"name": "finish"},{"file": 15,"line": 27,"col": 8,"docs": " Returns the number of bytes read. It may be less than buffer.len.\n If the number of bytes read is 0, it means end of stream.\n End of stream is not an error condition.\n","name": "readFn"},{"file": 23,"line": 1775,"col": 4,"name": "attr_id"},{"file": 23,"line": 1776,"col": 4,"name": "form_id"},{"file": 23,"line": 1808,"col": 8,"name": "id"},{"file": 23,"line": 1809,"col": 8,"name": "value"},{"file": 23,"line": 1863,"col": 4,"name": "file_name"},{"file": 23,"line": 1864,"col": 4,"name": "dir_index"},{"file": 23,"line": 1865,"col": 4,"name": "mtime"},{"file": 23,"line": 1866,"col": 4,"name": "len_bytes"},{"file": 4,"line": 35,"col": 8,"name": "allocator"},{"file": 4,"line": 36,"col": 8,"name": "pixels"},{"file": 4,"line": 39,"col": 8,"docs": " width of the image in pixels.\n","name": "width"},{"file": 4,"line": 42,"col": 8,"docs": " height of the image in pixels.\n","name": "height"},{"file": 16,"line": 23,"col": 8,"name": "writeFn"},{"file": 7,"line": 200,"col": 4,"name": "x"},{"file": 7,"line": 201,"col": 4,"name": "y"},{"file": 7,"line": 202,"col": 4,"name": "z"},{"file": 23,"line": 1753,"col": 4,"name": "version"},{"file": 23,"line": 1754,"col": 4,"name": "is_64"},{"file": 23,"line": 1755,"col": 4,"name": "die"},{"file": 23,"line": 1756,"col": 4,"name": "pc_range"},{"file": 13,"line": 52,"col": 8,"name": "first"},{"file": 17,"line": 10,"col": 8,"name": "root"},{"file": 17,"line": 11,"col": 8,"name": "lock"},{"file": 46,"line": 55,"col": 16,"name": "base"},{"file": 46,"line": 56,"col": 16,"name": "epoll_op"},{"file": 46,"line": 57,"col": 16,"name": "eventfd"},{"file": 18,"line": 9,"col": 8,"name": "seekToFn"},{"file": 18,"line": 10,"col": 8,"name": "seekByFn"},{"file": 18,"line": 12,"col": 8,"name": "getPosFn"},{"file": 18,"line": 13,"col": 8,"name": "getEndPosFn"},{"file": 23,"line": 2306,"col": 4,"name": "pc_range"},{"file": 23,"line": 2307,"col": 4,"name": "name"},{"file": 9,"line": 4,"col": 4,"name": "r"},{"file": 9,"line": 5,"col": 4,"name": "g"},{"file": 9,"line": 6,"col": 4,"name": "b"},{"file": 7,"line": 157,"col": 4,"name": "x"},{"file": 7,"line": 158,"col": 4,"name": "y"},{"file": 11,"line": 12,"col": 8,"name": "freestanding"},{"file": 11,"line": 13,"col": 8,"name": "ananas"},{"file": 11,"line": 14,"col": 8,"name": "cloudabi"},{"file": 11,"line": 15,"col": 8,"name": "dragonfly"},{"file": 11,"line": 16,"col": 8,"name": "freebsd"},{"file": 11,"line": 17,"col": 8,"name": "fuchsia"},{"file": 11,"line": 18,"col": 8,"name": "ios"},{"file": 11,"line": 19,"col": 8,"name": "kfreebsd"},{"file": 11,"line": 20,"col": 8,"name": "linux"},{"file": 11,"line": 21,"col": 8,"name": "lv2"},{"file": 11,"line": 22,"col": 8,"name": "macosx"},{"file": 11,"line": 23,"col": 8,"name": "netbsd"},{"file": 11,"line": 24,"col": 8,"name": "openbsd"},{"file": 11,"line": 25,"col": 8,"name": "solaris"},{"file": 11,"line": 26,"col": 8,"name": "windows"},{"file": 11,"line": 27,"col": 8,"name": "haiku"},{"file": 11,"line": 28,"col": 8,"name": "minix"},{"file": 11,"line": 29,"col": 8,"name": "rtems"},{"file": 11,"line": 30,"col": 8,"name": "nacl"},{"file": 11,"line": 31,"col": 8,"name": "cnk"},{"file": 11,"line": 32,"col": 8,"name": "aix"},{"file": 11,"line": 33,"col": 8,"name": "cuda"},{"file": 11,"line": 34,"col": 8,"name": "nvcl"},{"file": 11,"line": 35,"col": 8,"name": "amdhsa"},{"file": 11,"line": 36,"col": 8,"name": "ps4"},{"file": 11,"line": 37,"col": 8,"name": "elfiamcu"},{"file": 11,"line": 38,"col": 8,"name": "tvos"},{"file": 11,"line": 39,"col": 8,"name": "watchos"},{"file": 11,"line": 40,"col": 8,"name": "mesa3d"},{"file": 11,"line": 41,"col": 8,"name": "contiki"},{"file": 11,"line": 42,"col": 8,"name": "amdpal"},{"file": 11,"line": 43,"col": 8,"name": "hermit"},{"file": 11,"line": 44,"col": 8,"name": "hurd"},{"file": 11,"line": 45,"col": 8,"name": "wasi"},{"file": 11,"line": 46,"col": 8,"name": "emscripten"},{"file": 11,"line": 47,"col": 8,"name": "uefi"},{"file": 11,"line": 48,"col": 8,"name": "other"},{"file": 4,"line": 25,"col": 4,"name": "r"},{"file": 4,"line": 26,"col": 4,"name": "g"},{"file": 4,"line": 27,"col": 4,"name": "b"},{"file": 7,"line": 303,"col": 4,"name": "x"},{"file": 7,"line": 304,"col": 4,"name": "y"},{"file": 7,"line": 305,"col": 4,"name": "z"},{"file": 7,"line": 306,"col": 4,"name": "w"},{"file": 19,"line": 117,"col": 4,"name": "Type"},{"file": 19,"line": 118,"col": 4,"name": "Void"},{"file": 19,"line": 119,"col": 4,"name": "Bool"},{"file": 19,"line": 120,"col": 4,"name": "NoReturn"},{"file": 19,"line": 121,"col": 4,"name": "Int"},{"file": 19,"line": 122,"col": 4,"name": "Float"},{"file": 19,"line": 123,"col": 4,"name": "Pointer"},{"file": 19,"line": 124,"col": 4,"name": "Array"},{"file": 19,"line": 125,"col": 4,"name": "Struct"},{"file": 19,"line": 126,"col": 4,"name": "ComptimeFloat"},{"file": 19,"line": 127,"col": 4,"name": "ComptimeInt"},{"file": 19,"line": 128,"col": 4,"name": "Undefined"},{"file": 19,"line": 129,"col": 4,"name": "Null"},{"file": 19,"line": 130,"col": 4,"name": "Optional"},{"file": 19,"line": 131,"col": 4,"name": "ErrorUnion"},{"file": 19,"line": 132,"col": 4,"name": "ErrorSet"},{"file": 19,"line": 133,"col": 4,"name": "Enum"},{"file": 19,"line": 134,"col": 4,"name": "Union"},{"file": 19,"line": 135,"col": 4,"name": "Fn"},{"file": 19,"line": 136,"col": 4,"name": "BoundFn"},{"file": 19,"line": 137,"col": 4,"name": "Opaque"},{"file": 19,"line": 138,"col": 4,"name": "Frame"},{"file": 19,"line": 139,"col": 4,"name": "AnyFrame"},{"file": 19,"line": 140,"col": 4,"name": "Vector"},{"file": 19,"line": 141,"col": 4,"name": "EnumLiteral"},{"file": 7,"line": 382,"col": 4,"name": "fields"},{"file": 34,"line": 367,"col": 4,"name": "fd"},{"file": 35,"line": 669,"col": 12,"name": "allocator"},{"file": 35,"line": 670,"col": 12,"name": "end_index"},{"file": 35,"line": 671,"col": 12,"name": "buffer"},{"file": 40,"line": 334,"col": 8,"name": "file"},{"file": 40,"line": 335,"col": 8,"name": "stream"},{"file": 40,"line": 13,"col": 4,"docs": " The OS-specific file descriptor or file handle.\n","name": "handle"},{"file": 9,"line": 204,"col": 4,"name": "stream"},{"file": 9,"line": 205,"col": 4,"name": "currentRun"},{"file": 19,"line": 46,"col": 4,"name": "index"},{"file": 19,"line": 47,"col": 4,"name": "instruction_addresses"},{"file": 7,"line": 354,"col": 4,"name": "fields"},{"file": 7,"line": 367,"col": 4,"name": "fields"},{"file": 40,"line": 29,"col": 8,"name": "read"},{"file": 40,"line": 30,"col": 8,"name": "write"},{"file": 40,"line": 348,"col": 8,"name": "file"},{"file": 40,"line": 349,"col": 8,"name": "stream"},{"file": 18,"line": 41,"col": 4,"name": "stream"},{"file": 18,"line": 42,"col": 4,"name": "seekable_stream"},{"file": 18,"line": 44,"col": 4,"name": "pos"},{"file": 18,"line": 45,"col": 4,"name": "slice"},{"file": 19,"line": 353,"col": 4,"name": "Big"},{"file": 19,"line": 354,"col": 4,"name": "Little"},{"file": 23,"line": 1207,"col": 4,"name": "dwarf_seekable_stream"},{"file": 23,"line": 1208,"col": 4,"name": "dwarf_in_stream"},{"file": 23,"line": 1209,"col": 4,"name": "endian"},{"file": 23,"line": 1210,"col": 4,"name": "debug_info"},{"file": 23,"line": 1211,"col": 4,"name": "debug_abbrev"},{"file": 23,"line": 1212,"col": 4,"name": "debug_str"},{"file": 23,"line": 1213,"col": 4,"name": "debug_line"},{"file": 23,"line": 1214,"col": 4,"name": "debug_ranges"},{"file": 23,"line": 1215,"col": 4,"name": "abbrev_table_list"},{"file": 23,"line": 1216,"col": 4,"name": "compile_unit_list"},{"file": 23,"line": 1217,"col": 4,"name": "func_list"},{"file": 23,"line": 1882,"col": 4,"name": "address"},{"file": 23,"line": 1883,"col": 4,"name": "file"},{"file": 23,"line": 1884,"col": 4,"name": "line"},{"file": 23,"line": 1885,"col": 4,"name": "column"},{"file": 23,"line": 1886,"col": 4,"name": "is_stmt"},{"file": 23,"line": 1887,"col": 4,"name": "basic_block"},{"file": 23,"line": 1888,"col": 4,"name": "end_sequence"},{"file": 23,"line": 1890,"col": 4,"name": "target_address"},{"file": 23,"line": 1891,"col": 4,"name": "include_dirs"},{"file": 23,"line": 1892,"col": 4,"name": "file_entries"},{"file": 23,"line": 1894,"col": 4,"name": "prev_address"},{"file": 23,"line": 1895,"col": 4,"name": "prev_file"},{"file": 23,"line": 1896,"col": 4,"name": "prev_line"},{"file": 23,"line": 1897,"col": 4,"name": "prev_column"},{"file": 23,"line": 1898,"col": 4,"name": "prev_is_stmt"},{"file": 23,"line": 1899,"col": 4,"name": "prev_basic_block"},{"file": 23,"line": 1900,"col": 4,"name": "prev_end_sequence"},{"file": 23,"line": 1870,"col": 4,"name": "line"},{"file": 23,"line": 1871,"col": 4,"name": "column"},{"file": 23,"line": 1872,"col": 4,"name": "file_name"},{"file": 23,"line": 1873,"col": 4,"name": "allocator"},{"file": 23,"line": 282,"col": 4,"name": "first_addr"},{"file": 23,"line": 283,"col": 4,"name": "fp"},{"file": 41,"line": 166,"col": 8,"name": "state"},{"file": 41,"line": 250,"col": 12,"name": "mutex"},{"file": 28,"line": 17,"col": 4,"name": "precision"},{"file": 28,"line": 18,"col": 4,"name": "width"},{"file": 28,"line": 19,"col": 4,"name": "alignment"},{"file": 28,"line": 20,"col": 4,"name": "fill"},{"file": 35,"line": 515,"col": 4,"name": "allocator"},{"file": 35,"line": 517,"col": 4,"name": "child_allocator"},{"file": 35,"line": 518,"col": 4,"name": "buffer_list"},{"file": 35,"line": 519,"col": 4,"name": "end_index"},{"file": 11,"line": 52,"col": 8,"name": "arm"},{"file": 11,"line": 53,"col": 8,"name": "armeb"},{"file": 11,"line": 54,"col": 8,"name": "aarch64"},{"file": 11,"line": 55,"col": 8,"name": "aarch64_be"},{"file": 11,"line": 56,"col": 8,"name": "aarch64_32"},{"file": 11,"line": 57,"col": 8,"name": "arc"},{"file": 11,"line": 58,"col": 8,"name": "avr"},{"file": 11,"line": 59,"col": 8,"name": "bpfel"},{"file": 11,"line": 60,"col": 8,"name": "bpfeb"},{"file": 11,"line": 61,"col": 8,"name": "hexagon"},{"file": 11,"line": 62,"col": 8,"name": "mips"},{"file": 11,"line": 63,"col": 8,"name": "mipsel"},{"file": 11,"line": 64,"col": 8,"name": "mips64"},{"file": 11,"line": 65,"col": 8,"name": "mips64el"},{"file": 11,"line": 66,"col": 8,"name": "msp430"},{"file": 11,"line": 67,"col": 8,"name": "powerpc"},{"file": 11,"line": 68,"col": 8,"name": "powerpc64"},{"file": 11,"line": 69,"col": 8,"name": "powerpc64le"},{"file": 11,"line": 70,"col": 8,"name": "r600"},{"file": 11,"line": 71,"col": 8,"name": "amdgcn"},{"file": 11,"line": 72,"col": 8,"name": "riscv32"},{"file": 11,"line": 73,"col": 8,"name": "riscv64"},{"file": 11,"line": 74,"col": 8,"name": "sparc"},{"file": 11,"line": 75,"col": 8,"name": "sparcv9"},{"file": 11,"line": 76,"col": 8,"name": "sparcel"},{"file": 11,"line": 77,"col": 8,"name": "s390x"},{"file": 11,"line": 78,"col": 8,"name": "tce"},{"file": 11,"line": 79,"col": 8,"name": "tcele"},{"file": 11,"line": 80,"col": 8,"name": "thumb"},{"file": 11,"line": 81,"col": 8,"name": "thumbeb"},{"file": 11,"line": 82,"col": 8,"name": "i386"},{"file": 11,"line": 83,"col": 8,"name": "x86_64"},{"file": 11,"line": 84,"col": 8,"name": "xcore"},{"file": 11,"line": 85,"col": 8,"name": "nvptx"},{"file": 11,"line": 86,"col": 8,"name": "nvptx64"},{"file": 11,"line": 87,"col": 8,"name": "le32"},{"file": 11,"line": 88,"col": 8,"name": "le64"},{"file": 11,"line": 89,"col": 8,"name": "amdil"},{"file": 11,"line": 90,"col": 8,"name": "amdil64"},{"file": 11,"line": 91,"col": 8,"name": "hsail"},{"file": 11,"line": 92,"col": 8,"name": "hsail64"},{"file": 11,"line": 93,"col": 8,"name": "spir"},{"file": 11,"line": 94,"col": 8,"name": "spir64"},{"file": 11,"line": 95,"col": 8,"name": "kalimba"},{"file": 11,"line": 96,"col": 8,"name": "shave"},{"file": 11,"line": 97,"col": 8,"name": "lanai"},{"file": 11,"line": 98,"col": 8,"name": "wasm32"},{"file": 11,"line": 99,"col": 8,"name": "wasm64"},{"file": 11,"line": 100,"col": 8,"name": "renderscript32"},{"file": 11,"line": 101,"col": 8,"name": "renderscript64"},{"file": 35,"line": 602,"col": 4,"name": "allocator"},{"file": 35,"line": 603,"col": 4,"name": "end_index"},{"file": 35,"line": 604,"col": 4,"name": "buffer"},{"file": 42,"line": 521,"col": 4,"name": "tv_sec"},{"file": 42,"line": 522,"col": 4,"name": "tv_nsec"},{"file": 42,"line": 489,"col": 4,"name": "dev"},{"file": 42,"line": 490,"col": 4,"name": "ino"},{"file": 42,"line": 491,"col": 4,"name": "nlink"},{"file": 42,"line": 493,"col": 4,"name": "mode"},{"file": 42,"line": 494,"col": 4,"name": "uid"},{"file": 42,"line": 495,"col": 4,"name": "gid"},{"file": 42,"line": 496,"col": 4,"name": "__pad0"},{"file": 42,"line": 497,"col": 4,"name": "rdev"},{"file": 42,"line": 498,"col": 4,"name": "size"},{"file": 42,"line": 499,"col": 4,"name": "blksize"},{"file": 42,"line": 500,"col": 4,"name": "blocks"},{"file": 42,"line": 502,"col": 4,"name": "atim"},{"file": 42,"line": 503,"col": 4,"name": "mtim"},{"file": 42,"line": 504,"col": 4,"name": "ctim"},{"file": 42,"line": 505,"col": 4,"name": "__unused"},{"file": 43,"line": 14,"col": 4,"name": "os_event"},{"file": 43,"line": 182,"col": 4,"name": "waiters"},{"file": 44,"line": 43,"col": 8,"name": "context"},{"file": 44,"line": 44,"col": 8,"name": "parent"},{"file": 44,"line": 45,"col": 8,"name": "completed_items"},{"file": 44,"line": 46,"col": 8,"name": "name"},{"file": 44,"line": 47,"col": 8,"name": "recently_updated_child"},{"file": 44,"line": 50,"col": 8,"docs": " This field may be updated freely.\n","name": "estimated_total_items"},{"file": 45,"line": 131,"col": 4,"name": "state"},{"file": 45,"line": 133,"col": 4,"name": "buf"},{"file": 45,"line": 134,"col": 4,"name": "buf_len"},{"file": 45,"line": 38,"col": 4,"name": "seed"},{"file": 45,"line": 39,"col": 4,"name": "msg_len"},{"file": 13,"line": 198,"col": 12,"name": "prev"},{"file": 13,"line": 199,"col": 12,"name": "next"},{"file": 13,"line": 200,"col": 12,"name": "data"},{"file": 11,"line": 263,"col": 8,"name": "none"},{"file": 11,"line": 264,"col": 8,"name": "gnu"},{"file": 11,"line": 265,"col": 8,"name": "gnuabin32"},{"file": 11,"line": 266,"col": 8,"name": "gnuabi64"},{"file": 11,"line": 267,"col": 8,"name": "gnueabi"},{"file": 11,"line": 268,"col": 8,"name": "gnueabihf"},{"file": 11,"line": 269,"col": 8,"name": "gnux32"},{"file": 11,"line": 270,"col": 8,"name": "code16"},{"file": 11,"line": 271,"col": 8,"name": "eabi"},{"file": 11,"line": 272,"col": 8,"name": "eabihf"},{"file": 11,"line": 273,"col": 8,"name": "elfv1"},{"file": 11,"line": 274,"col": 8,"name": "elfv2"},{"file": 11,"line": 275,"col": 8,"name": "android"},{"file": 11,"line": 276,"col": 8,"name": "musl"},{"file": 11,"line": 277,"col": 8,"name": "musleabi"},{"file": 11,"line": 278,"col": 8,"name": "musleabihf"},{"file": 11,"line": 279,"col": 8,"name": "msvc"},{"file": 11,"line": 280,"col": 8,"name": "itanium"},{"file": 11,"line": 281,"col": 8,"name": "cygnus"},{"file": 11,"line": 282,"col": 8,"name": "coreclr"},{"file": 11,"line": 283,"col": 8,"name": "simulator"},{"file": 11,"line": 284,"col": 8,"name": "macabi"},{"file": 11,"line": 307,"col": 8,"name": "arch"},{"file": 11,"line": 308,"col": 8,"name": "os"},{"file": 11,"line": 309,"col": 8,"name": "abi"},{"file": 12,"line": 50,"col": 12,"name": "key"},{"file": 12,"line": 51,"col": 12,"name": "value"},{"file": 12,"line": 55,"col": 12,"name": "used"},{"file": 12,"line": 56,"col": 12,"name": "distance_from_start_index"},{"file": 12,"line": 57,"col": 12,"name": "kv"},{"file": 39,"line": 252,"col": 4,"name": "n_strx"},{"file": 39,"line": 253,"col": 4,"name": "n_type"},{"file": 39,"line": 254,"col": 4,"name": "n_sect"},{"file": 39,"line": 255,"col": 4,"name": "n_desc"},{"file": 39,"line": 256,"col": 4,"name": "n_value"},{"file": 31,"line": 266,"col": 4,"name": "name"},{"file": 31,"line": 267,"col": 4,"name": "misc"},{"file": 31,"line": 268,"col": 4,"name": "virtual_address"},{"file": 31,"line": 269,"col": 4,"name": "size_of_raw_data"},{"file": 31,"line": 270,"col": 4,"name": "pointer_to_raw_data"},{"file": 31,"line": 271,"col": 4,"name": "pointer_to_relocations"},{"file": 31,"line": 272,"col": 4,"name": "pointer_to_line_numbers"},{"file": 31,"line": 273,"col": 4,"name": "number_of_relocations"},{"file": 31,"line": 274,"col": 4,"name": "number_of_line_numbers"},{"file": 31,"line": 275,"col": 4,"name": "characteristics"},{"file": 14,"line": 25,"col": 8,"name": "TickNode"},{"file": 14,"line": 26,"col": 8,"name": "DeallocCloseOperation"},{"file": 14,"line": 27,"col": 8,"name": "NoAction"},{"file": 14,"line": 31,"col": 8,"name": "WriteV"},{"file": 14,"line": 32,"col": 8,"name": "PWriteV"},{"file": 14,"line": 33,"col": 8,"name": "PReadV"},{"file": 14,"line": 34,"col": 8,"name": "Open"},{"file": 14,"line": 35,"col": 8,"name": "Close"},{"file": 14,"line": 36,"col": 8,"name": "WriteFile"},{"file": 14,"line": 37,"col": 8,"name": "End"},{"file": 23,"line": 1780,"col": 4,"name": "Address"},{"file": 23,"line": 1781,"col": 4,"name": "Block"},{"file": 23,"line": 1782,"col": 4,"name": "Const"},{"file": 23,"line": 1783,"col": 4,"name": "ExprLoc"},{"file": 23,"line": 1784,"col": 4,"name": "Flag"},{"file": 23,"line": 1785,"col": 4,"name": "SecOffset"},{"file": 23,"line": 1786,"col": 4,"name": "Ref"},{"file": 23,"line": 1787,"col": 4,"name": "RefAddr"},{"file": 23,"line": 1788,"col": 4,"name": "String"},{"file": 23,"line": 1789,"col": 4,"name": "StrPtr"},{"file": 13,"line": 20,"col": 12,"name": "next"},{"file": 13,"line": 21,"col": 12,"name": "data"},{"file": 17,"line": 18,"col": 12,"name": "next"},{"file": 17,"line": 19,"col": 12,"name": "data"},{"file": 46,"line": 30,"col": 8,"name": "id"},{"file": 46,"line": 31,"col": 8,"name": "handle"},{"file": 46,"line": 32,"col": 8,"name": "overlapped"},{"file": 4,"line": 14,"col": 4,"docs": " the image contains black-and-white pixels.\n","name": "bitmap"},{"file": 4,"line": 17,"col": 4,"docs": " the image contains grayscale pixels.\n","name": "grayscale"},{"file": 4,"line": 20,"col": 4,"docs": " the image contains RGB pixels.\n","name": "rgb"},{"file": 4,"line": 68,"col": 4,"name": "bitmap"},{"file": 4,"line": 69,"col": 4,"name": "grayscale"},{"file": 4,"line": 70,"col": 4,"name": "rgb"},{"file": 4,"line": 101,"col": 4,"name": "format"},{"file": 4,"line": 102,"col": 4,"name": "binary"},{"file": 4,"line": 103,"col": 4,"name": "width"},{"file": 4,"line": 104,"col": 4,"name": "height"},{"file": 4,"line": 105,"col": 4,"name": "maxValue"},{"file": 19,"line": 212,"col": 8,"name": "layout"},{"file": 19,"line": 213,"col": 8,"name": "fields"},{"file": 19,"line": 214,"col": 8,"name": "decls"},{"file": 19,"line": 184,"col": 8,"name": "len"},{"file": 19,"line": 185,"col": 8,"name": "child"},{"file": 19,"line": 190,"col": 8,"docs": " The type of the sentinel is the element type of the array, which is\n the value of the `child` field in this struct. However there is no way\n to refer to that type here, so we use `var`.\n","name": "sentinel"},{"file": 19,"line": 226,"col": 8,"name": "error_set"},{"file": 19,"line": 227,"col": 8,"name": "payload"},{"file": 19,"line": 159,"col": 8,"name": "size"},{"file": 19,"line": 160,"col": 8,"name": "is_const"},{"file": 19,"line": 161,"col": 8,"name": "is_volatile"},{"file": 19,"line": 162,"col": 8,"name": "alignment"},{"file": 19,"line": 163,"col": 8,"name": "child"},{"file": 19,"line": 164,"col": 8,"name": "is_allowzero"},{"file": 19,"line": 169,"col": 8,"docs": " The type of the sentinel is the element type of the pointer, which is\n the value of the `child` field in this struct. However there is no way\n to refer to that type here, so we use `var`.\n","name": "sentinel"},{"file": 19,"line": 244,"col": 8,"name": "name"},{"file": 19,"line": 245,"col": 8,"name": "value"},{"file": 19,"line": 196,"col": 8,"name": "Auto"},{"file": 19,"line": 197,"col": 8,"name": "Extern"},{"file": 19,"line": 198,"col": 8,"name": "Packed"},{"file": 19,"line": 308,"col": 8,"name": "name"},{"file": 19,"line": 309,"col": 8,"name": "is_pub"},{"file": 19,"line": 310,"col": 8,"name": "data"},{"file": 19,"line": 268,"col": 8,"name": "layout"},{"file": 19,"line": 269,"col": 8,"name": "tag_type"},{"file": 19,"line": 270,"col": 8,"name": "fields"},{"file": 19,"line": 271,"col": 8,"name": "decls"},{"file": 19,"line": 220,"col": 8,"name": "child"},{"file": 19,"line": 251,"col": 8,"name": "layout"},{"file": 19,"line": 252,"col": 8,"name": "tag_type"},{"file": 19,"line": 253,"col": 8,"name": "fields"},{"file": 19,"line": 254,"col": 8,"name": "decls"},{"file": 19,"line": 301,"col": 8,"name": "len"},{"file": 19,"line": 302,"col": 8,"name": "child"},{"file": 19,"line": 153,"col": 8,"name": "bits"},{"file": 19,"line": 260,"col": 8,"name": "name"},{"file": 19,"line": 261,"col": 8,"name": "enum_field"},{"file": 19,"line": 262,"col": 8,"name": "field_type"},{"file": 19,"line": 204,"col": 8,"name": "name"},{"file": 19,"line": 205,"col": 8,"name": "offset"},{"file": 19,"line": 206,"col": 8,"name": "field_type"},{"file": 19,"line": 295,"col": 8,"name": "child"},{"file": 19,"line": 233,"col": 8,"name": "name"},{"file": 19,"line": 234,"col": 8,"name": "value"},{"file": 19,"line": 285,"col": 8,"name": "calling_convention"},{"file": 19,"line": 286,"col": 8,"name": "is_generic"},{"file": 19,"line": 287,"col": 8,"name": "is_var_args"},{"file": 19,"line": 288,"col": 8,"name": "return_type"},{"file": 19,"line": 289,"col": 8,"name": "args"},{"file": 19,"line": 277,"col": 8,"name": "is_generic"},{"file": 19,"line": 278,"col": 8,"name": "is_noalias"},{"file": 19,"line": 279,"col": 8,"name": "arg_type"},{"file": 19,"line": 146,"col": 8,"name": "is_signed"},{"file": 19,"line": 147,"col": 8,"name": "bits"},{"file": 6,"line": 5,"col": 4,"name": "red"},{"file": 6,"line": 6,"col": 4,"name": "green"},{"file": 6,"line": 7,"col": 4,"name": "blue"},{"file": 19,"line": 360,"col": 4,"name": "Exe"},{"file": 19,"line": 361,"col": 4,"name": "Lib"},{"file": 19,"line": 362,"col": 4,"name": "Obj"},{"file": 19,"line": 87,"col": 4,"name": "Debug"},{"file": 19,"line": 88,"col": 4,"name": "ReleaseSafe"},{"file": 19,"line": 89,"col": 4,"name": "ReleaseFast"},{"file": 19,"line": 90,"col": 4,"name": "ReleaseSmall"},{"file": 19,"line": 96,"col": 4,"name": "Unspecified"},{"file": 19,"line": 97,"col": 4,"name": "C"},{"file": 19,"line": 98,"col": 4,"name": "Cold"},{"file": 19,"line": 99,"col": 4,"name": "Naked"},{"file": 19,"line": 100,"col": 4,"name": "Async"},{"file": 19,"line": 101,"col": 4,"name": "Interrupt"},{"file": 19,"line": 102,"col": 4,"name": "Signal"},{"file": 19,"line": 103,"col": 4,"name": "Stdcall"},{"file": 19,"line": 104,"col": 4,"name": "Fastcall"},{"file": 19,"line": 105,"col": 4,"name": "Vectorcall"},{"file": 19,"line": 106,"col": 4,"name": "Thiscall"},{"file": 19,"line": 107,"col": 4,"name": "APCS"},{"file": 19,"line": 108,"col": 4,"name": "AAPCS"},{"file": 19,"line": 109,"col": 4,"name": "AAPCSVFP"},{"file": 19,"line": 383,"col": 4,"name": "modifier"},{"file": 19,"line": 384,"col": 4,"name": "stack"},{"file": 19,"line": 424,"col": 4,"name": "name"},{"file": 19,"line": 425,"col": 4,"name": "func"},{"file": 19,"line": 53,"col": 4,"name": "Internal"},{"file": 19,"line": 54,"col": 4,"name": "Strong"},{"file": 19,"line": 55,"col": 4,"name": "Weak"},{"file": 19,"line": 56,"col": 4,"name": "LinkOnce"},{"file": 19,"line": 73,"col": 4,"name": "Xchg"},{"file": 19,"line": 74,"col": 4,"name": "Add"},{"file": 19,"line": 75,"col": 4,"name": "Sub"},{"file": 19,"line": 76,"col": 4,"name": "And"},{"file": 19,"line": 77,"col": 4,"name": "Nand"},{"file": 19,"line": 78,"col": 4,"name": "Or"},{"file": 19,"line": 79,"col": 4,"name": "Xor"},{"file": 19,"line": 80,"col": 4,"name": "Max"},{"file": 19,"line": 81,"col": 4,"name": "Min"},{"file": 19,"line": 62,"col": 4,"name": "Unordered"},{"file": 19,"line": 63,"col": 4,"name": "Monotonic"},{"file": 19,"line": 64,"col": 4,"name": "Acquire"},{"file": 19,"line": 65,"col": 4,"name": "Release"},{"file": 19,"line": 66,"col": 4,"name": "AcqRel"},{"file": 19,"line": 67,"col": 4,"name": "SeqCst"},{"file": 48,"line": 9,"col": 4,"name": "data"},{"file": 44,"line": 12,"col": 4,"docs": " `null` if the current node (and its children) should\n not print on update()\n","name": "terminal"},{"file": 44,"line": 14,"col": 4,"name": "root"},{"file": 44,"line": 18,"col": 4,"docs": " Keeps track of how much time has passed since the beginning.\n Used to compare with `initial_delay_ms` and `refresh_rate_ms`.\n","name": "timer"},{"file": 44,"line": 22,"col": 4,"docs": " When the previous refresh was written to the terminal.\n Used to compare with `refresh_rate_ms`.\n","name": "prev_refresh_timestamp"},{"file": 44,"line": 26,"col": 4,"docs": " This buffer represents the maximum number of bytes written to the terminal\n with each refresh.\n","name": "output_buffer"},{"file": 44,"line": 29,"col": 4,"docs": " How many nanoseconds between writing updates to the terminal.\n","name": "refresh_rate_ns"},{"file": 44,"line": 32,"col": 4,"docs": " How many nanoseconds to keep the output hidden\n","name": "initial_delay_ns"},{"file": 44,"line": 34,"col": 4,"name": "done"},{"file": 44,"line": 38,"col": 4,"docs": " Keeps track of how many columns in the terminal have been output, so that\n we can move the cursor back later.\n","name": "columns_written"},{"file": 57,"line": 4,"col": 4,"name": "state"},{"file": 20,"line": 39,"col": 4,"docs": " Realloc is used to modify the size or alignment of an existing allocation,\n as well as to provide the allocator with an opportunity to move an allocation\n to a better location.\n When the size/alignment is greater than the previous allocation, this function\n returns `error.OutOfMemory` when the requested new allocation could not be granted.\n When the size/alignment is less than or equal to the previous allocation,\n this function returns `error.OutOfMemory` when the allocator decides the client\n would be better off keeping the extra alignment/size. Clients will call\n `shrinkFn` when they require the allocator to track a new alignment/size,\n and so this function should only return success when the allocator considers\n the reallocation desirable from the allocator's perspective.\n As an example, `std.ArrayList` tracks a \"capacity\", and therefore can handle\n reallocation failure, even when `new_n` <= `old_mem.len`. A `FixedBufferAllocator`\n would always return `error.OutOfMemory` for `reallocFn` when the size/alignment\n is less than or equal to the old allocation, because it cannot reclaim the memory,\n and thus the `std.ArrayList` would be better off retaining its capacity.\n When `reallocFn` returns,\n `return_value[0..min(old_mem.len, new_byte_count)]` must be the same\n as `old_mem` was when `reallocFn` is called. The bytes of\n `return_value[old_mem.len..]` have undefined values.\n The returned slice must have its pointer aligned at least to `new_alignment` bytes.\n","name": "reallocFn"},{"file": 20,"line": 62,"col": 4,"docs": " This function deallocates memory. It must succeed.\n","name": "shrinkFn"},{"file": 9,"line": 150,"col": 4,"name": "bpp1"},{"file": 9,"line": 151,"col": 4,"name": "bpp4"},{"file": 9,"line": 152,"col": 4,"name": "bpp8"},{"file": 9,"line": 153,"col": 4,"name": "bpp24"},{"file": 40,"line": 206,"col": 8,"name": "size"},{"file": 40,"line": 207,"col": 8,"name": "mode"},{"file": 40,"line": 210,"col": 8,"docs": " access time in nanoseconds\n","name": "atime"},{"file": 40,"line": 213,"col": 8,"docs": " last modification time in nanoseconds\n","name": "mtime"},{"file": 40,"line": 216,"col": 8,"docs": " creation time in nanoseconds\n","name": "ctime"},{"file": 9,"line": 200,"col": 8,"name": "value"},{"file": 9,"line": 201,"col": 8,"name": "remaining"},{"file": 49,"line": 793,"col": 4,"name": "sigaction"},{"file": 49,"line": 794,"col": 4,"name": "mask"},{"file": 49,"line": 795,"col": 4,"name": "flags"},{"file": 49,"line": 796,"col": 4,"name": "restorer"},{"file": 26,"line": 347,"col": 4,"name": "seekable_stream"},{"file": 26,"line": 348,"col": 4,"name": "in_stream"},{"file": 26,"line": 349,"col": 4,"name": "is_64"},{"file": 26,"line": 350,"col": 4,"name": "endian"},{"file": 26,"line": 351,"col": 4,"name": "file_type"},{"file": 26,"line": 352,"col": 4,"name": "arch"},{"file": 26,"line": 353,"col": 4,"name": "entry_addr"},{"file": 26,"line": 354,"col": 4,"name": "program_header_offset"},{"file": 26,"line": 355,"col": 4,"name": "section_header_offset"},{"file": 26,"line": 356,"col": 4,"name": "string_section_index"},{"file": 26,"line": 357,"col": 4,"name": "string_section"},{"file": 26,"line": 358,"col": 4,"name": "section_headers"},{"file": 26,"line": 359,"col": 4,"name": "allocator"},{"file": 26,"line": 311,"col": 4,"docs": " No file type\n","name": "NONE"},{"file": 26,"line": 314,"col": 4,"docs": " Relocatable file\n","name": "REL"},{"file": 26,"line": 317,"col": 4,"docs": " Executable file\n","name": "EXEC"},{"file": 26,"line": 320,"col": 4,"docs": " Shared object file\n","name": "DYN"},{"file": 26,"line": 323,"col": 4,"docs": " Core file\n","name": "CORE"},{"file": 26,"line": 882,"col": 4,"docs": " No machine\n","name": "_NONE"},{"file": 26,"line": 885,"col": 4,"docs": " AT&T WE 32100\n","name": "_M32"},{"file": 26,"line": 888,"col": 4,"docs": " SPARC\n","name": "_SPARC"},{"file": 26,"line": 891,"col": 4,"docs": " Intel 386\n","name": "_386"},{"file": 26,"line": 894,"col": 4,"docs": " Motorola 68000\n","name": "_68K"},{"file": 26,"line": 897,"col": 4,"docs": " Motorola 88000\n","name": "_88K"},{"file": 26,"line": 900,"col": 4,"docs": " Intel MCU\n","name": "_IAMCU"},{"file": 26,"line": 903,"col": 4,"docs": " Intel 80860\n","name": "_860"},{"file": 26,"line": 906,"col": 4,"docs": " MIPS R3000\n","name": "_MIPS"},{"file": 26,"line": 909,"col": 4,"docs": " IBM System/370\n","name": "_S370"},{"file": 26,"line": 912,"col": 4,"docs": " MIPS RS3000 Little-endian\n","name": "_MIPS_RS3_LE"},{"file": 26,"line": 915,"col": 4,"docs": " Hewlett-Packard PA-RISC\n","name": "_PARISC"},{"file": 26,"line": 918,"col": 4,"docs": " Fujitsu VPP500\n","name": "_VPP500"},{"file": 26,"line": 921,"col": 4,"docs": " Enhanced instruction set SPARC\n","name": "_SPARC32PLUS"},{"file": 26,"line": 924,"col": 4,"docs": " Intel 80960\n","name": "_960"},{"file": 26,"line": 927,"col": 4,"docs": " PowerPC\n","name": "_PPC"},{"file": 26,"line": 930,"col": 4,"docs": " PowerPC64\n","name": "_PPC64"},{"file": 26,"line": 933,"col": 4,"docs": " IBM System/390\n","name": "_S390"},{"file": 26,"line": 936,"col": 4,"docs": " IBM SPU/SPC\n","name": "_SPU"},{"file": 26,"line": 939,"col": 4,"docs": " NEC V800\n","name": "_V800"},{"file": 26,"line": 942,"col": 4,"docs": " Fujitsu FR20\n","name": "_FR20"},{"file": 26,"line": 945,"col": 4,"docs": " TRW RH-32\n","name": "_RH32"},{"file": 26,"line": 948,"col": 4,"docs": " Motorola RCE\n","name": "_RCE"},{"file": 26,"line": 951,"col": 4,"docs": " ARM\n","name": "_ARM"},{"file": 26,"line": 954,"col": 4,"docs": " DEC Alpha\n","name": "_ALPHA"},{"file": 26,"line": 957,"col": 4,"docs": " Hitachi SH\n","name": "_SH"},{"file": 26,"line": 960,"col": 4,"docs": " SPARC V9\n","name": "_SPARCV9"},{"file": 26,"line": 963,"col": 4,"docs": " Siemens TriCore\n","name": "_TRICORE"},{"file": 26,"line": 966,"col": 4,"docs": " Argonaut RISC Core\n","name": "_ARC"},{"file": 26,"line": 969,"col": 4,"docs": " Hitachi H8/300\n","name": "_H8_300"},{"file": 26,"line": 972,"col": 4,"docs": " Hitachi H8/300H\n","name": "_H8_300H"},{"file": 26,"line": 975,"col": 4,"docs": " Hitachi H8S\n","name": "_H8S"},{"file": 26,"line": 978,"col": 4,"docs": " Hitachi H8/500\n","name": "_H8_500"},{"file": 26,"line": 981,"col": 4,"docs": " Intel IA-64 processor architecture\n","name": "_IA_64"},{"file": 26,"line": 984,"col": 4,"docs": " Stanford MIPS-X\n","name": "_MIPS_X"},{"file": 26,"line": 987,"col": 4,"docs": " Motorola ColdFire\n","name": "_COLDFIRE"},{"file": 26,"line": 990,"col": 4,"docs": " Motorola M68HC12\n","name": "_68HC12"},{"file": 26,"line": 993,"col": 4,"docs": " Fujitsu MMA Multimedia Accelerator\n","name": "_MMA"},{"file": 26,"line": 996,"col": 4,"docs": " Siemens PCP\n","name": "_PCP"},{"file": 26,"line": 999,"col": 4,"docs": " Sony nCPU embedded RISC processor\n","name": "_NCPU"},{"file": 26,"line": 1002,"col": 4,"docs": " Denso NDR1 microprocessor\n","name": "_NDR1"},{"file": 26,"line": 1005,"col": 4,"docs": " Motorola Star*Core processor\n","name": "_STARCORE"},{"file": 26,"line": 1008,"col": 4,"docs": " Toyota ME16 processor\n","name": "_ME16"},{"file": 26,"line": 1011,"col": 4,"docs": " STMicroelectronics ST100 processor\n","name": "_ST100"},{"file": 26,"line": 1014,"col": 4,"docs": " Advanced Logic Corp. TinyJ embedded processor family\n","name": "_TINYJ"},{"file": 26,"line": 1017,"col": 4,"docs": " AMD x86-64 architecture\n","name": "_X86_64"},{"file": 26,"line": 1020,"col": 4,"docs": " Sony DSP Processor\n","name": "_PDSP"},{"file": 26,"line": 1023,"col": 4,"docs": " Digital Equipment Corp. PDP-10\n","name": "_PDP10"},{"file": 26,"line": 1026,"col": 4,"docs": " Digital Equipment Corp. PDP-11\n","name": "_PDP11"},{"file": 26,"line": 1029,"col": 4,"docs": " Siemens FX66 microcontroller\n","name": "_FX66"},{"file": 26,"line": 1032,"col": 4,"docs": " STMicroelectronics ST9+ 8/16 bit microcontroller\n","name": "_ST9PLUS"},{"file": 26,"line": 1035,"col": 4,"docs": " STMicroelectronics ST7 8-bit microcontroller\n","name": "_ST7"},{"file": 26,"line": 1038,"col": 4,"docs": " Motorola MC68HC16 Microcontroller\n","name": "_68HC16"},{"file": 26,"line": 1041,"col": 4,"docs": " Motorola MC68HC11 Microcontroller\n","name": "_68HC11"},{"file": 26,"line": 1044,"col": 4,"docs": " Motorola MC68HC08 Microcontroller\n","name": "_68HC08"},{"file": 26,"line": 1047,"col": 4,"docs": " Motorola MC68HC05 Microcontroller\n","name": "_68HC05"},{"file": 26,"line": 1050,"col": 4,"docs": " Silicon Graphics SVx\n","name": "_SVX"},{"file": 26,"line": 1053,"col": 4,"docs": " STMicroelectronics ST19 8-bit microcontroller\n","name": "_ST19"},{"file": 26,"line": 1056,"col": 4,"docs": " Digital VAX\n","name": "_VAX"},{"file": 26,"line": 1059,"col": 4,"docs": " Axis Communications 32-bit embedded processor\n","name": "_CRIS"},{"file": 26,"line": 1062,"col": 4,"docs": " Infineon Technologies 32-bit embedded processor\n","name": "_JAVELIN"},{"file": 26,"line": 1065,"col": 4,"docs": " Element 14 64-bit DSP Processor\n","name": "_FIREPATH"},{"file": 26,"line": 1068,"col": 4,"docs": " LSI Logic 16-bit DSP Processor\n","name": "_ZSP"},{"file": 26,"line": 1071,"col": 4,"docs": " Donald Knuth's educational 64-bit processor\n","name": "_MMIX"},{"file": 26,"line": 1074,"col": 4,"docs": " Harvard University machine-independent object files\n","name": "_HUANY"},{"file": 26,"line": 1077,"col": 4,"docs": " SiTera Prism\n","name": "_PRISM"},{"file": 26,"line": 1080,"col": 4,"docs": " Atmel AVR 8-bit microcontroller\n","name": "_AVR"},{"file": 26,"line": 1083,"col": 4,"docs": " Fujitsu FR30\n","name": "_FR30"},{"file": 26,"line": 1086,"col": 4,"docs": " Mitsubishi D10V\n","name": "_D10V"},{"file": 26,"line": 1089,"col": 4,"docs": " Mitsubishi D30V\n","name": "_D30V"},{"file": 26,"line": 1092,"col": 4,"docs": " NEC v850\n","name": "_V850"},{"file": 26,"line": 1095,"col": 4,"docs": " Mitsubishi M32R\n","name": "_M32R"},{"file": 26,"line": 1098,"col": 4,"docs": " Matsushita MN10300\n","name": "_MN10300"},{"file": 26,"line": 1101,"col": 4,"docs": " Matsushita MN10200\n","name": "_MN10200"},{"file": 26,"line": 1104,"col": 4,"docs": " picoJava\n","name": "_PJ"},{"file": 26,"line": 1107,"col": 4,"docs": " OpenRISC 32-bit embedded processor\n","name": "_OPENRISC"},{"file": 26,"line": 1110,"col": 4,"docs": " ARC International ARCompact processor (old spelling/synonym: EM_ARC_A5)\n","name": "_ARC_COMPACT"},{"file": 26,"line": 1113,"col": 4,"docs": " Tensilica Xtensa Architecture\n","name": "_XTENSA"},{"file": 26,"line": 1116,"col": 4,"docs": " Alphamosaic VideoCore processor\n","name": "_VIDEOCORE"},{"file": 26,"line": 1119,"col": 4,"docs": " Thompson Multimedia General Purpose Processor\n","name": "_TMM_GPP"},{"file": 26,"line": 1122,"col": 4,"docs": " National Semiconductor 32000 series\n","name": "_NS32K"},{"file": 26,"line": 1125,"col": 4,"docs": " Tenor Network TPC processor\n","name": "_TPC"},{"file": 26,"line": 1128,"col": 4,"docs": " Trebia SNP 1000 processor\n","name": "_SNP1K"},{"file": 26,"line": 1131,"col": 4,"docs": " STMicroelectronics (www.st.com) ST200\n","name": "_ST200"},{"file": 26,"line": 1134,"col": 4,"docs": " Ubicom IP2xxx microcontroller family\n","name": "_IP2K"},{"file": 26,"line": 1137,"col": 4,"docs": " MAX Processor\n","name": "_MAX"},{"file": 26,"line": 1140,"col": 4,"docs": " National Semiconductor CompactRISC microprocessor\n","name": "_CR"},{"file": 26,"line": 1143,"col": 4,"docs": " Fujitsu F2MC16\n","name": "_F2MC16"},{"file": 26,"line": 1146,"col": 4,"docs": " Texas Instruments embedded microcontroller msp430\n","name": "_MSP430"},{"file": 26,"line": 1149,"col": 4,"docs": " Analog Devices Blackfin (DSP) processor\n","name": "_BLACKFIN"},{"file": 26,"line": 1152,"col": 4,"docs": " S1C33 Family of Seiko Epson processors\n","name": "_SE_C33"},{"file": 26,"line": 1155,"col": 4,"docs": " Sharp embedded microprocessor\n","name": "_SEP"},{"file": 26,"line": 1158,"col": 4,"docs": " Arca RISC Microprocessor\n","name": "_ARCA"},{"file": 26,"line": 1161,"col": 4,"docs": " Microprocessor series from PKU-Unity Ltd. and MPRC of Peking University\n","name": "_UNICORE"},{"file": 26,"line": 1164,"col": 4,"docs": " eXcess: 16/32/64-bit configurable embedded CPU\n","name": "_EXCESS"},{"file": 26,"line": 1167,"col": 4,"docs": " Icera Semiconductor Inc. Deep Execution Processor\n","name": "_DXP"},{"file": 26,"line": 1170,"col": 4,"docs": " Altera Nios II soft-core processor\n","name": "_ALTERA_NIOS2"},{"file": 26,"line": 1173,"col": 4,"docs": " National Semiconductor CompactRISC CRX\n","name": "_CRX"},{"file": 26,"line": 1176,"col": 4,"docs": " Motorola XGATE embedded processor\n","name": "_XGATE"},{"file": 26,"line": 1179,"col": 4,"docs": " Infineon C16x/XC16x processor\n","name": "_C166"},{"file": 26,"line": 1182,"col": 4,"docs": " Renesas M16C series microprocessors\n","name": "_M16C"},{"file": 26,"line": 1185,"col": 4,"docs": " Microchip Technology dsPIC30F Digital Signal Controller\n","name": "_DSPIC30F"},{"file": 26,"line": 1188,"col": 4,"docs": " Freescale Communication Engine RISC core\n","name": "_CE"},{"file": 26,"line": 1191,"col": 4,"docs": " Renesas M32C series microprocessors\n","name": "_M32C"},{"file": 26,"line": 1194,"col": 4,"docs": " Altium TSK3000 core\n","name": "_TSK3000"},{"file": 26,"line": 1197,"col": 4,"docs": " Freescale RS08 embedded processor\n","name": "_RS08"},{"file": 26,"line": 1200,"col": 4,"docs": " Analog Devices SHARC family of 32-bit DSP processors\n","name": "_SHARC"},{"file": 26,"line": 1203,"col": 4,"docs": " Cyan Technology eCOG2 microprocessor\n","name": "_ECOG2"},{"file": 26,"line": 1206,"col": 4,"docs": " Sunplus S+core7 RISC processor\n","name": "_SCORE7"},{"file": 26,"line": 1209,"col": 4,"docs": " New Japan Radio (NJR) 24-bit DSP Processor\n","name": "_DSP24"},{"file": 26,"line": 1212,"col": 4,"docs": " Broadcom VideoCore III processor\n","name": "_VIDEOCORE3"},{"file": 26,"line": 1215,"col": 4,"docs": " RISC processor for Lattice FPGA architecture\n","name": "_LATTICEMICO32"},{"file": 26,"line": 1218,"col": 4,"docs": " Seiko Epson C17 family\n","name": "_SE_C17"},{"file": 26,"line": 1221,"col": 4,"docs": " The Texas Instruments TMS320C6000 DSP family\n","name": "_TI_C6000"},{"file": 26,"line": 1224,"col": 4,"docs": " The Texas Instruments TMS320C2000 DSP family\n","name": "_TI_C2000"},{"file": 26,"line": 1227,"col": 4,"docs": " The Texas Instruments TMS320C55x DSP family\n","name": "_TI_C5500"},{"file": 26,"line": 1230,"col": 4,"docs": " STMicroelectronics 64bit VLIW Data Signal Processor\n","name": "_MMDSP_PLUS"},{"file": 26,"line": 1233,"col": 4,"docs": " Cypress M8C microprocessor\n","name": "_CYPRESS_M8C"},{"file": 26,"line": 1236,"col": 4,"docs": " Renesas R32C series microprocessors\n","name": "_R32C"},{"file": 26,"line": 1239,"col": 4,"docs": " NXP Semiconductors TriMedia architecture family\n","name": "_TRIMEDIA"},{"file": 26,"line": 1242,"col": 4,"docs": " Qualcomm Hexagon processor\n","name": "_HEXAGON"},{"file": 26,"line": 1245,"col": 4,"docs": " Intel 8051 and variants\n","name": "_8051"},{"file": 26,"line": 1248,"col": 4,"docs": " STMicroelectronics STxP7x family of configurable and extensible RISC processors\n","name": "_STXP7X"},{"file": 26,"line": 1251,"col": 4,"docs": " Andes Technology compact code size embedded RISC processor family\n","name": "_NDS32"},{"file": 26,"line": 1254,"col": 4,"docs": " Cyan Technology eCOG1X family\n","name": "_ECOG1X"},{"file": 26,"line": 1257,"col": 4,"docs": " Dallas Semiconductor MAXQ30 Core Micro-controllers\n","name": "_MAXQ30"},{"file": 26,"line": 1260,"col": 4,"docs": " New Japan Radio (NJR) 16-bit DSP Processor\n","name": "_XIMO16"},{"file": 26,"line": 1263,"col": 4,"docs": " M2000 Reconfigurable RISC Microprocessor\n","name": "_MANIK"},{"file": 26,"line": 1266,"col": 4,"docs": " Cray Inc. NV2 vector architecture\n","name": "_CRAYNV2"},{"file": 26,"line": 1269,"col": 4,"docs": " Renesas RX family\n","name": "_RX"},{"file": 26,"line": 1272,"col": 4,"docs": " Imagination Technologies META processor architecture\n","name": "_METAG"},{"file": 26,"line": 1275,"col": 4,"docs": " MCST Elbrus general purpose hardware architecture\n","name": "_MCST_ELBRUS"},{"file": 26,"line": 1278,"col": 4,"docs": " Cyan Technology eCOG16 family\n","name": "_ECOG16"},{"file": 26,"line": 1281,"col": 4,"docs": " National Semiconductor CompactRISC CR16 16-bit microprocessor\n","name": "_CR16"},{"file": 26,"line": 1284,"col": 4,"docs": " Freescale Extended Time Processing Unit\n","name": "_ETPU"},{"file": 26,"line": 1287,"col": 4,"docs": " Infineon Technologies SLE9X core\n","name": "_SLE9X"},{"file": 26,"line": 1290,"col": 4,"docs": " Intel L10M\n","name": "_L10M"},{"file": 26,"line": 1293,"col": 4,"docs": " Intel K10M\n","name": "_K10M"},{"file": 26,"line": 1296,"col": 4,"docs": " ARM AArch64\n","name": "_AARCH64"},{"file": 26,"line": 1299,"col": 4,"docs": " Atmel Corporation 32-bit microprocessor family\n","name": "_AVR32"},{"file": 26,"line": 1302,"col": 4,"docs": " STMicroeletronics STM8 8-bit microcontroller\n","name": "_STM8"},{"file": 26,"line": 1305,"col": 4,"docs": " Tilera TILE64 multicore architecture family\n","name": "_TILE64"},{"file": 26,"line": 1308,"col": 4,"docs": " Tilera TILEPro multicore architecture family\n","name": "_TILEPRO"},{"file": 26,"line": 1311,"col": 4,"docs": " NVIDIA CUDA architecture\n","name": "_CUDA"},{"file": 26,"line": 1314,"col": 4,"docs": " Tilera TILE-Gx multicore architecture family\n","name": "_TILEGX"},{"file": 26,"line": 1317,"col": 4,"docs": " CloudShield architecture family\n","name": "_CLOUDSHIELD"},{"file": 26,"line": 1320,"col": 4,"docs": " KIPO-KAIST Core-A 1st generation processor family\n","name": "_COREA_1ST"},{"file": 26,"line": 1323,"col": 4,"docs": " KIPO-KAIST Core-A 2nd generation processor family\n","name": "_COREA_2ND"},{"file": 26,"line": 1326,"col": 4,"docs": " Synopsys ARCompact V2\n","name": "_ARC_COMPACT2"},{"file": 26,"line": 1329,"col": 4,"docs": " Open8 8-bit RISC soft processor core\n","name": "_OPEN8"},{"file": 26,"line": 1332,"col": 4,"docs": " Renesas RL78 family\n","name": "_RL78"},{"file": 26,"line": 1335,"col": 4,"docs": " Broadcom VideoCore V processor\n","name": "_VIDEOCORE5"},{"file": 26,"line": 1338,"col": 4,"docs": " Renesas 78KOR family\n","name": "_78KOR"},{"file": 26,"line": 1341,"col": 4,"docs": " Freescale 56800EX Digital Signal Controller (DSC)\n","name": "_56800EX"},{"file": 26,"line": 1344,"col": 4,"docs": " Beyond BA1 CPU architecture\n","name": "_BA1"},{"file": 26,"line": 1347,"col": 4,"docs": " Beyond BA2 CPU architecture\n","name": "_BA2"},{"file": 26,"line": 1350,"col": 4,"docs": " XMOS xCORE processor family\n","name": "_XCORE"},{"file": 26,"line": 1353,"col": 4,"docs": " Microchip 8-bit PIC(r) family\n","name": "_MCHP_PIC"},{"file": 26,"line": 1356,"col": 4,"docs": " Reserved by Intel\n","name": "_INTEL205"},{"file": 26,"line": 1359,"col": 4,"docs": " Reserved by Intel\n","name": "_INTEL206"},{"file": 26,"line": 1362,"col": 4,"docs": " Reserved by Intel\n","name": "_INTEL207"},{"file": 26,"line": 1365,"col": 4,"docs": " Reserved by Intel\n","name": "_INTEL208"},{"file": 26,"line": 1368,"col": 4,"docs": " Reserved by Intel\n","name": "_INTEL209"},{"file": 26,"line": 1371,"col": 4,"docs": " KM211 KM32 32-bit processor\n","name": "_KM32"},{"file": 26,"line": 1374,"col": 4,"docs": " KM211 KMX32 32-bit processor\n","name": "_KMX32"},{"file": 26,"line": 1377,"col": 4,"docs": " KM211 KMX16 16-bit processor\n","name": "_KMX16"},{"file": 26,"line": 1380,"col": 4,"docs": " KM211 KMX8 8-bit processor\n","name": "_KMX8"},{"file": 26,"line": 1383,"col": 4,"docs": " KM211 KVARC processor\n","name": "_KVARC"},{"file": 26,"line": 1386,"col": 4,"docs": " Paneve CDP architecture family\n","name": "_CDP"},{"file": 26,"line": 1389,"col": 4,"docs": " Cognitive Smart Memory Processor\n","name": "_COGE"},{"file": 26,"line": 1392,"col": 4,"docs": " iCelero CoolEngine\n","name": "_COOL"},{"file": 26,"line": 1395,"col": 4,"docs": " Nanoradio Optimized RISC\n","name": "_NORC"},{"file": 26,"line": 1398,"col": 4,"docs": " CSR Kalimba architecture family\n","name": "_CSR_KALIMBA"},{"file": 26,"line": 1401,"col": 4,"docs": " AMD GPU architecture\n","name": "_AMDGPU"},{"file": 26,"line": 1404,"col": 4,"docs": " RISC-V\n","name": "_RISCV"},{"file": 26,"line": 1407,"col": 4,"docs": " Lanai 32-bit processor\n","name": "_LANAI"},{"file": 26,"line": 1410,"col": 4,"docs": " Linux kernel bpf virtual machine\n","name": "_BPF"},{"file": 26,"line": 334,"col": 4,"name": "name"},{"file": 26,"line": 335,"col": 4,"name": "sh_type"},{"file": 26,"line": 336,"col": 4,"name": "flags"},{"file": 26,"line": 337,"col": 4,"name": "addr"},{"file": 26,"line": 338,"col": 4,"name": "offset"},{"file": 26,"line": 339,"col": 4,"name": "size"},{"file": 26,"line": 340,"col": 4,"name": "link"},{"file": 26,"line": 341,"col": 4,"name": "info"},{"file": 26,"line": 342,"col": 4,"name": "addr_align"},{"file": 26,"line": 343,"col": 4,"name": "ent_size"},{"file": 23,"line": 1220,"col": 8,"name": "offset"},{"file": 23,"line": 1221,"col": 8,"name": "size"},{"file": 23,"line": 1803,"col": 4,"name": "tag_id"},{"file": 23,"line": 1804,"col": 4,"name": "has_children"},{"file": 23,"line": 1805,"col": 4,"name": "attrs"},{"file": 23,"line": 1793,"col": 4,"name": "payload"},{"file": 23,"line": 1794,"col": 4,"name": "signed"},{"file": 41,"line": 177,"col": 12,"name": "next"},{"file": 41,"line": 178,"col": 12,"name": "event"},{"file": 11,"line": 104,"col": 12,"name": "v8_5a"},{"file": 11,"line": 105,"col": 12,"name": "v8_4a"},{"file": 11,"line": 106,"col": 12,"name": "v8_3a"},{"file": 11,"line": 107,"col": 12,"name": "v8_2a"},{"file": 11,"line": 108,"col": 12,"name": "v8_1a"},{"file": 11,"line": 109,"col": 12,"name": "v8"},{"file": 11,"line": 110,"col": 12,"name": "v8r"},{"file": 11,"line": 111,"col": 12,"name": "v8m_baseline"},{"file": 11,"line": 112,"col": 12,"name": "v8m_mainline"},{"file": 11,"line": 113,"col": 12,"name": "v8_1m_mainline"},{"file": 11,"line": 114,"col": 12,"name": "v7"},{"file": 11,"line": 115,"col": 12,"name": "v7em"},{"file": 11,"line": 116,"col": 12,"name": "v7m"},{"file": 11,"line": 117,"col": 12,"name": "v7s"},{"file": 11,"line": 118,"col": 12,"name": "v7k"},{"file": 11,"line": 119,"col": 12,"name": "v7ve"},{"file": 11,"line": 120,"col": 12,"name": "v6"},{"file": 11,"line": 121,"col": 12,"name": "v6m"},{"file": 11,"line": 122,"col": 12,"name": "v6k"},{"file": 11,"line": 123,"col": 12,"name": "v6t2"},{"file": 11,"line": 124,"col": 12,"name": "v5"},{"file": 11,"line": 125,"col": 12,"name": "v5te"},{"file": 11,"line": 126,"col": 12,"name": "v4t"},{"file": 11,"line": 129,"col": 12,"name": "v8_5a"},{"file": 11,"line": 130,"col": 12,"name": "v8_4a"},{"file": 11,"line": 131,"col": 12,"name": "v8_3a"},{"file": 11,"line": 132,"col": 12,"name": "v8_2a"},{"file": 11,"line": 133,"col": 12,"name": "v8_1a"},{"file": 11,"line": 134,"col": 12,"name": "v8"},{"file": 11,"line": 135,"col": 12,"name": "v8r"},{"file": 11,"line": 136,"col": 12,"name": "v8m_baseline"},{"file": 11,"line": 137,"col": 12,"name": "v8m_mainline"},{"file": 11,"line": 140,"col": 12,"name": "v5"},{"file": 11,"line": 141,"col": 12,"name": "v4"},{"file": 11,"line": 142,"col": 12,"name": "v3"},{"file": 49,"line": 1101,"col": 8,"name": "signo"},{"file": 49,"line": 1102,"col": 8,"name": "errno"},{"file": 49,"line": 1103,"col": 8,"name": "code"},{"file": 49,"line": 1104,"col": 8,"name": "fields"},{"file": 37,"line": 103,"col": 4,"docs": "if we used resolution's value when performing the\n  performance counter calc on windows/darwin, it would\n  be less precise\n","name": "frequency"},{"file": 37,"line": 108,"col": 4,"name": "resolution"},{"file": 37,"line": 109,"col": 4,"name": "start_time"},{"file": 28,"line": 1105,"col": 4,"name": "remaining"},{"file": 26,"line": 701,"col": 4,"name": "vd_version"},{"file": 26,"line": 702,"col": 4,"name": "vd_flags"},{"file": 26,"line": 703,"col": 4,"name": "vd_ndx"},{"file": 26,"line": 704,"col": 4,"name": "vd_cnt"},{"file": 26,"line": 705,"col": 4,"name": "vd_hash"},{"file": 26,"line": 706,"col": 4,"name": "vd_aux"},{"file": 26,"line": 707,"col": 4,"name": "vd_next"},{"file": 30,"line": 629,"col": 4,"name": "in_file"},{"file": 30,"line": 630,"col": 4,"name": "pos"},{"file": 30,"line": 631,"col": 4,"name": "blocks"},{"file": 30,"line": 632,"col": 4,"name": "block_size"},{"file": 30,"line": 635,"col": 4,"docs": " Implementation of InStream trait for Pdb.MsfStream\n","name": "stream"},{"file": 9,"line": 143,"col": 4,"name": "bpp1"},{"file": 9,"line": 144,"col": 4,"name": "bpp4"},{"file": 9,"line": 145,"col": 4,"name": "bpp8"},{"file": 9,"line": 146,"col": 4,"name": "bpp24"},{"file": 31,"line": 262,"col": 8,"name": "physical_address"},{"file": 31,"line": 263,"col": 8,"name": "virtual_size"},{"file": 14,"line": 483,"col": 4,"name": "allocator"},{"file": 14,"line": 484,"col": 4,"name": "os_data"},{"file": 46,"line": 15,"col": 4,"name": "allocator"},{"file": 46,"line": 16,"col": 4,"name": "next_tick_queue"},{"file": 46,"line": 17,"col": 4,"name": "os_data"},{"file": 46,"line": 18,"col": 4,"name": "final_resume_node"},{"file": 46,"line": 19,"col": 4,"name": "pending_event_count"},{"file": 46,"line": 20,"col": 4,"name": "extra_threads"},{"file": 46,"line": 24,"col": 4,"name": "available_eventfd_resume_nodes"},{"file": 46,"line": 25,"col": 4,"name": "eventfd_resume_nodes"},{"file": 14,"line": 84,"col": 12,"name": "fd"},{"file": 14,"line": 66,"col": 12,"name": "path"},{"file": 14,"line": 67,"col": 12,"name": "flags"},{"file": 14,"line": 68,"col": 12,"name": "mode"},{"file": 14,"line": 69,"col": 12,"name": "result"},{"file": 14,"line": 75,"col": 12,"name": "path"},{"file": 14,"line": 76,"col": 12,"name": "contents"},{"file": 14,"line": 77,"col": 12,"name": "mode"},{"file": 14,"line": 78,"col": 12,"name": "result"},{"file": 14,"line": 48,"col": 12,"name": "fd"},{"file": 14,"line": 49,"col": 12,"name": "iov"},{"file": 14,"line": 50,"col": 12,"name": "offset"},{"file": 14,"line": 51,"col": 12,"name": "result"},{"file": 14,"line": 40,"col": 12,"name": "fd"},{"file": 14,"line": 41,"col": 12,"name": "iov"},{"file": 14,"line": 42,"col": 12,"name": "result"},{"file": 14,"line": 57,"col": 12,"name": "fd"},{"file": 14,"line": 58,"col": 12,"name": "iov"},{"file": 14,"line": 59,"col": 12,"name": "offset"},{"file": 14,"line": 60,"col": 12,"name": "result"},{"file": 23,"line": 1748,"col": 4,"name": "start"},{"file": 23,"line": 1749,"col": 4,"name": "end"},{"file": 46,"line": 47,"col": 12,"name": "Basic"},{"file": 46,"line": 48,"col": 12,"name": "Stop"},{"file": 46,"line": 49,"col": 12,"name": "EventFd"},{"file": 19,"line": 174,"col": 12,"name": "One"},{"file": 19,"line": 175,"col": 12,"name": "Many"},{"file": 19,"line": 176,"col": 12,"name": "Slice"},{"file": 19,"line": 177,"col": 12,"name": "C"},{"file": 19,"line": 315,"col": 12,"name": "Type"},{"file": 19,"line": 316,"col": 12,"name": "Var"},{"file": 19,"line": 317,"col": 12,"name": "Fn"},{"file": 19,"line": 388,"col": 8,"docs": " Equivalent to function call syntax.\n","name": "auto"},{"file": 19,"line": 391,"col": 8,"docs": " Equivalent to async keyword used with function call syntax.\n","name": "async_kw"},{"file": 19,"line": 397,"col": 8,"docs": " Prevents tail call optimization. This guarantees that the return\n address will point to the callsite, as opposed to the callsite's\n callsite. If the call is otherwise required to be tail-called\n or inlined, a compile error is emitted instead.\n","name": "never_tail"},{"file": 19,"line": 401,"col": 8,"docs": " Guarantees that the call will not be inlined. If the call is\n otherwise required to be inlined, a compile error is emitted instead.\n","name": "never_inline"},{"file": 19,"line": 405,"col": 8,"docs": " Asserts that the function call will not suspend. This allows a\n non-async function to call an async function.\n","name": "no_async"},{"file": 19,"line": 409,"col": 8,"docs": " Guarantees that the call will be generated with tail call optimization.\n If this is not possible, a compile error is emitted instead.\n","name": "always_tail"},{"file": 19,"line": 413,"col": 8,"docs": " Guarantees that the call will inlined at the callsite.\n If this is not possible, a compile error is emitted instead.\n","name": "always_inline"},{"file": 19,"line": 417,"col": 8,"docs": " Evaluates the call at compile-time. If the call cannot be completed at\n compile-time, a compile error is emitted instead.\n","name": "compile_time"},{"file": 48,"line": 39,"col": 12,"name": "handle"},{"file": 48,"line": 40,"col": 12,"name": "memory"},{"file": 51,"line": 27,"col": 4,"name": "iov_base"},{"file": 51,"line": 28,"col": 4,"name": "iov_len"},{"file": 49,"line": 785,"col": 8,"name": "sigaction"},{"file": 49,"line": 786,"col": 8,"name": "flags"},{"file": 49,"line": 787,"col": 8,"name": "restorer"},{"file": 49,"line": 788,"col": 8,"name": "mask"},{"file": 49,"line": 1038,"col": 4,"name": "ss_sp"},{"file": 49,"line": 1039,"col": 4,"name": "ss_flags"},{"file": 49,"line": 1040,"col": 4,"name": "ss_size"},{"file": 42,"line": 601,"col": 4,"name": "flags"},{"file": 42,"line": 602,"col": 4,"name": "link"},{"file": 42,"line": 603,"col": 4,"name": "stack"},{"file": 42,"line": 604,"col": 4,"name": "mcontext"},{"file": 42,"line": 605,"col": 4,"name": "sigmask"},{"file": 42,"line": 606,"col": 4,"name": "fpregs_mem"},{"file": 42,"line": 540,"col": 4,"name": "cwd"},{"file": 42,"line": 541,"col": 4,"name": "swd"},{"file": 42,"line": 542,"col": 4,"name": "ftw"},{"file": 42,"line": 543,"col": 4,"name": "fop"},{"file": 42,"line": 544,"col": 4,"name": "rip"},{"file": 42,"line": 545,"col": 4,"name": "rdp"},{"file": 42,"line": 546,"col": 4,"name": "mxcsr"},{"file": 42,"line": 547,"col": 4,"name": "mxcr_mask"},{"file": 42,"line": 548,"col": 4,"name": "st"},{"file": 42,"line": 553,"col": 4,"name": "xmm"},{"file": 42,"line": 556,"col": 4,"name": "padding"},{"file": 49,"line": 847,"col": 4,"name": "ptr"},{"file": 49,"line": 848,"col": 4,"name": "fd"},{"file": 49,"line": 849,"col": 4,"name": "u32"},{"file": 49,"line": 850,"col": 4,"name": "u64"},{"file": 51,"line": 22,"col": 4,"name": "iov_base"},{"file": 51,"line": 23,"col": 4,"name": "iov_len"},{"file": 49,"line": 857,"col": 8,"name": "events"},{"file": 49,"line": 858,"col": 8,"name": "data"},{"file": 42,"line": 595,"col": 4,"name": "gregs"},{"file": 42,"line": 596,"col": 4,"name": "fpregs"},{"file": 42,"line": 597,"col": 4,"name": "reserved1"},{"file": 49,"line": 761,"col": 4,"name": "ws_row"},{"file": 49,"line": 762,"col": 4,"name": "ws_col"},{"file": 49,"line": 763,"col": 4,"name": "ws_xpixel"},{"file": 49,"line": 764,"col": 4,"name": "ws_ypixel"},{"file": 49,"line": 1044,"col": 4,"name": "int"},{"file": 49,"line": 1045,"col": 4,"name": "ptr"},{"file": 23,"line": 1183,"col": 4,"name": "nlist"},{"file": 23,"line": 1184,"col": 4,"name": "ofile"},{"file": 23,"line": 1185,"col": 4,"name": "reloc"},{"file": 23,"line": 30,"col": 4,"name": "mod_info"},{"file": 23,"line": 31,"col": 4,"name": "module_name"},{"file": 23,"line": 32,"col": 4,"name": "obj_file_name"},{"file": 23,"line": 34,"col": 4,"name": "populated"},{"file": 23,"line": 35,"col": 4,"name": "symbols"},{"file": 23,"line": 36,"col": 4,"name": "subsect_info"},{"file": 23,"line": 37,"col": 4,"name": "checksum_offset"},{"file": 26,"line": 668,"col": 4,"name": "p_type"},{"file": 26,"line": 669,"col": 4,"name": "p_flags"},{"file": 26,"line": 670,"col": 4,"name": "p_offset"},{"file": 26,"line": 671,"col": 4,"name": "p_vaddr"},{"file": 26,"line": 672,"col": 4,"name": "p_paddr"},{"file": 26,"line": 673,"col": 4,"name": "p_filesz"},{"file": 26,"line": 674,"col": 4,"name": "p_memsz"},{"file": 26,"line": 675,"col": 4,"name": "p_align"},{"file": 26,"line": 624,"col": 4,"name": "st_name"},{"file": 26,"line": 625,"col": 4,"name": "st_info"},{"file": 26,"line": 626,"col": 4,"name": "st_other"},{"file": 26,"line": 627,"col": 4,"name": "st_shndx"},{"file": 26,"line": 628,"col": 4,"name": "st_value"},{"file": 26,"line": 629,"col": 4,"name": "st_size"},{"file": 26,"line": 714,"col": 4,"name": "vda_name"},{"file": 26,"line": 715,"col": 4,"name": "vda_next"},{"file": 26,"line": 752,"col": 4,"name": "a_type"},{"file": 26,"line": 753,"col": 4,"name": "a_un"},{"file": 26,"line": 565,"col": 4,"name": "e_ident"},{"file": 26,"line": 566,"col": 4,"name": "e_type"},{"file": 26,"line": 567,"col": 4,"name": "e_machine"},{"file": 26,"line": 568,"col": 4,"name": "e_version"},{"file": 26,"line": 569,"col": 4,"name": "e_entry"},{"file": 26,"line": 570,"col": 4,"name": "e_phoff"},{"file": 26,"line": 571,"col": 4,"name": "e_shoff"},{"file": 26,"line": 572,"col": 4,"name": "e_flags"},{"file": 26,"line": 573,"col": 4,"name": "e_ehsize"},{"file": 26,"line": 574,"col": 4,"name": "e_phentsize"},{"file": 26,"line": 575,"col": 4,"name": "e_phnum"},{"file": 26,"line": 576,"col": 4,"name": "e_shentsize"},{"file": 26,"line": 577,"col": 4,"name": "e_shnum"},{"file": 26,"line": 578,"col": 4,"name": "e_shstrndx"},{"file": 27,"line": 20,"col": 4,"docs": " I/O operates normally, waiting for the operating system syscalls to complete.\n","name": "blocking"},{"file": 27,"line": 23,"col": 4,"docs": " I/O functions are generated async and rely on a global event loop. Event-based I/O.\n","name": "evented"},{"file": 28,"line": 11,"col": 4,"name": "Left"},{"file": 28,"line": 12,"col": 4,"name": "Center"},{"file": 28,"line": 13,"col": 4,"name": "Right"},{"file": 30,"line": 54,"col": 4,"name": "Unused1"},{"file": 30,"line": 55,"col": 4,"name": "SectionContr"},{"file": 30,"line": 56,"col": 4,"name": "Flags"},{"file": 30,"line": 57,"col": 4,"name": "ModuleSymStream"},{"file": 30,"line": 58,"col": 4,"name": "SymByteSize"},{"file": 30,"line": 59,"col": 4,"name": "C11ByteSize"},{"file": 30,"line": 60,"col": 4,"name": "C13ByteSize"},{"file": 30,"line": 61,"col": 4,"name": "SourceFileCount"},{"file": 30,"line": 62,"col": 4,"name": "Padding"},{"file": 30,"line": 63,"col": 4,"name": "Unused2"},{"file": 30,"line": 64,"col": 4,"name": "SourceFileNameIndex"},{"file": 30,"line": 65,"col": 4,"name": "PdbFilePathNameIndex"},{"file": 30,"line": 42,"col": 4,"docs": " COFF Section index, 1-based\n","name": "Section"},{"file": 30,"line": 43,"col": 4,"name": "Padding1"},{"file": 30,"line": 44,"col": 4,"name": "Offset"},{"file": 30,"line": 45,"col": 4,"name": "Size"},{"file": 30,"line": 46,"col": 4,"name": "Characteristics"},{"file": 30,"line": 47,"col": 4,"name": "ModuleIndex"},{"file": 30,"line": 48,"col": 4,"name": "Padding2"},{"file": 30,"line": 49,"col": 4,"name": "DataCrc"},{"file": 30,"line": 50,"col": 4,"name": "RelocCrc"},{"file": 30,"line": 463,"col": 4,"name": "in_file"},{"file": 30,"line": 464,"col": 4,"name": "allocator"},{"file": 30,"line": 465,"col": 4,"name": "coff"},{"file": 30,"line": 466,"col": 4,"name": "string_table"},{"file": 30,"line": 467,"col": 4,"name": "dbi"},{"file": 30,"line": 469,"col": 4,"name": "msf"},{"file": 30,"line": 493,"col": 4,"name": "directory"},{"file": 30,"line": 494,"col": 4,"name": "streams"},{"file": 31,"line": 33,"col": 4,"name": "in_file"},{"file": 31,"line": 34,"col": 4,"name": "allocator"},{"file": 31,"line": 36,"col": 4,"name": "coff_header"},{"file": 31,"line": 37,"col": 4,"name": "pe_header"},{"file": 31,"line": 38,"col": 4,"name": "sections"},{"file": 31,"line": 40,"col": 4,"name": "guid"},{"file": 31,"line": 41,"col": 4,"name": "age"},{"file": 31,"line": 241,"col": 4,"name": "magic"},{"file": 31,"line": 242,"col": 4,"name": "data_directory"},{"file": 31,"line": 226,"col": 4,"name": "machine"},{"file": 31,"line": 227,"col": 4,"name": "number_of_sections"},{"file": 31,"line": 228,"col": 4,"name": "timedate_stamp"},{"file": 31,"line": 229,"col": 4,"name": "pointer_to_symbol_table"},{"file": 31,"line": 230,"col": 4,"name": "number_of_symbols"},{"file": 31,"line": 231,"col": 4,"name": "size_of_optional_header"},{"file": 31,"line": 232,"col": 4,"name": "characteristics"},{"file": 57,"line": 7,"col": 8,"name": "Unlocked"},{"file": 57,"line": 8,"col": 8,"name": "Locked"},{"file": 39,"line": 207,"col": 4,"docs": " name of this section\n","name": "sectname"},{"file": 39,"line": 210,"col": 4,"docs": " segment this section goes in\n","name": "segname"},{"file": 39,"line": 213,"col": 4,"docs": " memory address of this section\n","name": "addr"},{"file": 39,"line": 216,"col": 4,"docs": " size in bytes of this section\n","name": "size"},{"file": 39,"line": 219,"col": 4,"docs": " file offset of this section\n","name": "offset"},{"file": 39,"line": 222,"col": 4,"docs": " section alignment (power of 2)\n","name": "align"},{"file": 39,"line": 225,"col": 4,"docs": " file offset of relocation entries\n","name": "reloff"},{"file": 39,"line": 228,"col": 4,"docs": " number of relocation entries\n","name": "nreloc"},{"file": 39,"line": 231,"col": 4,"docs": " flags (section type and attributes\n","name": "flags"},{"file": 39,"line": 234,"col": 4,"docs": " reserved (for offset or index)\n","name": "reserved1"},{"file": 39,"line": 237,"col": 4,"docs": " reserved (for count or sizeof)\n","name": "reserved2"},{"file": 39,"line": 240,"col": 4,"docs": " reserved\n","name": "reserved3"},{"file": 39,"line": 11,"col": 4,"name": "magic"},{"file": 39,"line": 12,"col": 4,"name": "cputype"},{"file": 39,"line": 13,"col": 4,"name": "cpusubtype"},{"file": 39,"line": 14,"col": 4,"name": "filetype"},{"file": 39,"line": 15,"col": 4,"name": "ncmds"},{"file": 39,"line": 16,"col": 4,"name": "sizeofcmds"},{"file": 39,"line": 17,"col": 4,"name": "flags"},{"file": 39,"line": 18,"col": 4,"name": "reserved"},{"file": 49,"line": 1049,"col": 4,"name": "pad"},{"file": 49,"line": 1050,"col": 4,"name": "common"},{"file": 49,"line": 1070,"col": 4,"name": "sigfault"},{"file": 49,"line": 1081,"col": 4,"name": "sigpoll"},{"file": 49,"line": 1085,"col": 4,"name": "sigsys"},{"file": 14,"line": 497,"col": 8,"name": "have_fd"},{"file": 14,"line": 498,"col": 8,"name": "close_req_node"},{"file": 46,"line": 918,"col": 8,"name": "epollfd"},{"file": 46,"line": 919,"col": 8,"name": "final_eventfd"},{"file": 46,"line": 920,"col": 8,"name": "final_eventfd_event"},{"file": 46,"line": 921,"col": 8,"name": "fs_thread"},{"file": 46,"line": 922,"col": 8,"name": "fs_queue_item"},{"file": 46,"line": 923,"col": 8,"name": "fs_queue"},{"file": 46,"line": 924,"col": 8,"name": "fs_end_request"},{"file": 19,"line": 322,"col": 16,"name": "fn_type"},{"file": 19,"line": 323,"col": 16,"name": "inline_type"},{"file": 19,"line": 324,"col": 16,"name": "is_var_args"},{"file": 19,"line": 325,"col": 16,"name": "is_extern"},{"file": 19,"line": 326,"col": 16,"name": "is_export"},{"file": 19,"line": 327,"col": 16,"name": "lib_name"},{"file": 19,"line": 328,"col": 16,"name": "return_type"},{"file": 19,"line": 329,"col": 16,"name": "arg_names"},{"file": 26,"line": 754,"col": 8,"name": "a_val"},{"file": 31,"line": 237,"col": 8,"name": "virtual_address"},{"file": 31,"line": 238,"col": 8,"name": "size"},{"file": 55,"line": 9,"col": 4,"docs": " Do not follow pointers, only hash their value.\n","name": "Shallow"},{"file": 55,"line": 14,"col": 4,"docs": " Follow pointers, hash the pointee content.\n Only dereferences one level, ie. it is changed into .Shallow when a\n pointer type is encountered.\n","name": "Deep"},{"file": 55,"line": 19,"col": 4,"docs": " Follow pointers, hash the pointee content.\n Dereferences all pointers encountered.\n Assumes no cycle.\n","name": "DeepRecursive"},{"file": 49,"line": 1051,"col": 8,"name": "first"},{"file": 49,"line": 1061,"col": 8,"name": "second"},{"file": 49,"line": 1071,"col": 8,"name": "addr"},{"file": 49,"line": 1072,"col": 8,"name": "addr_lsb"},{"file": 49,"line": 1073,"col": 8,"name": "first"},{"file": 49,"line": 1082,"col": 8,"name": "band"},{"file": 49,"line": 1083,"col": 8,"name": "fd"},{"file": 49,"line": 1086,"col": 8,"name": "call_addr"},{"file": 49,"line": 1087,"col": 8,"name": "syscall"},{"file": 49,"line": 1088,"col": 8,"name": "arch"},{"file": 19,"line": 334,"col": 20,"name": "Auto"},{"file": 19,"line": 335,"col": 20,"name": "Always"},{"file": 19,"line": 336,"col": 20,"name": "Never"},{"file": 59,"line": 44,"col": 4,"name": "VariantI"},{"file": 59,"line": 45,"col": 4,"name": "VariantII"},{"file": 59,"line": 100,"col": 4,"name": "entries"},{"file": 59,"line": 101,"col": 4,"name": "tls_block"},{"file": 59,"line": 106,"col": 4,"name": "data_src"},{"file": 59,"line": 107,"col": 4,"name": "alloc_size"},{"file": 59,"line": 108,"col": 4,"name": "tcb_offset"},{"file": 59,"line": 109,"col": 4,"name": "dtv_offset"},{"file": 59,"line": 110,"col": 4,"name": "data_offset"},{"file": 59,"line": 112,"col": 4,"name": "gdt_entry_number"},{"file": 42,"line": 549,"col": 8,"name": "significand"},{"file": 42,"line": 550,"col": 8,"name": "exponent"},{"file": 42,"line": 551,"col": 8,"name": "padding"},{"file": 42,"line": 554,"col": 8,"name": "element"},{"file": 49,"line": 1052,"col": 12,"name": "piduid"},{"file": 49,"line": 1056,"col": 12,"name": "timer"},{"file": 49,"line": 1062,"col": 12,"name": "value"},{"file": 49,"line": 1063,"col": 12,"name": "sigchld"},{"file": 49,"line": 1074,"col": 12,"name": "addr_bnd"},{"file": 49,"line": 1078,"col": 12,"name": "pkey"},{"file": 49,"line": 1053,"col": 16,"name": "pid"},{"file": 49,"line": 1054,"col": 16,"name": "uid"},{"file": 49,"line": 1057,"col": 16,"name": "timerid"},{"file": 49,"line": 1058,"col": 16,"name": "overrun"},{"file": 49,"line": 1064,"col": 16,"name": "status"},{"file": 49,"line": 1065,"col": 16,"name": "utime"},{"file": 49,"line": 1066,"col": 16,"name": "stime"},{"file": 49,"line": 1075,"col": 16,"name": "lower"},{"file": 49,"line": 1076,"col": 16,"name": "upper"},{"file": 8,"line": 86,"col": 19,"name": "self"},{"file": 8,"line": 86,"col": 32,"name": "i"},{"file": 8,"line": 86,"col": 42,"name": "item"},{"file": 8,"line": 80,"col": 26,"name": "self"},{"file": 8,"line": 80,"col": 38,"name": "i"},{"file": 8,"line": 80,"col": 48,"name": "item"},{"file": 8,"line": 74,"col": 21,"name": "self"},{"file": 8,"line": 74,"col": 33,"name": "i"},{"file": 8,"line": 45,"col": 28,"name": "allocator"},{"file": 8,"line": 45,"col": 51,"name": "num"},{"file": 8,"line": 145,"col": 36,"name": "self"},{"file": 8,"line": 145,"col": 49,"name": "item"},{"file": 8,"line": 177,"col": 33,"name": "self"},{"file": 8,"line": 177,"col": 46,"name": "i"},{"file": 8,"line": 69,"col": 18,"name": "self"},{"file": 8,"line": 69,"col": 30,"name": "i"},{"file": 8,"line": 165,"col": 26,"name": "self"},{"file": 8,"line": 165,"col": 39,"name": "i"},{"file": 8,"line": 232,"col": 19,"name": "self"},{"file": 8,"line": 184,"col": 27,"name": "self"},{"file": 8,"line": 184,"col": 40,"name": "items"},{"file": 8,"line": 128,"col": 27,"name": "self"},{"file": 8,"line": 128,"col": 40,"name": "n"},{"file": 8,"line": 128,"col": 50,"name": "items"},{"file": 8,"line": 100,"col": 30,"name": "allocator"},{"file": 8,"line": 100,"col": 53,"name": "slice"},{"file": 8,"line": 118,"col": 22,"name": "self"},{"file": 8,"line": 118,"col": 35,"name": "n"},{"file": 8,"line": 118,"col": 45,"name": "item"},{"file": 8,"line": 52,"col": 22,"name": "self"},{"file": 8,"line": 198,"col": 22,"name": "self"},{"file": 8,"line": 198,"col": 35,"name": "new_len"},{"file": 8,"line": 109,"col": 28,"name": "self"},{"file": 8,"line": 152,"col": 29,"name": "self"},{"file": 8,"line": 152,"col": 42,"name": "i"},{"file": 8,"line": 238,"col": 25,"name": "self"},{"file": 10,"line": 105,"col": 20,"name": "self"},{"file": 10,"line": 113,"col": 28,"name": "self"},{"file": 10,"line": 113,"col": 41,"name": "Error","comptime": true},{"file": 10,"line": 113,"col": 63,"name": "stream"},{"file": 10,"line": 26,"col": 19,"name": "self"},{"file": 10,"line": 26,"col": 32,"name": "node"},{"file": 10,"line": 59,"col": 21,"name": "self"},{"file": 10,"line": 59,"col": 34,"name": "node"},{"file": 10,"line": 42,"col": 19,"name": "self"},{"file": 10,"line": 76,"col": 22,"name": "self"},{"file": 10,"line": 76,"col": 35,"name": "node"},{"file": 10,"line": 99,"col": 23,"name": "self"},{"file": 11,"line": 525,"col": 22,"name": "self"},{"file": 11,"line": 663,"col": 30,"name": "self"},{"file": 11,"line": 322,"col": 21,"name": "self"},{"file": 11,"line": 322,"col": 35,"name": "allocator"},{"file": 11,"line": 581,"col": 18,"name": "self"},{"file": 11,"line": 599,"col": 18,"name": "self"},{"file": 11,"line": 511,"col": 23,"name": "self"},{"file": 11,"line": 371,"col": 30,"name": "self"},{"file": 11,"line": 371,"col": 44,"name": "allocator"},{"file": 11,"line": 588,"col": 19,"name": "self"},{"file": 11,"line": 457,"col": 24,"name": "text"},{"file": 11,"line": 537,"col": 27,"name": "self"},{"file": 11,"line": 613,"col": 21,"name": "self"},{"file": 11,"line": 518,"col": 20,"name": "self"},{"file": 11,"line": 641,"col": 21,"name": "self"},{"file": 11,"line": 592,"col": 17,"name": "self"},{"file": 11,"line": 365,"col": 28,"name": "self"},{"file": 11,"line": 365,"col": 42,"name": "allocator"},{"file": 11,"line": 332,"col": 24,"name": "allocator"},{"file": 11,"line": 332,"col": 51,"name": "target"},{"file": 11,"line": 332,"col": 67,"name": "linkage"},{"file": 11,"line": 547,"col": 28,"name": "self"},{"file": 11,"line": 723,"col": 32,"name": "self"},{"file": 11,"line": 659,"col": 26,"name": "self"},{"file": 11,"line": 379,"col": 23,"name": "self"},{"file": 11,"line": 379,"col": 37,"name": "allocator"},{"file": 11,"line": 655,"col": 33,"name": "self"},{"file": 11,"line": 478,"col": 19,"name": "text"},{"file": 11,"line": 557,"col": 21,"name": "self"},{"file": 11,"line": 648,"col": 20,"name": "self"},{"file": 11,"line": 387,"col": 17,"name": "text"},{"file": 11,"line": 620,"col": 19,"name": "self"},{"file": 11,"line": 735,"col": 31,"name": "self"},{"file": 11,"line": 488,"col": 20,"name": "text"},{"file": 11,"line": 627,"col": 18,"name": "self"},{"file": 11,"line": 402,"col": 22,"name": "arch"},{"file": 11,"line": 402,"col": 34,"name": "target_os"},{"file": 11,"line": 498,"col": 23,"name": "arch"},{"file": 12,"line": 284,"col": 21,"name": "self"},{"file": 12,"line": 170,"col": 30,"name": "self"},{"file": 12,"line": 170,"col": 43,"name": "expected_count"},{"file": 12,"line": 132,"col": 24,"name": "self"},{"file": 12,"line": 132,"col": 37,"name": "key"},{"file": 12,"line": 208,"col": 28,"name": "self"},{"file": 12,"line": 208,"col": 41,"name": "key"},{"file": 12,"line": 208,"col": 49,"name": "value"},{"file": 12,"line": 275,"col": 24,"name": "hm"},{"file": 12,"line": 221,"col": 19,"name": "hm"},{"file": 12,"line": 221,"col": 36,"name": "key"},{"file": 12,"line": 113,"col": 21,"name": "hm"},{"file": 12,"line": 212,"col": 33,"name": "self"},{"file": 12,"line": 212,"col": 46,"name": "key"},{"file": 12,"line": 212,"col": 54,"name": "value"},{"file": 12,"line": 109,"col": 22,"name": "hm"},{"file": 12,"line": 151,"col": 29,"name": "self"},{"file": 12,"line": 151,"col": 42,"name": "key"},{"file": 12,"line": 151,"col": 50,"name": "value"},{"file": 12,"line": 228,"col": 24,"name": "hm"},{"file": 12,"line": 228,"col": 41,"name": "key"},{"file": 12,"line": 202,"col": 19,"name": "self"},{"file": 12,"line": 202,"col": 32,"name": "key"},{"file": 12,"line": 202,"col": 40,"name": "value"},{"file": 12,"line": 99,"col": 20,"name": "allocator"},{"file": 12,"line": 122,"col": 21,"name": "self"},{"file": 12,"line": 232,"col": 24,"name": "hm"},{"file": 12,"line": 232,"col": 41,"name": "key"},{"file": 12,"line": 237,"col": 22,"name": "hm"},{"file": 12,"line": 237,"col": 33,"name": "key"},{"file": 12,"line": 271,"col": 35,"name": "hm"},{"file": 12,"line": 271,"col": 46,"name": "key"},{"file": 12,"line": 159,"col": 29,"name": "expected_count"},{"file": 12,"line": 304,"col": 24,"name": "hm"},{"file": 12,"line": 304,"col": 35,"name": "capacity"},{"file": 12,"line": 408,"col": 22,"name": "hm"},{"file": 12,"line": 408,"col": 32,"name": "key"},{"file": 12,"line": 294,"col": 24,"name": "self"},{"file": 12,"line": 313,"col": 38,"name": "hm"},{"file": 12,"line": 412,"col": 26,"name": "hm"},{"file": 12,"line": 412,"col": 36,"name": "i"},{"file": 12,"line": 326,"col": 23,"name": "self"},{"file": 12,"line": 326,"col": 36,"name": "orig_key"},{"file": 12,"line": 178,"col": 31,"name": "self"},{"file": 12,"line": 178,"col": 44,"name": "new_capacity"},{"file": 12,"line": 393,"col": 23,"name": "hm"},{"file": 12,"line": 393,"col": 33,"name": "key"},{"file": 13,"line": 295,"col": 22,"name": "list"},{"file": 13,"line": 295,"col": 35,"name": "new_node"},{"file": 13,"line": 397,"col": 26,"name": "list"},{"file": 13,"line": 397,"col": 39,"name": "data"},{"file": 13,"line": 397,"col": 48,"name": "allocator"},{"file": 13,"line": 385,"col": 27,"name": "list"},{"file": 13,"line": 385,"col": 40,"name": "node"},{"file": 13,"line": 385,"col": 53,"name": "allocator"},{"file": 13,"line": 309,"col": 23,"name": "list"},{"file": 13,"line": 309,"col": 36,"name": "new_node"},{"file": 13,"line": 353,"col": 19,"name": "list"},{"file": 13,"line": 232,"col": 27,"name": "list"},{"file": 13,"line": 232,"col": 40,"name": "node"},{"file": 13,"line": 232,"col": 53,"name": "new_node"},{"file": 13,"line": 253,"col": 28,"name": "list"},{"file": 13,"line": 253,"col": 41,"name": "node"},{"file": 13,"line": 253,"col": 54,"name": "new_node"},{"file": 13,"line": 274,"col": 30,"name": "list1"},{"file": 13,"line": 274,"col": 44,"name": "list2"},{"file": 13,"line": 328,"col": 22,"name": "list"},{"file": 13,"line": 328,"col": 35,"name": "node"},{"file": 13,"line": 363,"col": 24,"name": "list"},{"file": 13,"line": 376,"col": 28,"name": "list"},{"file": 13,"line": 376,"col": 41,"name": "allocator"},{"file": 15,"line": 233,"col": 26,"name": "self"},{"file": 15,"line": 233,"col": 39,"name": "T","comptime": true},{"file": 15,"line": 226,"col": 25,"name": "self"},{"file": 15,"line": 226,"col": 38,"name": "num_bytes"},{"file": 15,"line": 90,"col": 28,"name": "self"},{"file": 15,"line": 90,"col": 41,"name": "allocator"},{"file": 15,"line": 90,"col": 68,"name": "max_size"},{"file": 15,"line": 102,"col": 40,"name": "self"},{"file": 15,"line": 102,"col": 53,"name": "buffer"},{"file": 15,"line": 102,"col": 70,"name": "delimiter"},{"file": 15,"line": 102,"col": 85,"name": "max_size"},{"file": 15,"line": 194,"col": 30,"name": "self"},{"file": 15,"line": 194,"col": 43,"name": "T","comptime": true},{"file": 15,"line": 187,"col": 29,"name": "self"},{"file": 15,"line": 187,"col": 42,"name": "T","comptime": true},{"file": 15,"line": 163,"col": 39,"name": "self"},{"file": 15,"line": 163,"col": 52,"name": "delimiter"},{"file": 15,"line": 138,"col": 39,"name": "self"},{"file": 15,"line": 138,"col": 52,"name": "buf"},{"file": 15,"line": 138,"col": 63,"name": "delimiter"},{"file": 15,"line": 124,"col": 39,"name": "self"},{"file": 15,"line": 124,"col": 52,"name": "allocator"},{"file": 15,"line": 124,"col": 79,"name": "delimiter"},{"file": 15,"line": 124,"col": 94,"name": "max_size"},{"file": 15,"line": 66,"col": 29,"name": "self"},{"file": 15,"line": 66,"col": 42,"name": "buffer"},{"file": 15,"line": 66,"col": 59,"name": "max_size"},{"file": 4,"line": 45,"col": 22,"name": "self"},{"file": 4,"line": 50,"col": 19,"name": "self"},{"file": 4,"line": 50,"col": 31,"name": "x"},{"file": 4,"line": 50,"col": 41,"name": "y"},{"file": 16,"line": 68,"col": 30,"name": "self"},{"file": 16,"line": 68,"col": 43,"name": "T","comptime": true},{"file": 16,"line": 68,"col": 61,"name": "value"},{"file": 16,"line": 80,"col": 24,"name": "self"},{"file": 16,"line": 80,"col": 37,"name": "T","comptime": true},{"file": 16,"line": 80,"col": 55,"name": "value"},{"file": 16,"line": 80,"col": 65,"name": "endian"},{"file": 16,"line": 55,"col": 30,"name": "self"},{"file": 16,"line": 55,"col": 43,"name": "T","comptime": true},{"file": 16,"line": 55,"col": 61,"name": "value"},{"file": 16,"line": 62,"col": 31,"name": "self"},{"file": 16,"line": 62,"col": 44,"name": "T","comptime": true},{"file": 16,"line": 62,"col": 62,"name": "value"},{"file": 16,"line": 46,"col": 31,"name": "self"},{"file": 16,"line": 46,"col": 44,"name": "byte"},{"file": 16,"line": 46,"col": 54,"name": "n"},{"file": 16,"line": 74,"col": 27,"name": "self"},{"file": 16,"line": 74,"col": 40,"name": "T","comptime": true},{"file": 16,"line": 74,"col": 58,"name": "value"},{"file": 7,"line": 107,"col": 23,"name": "self"},{"file": 7,"line": 107,"col": 35,"name": "components","comptime": true},{"file": 7,"line": 219,"col": 18,"name": "value"},{"file": 7,"line": 219,"col": 31,"name": "fmt","comptime": true},{"file": 7,"line": 219,"col": 57,"name": "options"},{"file": 7,"line": 219,"col": 89,"name": "context"},{"file": 7,"line": 219,"col": 103,"name": "Errors","comptime": true},{"file": 7,"line": 219,"col": 126,"name": "output"},{"file": 13,"line": 136,"col": 26,"name": "list"},{"file": 13,"line": 136,"col": 39,"name": "data"},{"file": 13,"line": 136,"col": 48,"name": "allocator"},{"file": 13,"line": 124,"col": 27,"name": "list"},{"file": 13,"line": 124,"col": 40,"name": "node"},{"file": 13,"line": 124,"col": 53,"name": "allocator"},{"file": 13,"line": 69,"col": 27,"name": "list"},{"file": 13,"line": 69,"col": 40,"name": "node"},{"file": 13,"line": 69,"col": 53,"name": "new_node"},{"file": 13,"line": 86,"col": 22,"name": "list"},{"file": 13,"line": 86,"col": 35,"name": "node"},{"file": 13,"line": 115,"col": 28,"name": "list"},{"file": 13,"line": 115,"col": 41,"name": "allocator"},{"file": 13,"line": 102,"col": 24,"name": "list"},{"file": 17,"line": 49,"col": 19,"name": "self"},{"file": 17,"line": 31,"col": 25,"name": "self"},{"file": 17,"line": 31,"col": 38,"name": "node"},{"file": 17,"line": 36,"col": 20,"name": "self"},{"file": 17,"line": 36,"col": 33,"name": "node"},{"file": 17,"line": 64,"col": 23,"name": "self"},{"file": 7,"line": 173,"col": 18,"name": "value"},{"file": 7,"line": 173,"col": 31,"name": "fmt","comptime": true},{"file": 7,"line": 173,"col": 57,"name": "options"},{"file": 7,"line": 173,"col": 89,"name": "context"},{"file": 7,"line": 173,"col": 103,"name": "Errors","comptime": true},{"file": 7,"line": 173,"col": 126,"name": "output"},{"file": 7,"line": 325,"col": 18,"name": "value"},{"file": 7,"line": 325,"col": 31,"name": "fmt","comptime": true},{"file": 7,"line": 325,"col": 57,"name": "options"},{"file": 7,"line": 325,"col": 89,"name": "context"},{"file": 7,"line": 325,"col": 103,"name": "Errors","comptime": true},{"file": 7,"line": 325,"col": 126,"name": "output"},{"file": 5,"line": 2,"col": 17,"name": "deg"},{"file": 5,"line": 6,"col": 17,"name": "rad"},{"file": 7,"line": 6,"col": 25,"name": "i","comptime": true},{"file": 7,"line": 404,"col": 18,"name": "value"},{"file": 7,"line": 404,"col": 31,"name": "fmt","comptime": true},{"file": 7,"line": 404,"col": 57,"name": "options"},{"file": 7,"line": 404,"col": 89,"name": "context"},{"file": 7,"line": 404,"col": 103,"name": "Errors","comptime": true},{"file": 7,"line": 404,"col": 126,"name": "output"},{"file": 34,"line": 859,"col": 20,"name": "self"},{"file": 34,"line": 859,"col": 31,"name": "sub_path_c"},{"file": 34,"line": 748,"col": 23,"name": "self"},{"file": 34,"line": 748,"col": 34,"name": "sub_path_c"},{"file": 34,"line": 748,"col": 61,"name": "flags"},{"file": 34,"line": 1077,"col": 20,"name": "self"},{"file": 34,"line": 1077,"col": 31,"name": "sub_path"},{"file": 34,"line": 1077,"col": 53,"name": "buffer"},{"file": 34,"line": 1067,"col": 22,"name": "self"},{"file": 34,"line": 1067,"col": 33,"name": "sub_path_w"},{"file": 34,"line": 788,"col": 21,"name": "self"},{"file": 34,"line": 788,"col": 32,"name": "sub_path"},{"file": 34,"line": 737,"col": 22,"name": "self"},{"file": 34,"line": 737,"col": 33,"name": "sub_path"},{"file": 34,"line": 737,"col": 55,"name": "flags"},{"file": 34,"line": 783,"col": 21,"name": "self"},{"file": 34,"line": 783,"col": 32,"name": "sub_path"},{"file": 34,"line": 689,"col": 17,"name": "self"},{"file": 34,"line": 933,"col": 28,"name": "self"},{"file": 34,"line": 933,"col": 39,"name": "sub_path_w"},{"file": 34,"line": 764,"col": 23,"name": "self"},{"file": 34,"line": 764,"col": 34,"name": "sub_path_w"},{"file": 34,"line": 764,"col": 62,"name": "flags"},{"file": 34,"line": 726,"col": 21,"name": "self"},{"file": 34,"line": 726,"col": 32,"name": "sub_path_w"},{"file": 34,"line": 726,"col": 60,"name": "flags"},{"file": 34,"line": 1047,"col": 21,"name": "self"},{"file": 34,"line": 1047,"col": 32,"name": "sub_path"},{"file": 34,"line": 637,"col": 19,"name": "self"},{"file": 34,"line": 941,"col": 24,"name": "self"},{"file": 34,"line": 941,"col": 35,"name": "sub_path_w"},{"file": 34,"line": 911,"col": 24,"name": "self"},{"file": 34,"line": 911,"col": 35,"name": "sub_path_c"},{"file": 34,"line": 685,"col": 17,"name": "dir_path_c"},{"file": 34,"line": 900,"col": 28,"name": "self"},{"file": 34,"line": 900,"col": 39,"name": "sub_path_c"},{"file": 34,"line": 888,"col": 23,"name": "self"},{"file": 34,"line": 888,"col": 34,"name": "sub_path"},{"file": 34,"line": 1146,"col": 22,"name": "self"},{"file": 34,"line": 1146,"col": 33,"name": "sub_path"},{"file": 34,"line": 680,"col": 16,"name": "dir_path"},{"file": 34,"line": 793,"col": 8,"name": "self"},{"file": 34,"line": 794,"col": 8,"name": "sub_path_w"},{"file": 34,"line": 795,"col": 8,"name": "access_mask"},{"file": 34,"line": 796,"col": 8,"name": "creation"},{"file": 34,"line": 854,"col": 19,"name": "self"},{"file": 34,"line": 854,"col": 30,"name": "sub_path"},{"file": 34,"line": 1021,"col": 23,"name": "self"},{"file": 34,"line": 1021,"col": 34,"name": "sub_path_w"},{"file": 34,"line": 870,"col": 27,"name": "self"},{"file": 34,"line": 870,"col": 38,"name": "sub_path"},{"file": 34,"line": 1090,"col": 25,"name": "self"},{"file": 34,"line": 1090,"col": 36,"name": "allocator"},{"file": 34,"line": 1090,"col": 63,"name": "file_path"},{"file": 34,"line": 1090,"col": 86,"name": "max_bytes"},{"file": 34,"line": 1292,"col": 21,"name": "self"},{"file": 34,"line": 1292,"col": 32,"name": "sub_path"},{"file": 34,"line": 1292,"col": 54,"name": "data"},{"file": 34,"line": 1005,"col": 22,"name": "self"},{"file": 34,"line": 1005,"col": 33,"name": "sub_path"},{"file": 34,"line": 1058,"col": 22,"name": "self"},{"file": 34,"line": 1058,"col": 33,"name": "sub_path_c"},{"file": 34,"line": 1097,"col": 8,"name": "self"},{"file": 34,"line": 1098,"col": 8,"name": "allocator"},{"file": 34,"line": 1099,"col": 8,"name": "file_path"},{"file": 34,"line": 1100,"col": 8,"name": "max_bytes"},{"file": 34,"line": 1101,"col": 8,"name": "A","comptime": true},{"file": 34,"line": 1013,"col": 23,"name": "self"},{"file": 34,"line": 1013,"col": 34,"name": "sub_path_c"},{"file": 34,"line": 1084,"col": 21,"name": "self"},{"file": 34,"line": 1084,"col": 32,"name": "sub_path_c"},{"file": 34,"line": 1084,"col": 59,"name": "buffer"},{"file": 34,"line": 920,"col": 21,"name": "self"},{"file": 34,"line": 920,"col": 32,"name": "sub_path_c"},{"file": 34,"line": 920,"col": 59,"name": "flags"},{"file": 34,"line": 947,"col": 26,"name": "self"},{"file": 34,"line": 947,"col": 37,"name": "sub_path_w"},{"file": 34,"line": 947,"col": 65,"name": "access_mask"},{"file": 40,"line": 320,"col": 26,"name": "file"},{"file": 40,"line": 198,"col": 16,"name": "self"},{"file": 40,"line": 62,"col": 21,"name": "path_w"},{"file": 40,"line": 57,"col": 21,"name": "path_c"},{"file": 40,"line": 87,"col": 30,"name": "path"},{"file": 40,"line": 87,"col": 48,"name": "file_mode"},{"file": 40,"line": 67,"col": 21,"name": "path"},{"file": 40,"line": 169,"col": 18,"name": "self"},{"file": 40,"line": 169,"col": 30,"name": "offset"},{"file": 40,"line": 185,"col": 18,"name": "self"},{"file": 40,"line": 298,"col": 24,"name": "self"},{"file": 40,"line": 298,"col": 36,"name": "iovecs"},{"file": 40,"line": 82,"col": 26,"name": "path_w"},{"file": 40,"line": 82,"col": 50,"name": "file_mode"},{"file": 40,"line": 77,"col": 26,"name": "path_c"},{"file": 40,"line": 77,"col": 49,"name": "file_mode"},{"file": 40,"line": 72,"col": 25,"name": "path"},{"file": 40,"line": 72,"col": 43,"name": "file_mode"},{"file": 40,"line": 103,"col": 31,"name": "path_w"},{"file": 40,"line": 103,"col": 55,"name": "file_mode"},{"file": 40,"line": 120,"col": 18,"name": "path"},{"file": 40,"line": 262,"col": 8,"name": "self"},{"file": 40,"line": 264,"col": 8,"docs": " access timestamp in nanoseconds\n","name": "atime"},{"file": 40,"line": 266,"col": 8,"docs": " last modification timestamp in nanoseconds\n","name": "mtime"},{"file": 40,"line": 132,"col": 19,"name": "path"},{"file": 40,"line": 126,"col": 19,"name": "path"},{"file": 40,"line": 95,"col": 31,"name": "path_c"},{"file": 40,"line": 95,"col": 54,"name": "file_mode"},{"file": 41,"line": 185,"col": 22,"name": "self"},{"file": 35,"line": 535,"col": 18,"name": "self"},{"file": 11,"line": 203,"col": 22,"name": "arch"},{"file": 11,"line": 148,"col": 28,"name": "arch"},{"file": 35,"line": 658,"col": 17,"name": "self"},{"file": 43,"line": 43,"col": 17,"name": "self"},{"file": 43,"line": 55,"col": 21,"name": "self"},{"file": 43,"line": 55,"col": 40,"name": "timeout_ns"},{"file": 43,"line": 32,"col": 17,"name": "self"},{"file": 43,"line": 199,"col": 13,"name": "self"},{"file": 43,"line": 195,"col": 13,"name": "self"},{"file": 45,"line": 170,"col": 16,"name": "seed"},{"file": 45,"line": 170,"col": 27,"name": "input"},{"file": 45,"line": 119,"col": 16,"name": "seed"},{"file": 45,"line": 119,"col": 27,"name": "input"},{"file": 10,"line": 221,"col": 13,"name": "ctx"},{"file": 10,"line": 239,"col": 13,"name": "ctx"},{"file": 13,"line": 202,"col": 24,"name": "data"},{"file": 12,"line": 551,"col": 20,"name": "K","comptime": true},{"file": 12,"line": 28,"col": 18,"name": "s"},{"file": 12,"line": 559,"col": 26,"name": "K","comptime": true},{"file": 12,"line": 559,"col": 44,"name": "strategy","comptime": true},{"file": 12,"line": 15,"col": 19,"name": "K","comptime": true},{"file": 12,"line": 15,"col": 37,"name": "V","comptime": true},{"file": 12,"line": 24,"col": 17,"name": "a"},{"file": 12,"line": 24,"col": 32,"name": "b"},{"file": 12,"line": 20,"col": 21,"name": "V","comptime": true},{"file": 14,"line": 270,"col": 21,"name": "fd"},{"file": 14,"line": 270,"col": 31,"name": "data"},{"file": 14,"line": 270,"col": 51,"name": "offset"},{"file": 14,"line": 454,"col": 21,"name": "path"},{"file": 14,"line": 454,"col": 39,"name": "mode"},{"file": 14,"line": 617,"col": 21,"name": "allocator"},{"file": 14,"line": 617,"col": 44,"name": "path"},{"file": 14,"line": 617,"col": 62,"name": "contents"},{"file": 14,"line": 617,"col": 84,"name": "mode"},{"file": 14,"line": 134,"col": 21,"name": "fd"},{"file": 14,"line": 134,"col": 31,"name": "data"},{"file": 14,"line": 134,"col": 49,"name": "offset"},{"file": 14,"line": 239,"col": 14,"name": "allocator"},{"file": 14,"line": 239,"col": 37,"name": "fd"},{"file": 14,"line": 239,"col": 47,"name": "data"},{"file": 14,"line": 239,"col": 67,"name": "offset"},{"file": 14,"line": 294,"col": 20,"name": "fd"},{"file": 14,"line": 294,"col": 30,"name": "data"},{"file": 14,"line": 294,"col": 42,"name": "offset"},{"file": 14,"line": 92,"col": 15,"name": "allocator"},{"file": 14,"line": 92,"col": 38,"name": "fd"},{"file": 14,"line": 92,"col": 48,"name": "data"},{"file": 14,"line": 92,"col": 74,"name": "offset"},{"file": 14,"line": 174,"col": 20,"name": "fd"},{"file": 14,"line": 174,"col": 30,"name": "iovecs"},{"file": 14,"line": 174,"col": 62,"name": "offset"},{"file": 14,"line": 423,"col": 17,"name": "path"},{"file": 14,"line": 730,"col": 13,"name": "V","comptime": true},{"file": 14,"line": 365,"col": 17,"name": "path"},{"file": 14,"line": 365,"col": 35,"name": "flags"},{"file": 14,"line": 365,"col": 47,"name": "mode"},{"file": 14,"line": 333,"col": 19,"name": "fd"},{"file": 14,"line": 333,"col": 29,"name": "iovecs"},{"file": 14,"line": 333,"col": 55,"name": "offset"},{"file": 14,"line": 122,"col": 22,"name": "fd"},{"file": 14,"line": 122,"col": 32,"name": "data"},{"file": 14,"line": 122,"col": 58,"name": "offset"},{"file": 14,"line": 207,"col": 19,"name": "fd"},{"file": 14,"line": 207,"col": 29,"name": "iovecs"},{"file": 14,"line": 428,"col": 21,"name": "path"},{"file": 14,"line": 428,"col": 39,"name": "mode"},{"file": 14,"line": 683,"col": 16,"name": "allocator"},{"file": 14,"line": 683,"col": 39,"name": "file_path"},{"file": 14,"line": 683,"col": 62,"name": "max_size"},{"file": 14,"line": 399,"col": 16,"name": "path"},{"file": 14,"line": 612,"col": 17,"name": "allocator"},{"file": 14,"line": 612,"col": 40,"name": "path"},{"file": 14,"line": 612,"col": 58,"name": "contents"},{"file": 14,"line": 719,"col": 14,"name": "s"},{"file": 14,"line": 1319,"col": 15,"name": "allocator"},{"file": 14,"line": 630,"col": 20,"name": "path"},{"file": 14,"line": 630,"col": 38,"name": "contents"},{"file": 14,"line": 713,"col": 13,"name": "a"},{"file": 14,"line": 713,"col": 29,"name": "b"},{"file": 14,"line": 645,"col": 23,"name": "allocator"},{"file": 14,"line": 645,"col": 46,"name": "path"},{"file": 14,"line": 645,"col": 64,"name": "contents"},{"file": 14,"line": 645,"col": 86,"name": "mode"},{"file": 13,"line": 45,"col": 30,"name": "node"},{"file": 13,"line": 34,"col": 31,"name": "node"},{"file": 13,"line": 34,"col": 44,"name": "new_node"},{"file": 13,"line": 23,"col": 24,"name": "data"},{"file": 17,"line": 148,"col": 13,"name": "ctx"},{"file": 17,"line": 165,"col": 13,"name": "ctx"},{"file": 4,"line": 73,"col": 18,"name": "self"},{"file": 4,"line": 91,"col": 21,"name": "self"},{"file": 4,"line": 82,"col": 20,"name": "self"},{"file": 6,"line": 9,"col": 15,"name": "r"},{"file": 6,"line": 9,"col": 23,"name": "g"},{"file": 6,"line": 9,"col": 31,"name": "b"},{"file": 6,"line": 17,"col": 17,"name": "spec","comptime": true},{"file": 20,"line": 374,"col": 15,"name": "T","comptime": true},{"file": 20,"line": 374,"col": 33,"name": "ptr"},{"file": 20,"line": 1468,"col": 19,"name": "ptr"},{"file": 20,"line": 1468,"col": 29,"name": "start","comptime": true},{"file": 20,"line": 1468,"col": 52,"name": "length","comptime": true},{"file": 20,"line": 1234,"col": 15,"name": "T","comptime": true},{"file": 20,"line": 1234,"col": 33,"name": "items"},{"file": 20,"line": 712,"col": 24,"name": "T","comptime": true},{"file": 20,"line": 712,"col": 42,"name": "buffer"},{"file": 20,"line": 712,"col": 56,"name": "value"},{"file": 20,"line": 1371,"col": 15,"name": "value"},{"file": 20,"line": 1251,"col": 14,"name": "T","comptime": true},{"file": 20,"line": 1251,"col": 32,"name": "items"},{"file": 20,"line": 1251,"col": 44,"name": "amount"},{"file": 20,"line": 1448,"col": 20,"name": "T","comptime": true},{"file": 20,"line": 1448,"col": 38,"name": "bytes"},{"file": 20,"line": 664,"col": 23,"name": "T","comptime": true},{"file": 20,"line": 664,"col": 41,"name": "buf"},{"file": 20,"line": 664,"col": 78,"name": "value"},{"file": 20,"line": 857,"col": 16,"name": "buffer"},{"file": 20,"line": 857,"col": 36,"name": "delimiter"},{"file": 20,"line": 1215,"col": 11,"name": "T","comptime": true},{"file": 20,"line": 1215,"col": 29,"name": "slice"},{"file": 20,"line": 898,"col": 18,"name": "T","comptime": true},{"file": 20,"line": 898,"col": 36,"name": "haystack"},{"file": 20,"line": 898,"col": 57,"name": "needle"},{"file": 20,"line": 438,"col": 24,"name": "T","comptime": true},{"file": 20,"line": 438,"col": 42,"name": "slice"},{"file": 20,"line": 438,"col": 60,"name": "start_index"},{"file": 20,"line": 438,"col": 80,"name": "value"},{"file": 20,"line": 471,"col": 15,"name": "T","comptime": true},{"file": 20,"line": 471,"col": 33,"name": "haystack"},{"file": 20,"line": 471,"col": 54,"name": "needle"},{"file": 20,"line": 681,"col": 16,"name": "T","comptime": true},{"file": 20,"line": 681,"col": 34,"name": "buffer"},{"file": 20,"line": 681,"col": 74,"name": "value"},{"file": 20,"line": 681,"col": 84,"name": "endian"},{"file": 20,"line": 1227,"col": 12,"name": "T","comptime": true},{"file": 20,"line": 1227,"col": 30,"name": "a"},{"file": 20,"line": 1227,"col": 37,"name": "b"},{"file": 20,"line": 429,"col": 25,"name": "T","comptime": true},{"file": 20,"line": 429,"col": 43,"name": "slice"},{"file": 20,"line": 429,"col": 61,"name": "value"},{"file": 20,"line": 695,"col": 27,"name": "T","comptime": true},{"file": 20,"line": 695,"col": 45,"name": "buffer"},{"file": 20,"line": 695,"col": 59,"name": "value"},{"file": 20,"line": 1203,"col": 11,"name": "T","comptime": true},{"file": 20,"line": 1203,"col": 29,"name": "slice"},{"file": 20,"line": 461,"col": 21,"name": "T","comptime": true},{"file": 20,"line": 461,"col": 39,"name": "slice"},{"file": 20,"line": 461,"col": 57,"name": "start_index"},{"file": 20,"line": 461,"col": 77,"name": "values"},{"file": 20,"line": 394,"col": 16,"name": "T","comptime": true},{"file": 20,"line": 394,"col": 34,"name": "slice"},{"file": 20,"line": 394,"col": 52,"name": "values_to_strip"},{"file": 20,"line": 1522,"col": 17,"name": "addr"},{"file": 20,"line": 1522,"col": 30,"name": "alignment"},{"file": 20,"line": 742,"col": 21,"name": "T","comptime": true},{"file": 20,"line": 742,"col": 39,"name": "buffer"},{"file": 20,"line": 742,"col": 53,"name": "value"},{"file": 20,"line": 742,"col": 63,"name": "endian"},{"file": 20,"line": 983,"col": 12,"name": "allocator"},{"file": 20,"line": 983,"col": 35,"name": "separator"},{"file": 20,"line": 983,"col": 58,"name": "slices"},{"file": 20,"line": 1018,"col": 14,"name": "allocator"},{"file": 20,"line": 1018,"col": 37,"name": "T","comptime": true},{"file": 20,"line": 1018,"col": 55,"name": "slices"},{"file": 20,"line": 1405,"col": 20,"name": "T","comptime": true},{"file": 20,"line": 1405,"col": 38,"name": "bytes"},{"file": 20,"line": 1281,"col": 16,"name": "T","comptime": true},{"file": 20,"line": 1281,"col": 34,"name": "x"},{"file": 20,"line": 1281,"col": 40,"name": "endianness_of_x"},{"file": 20,"line": 489,"col": 18,"name": "T","comptime": true},{"file": 20,"line": 489,"col": 36,"name": "haystack"},{"file": 20,"line": 489,"col": 57,"name": "start_index"},{"file": 20,"line": 489,"col": 77,"name": "needle"},{"file": 20,"line": 1297,"col": 22,"name": "T","comptime": true},{"file": 20,"line": 1297,"col": 40,"name": "x"},{"file": 20,"line": 609,"col": 20,"name": "T","comptime": true},{"file": 20,"line": 609,"col": 38,"name": "bytes"},{"file": 20,"line": 609,"col": 57,"name": "endian"},{"file": 20,"line": 1289,"col": 16,"name": "T","comptime": true},{"file": 20,"line": 1289,"col": 34,"name": "x"},{"file": 20,"line": 1289,"col": 40,"name": "desired_endianness"},{"file": 20,"line": 277,"col": 14,"name": "T","comptime": true},{"file": 20,"line": 450,"col": 22,"name": "T","comptime": true},{"file": 20,"line": 450,"col": 40,"name": "slice"},{"file": 20,"line": 450,"col": 58,"name": "values"},{"file": 20,"line": 320,"col": 13,"name": "T","comptime": true},{"file": 20,"line": 320,"col": 31,"name": "lhs"},{"file": 20,"line": 320,"col": 47,"name": "rhs"},{"file": 20,"line": 1265,"col": 22,"name": "T","comptime": true},{"file": 20,"line": 1265,"col": 40,"name": "x"},{"file": 20,"line": 1273,"col": 19,"name": "T","comptime": true},{"file": 20,"line": 1273,"col": 37,"name": "x"},{"file": 20,"line": 424,"col": 21,"name": "T","comptime": true},{"file": 20,"line": 424,"col": 39,"name": "slice"},{"file": 20,"line": 424,"col": 57,"name": "value"},{"file": 20,"line": 1305,"col": 19,"name": "T","comptime": true},{"file": 20,"line": 1305,"col": 37,"name": "x"},{"file": 20,"line": 656,"col": 22,"name": "T","comptime": true},{"file": 20,"line": 656,"col": 40,"name": "buf"},{"file": 20,"line": 656,"col": 73,"name": "value"},{"file": 20,"line": 446,"col": 18,"name": "T","comptime": true},{"file": 20,"line": 446,"col": 36,"name": "slice"},{"file": 20,"line": 446,"col": 54,"name": "values"},{"file": 20,"line": 342,"col": 16,"name": "T","comptime": true},{"file": 20,"line": 342,"col": 34,"name": "lhs"},{"file": 20,"line": 342,"col": 50,"name": "rhs"},{"file": 20,"line": 907,"col": 16,"name": "T","comptime": true},{"file": 20,"line": 907,"col": 34,"name": "haystack"},{"file": 20,"line": 907,"col": 55,"name": "needle"},{"file": 20,"line": 408,"col": 12,"name": "T","comptime": true},{"file": 20,"line": 408,"col": 30,"name": "slice"},{"file": 20,"line": 408,"col": 48,"name": "values_to_strip"},{"file": 20,"line": 795,"col": 16,"name": "buffer"},{"file": 20,"line": 795,"col": 36,"name": "delimiter_bytes"},{"file": 20,"line": 401,"col": 17,"name": "T","comptime": true},{"file": 20,"line": 401,"col": 35,"name": "slice"},{"file": 20,"line": 401,"col": 53,"name": "values_to_strip"},{"file": 20,"line": 302,"col": 18,"name": "T","comptime": true},{"file": 20,"line": 302,"col": 36,"name": "s"},{"file": 20,"line": 478,"col": 19,"name": "T","comptime": true},{"file": 20,"line": 478,"col": 37,"name": "haystack"},{"file": 20,"line": 478,"col": 58,"name": "needle"},{"file": 20,"line": 581,"col": 27,"name": "T","comptime": true},{"file": 20,"line": 581,"col": 45,"name": "bytes"},{"file": 20,"line": 257,"col": 21,"name": "T","comptime": true},{"file": 20,"line": 257,"col": 39,"name": "dest"},{"file": 20,"line": 257,"col": 50,"name": "source"},{"file": 20,"line": 379,"col": 16,"name": "T","comptime": true},{"file": 20,"line": 379,"col": 34,"name": "slice"},{"file": 20,"line": 379,"col": 52,"name": "scalar"},{"file": 20,"line": 1389,"col": 26,"name": "T","comptime": true},{"file": 20,"line": 1389,"col": 44,"name": "B","comptime": true},{"file": 20,"line": 1461,"col": 25,"name": "T","comptime": true},{"file": 20,"line": 1461,"col": 43,"name": "length","comptime": true},{"file": 21,"line": 385,"col": 12,"name": "T","comptime": true},{"file": 21,"line": 385,"col": 30,"name": "x"},{"file": 21,"line": 385,"col": 36,"name": "r"},{"file": 21,"line": 655,"col": 15,"name": "x"},{"file": 21,"line": 561,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 561,"col": 34,"name": "numerator"},{"file": 21,"line": 561,"col": 48,"name": "denominator"},{"file": 21,"line": 787,"col": 22,"name": "T","comptime": true},{"file": 21,"line": 787,"col": 40,"name": "value"},{"file": 21,"line": 357,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 357,"col": 29,"name": "a"},{"file": 21,"line": 357,"col": 35,"name": "shift_amt"},{"file": 21,"line": 833,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 833,"col": 34,"name": "x"},{"file": 21,"line": 859,"col": 17,"name": "T","comptime": true},{"file": 21,"line": 859,"col": 35,"name": "value"},{"file": 21,"line": 607,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 607,"col": 29,"name": "numerator"},{"file": 21,"line": 607,"col": 43,"name": "denominator"},{"file": 21,"line": 956,"col": 13,"name": "a"},{"file": 21,"line": 956,"col": 21,"name": "b"},{"file": 21,"line": 742,"col": 20,"name": "v"},{"file": 21,"line": 838,"col": 21,"name": "T","comptime": true},{"file": 21,"line": 838,"col": 39,"name": "x"},{"file": 21,"line": 775,"col": 29,"name": "T","comptime": true},{"file": 21,"line": 775,"col": 47,"name": "value"},{"file": 21,"line": 324,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 324,"col": 34,"name": "a"},{"file": 21,"line": 324,"col": 40,"name": "shift_amt"},{"file": 21,"line": 630,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 630,"col": 29,"name": "numerator"},{"file": 21,"line": 630,"col": 43,"name": "denominator"},{"file": 21,"line": 315,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 315,"col": 29,"name": "a"},{"file": 21,"line": 315,"col": 35,"name": "b"},{"file": 21,"line": 199,"col": 25,"name": "T","comptime": true},{"file": 21,"line": 747,"col": 23,"name": "T","comptime": true},{"file": 21,"line": 747,"col": 41,"name": "value"},{"file": 21,"line": 432,"col": 23,"name": "from","comptime": true},{"file": 21,"line": 432,"col": 52,"name": "to","comptime": true},{"file": 21,"line": 404,"col": 12,"name": "T","comptime": true},{"file": 21,"line": 404,"col": 30,"name": "x"},{"file": 21,"line": 404,"col": 36,"name": "r"},{"file": 21,"line": 320,"col": 14,"name": "x"},{"file": 21,"line": 734,"col": 17,"name": "alignment","comptime": true},{"file": 21,"line": 734,"col": 42,"name": "ptr"},{"file": 21,"line": 582,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 582,"col": 34,"name": "numerator"},{"file": 21,"line": 582,"col": 48,"name": "denominator"},{"file": 21,"line": 686,"col": 18,"name": "x"},{"file": 21,"line": 992,"col": 15,"name": "a"},{"file": 21,"line": 992,"col": 23,"name": "op"},{"file": 21,"line": 992,"col": 44,"name": "b"},{"file": 21,"line": 331,"col": 11,"name": "T","comptime": true},{"file": 21,"line": 331,"col": 29,"name": "a"},{"file": 21,"line": 331,"col": 35,"name": "shift_amt"},{"file": 21,"line": 90,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 90,"col": 34,"name": "x"},{"file": 21,"line": 90,"col": 40,"name": "y"},{"file": 21,"line": 90,"col": 46,"name": "epsilon"},{"file": 21,"line": 212,"col": 25,"name": "T","comptime": true},{"file": 21,"line": 507,"col": 14,"name": "x"},{"file": 21,"line": 540,"col": 16,"name": "T","comptime": true},{"file": 21,"line": 540,"col": 34,"name": "numerator"},{"file": 21,"line": 540,"col": 48,"name": "denominator"},{"file": 48,"line": 74,"col": 16,"name": "self"},{"file": 48,"line": 70,"col": 18,"name": "self"},{"file": 48,"line": 143,"col": 17,"name": "context"},{"file": 48,"line": 143,"col": 31,"name": "startFn","comptime": true},{"file": 22,"line": 1796,"col": 21,"name": "flags"},{"file": 22,"line": 2391,"col": 4,"name": "name"},{"file": 22,"line": 2392,"col": 4,"name": "oldp"},{"file": 22,"line": 2393,"col": 4,"name": "oldlenp"},{"file": 22,"line": 2394,"col": 4,"name": "newp"},{"file": 22,"line": 2395,"col": 4,"name": "newlen"},{"file": 22,"line": 2151,"col": 25,"name": "inotify_fd"},{"file": 22,"line": 2151,"col": 42,"name": "pathname"},{"file": 22,"line": 2151,"col": 64,"name": "mask"},{"file": 22,"line": 2672,"col": 4,"name": "T","comptime": true},{"file": 22,"line": 2673,"col": 4,"name": "callback"},{"file": 22,"line": 2674,"col": 4,"name": "data"},{"file": 22,"line": 3319,"col": 17,"name": "who"},{"file": 22,"line": 2889,"col": 16,"name": "fd"},{"file": 22,"line": 2889,"col": 26,"name": "times"},{"file": 49,"line": 731,"col": 16,"name": "m"},{"file": 22,"line": 2094,"col": 4,"name": "kq"},{"file": 22,"line": 2095,"col": 4,"name": "changelist"},{"file": 22,"line": 2096,"col": 4,"name": "eventlist"},{"file": 22,"line": 2097,"col": 4,"name": "timeout"},{"file": 22,"line": 3285,"col": 21,"name": "name"},{"file": 22,"line": 3285,"col": 42,"name": "flags"},{"file": 49,"line": 719,"col": 15,"name": "m"},{"file": 22,"line": 3046,"col": 4,"docs": " The file descriptor of the sending socket.\n","name": "sockfd"},{"file": 22,"line": 3048,"col": 4,"docs": " Message to send.\n","name": "buf"},{"file": 22,"line": 3049,"col": 4,"name": "flags"},{"file": 22,"line": 3050,"col": 4,"name": "dest_addr"},{"file": 22,"line": 3051,"col": 4,"name": "addrlen"},{"file": 22,"line": 1450,"col": 19,"name": "dirfd"},{"file": 22,"line": 1450,"col": 32,"name": "file_path"},{"file": 22,"line": 1450,"col": 58,"name": "out_buffer"},{"file": 22,"line": 120,"col": 17,"name": "buffer"},{"file": 22,"line": 339,"col": 13,"name": "fd"},{"file": 22,"line": 339,"col": 23,"name": "iov"},{"file": 22,"line": 917,"col": 14,"name": "out_buffer"},{"file": 49,"line": 715,"col": 15,"name": "m"},{"file": 22,"line": 2841,"col": 19,"name": "ss"},{"file": 22,"line": 2841,"col": 34,"name": "old_ss"},{"file": 22,"line": 1290,"col": 14,"name": "dir_path"},{"file": 22,"line": 1290,"col": 39,"name": "mode"},{"file": 49,"line": 753,"col": 18,"name": "s"},{"file": 22,"line": 2519,"col": 21,"name": "fd"},{"file": 22,"line": 824,"col": 4,"name": "allocator"},{"file": 22,"line": 825,"col": 4,"name": "argv_slice"},{"file": 22,"line": 826,"col": 4,"name": "env_map"},{"file": 22,"line": 2590,"col": 17,"name": "pathname"},{"file": 22,"line": 2590,"col": 42,"name": "out_buffer"},{"file": 22,"line": 1340,"col": 14,"name": "dir_path"},{"file": 22,"line": 367,"col": 14,"name": "fd"},{"file": 22,"line": 367,"col": 24,"name": "iov"},{"file": 22,"line": 367,"col": 44,"name": "offset"},{"file": 22,"line": 544,"col": 15,"name": "fd"},{"file": 22,"line": 544,"col": 25,"name": "iov"},{"file": 22,"line": 544,"col": 51,"name": "offset"},{"file": 22,"line": 2621,"col": 17,"name": "pathname"},{"file": 22,"line": 2621,"col": 43,"name": "out_buffer"},{"file": 49,"line": 756,"col": 19,"name": "s"},{"file": 22,"line": 998,"col": 17,"name": "target_path"},{"file": 22,"line": 998,"col": 42,"name": "newdirfd"},{"file": 22,"line": 998,"col": 58,"name": "sym_link_path"},{"file": 22,"line": 1058,"col": 15,"name": "file_path"},{"file": 22,"line": 656,"col": 12,"name": "file_path"},{"file": 22,"line": 656,"col": 35,"name": "flags"},{"file": 22,"line": 656,"col": 47,"name": "perm"},{"file": 22,"line": 1256,"col": 15,"name": "old_path"},{"file": 22,"line": 1256,"col": 41,"name": "new_path"},{"file": 22,"line": 1100,"col": 17,"name": "dirfd"},{"file": 22,"line": 1100,"col": 30,"name": "file_path_c"},{"file": 22,"line": 1100,"col": 58,"name": "flags"},{"file": 49,"line": 944,"col": 17,"name": "u8"},{"file": 22,"line": 663,"col": 13,"name": "file_path"},{"file": 22,"line": 663,"col": 39,"name": "flags"},{"file": 22,"line": 663,"col": 51,"name": "perm"},{"file": 22,"line": 1376,"col": 13,"name": "dir_path"},{"file": 22,"line": 734,"col": 12,"name": "old_fd"},{"file": 22,"line": 734,"col": 26,"name": "new_fd"},{"file": 49,"line": 750,"col": 17,"name": "s"},{"file": 22,"line": 240,"col": 12,"name": "pid"},{"file": 22,"line": 240,"col": 24,"name": "sig"},{"file": 22,"line": 1279,"col": 13,"name": "dir_path"},{"file": 22,"line": 1279,"col": 35,"name": "mode"},{"file": 22,"line": 2341,"col": 15,"name": "path"},{"file": 22,"line": 2341,"col": 37,"name": "mode"},{"file": 49,"line": 744,"col": 16,"name": "s"},{"file": 22,"line": 1429,"col": 17,"name": "file_path"},{"file": 22,"line": 1429,"col": 43,"name": "out_buffer"},{"file": 22,"line": 1601,"col": 14,"name": "domain"},{"file": 22,"line": 1601,"col": 27,"name": "socket_type"},{"file": 22,"line": 1601,"col": 45,"name": "protocol"},{"file": 22,"line": 2314,"col": 15,"name": "path"},{"file": 22,"line": 2314,"col": 36,"name": "mode"},{"file": 22,"line": 2408,"col": 4,"name": "name"},{"file": 22,"line": 2409,"col": 4,"name": "oldp"},{"file": 22,"line": 2410,"col": 4,"name": "oldlenp"},{"file": 22,"line": 2411,"col": 4,"name": "newp"},{"file": 22,"line": 2412,"col": 4,"name": "newlen"},{"file": 22,"line": 1689,"col": 14,"name": "sockfd"},{"file": 22,"line": 1689,"col": 27,"name": "backlog"},{"file": 22,"line": 764,"col": 15,"name": "path"},{"file": 22,"line": 764,"col": 36,"name": "child_argv"},{"file": 22,"line": 764,"col": 78,"name": "envp"},{"file": 22,"line": 2423,"col": 20,"name": "tv"},{"file": 22,"line": 2423,"col": 35,"name": "tz"},{"file": 22,"line": 3146,"col": 4,"name": "sockfd"},{"file": 22,"line": 3147,"col": 4,"name": "buf"},{"file": 22,"line": 3148,"col": 4,"name": "flags"},{"file": 22,"line": 3149,"col": 4,"name": "src_addr"},{"file": 22,"line": 3150,"col": 4,"name": "addrlen"},{"file": 22,"line": 874,"col": 31,"name": "allocator"},{"file": 22,"line": 874,"col": 58,"name": "envp_buf"},{"file": 22,"line": 1730,"col": 4,"docs": " This argument is a socket that has been created with `socket`, bound to a local address\n with `bind`, and is listening for connections after a `listen`.\n","name": "sockfd"},{"file": 22,"line": 1735,"col": 4,"docs": " This argument is a pointer to a sockaddr structure.  This structure is filled in with  the\n address  of  the  peer  socket, as known to the communications layer.  The exact format of the\n address returned addr is determined by the socket's address  family  (see  `socket`  and  the\n respective  protocol  man  pages).\n","name": "addr"},{"file": 22,"line": 1742,"col": 4,"docs": " This argument is a value-result argument: the caller must initialize it to contain  the\n size (in bytes) of the structure pointed to by addr; on return it will contain the actual size\n of the peer address.\n\n The returned address is truncated if the buffer provided is too small; in this  case,  `addr_size`\n will return a value greater than was supplied to the call.\n","name": "addr_size"},{"file": 22,"line": 1750,"col": 4,"docs": " If  flags  is  0, then `accept4` is the same as `accept`.  The following values can be bitwise\n ORed in flags to obtain different behavior:\n * `SOCK_NONBLOCK` - Set the `O_NONBLOCK` file status flag on the open file description (see `open`)\n   referred  to by the new file descriptor.  Using this flag saves extra calls to `fcntl` to achieve\n   the same result.\n * `SOCK_CLOEXEC`  - Set the close-on-exec (`FD_CLOEXEC`) flag on the new file descriptor.   See  the\n   description  of the `O_CLOEXEC` flag in `open` for reasons why this may be useful.\n","name": "flags"},{"file": 22,"line": 1224,"col": 15,"name": "old_path"},{"file": 22,"line": 1224,"col": 40,"name": "new_path"},{"file": 22,"line": 3259,"col": 18,"name": "fd"},{"file": 22,"line": 3259,"col": 28,"name": "level"},{"file": 22,"line": 3259,"col": 40,"name": "optname"},{"file": 22,"line": 3259,"col": 54,"name": "opt"},{"file": 22,"line": 1211,"col": 14,"name": "old_path"},{"file": 22,"line": 1211,"col": 36,"name": "new_path"},{"file": 22,"line": 1554,"col": 19,"name": "handle"},{"file": 49,"line": 707,"col": 15,"name": "m"},{"file": 22,"line": 1129,"col": 17,"name": "dirfd"},{"file": 22,"line": 1129,"col": 30,"name": "sub_path_w"},{"file": 22,"line": 1129,"col": 58,"name": "flags"},{"file": 49,"line": 741,"col": 19,"name": "s"},{"file": 22,"line": 3118,"col": 12,"name": "fds"},{"file": 22,"line": 3118,"col": 27,"name": "timeout"},{"file": 22,"line": 791,"col": 16,"name": "file"},{"file": 22,"line": 791,"col": 37,"name": "child_argv"},{"file": 22,"line": 791,"col": 79,"name": "envp"},{"file": 22,"line": 2932,"col": 4,"name": "op"},{"file": 22,"line": 2933,"col": 4,"name": "dname"},{"file": 22,"line": 2934,"col": 4,"name": "class"},{"file": 22,"line": 2935,"col": 4,"name": "ty"},{"file": 22,"line": 2936,"col": 4,"name": "data"},{"file": 22,"line": 2937,"col": 4,"name": "newrr"},{"file": 22,"line": 2938,"col": 4,"name": "buf"},{"file": 22,"line": 2904,"col": 19,"name": "name_buffer"},{"file": 22,"line": 3106,"col": 4,"docs": " The file descriptor of the sending socket.\n","name": "sockfd"},{"file": 22,"line": 3107,"col": 4,"name": "buf"},{"file": 22,"line": 3108,"col": 4,"name": "flags"},{"file": 22,"line": 2463,"col": 17,"name": "fd"},{"file": 22,"line": 2463,"col": 27,"name": "offset"},{"file": 49,"line": 711,"col": 15,"name": "m"},{"file": 22,"line": 958,"col": 15,"name": "target_path"},{"file": 22,"line": 958,"col": 40,"name": "sym_link_path"},{"file": 49,"line": 747,"col": 16,"name": "s"},{"file": 22,"line": 1487,"col": 16,"name": "ruid"},{"file": 22,"line": 1487,"col": 27,"name": "euid"},{"file": 22,"line": 2787,"col": 25,"name": "pid"},{"file": 22,"line": 3178,"col": 4,"name": "msg"},{"file": 22,"line": 3179,"col": 4,"name": "comp_dn"},{"file": 22,"line": 3180,"col": 4,"name": "exp_dn"},{"file": 22,"line": 852,"col": 33,"name": "allocator"},{"file": 22,"line": 852,"col": 60,"name": "env_map"},{"file": 49,"line": 948,"col": 19,"name": "cap"},{"file": 22,"line": 2372,"col": 13,"name": "flags"},{"file": 22,"line": 1477,"col": 14,"name": "uid"},{"file": 22,"line": 1387,"col": 14,"name": "dir_path"},{"file": 22,"line": 1329,"col": 13,"name": "dir_path"},{"file": 22,"line": 2303,"col": 14,"name": "path"},{"file": 22,"line": 2303,"col": 32,"name": "mode"},{"file": 22,"line": 2157,"col": 26,"name": "inotify_fd"},{"file": 22,"line": 2157,"col": 43,"name": "pathname"},{"file": 22,"line": 2157,"col": 68,"name": "mask"},{"file": 22,"line": 2580,"col": 16,"name": "pathname"},{"file": 22,"line": 2580,"col": 38,"name": "out_buffer"},{"file": 22,"line": 2014,"col": 15,"name": "pid"},{"file": 22,"line": 2014,"col": 25,"name": "flags"},{"file": 49,"line": 1003,"col": 17,"name": "set"},{"file": 22,"line": 1418,"col": 16,"name": "file_path"},{"file": 22,"line": 1418,"col": 39,"name": "out_buffer"},{"file": 22,"line": 2174,"col": 24,"name": "inotify_fd"},{"file": 22,"line": 2174,"col": 41,"name": "wd"},{"file": 22,"line": 1980,"col": 23,"name": "sockfd"},{"file": 49,"line": 952,"col": 20,"name": "cap"},{"file": 22,"line": 1835,"col": 17,"name": "epfd"},{"file": 22,"line": 1835,"col": 28,"name": "op"},{"file": 22,"line": 1835,"col": 37,"name": "fd"},{"file": 22,"line": 1835,"col": 46,"name": "event"},{"file": 22,"line": 1950,"col": 15,"name": "sockfd"},{"file": 22,"line": 1950,"col": 29,"name": "sock_addr"},{"file": 22,"line": 1950,"col": 57,"name": "len"},{"file": 22,"line": 1497,"col": 14,"name": "gid"},{"file": 22,"line": 1004,"col": 18,"name": "target_path"},{"file": 22,"line": 1004,"col": 46,"name": "newdirfd"},{"file": 22,"line": 1004,"col": 62,"name": "sym_link_path"},{"file": 22,"line": 3314,"col": 20,"name": "name"},{"file": 22,"line": 3314,"col": 38,"name": "flags"},{"file": 22,"line": 1507,"col": 16,"name": "rgid"},{"file": 22,"line": 1507,"col": 27,"name": "egid"},{"file": 49,"line": 723,"col": 16,"name": "m"},{"file": 22,"line": 1895,"col": 19,"name": "sockfd"},{"file": 22,"line": 1895,"col": 33,"name": "addr"},{"file": 22,"line": 1895,"col": 50,"name": "addrlen"},{"file": 22,"line": 1089,"col": 16,"name": "dirfd"},{"file": 22,"line": 1089,"col": 29,"name": "file_path"},{"file": 22,"line": 1089,"col": 52,"name": "flags"},{"file": 22,"line": 2130,"col": 21,"name": "flags"},{"file": 22,"line": 1047,"col": 14,"name": "file_path"},{"file": 22,"line": 2198,"col": 16,"name": "memory"},{"file": 22,"line": 2198,"col": 51,"name": "protection"},{"file": 49,"line": 727,"col": 15,"name": "m"},{"file": 22,"line": 2647,"col": 17,"name": "seconds"},{"file": 22,"line": 2647,"col": 31,"name": "nanoseconds"},{"file": 22,"line": 696,"col": 14,"name": "dir_fd"},{"file": 22,"line": 696,"col": 28,"name": "file_path"},{"file": 22,"line": 696,"col": 51,"name": "flags"},{"file": 22,"line": 696,"col": 63,"name": "mode"},{"file": 22,"line": 514,"col": 14,"name": "fd"},{"file": 22,"line": 514,"col": 24,"name": "iov"},{"file": 22,"line": 1653,"col": 12,"name": "sockfd"},{"file": 22,"line": 1653,"col": 26,"name": "addr"},{"file": 22,"line": 1653,"col": 49,"name": "len"},{"file": 22,"line": 972,"col": 16,"name": "target_path"},{"file": 22,"line": 972,"col": 44,"name": "sym_link_path"},{"file": 22,"line": 1876,"col": 15,"name": "initval"},{"file": 22,"line": 1876,"col": 29,"name": "flags"},{"file": 22,"line": 1855,"col": 18,"name": "epfd"},{"file": 22,"line": 1855,"col": 29,"name": "events"},{"file": 22,"line": 1855,"col": 52,"name": "timeout"},{"file": 22,"line": 162,"col": 28,"name": "buf"},{"file": 22,"line": 3305,"col": 15,"name": "name"},{"file": 23,"line": 139,"col": 25,"name": "first_address"},{"file": 23,"line": 139,"col": 48,"name": "stack_trace"},{"file": 23,"line": 332,"col": 4,"name": "out_stream"},{"file": 23,"line": 333,"col": 4,"name": "debug_info"},{"file": 23,"line": 334,"col": 4,"name": "tty_color"},{"file": 23,"line": 335,"col": 4,"name": "start_addr"},{"file": 23,"line": 213,"col": 13,"name": "format","comptime": true},{"file": 23,"line": 213,"col": 42,"name": "args"},{"file": 23,"line": 2488,"col": 28,"name": "prefix"},{"file": 23,"line": 644,"col": 18,"name": "di"},{"file": 23,"line": 644,"col": 34,"name": "mod"},{"file": 23,"line": 2477,"col": 25,"name": "info"},{"file": 23,"line": 2310,"col": 14,"name": "ptr"},{"file": 23,"line": 2310,"col": 33,"name": "T","comptime": true},{"file": 23,"line": 2310,"col": 51,"name": "endian"},{"file": 23,"line": 979,"col": 23,"name": "stream"},{"file": 23,"line": 979,"col": 36,"name": "allocator"},{"file": 23,"line": 1073,"col": 26,"name": "allocator"},{"file": 23,"line": 2324,"col": 21,"name": "ptr"},{"file": 23,"line": 2328,"col": 24,"name": "ptr"},{"file": 23,"line": 2328,"col": 43,"name": "is_64"},{"file": 23,"line": 585,"col": 15,"name": "tty_color"},{"file": 23,"line": 825,"col": 28,"name": "allocator"},{"file": 23,"line": 2102,"col": 26,"name": "di"},{"file": 23,"line": 2102,"col": 42,"name": "symbol"},{"file": 23,"line": 2102,"col": 63,"name": "target_address"},{"file": 23,"line": 2345,"col": 17,"name": "ptr"},{"file": 23,"line": 2318,"col": 15,"name": "ptr"},{"file": 23,"line": 363,"col": 31,"name": "di"},{"file": 23,"line": 363,"col": 47,"name": "out_stream"},{"file": 23,"line": 363,"col": 64,"name": "relocated_address"},{"file": 23,"line": 363,"col": 90,"name": "tty_color"},{"file": 23,"line": 690,"col": 22,"name": "symbols"},{"file": 23,"line": 690,"col": 52,"name": "address"},{"file": 23,"line": 708,"col": 29,"name": "di"},{"file": 23,"line": 708,"col": 45,"name": "out_stream"},{"file": 23,"line": 708,"col": 62,"name": "address"},{"file": 23,"line": 708,"col": 78,"name": "tty_color"},{"file": 27,"line": 100,"col": 24,"name": "Error","comptime": true},{"file": 27,"line": 1106,"col": 18,"name": "endian","comptime": true},{"file": 27,"line": 1106,"col": 51,"name": "packing","comptime": true},{"file": 27,"line": 1106,"col": 78,"name": "Error","comptime": true},{"file": 27,"line": 673,"col": 20,"name": "endian"},{"file": 27,"line": 673,"col": 44,"name": "Error","comptime": true},{"file": 27,"line": 587,"col": 25,"name": "Error","comptime": true},{"file": 27,"line": 324,"col": 19,"name": "endian"},{"file": 27,"line": 324,"col": 43,"name": "Error","comptime": true},{"file": 27,"line": 849,"col": 20,"name": "stream"},{"file": 27,"line": 849,"col": 33,"name": "buf"},{"file": 27,"line": 229,"col": 18,"name": "buffer_size","comptime": true},{"file": 27,"line": 229,"col": 47,"name": "InStreamError","comptime": true},{"file": 27,"line": 591,"col": 31,"name": "buffer_size","comptime": true},{"file": 27,"line": 591,"col": 60,"name": "OutStreamError","comptime": true},{"file": 27,"line": 928,"col": 20,"name": "endian","comptime": true},{"file": 27,"line": 928,"col": 53,"name": "packing","comptime": true},{"file": 27,"line": 928,"col": 80,"name": "Error","comptime": true},{"file": 27,"line": 842,"col": 16,"name": "buf"},{"file": 27,"line": 890,"col": 25,"name": "stream"},{"file": 27,"line": 890,"col": 38,"name": "slice"},{"file": 27,"line": 104,"col": 30,"name": "buffer_size","comptime": true},{"file": 27,"line": 104,"col": 59,"name": "Error","comptime": true},{"file": 27,"line": 96,"col": 21,"name": "allocator"},{"file": 27,"line": 96,"col": 48,"name": "path"},{"file": 27,"line": 91,"col": 17,"name": "path"},{"file": 27,"line": 91,"col": 35,"name": "data"},{"file": 27,"line": 883,"col": 21,"name": "slice"},{"file": 27,"line": 551,"col": 25,"name": "OutStreamError","comptime": true},{"file": 28,"line": 1563,"col": 20,"name": "byte"},{"file": 28,"line": 581,"col": 4,"name": "c"},{"file": 28,"line": 582,"col": 4,"name": "options"},{"file": 28,"line": 583,"col": 4,"name": "context"},{"file": 28,"line": 584,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 585,"col": 4,"name": "output"},{"file": 28,"line": 708,"col": 4,"name": "value"},{"file": 28,"line": 709,"col": 4,"name": "options"},{"file": 28,"line": 710,"col": 4,"name": "context"},{"file": 28,"line": 711,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 712,"col": 4,"name": "output"},{"file": 28,"line": 1537,"col": 12,"name": "buf"},{"file": 28,"line": 613,"col": 4,"name": "value"},{"file": 28,"line": 614,"col": 4,"name": "options"},{"file": 28,"line": 615,"col": 4,"name": "context"},{"file": 28,"line": 616,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 617,"col": 4,"name": "output"},{"file": 28,"line": 853,"col": 4,"name": "value"},{"file": 28,"line": 854,"col": 4,"name": "options"},{"file": 28,"line": 855,"col": 4,"name": "radix","comptime": true},{"file": 28,"line": 856,"col": 4,"name": "context"},{"file": 28,"line": 857,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 858,"col": 4,"name": "output"},{"file": 28,"line": 1129,"col": 18,"name": "allocator"},{"file": 28,"line": 1129,"col": 45,"name": "fmt","comptime": true},{"file": 28,"line": 1129,"col": 71,"name": "args"},{"file": 28,"line": 990,"col": 20,"name": "out_buf"},{"file": 28,"line": 990,"col": 35,"name": "value"},{"file": 28,"line": 990,"col": 47,"name": "base"},{"file": 28,"line": 990,"col": 57,"name": "uppercase"},{"file": 28,"line": 990,"col": 74,"name": "options"},{"file": 28,"line": 1570,"col": 18,"name": "out"},{"file": 28,"line": 1570,"col": 29,"name": "input"},{"file": 28,"line": 593,"col": 4,"name": "buf"},{"file": 28,"line": 594,"col": 4,"name": "options"},{"file": 28,"line": 595,"col": 4,"name": "context"},{"file": 28,"line": 596,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 597,"col": 4,"name": "output"},{"file": 28,"line": 1138,"col": 13,"name": "size"},{"file": 28,"line": 1138,"col": 27,"name": "bytes"},{"file": 28,"line": 23,"col": 11,"name": "used_pos_args","comptime": true},{"file": 28,"line": 23,"col": 41,"name": "maybe_pos_arg","comptime": true},{"file": 28,"line": 23,"col": 80,"name": "next_arg","comptime": true},{"file": 28,"line": 542,"col": 4,"name": "value"},{"file": 28,"line": 543,"col": 4,"name": "fmt","comptime": true},{"file": 28,"line": 544,"col": 4,"name": "options"},{"file": 28,"line": 545,"col": 4,"name": "context"},{"file": 28,"line": 546,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 547,"col": 4,"name": "output"},{"file": 28,"line": 34,"col": 15,"name": "fmt","comptime": true},{"file": 28,"line": 915,"col": 4,"name": "value"},{"file": 28,"line": 916,"col": 4,"name": "base"},{"file": 28,"line": 917,"col": 4,"name": "uppercase"},{"file": 28,"line": 918,"col": 4,"name": "options"},{"file": 28,"line": 919,"col": 4,"name": "context"},{"file": 28,"line": 920,"col": 4,"name": "Errors","comptime": true},{"file": 28,"line": 921,"col": 4,"name": "output"},{"file": 28,"line": 1524,"col": 11,"name": "expected"},{"file": 28,"line": 1524,"col": 33,"name": "template","comptime": true},{"file": 28,"line": 1524,"col": 64,"name": "args"},{"file": 28,"line": 1160,"col": 22,"name": "buf"},{"file": 28,"line": 1160,"col": 33,"name": "value"},{"file": 28,"line": 1160,"col": 45,"name": "base"},{"file": 28,"line": 1160,"col": 55,"name": "uppercase"},{"file": 28,"line": 1160,"col": 72,"name": "options"},{"file": 28,"line": 1002,"col": 21,"name": "context"},{"file": 28,"line": 1002,"col": 45,"name": "bytes"},{"file": 30,"line": 577,"col": 22,"name": "size"},{"file": 30,"line": 577,"col": 33,"name": "block_size"},{"file": 33,"line": 74,"col": 16,"name": "T","comptime": true},{"file": 33,"line": 161,"col": 20,"name": "T","comptime": true},{"file": 33,"line": 545,"col": 18,"name": "T","comptime": true},{"file": 33,"line": 545,"col": 36,"name": "name","comptime": true},{"file": 33,"line": 278,"col": 17,"name": "T","comptime": true},{"file": 33,"line": 278,"col": 35,"name": "field_name","comptime": true},{"file": 33,"line": 341,"col": 17,"name": "u"},{"file": 33,"line": 197,"col": 23,"name": "T","comptime": true},{"file": 33,"line": 197,"col": 41,"name": "decl_name","comptime": true},{"file": 33,"line": 318,"col": 15,"name": "T","comptime": true},{"file": 33,"line": 118,"col": 23,"name": "T","comptime": true},{"file": 33,"line": 12,"col": 15,"name": "v"},{"file": 33,"line": 532,"col": 17,"name": "Tag","comptime": true},{"file": 33,"line": 532,"col": 37,"name": "tag_int"},{"file": 33,"line": 366,"col": 22,"name": "U","comptime": true},{"file": 33,"line": 366,"col": 40,"name": "tag"},{"file": 33,"line": 55,"col": 20,"name": "T","comptime": true},{"file": 33,"line": 55,"col": 38,"name": "str"},{"file": 33,"line": 233,"col": 14,"name": "T","comptime": true},{"file": 34,"line": 1345,"col": 27,"name": "absolute_path_c"},{"file": 34,"line": 1345,"col": 59,"name": "flags"},{"file": 34,"line": 1316,"col": 24,"name": "absolute_path"},{"file": 34,"line": 1316,"col": 51,"name": "flags"},{"file": 34,"line": 296,"col": 16,"name": "allocator"},{"file": 34,"line": 296,"col": 39,"name": "full_path"},{"file": 34,"line": 1470,"col": 16,"name": "pathname"},{"file": 34,"line": 1470,"col": 38,"name": "buffer"},{"file": 34,"line": 340,"col": 18,"name": "dir_path"},{"file": 34,"line": 1446,"col": 16,"name": "allocator"},{"file": 34,"line": 1446,"col": 39,"name": "dir_path"},{"file": 34,"line": 1515,"col": 19,"name": "out_buffer"},{"file": 34,"line": 1339,"col": 26,"name": "absolute_path"},{"file": 34,"line": 1339,"col": 53,"name": "flags"},{"file": 34,"line": 90,"col": 22,"name": "source_path"},{"file": 34,"line": 90,"col": 47,"name": "dest_path"},{"file": 34,"line": 90,"col": 70,"name": "mode"},{"file": 34,"line": 330,"col": 17,"name": "dir_path"},{"file": 34,"line": 161,"col": 16,"name": "source_path"},{"file": 34,"line": 161,"col": 41,"name": "dest_path"},{"file": 34,"line": 184,"col": 20,"name": "source_path"},{"file": 34,"line": 184,"col": 45,"name": "dest_path"},{"file": 34,"line": 184,"col": 68,"name": "mode"},{"file": 34,"line": 1372,"col": 27,"name": "absolute_path_w"},{"file": 34,"line": 1366,"col": 27,"name": "absolute_path_c"},{"file": 34,"line": 1581,"col": 21,"name": "allocator"},{"file": 34,"line": 1581,"col": 44,"name": "pathname"},{"file": 34,"line": 349,"col": 18,"name": "full_path"},{"file": 34,"line": 1360,"col": 26,"name": "absolute_path"},{"file": 34,"line": 277,"col": 15,"name": "dir_path"},{"file": 34,"line": 1328,"col": 25,"name": "absolute_path_w"},{"file": 34,"line": 1328,"col": 58,"name": "flags"},{"file": 34,"line": 1556,"col": 27,"name": "allocator"},{"file": 34,"line": 287,"col": 16,"name": "dir_path"},{"file": 34,"line": 80,"col": 18,"name": "source_path"},{"file": 34,"line": 80,"col": 43,"name": "dest_path"},{"file": 34,"line": 1351,"col": 27,"name": "absolute_path_w"},{"file": 34,"line": 1351,"col": 60,"name": "flags"},{"file": 34,"line": 1563,"col": 22,"name": "out_buffer"},{"file": 34,"line": 335,"col": 18,"name": "dir_path"},{"file": 34,"line": 282,"col": 16,"name": "dir_path"},{"file": 34,"line": 46,"col": 21,"name": "allocator"},{"file": 34,"line": 46,"col": 44,"name": "existing_path"},{"file": 34,"line": 46,"col": 71,"name": "new_path"},{"file": 34,"line": 1475,"col": 17,"name": "pathname_c"},{"file": 34,"line": 1475,"col": 42,"name": "buffer"},{"file": 35,"line": 717,"col": 21,"name": "size","comptime": true},{"file": 35,"line": 717,"col": 43,"name": "fallback_allocator"},{"file": 35,"line": 729,"col": 30,"name": "size","comptime": true},{"file": 35,"line": 984,"col": 24,"name": "allocator"},{"file": 35,"line": 984,"col": 51,"name": "alignment","comptime": true},{"file": 35,"line": 1037,"col": 30,"name": "allocator"},{"file": 35,"line": 253,"col": 39},{"file": 35,"line": 956,"col": 17,"name": "allocator"},{"file": 35,"line": 28,"col": 11,"name": "self"},{"file": 35,"line": 28,"col": 29,"name": "old_mem"},{"file": 35,"line": 28,"col": 44,"name": "old_align"},{"file": 35,"line": 28,"col": 60,"name": "new_size"},{"file": 35,"line": 28,"col": 77,"name": "new_align"},{"file": 35,"line": 21,"col": 12,"name": "self"},{"file": 35,"line": 21,"col": 30,"name": "old_mem"},{"file": 35,"line": 21,"col": 45,"name": "old_align"},{"file": 35,"line": 21,"col": 61,"name": "new_size"},{"file": 35,"line": 21,"col": 78,"name": "new_align"},{"file": 35,"line": 1008,"col": 31,"name": "allocator"},{"file": 35,"line": 254,"col": 39},{"file": 35,"line": 254,"col": 44},{"file": 36,"line": 196,"col": 8,"name": "c_argc"},{"file": 36,"line": 196,"col": 21,"name": "c_argv"},{"file": 36,"line": 196,"col": 41,"name": "c_envp"},{"file": 36,"line": 233,"col": 23,"name": "loop"},{"file": 36,"line": 59,"col": 11,"name": "handle"},{"file": 36,"line": 59,"col": 32,"name": "system_table"},{"file": 36,"line": 45,"col": 22,"name": "hinstDLL"},{"file": 36,"line": 45,"col": 58,"name": "fdwReason"},{"file": 36,"line": 45,"col": 91,"name": "lpReserved"},{"file": 37,"line": 10,"col": 13,"name": "nanoseconds"},{"file": 57,"line": 34,"col": 19,"name": "self"},{"file": 57,"line": 27,"col": 22,"name": "self"},{"file": 57,"line": 23,"col": 18,"name": "self"},{"file": 38,"line": 23,"col": 19,"name": "allocator"},{"file": 38,"line": 37,"col": 17,"name": "allocator"},{"file": 38,"line": 454,"col": 16,"name": "allocator"},{"file": 38,"line": 454,"col": 43,"name": "args_alloc"},{"file": 38,"line": 515,"col": 24,"name": "name"},{"file": 38,"line": 389,"col": 17,"name": "allocator"},{"file": 38,"line": 18,"col": 14,"name": "out_buffer"},{"file": 38,"line": 506,"col": 19,"name": "name"},{"file": 38,"line": 491,"col": 22,"name": "input_cmd_line"},{"file": 38,"line": 491,"col": 51,"name": "expected_args"},{"file": 20,"line": 190,"col": 18,"name": "self"},{"file": 20,"line": 190,"col": 36,"name": "old_mem"},{"file": 20,"line": 190,"col": 50,"name": "new_n"},{"file": 20,"line": 202,"col": 8,"name": "self"},{"file": 20,"line": 203,"col": 8,"name": "old_mem"},{"file": 20,"line": 204,"col": 8,"name": "new_alignment","comptime": true},{"file": 20,"line": 205,"col": 8,"name": "new_n"},{"file": 9,"line": 155,"col": 18,"name": "image"},{"file": 26,"line": 362,"col": 20,"name": "allocator"},{"file": 26,"line": 362,"col": 47,"name": "path"},{"file": 26,"line": 524,"col": 25,"name": "elf"},{"file": 26,"line": 524,"col": 36,"name": "elf_section"},{"file": 26,"line": 367,"col": 20,"name": "allocator"},{"file": 26,"line": 367,"col": 47,"name": "file"},{"file": 23,"line": 1836,"col": 25,"name": "self"},{"file": 23,"line": 1836,"col": 43,"name": "id"},{"file": 41,"line": 338,"col": 10,"name": "ctx"},{"file": 37,"line": 166,"col": 17,"name": "self"},{"file": 37,"line": 171,"col": 15,"name": "self"},{"file": 30,"line": 705,"col": 15,"name": "self"},{"file": 30,"line": 652,"col": 26,"name": "self"},{"file": 30,"line": 652,"col": 44,"name": "allocator"},{"file": 30,"line": 693,"col": 14,"name": "self"},{"file": 30,"line": 693,"col": 32,"name": "len"},{"file": 30,"line": 699,"col": 14,"name": "self"},{"file": 30,"line": 699,"col": 32,"name": "len"},{"file": 30,"line": 640,"col": 12,"name": "block_size"},{"file": 30,"line": 640,"col": 29,"name": "file"},{"file": 30,"line": 640,"col": 41,"name": "blocks"},{"file": 30,"line": 717,"col": 14,"name": "in_stream"},{"file": 30,"line": 717,"col": 34,"name": "buffer"},{"file": 30,"line": 709,"col": 18,"name": "self"},{"file": 14,"line": 501,"col": 17,"name": "allocator"},{"file": 14,"line": 531,"col": 18,"name": "self"},{"file": 14,"line": 555,"col": 21,"name": "self"},{"file": 14,"line": 555,"col": 44,"name": "handle"},{"file": 14,"line": 591,"col": 21,"name": "self"},{"file": 14,"line": 574,"col": 23,"name": "self"},{"file": 14,"line": 514,"col": 23,"name": "self"},{"file": 46,"line": 678,"col": 26,"name": "self"},{"file": 46,"line": 615,"col": 22,"name": "self"},{"file": 46,"line": 615,"col": 35,"name": "node"},{"file": 46,"line": 110,"col": 30,"name": "self"},{"file": 46,"line": 674,"col": 25,"name": "self"},{"file": 46,"line": 162,"col": 18,"name": "self"},{"file": 46,"line": 439,"col": 22,"name": "self"},{"file": 46,"line": 439,"col": 35,"name": "fd"},{"file": 46,"line": 439,"col": 44,"name": "op"},{"file": 46,"line": 439,"col": 53,"name": "flags"},{"file": 46,"line": 439,"col": 65,"name": "resume_node"},{"file": 46,"line": 652,"col": 17,"name": "self"},{"file": 46,"line": 508,"col": 31,"name": "self"},{"file": 46,"line": 508,"col": 44,"name": "fd"},{"file": 46,"line": 448,"col": 25,"name": "self"},{"file": 46,"line": 448,"col": 38,"name": "fd"},{"file": 46,"line": 627,"col": 15,"name": "self"},{"file": 46,"line": 549,"col": 24,"name": "self"},{"file": 46,"line": 549,"col": 37,"name": "ident"},{"file": 46,"line": 549,"col": 51,"name": "filter"},{"file": 46,"line": 120,"col": 29,"name": "self"},{"file": 46,"line": 533,"col": 21,"name": "self"},{"file": 46,"line": 533,"col": 34,"name": "resume_node"},{"file": 46,"line": 533,"col": 66,"name": "ident"},{"file": 46,"line": 533,"col": 80,"name": "filter"},{"file": 46,"line": 533,"col": 93,"name": "fflags"},{"file": 46,"line": 516,"col": 28,"name": "self"},{"file": 46,"line": 516,"col": 41,"name": "ident"},{"file": 46,"line": 516,"col": 55,"name": "filter"},{"file": 46,"line": 516,"col": 68,"name": "fflags"},{"file": 46,"line": 621,"col": 28,"name": "self"},{"file": 46,"line": 621,"col": 41,"name": "node"},{"file": 46,"line": 453,"col": 23,"name": "self"},{"file": 46,"line": 453,"col": 36,"name": "fd"},{"file": 46,"line": 453,"col": 45,"name": "flags"},{"file": 46,"line": 512,"col": 41,"name": "self"},{"file": 46,"line": 512,"col": 54,"name": "fd"},{"file": 46,"line": 98,"col": 16,"name": "self"},{"file": 46,"line": 504,"col": 31,"name": "self"},{"file": 46,"line": 504,"col": 44,"name": "fd"},{"file": 46,"line": 129,"col": 26,"name": "self"},{"file": 46,"line": 129,"col": 39,"name": "thread_count"},{"file": 46,"line": 427,"col": 22,"name": "self"},{"file": 46,"line": 427,"col": 35,"name": "fd"},{"file": 46,"line": 427,"col": 44,"name": "resume_node"},{"file": 46,"line": 427,"col": 70,"name": "flags"},{"file": 46,"line": 806,"col": 22,"name": "self"},{"file": 46,"line": 806,"col": 35,"name": "request_node"},{"file": 46,"line": 173,"col": 18,"name": "self"},{"file": 46,"line": 173,"col": 31,"name": "extra_thread_count"},{"file": 46,"line": 406,"col": 20,"name": "self"},{"file": 46,"line": 836,"col": 18,"name": "self"},{"file": 46,"line": 828,"col": 21,"name": "self"},{"file": 46,"line": 828,"col": 34,"name": "request_node"},{"file": 46,"line": 713,"col": 17,"name": "self"},{"file": 46,"line": 564,"col": 16,"name": "self"},{"file": 46,"line": 943,"col": 24,"name": "h"},{"file": 46,"line": 943,"col": 42,"name": "did_it"},{"file": 47,"line": 56,"col": 13,"name": "name","comptime": true},{"file": 47,"line": 150,"col": 16,"name": "T","comptime": true},{"file": 47,"line": 323,"col": 19,"name": "T","comptime": true},{"file": 47,"line": 21,"col": 18,"name": "traits","comptime": true},{"file": 47,"line": 287,"col": 16,"name": "T","comptime": true},{"file": 47,"line": 190,"col": 21,"name": "T","comptime": true},{"file": 47,"line": 234,"col": 21,"name": "T","comptime": true},{"file": 47,"line": 204,"col": 19,"name": "T","comptime": true},{"file": 47,"line": 265,"col": 19,"name": "T","comptime": true},{"file": 47,"line": 129,"col": 15,"name": "id","comptime": true},{"file": 47,"line": 170,"col": 16,"name": "T","comptime": true},{"file": 47,"line": 79,"col": 16,"name": "name","comptime": true},{"file": 47,"line": 11,"col": 21,"name": "T","comptime": true},{"file": 52,"line": 436,"col": 14,"name": "fd"},{"file": 52,"line": 436,"col": 23,"name": "offset"},{"file": 52,"line": 436,"col": 36,"name": "result"},{"file": 52,"line": 436,"col": 51,"name": "whence"},{"file": 52,"line": 978,"col": 21,"name": "flags"},{"file": 52,"line": 745,"col": 18,"name": "fd"},{"file": 52,"line": 745,"col": 27,"name": "level"},{"file": 52,"line": 745,"col": 39,"name": "optname"},{"file": 52,"line": 745,"col": 53,"name": "optval","noalias": true},{"file": 52,"line": 745,"col": 76,"name": "optlen","noalias": true},{"file": 52,"line": 927,"col": 16,"name": "path"},{"file": 52,"line": 927,"col": 37,"name": "name"},{"file": 52,"line": 927,"col": 58,"name": "value"},{"file": 52,"line": 927,"col": 72,"name": "size"},{"file": 52,"line": 116,"col": 16,"name": "fd"},{"file": 52,"line": 116,"col": 25,"name": "dirp"},{"file": 52,"line": 116,"col": 38,"name": "len"},{"file": 52,"line": 619,"col": 17,"name": "ruid"},{"file": 52,"line": 619,"col": 29,"name": "euid"},{"file": 52,"line": 619,"col": 41,"name": "suid"},{"file": 52,"line": 939,"col": 16,"name": "path"},{"file": 52,"line": 939,"col": 37,"name": "name"},{"file": 52,"line": 939,"col": 58,"name": "value"},{"file": 52,"line": 939,"col": 78,"name": "size"},{"file": 52,"line": 939,"col": 91,"name": "flags"},{"file": 52,"line": 848,"col": 18,"name": "domain"},{"file": 52,"line": 848,"col": 31,"name": "socket_type"},{"file": 52,"line": 848,"col": 49,"name": "protocol"},{"file": 52,"line": 848,"col": 64,"name": "fd"},{"file": 52,"line": 806,"col": 15,"name": "fd"},{"file": 52,"line": 806,"col": 24,"name": "msg"},{"file": 52,"line": 806,"col": 38,"name": "flags"},{"file": 52,"line": 1027,"col": 14,"name": "hdrp"},{"file": 52,"line": 1027,"col": 40,"name": "datap"},{"file": 52,"line": 959,"col": 20,"name": "fd"},{"file": 52,"line": 959,"col": 31,"name": "name"},{"file": 52,"line": 138,"col": 25,"name": "fd"},{"file": 52,"line": 138,"col": 34,"name": "pathname"},{"file": 52,"line": 138,"col": 59,"name": "mask"},{"file": 52,"line": 1046,"col": 23,"name": "T","comptime": true},{"file": 52,"line": 1046,"col": 41,"name": "callback"},{"file": 52,"line": 1046,"col": 112,"name": "data"},{"file": 52,"line": 1116,"col": 17,"name": "who"},{"file": 52,"line": 1116,"col": 27,"name": "usage"},{"file": 52,"line": 422,"col": 14,"name": "flags"},{"file": 52,"line": 422,"col": 28,"name": "child_stack_ptr"},{"file": 52,"line": 422,"col": 52,"name": "parent_tid"},{"file": 52,"line": 422,"col": 70,"name": "child_tid"},{"file": 52,"line": 422,"col": 87,"name": "newtls"},{"file": 52,"line": 96,"col": 16,"name": "fd"},{"file": 52,"line": 96,"col": 25,"name": "times"},{"file": 52,"line": 627,"col": 17,"name": "rgid"},{"file": 52,"line": 627,"col": 29,"name": "egid"},{"file": 52,"line": 627,"col": 41,"name": "sgid"},{"file": 52,"line": 75,"col": 14,"name": "path"},{"file": 52,"line": 75,"col": 35,"name": "argv"},{"file": 52,"line": 75,"col": 71,"name": "envp"},{"file": 52,"line": 286,"col": 16,"name": "fd"},{"file": 52,"line": 286,"col": 25,"name": "iov"},{"file": 52,"line": 286,"col": 52,"name": "count"},{"file": 52,"line": 286,"col": 66,"name": "offset"},{"file": 52,"line": 286,"col": 79,"name": "flags"},{"file": 52,"line": 611,"col": 15,"name": "euid"},{"file": 52,"line": 474,"col": 14,"name": "tgid"},{"file": 52,"line": 474,"col": 27,"name": "tid"},{"file": 52,"line": 474,"col": 39,"name": "sig"},{"file": 52,"line": 841,"col": 14,"name": "fd"},{"file": 52,"line": 841,"col": 23,"name": "buf"},{"file": 52,"line": 841,"col": 41,"name": "len"},{"file": 52,"line": 841,"col": 53,"name": "flags"},{"file": 52,"line": 841,"col": 65,"name": "addr"},{"file": 52,"line": 841,"col": 89,"name": "alen"},{"file": 52,"line": 1108,"col": 25,"name": "fd"},{"file": 52,"line": 1108,"col": 34,"name": "opcode"},{"file": 52,"line": 1108,"col": 47,"name": "arg"},{"file": 52,"line": 1108,"col": 68,"name": "nr_args"},{"file": 52,"line": 1019,"col": 23,"name": "fd"},{"file": 52,"line": 1019,"col": 32,"name": "flags"},{"file": 52,"line": 1019,"col": 44,"name": "new_value"},{"file": 52,"line": 1019,"col": 74,"name": "old_value"},{"file": 52,"line": 166,"col": 15,"name": "dirfd"},{"file": 52,"line": 166,"col": 27,"name": "path"},{"file": 52,"line": 166,"col": 48,"name": "mode"},{"file": 52,"line": 71,"col": 14,"name": "path"},{"file": 52,"line": 877,"col": 12,"name": "pathname"},{"file": 52,"line": 877,"col": 37,"name": "statbuf"},{"file": 52,"line": 462,"col": 17,"name": "buf"},{"file": 52,"line": 462,"col": 29,"name": "count"},{"file": 52,"line": 462,"col": 43,"name": "flags"},{"file": 52,"line": 947,"col": 17,"name": "fd"},{"file": 52,"line": 947,"col": 28,"name": "name"},{"file": 52,"line": 947,"col": 49,"name": "value"},{"file": 52,"line": 947,"col": 69,"name": "size"},{"file": 52,"line": 947,"col": 82,"name": "flags"},{"file": 52,"line": 267,"col": 13,"name": "fd"},{"file": 52,"line": 267,"col": 22,"name": "iov"},{"file": 52,"line": 267,"col": 43,"name": "count"},{"file": 52,"line": 112,"col": 14,"name": "buf"},{"file": 52,"line": 112,"col": 26,"name": "size"},{"file": 52,"line": 1035,"col": 19,"name": "ss"},{"file": 52,"line": 1035,"col": 34,"name": "old_ss"},{"file": 52,"line": 330,"col": 17,"name": "dirfd"},{"file": 52,"line": 330,"col": 29,"name": "path"},{"file": 52,"line": 330,"col": 50,"name": "mode"},{"file": 52,"line": 330,"col": 61,"name": "flags"},{"file": 52,"line": 174,"col": 14,"name": "special"},{"file": 52,"line": 154,"col": 18,"name": "dirfd"},{"file": 52,"line": 154,"col": 30,"name": "path","noalias": true},{"file": 52,"line": 154,"col": 59,"name": "buf_ptr","noalias": true},{"file": 52,"line": 154,"col": 83,"name": "buf_len"},{"file": 52,"line": 1023,"col": 15,"name": "flags"},{"file": 52,"line": 244,"col": 14,"name": "fd"},{"file": 52,"line": 244,"col": 23,"name": "iov"},{"file": 52,"line": 244,"col": 44,"name": "count"},{"file": 52,"line": 244,"col": 58,"name": "offset"},{"file": 52,"line": 275,"col": 15,"name": "fd"},{"file": 52,"line": 275,"col": 24,"name": "iov"},{"file": 52,"line": 275,"col": 51,"name": "count"},{"file": 52,"line": 275,"col": 65,"name": "offset"},{"file": 52,"line": 314,"col": 17,"name": "existing"},{"file": 52,"line": 314,"col": 42,"name": "newfd"},{"file": 52,"line": 314,"col": 54,"name": "newpath"},{"file": 52,"line": 951,"col": 19,"name": "path"},{"file": 52,"line": 951,"col": 40,"name": "name"},{"file": 52,"line": 398,"col": 12,"name": "path"},{"file": 52,"line": 398,"col": 33,"name": "flags"},{"file": 52,"line": 398,"col": 45,"name": "perm"},{"file": 52,"line": 100,"col": 17,"name": "dirfd"},{"file": 52,"line": 100,"col": 29,"name": "path"},{"file": 52,"line": 100,"col": 51,"name": "times"},{"file": 52,"line": 100,"col": 78,"name": "flags"},{"file": 52,"line": 67,"col": 13,"name": "path"},{"file": 52,"line": 47,"col": 12,"name": "old"},{"file": 52,"line": 47,"col": 22,"name": "new"},{"file": 52,"line": 643,"col": 17,"name": "rgid"},{"file": 52,"line": 643,"col": 28,"name": "egid"},{"file": 52,"line": 643,"col": 39,"name": "sgid"},{"file": 52,"line": 466,"col": 12,"name": "pid"},{"file": 52,"line": 466,"col": 24,"name": "sig"},{"file": 52,"line": 158,"col": 13,"name": "path"},{"file": 52,"line": 158,"col": 34,"name": "mode"},{"file": 52,"line": 615,"col": 15,"name": "egid"},{"file": 52,"line": 427,"col": 14,"name": "flags"},{"file": 52,"line": 427,"col": 26,"name": "child_stack_ptr"},{"file": 52,"line": 659,"col": 17,"name": "size"},{"file": 52,"line": 659,"col": 30,"name": "list"},{"file": 52,"line": 731,"col": 14,"name": "domain"},{"file": 52,"line": 731,"col": 27,"name": "socket_type"},{"file": 52,"line": 731,"col": 45,"name": "protocol"},{"file": 58,"line": 52,"col": 16,"name": "number"},{"file": 58,"line": 52,"col": 31,"name": "arg1"},{"file": 58,"line": 52,"col": 44,"name": "arg2"},{"file": 58,"line": 52,"col": 57,"name": "arg3"},{"file": 58,"line": 52,"col": 70,"name": "arg4"},{"file": 58,"line": 52,"col": 83,"name": "arg5"},{"file": 52,"line": 834,"col": 14,"name": "fd"},{"file": 52,"line": 834,"col": 23,"name": "backlog"},{"file": 52,"line": 539,"col": 20,"name": "tv"},{"file": 52,"line": 539,"col": 40,"name": "tz"},{"file": 52,"line": 535,"col": 20,"name": "tv"},{"file": 52,"line": 535,"col": 34,"name": "tz"},{"file": 52,"line": 63,"col": 12,"name": "old"},{"file": 52,"line": 63,"col": 22,"name": "new"},{"file": 52,"line": 63,"col": 32,"name": "flags"},{"file": 52,"line": 813,"col": 16,"name": "fd"},{"file": 52,"line": 813,"col": 25,"name": "buf","noalias": true},{"file": 52,"line": 813,"col": 45,"name": "len"},{"file": 52,"line": 813,"col": 57,"name": "flags"},{"file": 52,"line": 813,"col": 69,"name": "addr","noalias": true},{"file": 52,"line": 813,"col": 95,"name": "alen","noalias": true},{"file": 52,"line": 1006,"col": 22,"name": "clockid"},{"file": 52,"line": 1006,"col": 36,"name": "flags"},{"file": 52,"line": 862,"col": 15,"name": "fd"},{"file": 52,"line": 862,"col": 24,"name": "addr","noalias": true},{"file": 52,"line": 862,"col": 49,"name": "len","noalias": true},{"file": 52,"line": 862,"col": 74,"name": "flags"},{"file": 52,"line": 752,"col": 15,"name": "fd"},{"file": 52,"line": 752,"col": 24,"name": "msg"},{"file": 52,"line": 752,"col": 44,"name": "flags"},{"file": 52,"line": 387,"col": 17,"name": "oldfd"},{"file": 52,"line": 387,"col": 29,"name": "oldpath"},{"file": 52,"line": 387,"col": 53,"name": "newfd"},{"file": 52,"line": 387,"col": 65,"name": "newpath"},{"file": 52,"line": 387,"col": 89,"name": "flags"},{"file": 52,"line": 738,"col": 18,"name": "fd"},{"file": 52,"line": 738,"col": 27,"name": "level"},{"file": 52,"line": 738,"col": 39,"name": "optname"},{"file": 52,"line": 738,"col": 53,"name": "optval"},{"file": 52,"line": 738,"col": 74,"name": "optlen"},{"file": 52,"line": 356,"col": 14,"name": "old"},{"file": 52,"line": 356,"col": 34,"name": "new"},{"file": 52,"line": 531,"col": 21,"name": "clk_id"},{"file": 52,"line": 531,"col": 34,"name": "tp"},{"file": 52,"line": 218,"col": 12,"name": "fds"},{"file": 52,"line": 218,"col": 28,"name": "n"},{"file": 52,"line": 218,"col": 39,"name": "timeout"},{"file": 52,"line": 651,"col": 17,"name": "size"},{"file": 52,"line": 651,"col": 30,"name": "list"},{"file": 52,"line": 352,"col": 14,"name": "fd"},{"file": 52,"line": 352,"col": 23,"name": "buf"},{"file": 52,"line": 352,"col": 41,"name": "count"},{"file": 52,"line": 352,"col": 55,"name": "offset"},{"file": 52,"line": 306,"col": 15,"name": "existing"},{"file": 52,"line": 306,"col": 40,"name": "new"},{"file": 52,"line": 255,"col": 15,"name": "fd"},{"file": 52,"line": 255,"col": 24,"name": "iov"},{"file": 52,"line": 255,"col": 45,"name": "count"},{"file": 52,"line": 255,"col": 59,"name": "offset"},{"file": 52,"line": 255,"col": 72,"name": "flags"},{"file": 52,"line": 412,"col": 14,"name": "path"},{"file": 52,"line": 412,"col": 35,"name": "perm"},{"file": 52,"line": 563,"col": 16,"name": "ruid"},{"file": 52,"line": 563,"col": 27,"name": "euid"},{"file": 52,"line": 967,"col": 25,"name": "pid"},{"file": 52,"line": 967,"col": 37,"name": "size"},{"file": 52,"line": 967,"col": 50,"name": "set"},{"file": 52,"line": 943,"col": 17,"name": "path"},{"file": 52,"line": 943,"col": 38,"name": "name"},{"file": 52,"line": 943,"col": 59,"name": "value"},{"file": 52,"line": 943,"col": 79,"name": "size"},{"file": 52,"line": 943,"col": 92,"name": "flags"},{"file": 52,"line": 923,"col": 18,"name": "fd"},{"file": 52,"line": 923,"col": 29,"name": "list"},{"file": 52,"line": 923,"col": 42,"name": "size"},{"file": 52,"line": 990,"col": 19,"name": "epoll_fd"},{"file": 52,"line": 990,"col": 34,"name": "events"},{"file": 52,"line": 990,"col": 58,"name": "maxevents"},{"file": 52,"line": 990,"col": 74,"name": "timeout"},{"file": 52,"line": 990,"col": 88,"name": "sigmask"},{"file": 52,"line": 334,"col": 12,"name": "fd"},{"file": 52,"line": 1104,"col": 22,"name": "fd"},{"file": 52,"line": 1104,"col": 31,"name": "to_submit"},{"file": 52,"line": 1104,"col": 47,"name": "min_complete"},{"file": 52,"line": 1104,"col": 66,"name": "flags"},{"file": 52,"line": 1104,"col": 78,"name": "sig"},{"file": 52,"line": 820,"col": 16,"name": "fd"},{"file": 52,"line": 820,"col": 25,"name": "how"},{"file": 52,"line": 452,"col": 12,"name": "status"},{"file": 52,"line": 1031,"col": 14,"name": "hdrp"},{"file": 52,"line": 1031,"col": 40,"name": "datap"},{"file": 52,"line": 344,"col": 13,"name": "fd"},{"file": 52,"line": 344,"col": 26,"name": "flags"},{"file": 52,"line": 635,"col": 17,"name": "ruid"},{"file": 52,"line": 635,"col": 28,"name": "euid"},{"file": 52,"line": 635,"col": 39,"name": "suid"},{"file": 52,"line": 170,"col": 13,"name": "special"},{"file": 52,"line": 170,"col": 37,"name": "dir"},{"file": 52,"line": 170,"col": 57,"name": "fstype"},{"file": 52,"line": 170,"col": 80,"name": "flags"},{"file": 52,"line": 170,"col": 92,"name": "data"},{"file": 52,"line": 547,"col": 14,"name": "uid"},{"file": 52,"line": 935,"col": 17,"name": "fd"},{"file": 52,"line": 935,"col": 28,"name": "name"},{"file": 52,"line": 935,"col": 49,"name": "value"},{"file": 52,"line": 935,"col": 63,"name": "size"},{"file": 52,"line": 298,"col": 13,"name": "path"},{"file": 52,"line": 322,"col": 14,"name": "path"},{"file": 52,"line": 322,"col": 35,"name": "mode"},{"file": 52,"line": 490,"col": 15,"name": "pid"},{"file": 52,"line": 490,"col": 27,"name": "status"},{"file": 52,"line": 490,"col": 41,"name": "flags"},{"file": 52,"line": 707,"col": 17,"name": "set"},{"file": 52,"line": 707,"col": 33,"name": "sig"},{"file": 58,"line": 88,"col": 20,"name": "func"},{"file": 58,"line": 88,"col": 53,"name": "stack"},{"file": 58,"line": 88,"col": 67,"name": "flags"},{"file": 58,"line": 88,"col": 81,"name": "arg"},{"file": 58,"line": 88,"col": 93,"name": "ptid"},{"file": 58,"line": 88,"col": 105,"name": "tls"},{"file": 58,"line": 88,"col": 117,"name": "ctid"},{"file": 52,"line": 712,"col": 19,"name": "set"},{"file": 52,"line": 712,"col": 41,"name": "sig"},{"file": 52,"line": 178,"col": 15,"name": "special"},{"file": 52,"line": 178,"col": 39,"name": "flags"},{"file": 52,"line": 955,"col": 20,"name": "path"},{"file": 52,"line": 955,"col": 41,"name": "name"},{"file": 52,"line": 146,"col": 16,"name": "path","noalias": true},{"file": 52,"line": 146,"col": 45,"name": "buf_ptr","noalias": true},{"file": 52,"line": 146,"col": 69,"name": "buf_len"},{"file": 52,"line": 125,"col": 18,"name": "fd"},{"file": 52,"line": 125,"col": 27,"name": "dirp"},{"file": 52,"line": 125,"col": 40,"name": "len"},{"file": 52,"line": 142,"col": 24,"name": "fd"},{"file": 52,"line": 142,"col": 33,"name": "wd"},{"file": 52,"line": 931,"col": 17,"name": "path"},{"file": 52,"line": 931,"col": 38,"name": "name"},{"file": 52,"line": 931,"col": 59,"name": "value"},{"file": 52,"line": 931,"col": 73,"name": "size"},{"file": 52,"line": 982,"col": 17,"name": "epoll_fd"},{"file": 52,"line": 982,"col": 32,"name": "op"},{"file": 52,"line": 982,"col": 41,"name": "fd"},{"file": 52,"line": 982,"col": 50,"name": "ev"},{"file": 52,"line": 919,"col": 18,"name": "path"},{"file": 52,"line": 919,"col": 39,"name": "list"},{"file": 52,"line": 919,"col": 52,"name": "size"},{"file": 52,"line": 799,"col": 15,"name": "fd"},{"file": 52,"line": 799,"col": 24,"name": "addr"},{"file": 52,"line": 799,"col": 45,"name": "len"},{"file": 52,"line": 318,"col": 13,"name": "fd"},{"file": 52,"line": 318,"col": 22,"name": "buf"},{"file": 52,"line": 318,"col": 34,"name": "count"},{"file": 52,"line": 318,"col": 48,"name": "offset"},{"file": 52,"line": 759,"col": 16,"name": "fd"},{"file": 52,"line": 759,"col": 25,"name": "msgvec"},{"file": 52,"line": 759,"col": 51,"name": "vlen"},{"file": 52,"line": 759,"col": 62,"name": "flags"},{"file": 52,"line": 555,"col": 14,"name": "gid"},{"file": 52,"line": 1112,"col": 20,"name": "name"},{"file": 52,"line": 1112,"col": 41,"name": "flags"},{"file": 52,"line": 724,"col": 19,"name": "fd"},{"file": 52,"line": 724,"col": 28,"name": "addr","noalias": true},{"file": 52,"line": 724,"col": 53,"name": "len","noalias": true},{"file": 52,"line": 885,"col": 13,"name": "pathname"},{"file": 52,"line": 885,"col": 38,"name": "statbuf"},{"file": 52,"line": 571,"col": 16,"name": "rgid"},{"file": 52,"line": 571,"col": 27,"name": "egid"},{"file": 52,"line": 717,"col": 19,"name": "fd"},{"file": 52,"line": 717,"col": 28,"name": "addr","noalias": true},{"file": 52,"line": 717,"col": 53,"name": "len","noalias": true},{"file": 52,"line": 486,"col": 16,"name": "dirfd"},{"file": 52,"line": 486,"col": 28,"name": "path"},{"file": 52,"line": 486,"col": 49,"name": "flags"},{"file": 52,"line": 855,"col": 14,"name": "fd"},{"file": 52,"line": 855,"col": 23,"name": "addr","noalias": true},{"file": 52,"line": 855,"col": 48,"name": "len","noalias": true},{"file": 52,"line": 134,"col": 21,"name": "flags"},{"file": 52,"line": 901,"col": 13,"name": "dirfd"},{"file": 52,"line": 901,"col": 25,"name": "path"},{"file": 52,"line": 901,"col": 44,"name": "flags"},{"file": 52,"line": 901,"col": 56,"name": "mask"},{"file": 52,"line": 901,"col": 67,"name": "statx_buf"},{"file": 52,"line": 478,"col": 14,"name": "path"},{"file": 52,"line": 210,"col": 16,"name": "address"},{"file": 52,"line": 210,"col": 38,"name": "length"},{"file": 52,"line": 210,"col": 53,"name": "protection"},{"file": 52,"line": 1015,"col": 23,"name": "fd"},{"file": 52,"line": 1015,"col": 32,"name": "curr_value"},{"file": 52,"line": 543,"col": 17,"name": "req"},{"file": 52,"line": 543,"col": 39,"name": "rem"},{"file": 52,"line": 893,"col": 15,"name": "dirfd"},{"file": 52,"line": 893,"col": 27,"name": "path"},{"file": 52,"line": 893,"col": 48,"name": "stat_buf"},{"file": 52,"line": 893,"col": 65,"name": "flags"},{"file": 52,"line": 366,"col": 16,"name": "oldfd"},{"file": 52,"line": 366,"col": 28,"name": "oldpath"},{"file": 52,"line": 366,"col": 50,"name": "newfd"},{"file": 52,"line": 366,"col": 62,"name": "newpath"},{"file": 52,"line": 915,"col": 17,"name": "path"},{"file": 52,"line": 915,"col": 38,"name": "list"},{"file": 52,"line": 915,"col": 51,"name": "size"},{"file": 52,"line": 271,"col": 14,"name": "fd"},{"file": 52,"line": 271,"col": 23,"name": "iov"},{"file": 52,"line": 271,"col": 50,"name": "count"},{"file": 52,"line": 827,"col": 12,"name": "fd"},{"file": 52,"line": 827,"col": 21,"name": "addr"},{"file": 52,"line": 827,"col": 44,"name": "len"},{"file": 52,"line": 1100,"col": 22,"name": "entries"},{"file": 52,"line": 1100,"col": 36,"name": "p"},{"file": 52,"line": 1002,"col": 15,"name": "count"},{"file": 52,"line": 1002,"col": 27,"name": "flags"},{"file": 52,"line": 986,"col": 18,"name": "epoll_fd"},{"file": 52,"line": 986,"col": 33,"name": "events"},{"file": 52,"line": 986,"col": 57,"name": "maxevents"},{"file": 52,"line": 986,"col": 73,"name": "timeout"},{"file": 52,"line": 1039,"col": 13,"name": "uts"},{"file": 61,"line": 170,"col": 16,"name": "deviceType"},{"file": 61,"line": 170,"col": 33,"name": "function"},{"file": 61,"line": 170,"col": 48,"name": "method"},{"file": 61,"line": 170,"col": 70,"name": "access"},{"file": 53,"line": 190,"col": 29,"name": "handle"},{"file": 53,"line": 190,"col": 45,"name": "milliseconds"},{"file": 53,"line": 190,"col": 66,"name": "alertable"},{"file": 53,"line": 952,"col": 19,"name": "hns"},{"file": 53,"line": 269,"col": 4,"name": "file_handle"},{"file": 53,"line": 270,"col": 4,"name": "existing_completion_port"},{"file": 53,"line": 271,"col": 4,"name": "completion_key"},{"file": 53,"line": 272,"col": 4,"name": "concurrent_thread_count"},{"file": 53,"line": 238,"col": 21,"name": "dir_path"},{"file": 53,"line": 238,"col": 43,"name": "find_file_data"},{"file": 53,"line": 674,"col": 4,"name": "af"},{"file": 53,"line": 675,"col": 4,"name": "socket_type"},{"file": 53,"line": 676,"col": 4,"name": "protocol"},{"file": 53,"line": 677,"col": 4,"name": "protocolInfo"},{"file": 53,"line": 678,"col": 4,"name": "g"},{"file": 53,"line": 679,"col": 4,"name": "dwFlags"},{"file": 53,"line": 370,"col": 17,"name": "handle"},{"file": 53,"line": 370,"col": 33,"name": "bytes"},{"file": 53,"line": 893,"col": 19,"name": "hHeap"},{"file": 53,"line": 655,"col": 18,"name": "majorVersion"},{"file": 53,"line": 655,"col": 36,"name": "minorVersion"},{"file": 53,"line": 333,"col": 19,"name": "hObject"},{"file": 53,"line": 765,"col": 19,"name": "lpAddress"},{"file": 53,"line": 765,"col": 39,"name": "dwSize"},{"file": 53,"line": 765,"col": 54,"name": "dwFreeType"},{"file": 53,"line": 154,"col": 28,"name": "h"},{"file": 53,"line": 154,"col": 39,"name": "mask"},{"file": 53,"line": 154,"col": 52,"name": "flags"},{"file": 53,"line": 541,"col": 30,"name": "handle"},{"file": 53,"line": 541,"col": 46,"name": "offset"},{"file": 53,"line": 600,"col": 4,"name": "hFile"},{"file": 53,"line": 601,"col": 4,"name": "buf_ptr"},{"file": 53,"line": 602,"col": 4,"name": "buf_len"},{"file": 53,"line": 603,"col": 4,"name": "flags"},{"file": 53,"line": 467,"col": 18,"name": "old_path"},{"file": 53,"line": 467,"col": 40,"name": "new_path"},{"file": 53,"line": 467,"col": 62,"name": "flags"},{"file": 53,"line": 757,"col": 20,"name": "addr"},{"file": 53,"line": 757,"col": 35,"name": "size"},{"file": 53,"line": 757,"col": 48,"name": "alloc_type"},{"file": 53,"line": 757,"col": 67,"name": "flProtect"},{"file": 53,"line": 427,"col": 4,"name": "sym_link_path"},{"file": 53,"line": 428,"col": 4,"name": "target_path"},{"file": 53,"line": 429,"col": 4,"name": "flags"},{"file": 53,"line": 473,"col": 19,"name": "old_path"},{"file": 53,"line": 473,"col": 45,"name": "new_path"},{"file": 53,"line": 473,"col": 71,"name": "flags"},{"file": 53,"line": 343,"col": 16,"name": "in_hFile"},{"file": 53,"line": 343,"col": 34,"name": "buffer"},{"file": 53,"line": 256,"col": 20,"name": "handle"},{"file": 53,"line": 256,"col": 36,"name": "find_file_data"},{"file": 53,"line": 962,"col": 29,"name": "ft"},{"file": 53,"line": 508,"col": 23,"name": "dir_path"},{"file": 53,"line": 91,"col": 18,"name": "rd"},{"file": 53,"line": 91,"col": 31,"name": "wr"},{"file": 53,"line": 91,"col": 44,"name": "sattr"},{"file": 53,"line": 1001,"col": 36,"name": "s"},{"file": 53,"line": 1001,"col": 51,"name": "suffix","comptime": true},{"file": 53,"line": 392,"col": 27,"name": "buffer"},{"file": 53,"line": 513,"col": 24,"name": "dir_path_w"},{"file": 53,"line": 642,"col": 26,"name": "lpFileName"},{"file": 53,"line": 957,"col": 17,"name": "ns"},{"file": 53,"line": 885,"col": 27,"name": "InitOnce"},{"file": 53,"line": 885,"col": 49,"name": "InitFn"},{"file": 53,"line": 885,"col": 71,"name": "Parameter"},{"file": 53,"line": 885,"col": 92,"name": "Context"},{"file": 53,"line": 980,"col": 28,"name": "s"},{"file": 53,"line": 863,"col": 19,"name": "hModule"},{"file": 53,"line": 785,"col": 31,"name": "penv"},{"file": 53,"line": 735,"col": 26,"name": "hModule"},{"file": 53,"line": 735,"col": 45,"name": "buf_ptr"},{"file": 53,"line": 735,"col": 62,"name": "buf_len"},{"file": 53,"line": 141,"col": 27,"name": "h"},{"file": 53,"line": 141,"col": 38,"name": "overlapped"},{"file": 53,"line": 141,"col": 63,"name": "wait"},{"file": 53,"line": 487,"col": 23,"name": "pathname"},{"file": 53,"line": 487,"col": 45,"name": "attrs"},{"file": 53,"line": 705,"col": 4,"name": "s"},{"file": 53,"line": 706,"col": 4,"name": "dwIoControlCode"},{"file": 53,"line": 707,"col": 4,"name": "inBuffer"},{"file": 53,"line": 708,"col": 4,"name": "outBuffer"},{"file": 53,"line": 709,"col": 4,"name": "overlapped"},{"file": 53,"line": 710,"col": 4,"name": "completionRoutine"},{"file": 53,"line": 747,"col": 24,"name": "hProcess"},{"file": 53,"line": 747,"col": 42,"name": "uExitCode"},{"file": 53,"line": 556,"col": 32,"name": "handle"},{"file": 53,"line": 556,"col": 48,"name": "offset"},{"file": 53,"line": 985,"col": 24,"name": "s"},{"file": 53,"line": 286,"col": 4,"name": "completion_port"},{"file": 53,"line": 287,"col": 4,"name": "bytes_transferred_count"},{"file": 53,"line": 288,"col": 4,"name": "completion_key"},{"file": 53,"line": 289,"col": 4,"name": "lpOverlapped"},{"file": 53,"line": 116,"col": 4,"name": "h"},{"file": 53,"line": 117,"col": 4,"name": "ioControlCode"},{"file": 53,"line": 118,"col": 4,"name": "in"},{"file": 53,"line": 119,"col": 4,"name": "out"},{"file": 53,"line": 120,"col": 4,"name": "overlapped"},{"file": 53,"line": 167,"col": 20,"name": "output"},{"file": 53,"line": 637,"col": 25,"name": "filename"},{"file": 53,"line": 852,"col": 20,"name": "lpLibFileName"},{"file": 53,"line": 1034,"col": 23,"name": "err"},{"file": 53,"line": 337,"col": 17,"name": "hFindFile"},{"file": 53,"line": 492,"col": 24,"name": "pathname"},{"file": 53,"line": 492,"col": 50,"name": "attrs"},{"file": 53,"line": 976,"col": 27,"name": "s"},{"file": 53,"line": 694,"col": 19,"name": "s"},{"file": 53,"line": 1047,"col": 26,"name": "err"},{"file": 53,"line": 578,"col": 36,"name": "handle"},{"file": 53,"line": 771,"col": 31,"name": "hConsoleOutput"},{"file": 53,"line": 771,"col": 55,"name": "wAttributes"},{"file": 53,"line": 417,"col": 4,"name": "sym_link_path"},{"file": 53,"line": 418,"col": 4,"name": "target_path"},{"file": 53,"line": 419,"col": 4,"name": "flags"},{"file": 53,"line": 202,"col": 32,"name": "handles"},{"file": 53,"line": 202,"col": 57,"name": "waitAll"},{"file": 53,"line": 202,"col": 72,"name": "milliseconds"},{"file": 53,"line": 202,"col": 93,"name": "alertable"},{"file": 53,"line": 968,"col": 29,"name": "ns"},{"file": 53,"line": 889,"col": 16,"name": "hHeap"},{"file": 53,"line": 889,"col": 31,"name": "dwFlags"},{"file": 53,"line": 889,"col": 47,"name": "lpMem"},{"file": 53,"line": 104,"col": 22,"name": "attributes"},{"file": 53,"line": 104,"col": 57,"name": "nameW"},{"file": 53,"line": 104,"col": 80,"name": "flags"},{"file": 53,"line": 104,"col": 94,"name": "desired_access"},{"file": 53,"line": 446,"col": 18,"name": "filename"},{"file": 53,"line": 306,"col": 4,"name": "completion_port"},{"file": 53,"line": 307,"col": 4,"name": "bytes_transferred_count"},{"file": 53,"line": 308,"col": 4,"name": "lpCompletionKey"},{"file": 53,"line": 309,"col": 4,"name": "lpOverlapped"},{"file": 53,"line": 310,"col": 4,"name": "dwMilliseconds"},{"file": 53,"line": 528,"col": 20,"name": "handle_id"},{"file": 53,"line": 1053,"col": 24,"name": "status"},{"file": 53,"line": 451,"col": 19,"name": "filename"},{"file": 53,"line": 794,"col": 31,"name": "lpName"},{"file": 53,"line": 794,"col": 47,"name": "lpBuffer"},{"file": 53,"line": 794,"col": 65,"name": "nSize"},{"file": 53,"line": 99,"col": 21,"name": "attributes"},{"file": 53,"line": 99,"col": 56,"name": "name"},{"file": 53,"line": 99,"col": 74,"name": "flags"},{"file": 53,"line": 99,"col": 88,"name": "desired_access"},{"file": 53,"line": 915,"col": 4,"name": "hFile"},{"file": 53,"line": 916,"col": 4,"name": "lpCreationTime"},{"file": 53,"line": 917,"col": 4,"name": "lpLastAccessTime"},{"file": 53,"line": 918,"col": 4,"name": "lpLastWriteTime"},{"file": 53,"line": 62,"col": 4,"name": "file_path_w"},{"file": 53,"line": 63,"col": 4,"name": "desired_access"},{"file": 53,"line": 64,"col": 4,"name": "share_mode"},{"file": 53,"line": 65,"col": 4,"name": "lpSecurityAttributes"},{"file": 53,"line": 66,"col": 4,"name": "creation_disposition"},{"file": 53,"line": 67,"col": 4,"name": "flags_and_attrs"},{"file": 53,"line": 68,"col": 4,"name": "hTemplateFile"},{"file": 53,"line": 621,"col": 21,"name": "hFile"},{"file": 53,"line": 900,"col": 4,"name": "hFile"},{"file": 53,"line": 567,"col": 28,"name": "handle"},{"file": 53,"line": 567,"col": 44,"name": "offset"},{"file": 53,"line": 49,"col": 4,"name": "file_path"},{"file": 53,"line": 50,"col": 4,"name": "desired_access"},{"file": 53,"line": 51,"col": 4,"name": "share_mode"},{"file": 53,"line": 52,"col": 4,"name": "lpSecurityAttributes"},{"file": 53,"line": 53,"col": 4,"name": "creation_disposition"},{"file": 53,"line": 54,"col": 4,"name": "flags_and_attrs"},{"file": 53,"line": 55,"col": 4,"name": "hTemplateFile"},{"file": 53,"line": 813,"col": 4,"name": "lpApplicationName"},{"file": 53,"line": 814,"col": 4,"name": "lpCommandLine"},{"file": 53,"line": 815,"col": 4,"name": "lpProcessAttributes"},{"file": 53,"line": 816,"col": 4,"name": "lpThreadAttributes"},{"file": 53,"line": 817,"col": 4,"name": "bInheritHandles"},{"file": 53,"line": 818,"col": 4,"name": "dwCreationFlags"},{"file": 53,"line": 819,"col": 4,"name": "lpEnvironment"},{"file": 53,"line": 820,"col": 4,"name": "lpCurrentDirectory"},{"file": 53,"line": 821,"col": 4,"name": "lpStartupInfo"},{"file": 53,"line": 822,"col": 4,"name": "lpProcessInformation"},{"file": 53,"line": 1028,"col": 21,"name": "p"},{"file": 53,"line": 1028,"col": 34,"name": "s"},{"file": 54,"line": 88,"col": 22,"name": "T","comptime": true},{"file": 54,"line": 88,"col": 40,"name": "ptr"},{"file": 54,"line": 28,"col": 22,"name": "T","comptime": true},{"file": 54,"line": 28,"col": 40,"name": "ptr"},{"file": 54,"line": 132,"col": 21,"name": "T","comptime": true},{"file": 54,"line": 132,"col": 39,"name": "encoded"},{"file": 54,"line": 161,"col": 25,"name": "T","comptime": true},{"file": 54,"line": 161,"col": 43,"name": "N","comptime": true},{"file": 54,"line": 161,"col": 62,"name": "encoded"},{"file": 54,"line": 122,"col": 28,"name": "T","comptime": true},{"file": 54,"line": 122,"col": 46,"name": "encoded"},{"file": 54,"line": 141,"col": 21,"name": "T","comptime": true},{"file": 54,"line": 141,"col": 39,"name": "encoded"},{"file": 54,"line": 150,"col": 25,"name": "T","comptime": true},{"file": 54,"line": 150,"col": 43,"name": "N","comptime": true},{"file": 54,"line": 150,"col": 62,"name": "encoded"},{"file": 54,"line": 127,"col": 28,"name": "T","comptime": true},{"file": 54,"line": 127,"col": 46,"name": "encoded"},{"file": 23,"line": 1192,"col": 23,"name": "lhs"},{"file": 23,"line": 1192,"col": 41,"name": "rhs"},{"file": 23,"line": 1188,"col": 15,"name": "self"},{"file": 30,"line": 485,"col": 21,"name": "self"},{"file": 30,"line": 485,"col": 33,"name": "stream"},{"file": 30,"line": 471,"col": 20,"name": "self"},{"file": 30,"line": 471,"col": 32,"name": "coff_ptr"},{"file": 30,"line": 471,"col": 54,"name": "file_name"},{"file": 30,"line": 479,"col": 25,"name": "self"},{"file": 30,"line": 479,"col": 37,"name": "id"},{"file": 30,"line": 496,"col": 16,"name": "self"},{"file": 30,"line": 496,"col": 28,"name": "allocator"},{"file": 30,"line": 496,"col": 55,"name": "file"},{"file": 31,"line": 184,"col": 24,"name": "self"},{"file": 31,"line": 215,"col": 22,"name": "self"},{"file": 31,"line": 215,"col": 35,"name": "name","comptime": true},{"file": 31,"line": 43,"col": 16,"name": "allocator"},{"file": 31,"line": 43,"col": 43,"name": "in_file"},{"file": 31,"line": 122,"col": 22,"name": "self"},{"file": 31,"line": 122,"col": 35,"name": "buffer"},{"file": 31,"line": 55,"col": 22,"name": "self"},{"file": 31,"line": 94,"col": 26,"name": "self"},{"file": 31,"line": 94,"col": 39,"name": "file_stream"},{"file": 55,"line": 55,"col": 17,"name": "hasher"},{"file": 55,"line": 55,"col": 30,"name": "key"},{"file": 55,"line": 55,"col": 40,"name": "strat","comptime": true},{"file": 55,"line": 23,"col": 19,"name": "hasher"},{"file": 55,"line": 23,"col": 32,"name": "key"},{"file": 55,"line": 23,"col": 42,"name": "strat","comptime": true},{"file": 55,"line": 199,"col": 16,"name": "key"},{"file": 55,"line": 185,"col": 12,"name": "key"},{"file": 55,"line": 206,"col": 25,"name": "key"},{"file": 55,"line": 192,"col": 19,"name": "key"},{"file": 56,"line": 148,"col": 19,"name": "path_w"},{"file": 56,"line": 186,"col": 26,"name": "path_c"},{"file": 56,"line": 205,"col": 23,"name": "path"},{"file": 56,"line": 749,"col": 15,"name": "path"},{"file": 56,"line": 997,"col": 16,"name": "allocator"},{"file": 56,"line": 997,"col": 39,"name": "from"},{"file": 56,"line": 997,"col": 57,"name": "to"},{"file": 56,"line": 603,"col": 20,"name": "allocator"},{"file": 56,"line": 603,"col": 43,"name": "paths"},{"file": 56,"line": 910,"col": 23,"name": "path"},{"file": 56,"line": 757,"col": 22,"name": "path"},{"file": 56,"line": 167,"col": 25,"name": "path"},{"file": 56,"line": 881,"col": 16,"name": "path"},{"file": 56,"line": 791,"col": 20,"name": "path"},{"file": 56,"line": 262,"col": 24,"name": "path"},{"file": 56,"line": 1005,"col": 23,"name": "allocator"},{"file": 56,"line": 1005,"col": 46,"name": "from"},{"file": 56,"line": 1005,"col": 64,"name": "to"},{"file": 56,"line": 140,"col": 18,"name": "path"},{"file": 56,"line": 80,"col": 19,"name": "allocator"},{"file": 56,"line": 80,"col": 42,"name": "paths"},{"file": 56,"line": 341,"col": 22,"name": "path"},{"file": 56,"line": 422,"col": 22,"name": "allocator"},{"file": 56,"line": 422,"col": 45,"name": "paths"},{"file": 56,"line": 349,"col": 29,"name": "path"},{"file": 56,"line": 25,"col": 13,"name": "byte"},{"file": 56,"line": 1078,"col": 21,"name": "allocator"},{"file": 56,"line": 1078,"col": 44,"name": "from"},{"file": 56,"line": 1078,"col": 62,"name": "to"},{"file": 56,"line": 406,"col": 15,"name": "allocator"},{"file": 56,"line": 406,"col": 38,"name": "paths"},{"file": 56,"line": 889,"col": 21,"name": "path"},{"file": 56,"line": 394,"col": 22,"name": "s1"},{"file": 56,"line": 394,"col": 38,"name": "s2"},{"file": 56,"line": 246,"col": 23,"name": "path"},{"file": 56,"line": 246,"col": 41,"name": "expected_result"},{"file": 56,"line": 743,"col": 20,"name": "paths"},{"file": 56,"line": 989,"col": 23,"name": "input"},{"file": 56,"line": 989,"col": 42,"name": "expected_output"},{"file": 56,"line": 873,"col": 22,"name": "input"},{"file": 56,"line": 873,"col": 41,"name": "expected_output"},{"file": 56,"line": 242,"col": 25,"name": "path"},{"file": 56,"line": 242,"col": 43,"name": "expected_result"},{"file": 56,"line": 981,"col": 16,"name": "input"},{"file": 56,"line": 981,"col": 35,"name": "expected_output"},{"file": 56,"line": 97,"col": 17,"name": "paths"},{"file": 56,"line": 97,"col": 44,"name": "expected"},{"file": 56,"line": 865,"col": 20,"name": "input"},{"file": 56,"line": 865,"col": 39,"name": "expected_output"},{"file": 56,"line": 353,"col": 26,"name": "ns1"},{"file": 56,"line": 353,"col": 43,"name": "ns2"},{"file": 56,"line": 1172,"col": 23,"name": "from"},{"file": 56,"line": 1172,"col": 41,"name": "to"},{"file": 56,"line": 1172,"col": 57,"name": "expected_output"},{"file": 56,"line": 364,"col": 26,"name": "kind"},{"file": 56,"line": 364,"col": 50,"name": "p1"},{"file": 56,"line": 364,"col": 66,"name": "p2"},{"file": 56,"line": 387,"col": 14,"name": "byte"},{"file": 56,"line": 90,"col": 19,"name": "paths"},{"file": 56,"line": 90,"col": 46,"name": "expected"},{"file": 56,"line": 739,"col": 22,"name": "paths"},{"file": 56,"line": 1167,"col": 21,"name": "from"},{"file": 56,"line": 1167,"col": 39,"name": "to"},{"file": 56,"line": 1167,"col": 55,"name": "expected_output"},{"file": 56,"line": 985,"col": 21,"name": "input"},{"file": 56,"line": 985,"col": 40,"name": "expected_output"}],"files": ["/home/felix/projects/softrenderlib/zig-gamedev-lib/src/lib.zig","/home/felix/.cache/zig/stage1/builtin/94WWFmrd2bEkfYhKOQQAtbA0E5wZxQRaVPS2M34cf1bk_f7gi9CEZYA62I8Exijj/builtin.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/std.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/special/test_runner.zig","/home/felix/projects/softrenderlib/zig-gamedev-lib/src/netbpm.zig","/home/felix/projects/softrenderlib/zig-gamedev-lib/src/math.zig","/home/felix/projects/softrenderlib/zig-gamedev-lib/src/color.zig","/home/felix/projects/softrenderlib/zig-gamedev-lib/src/math3d.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/array_list.zig","/home/felix/projects/softrenderlib/zig-gamedev-lib/src/pcx.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/atomic/queue.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/target.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/hash_map.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/linked_list.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/event/fs.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/io/in_stream.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/io/out_stream.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/atomic/stack.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/io/seekable_stream.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/builtin.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/mem.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/debug.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/dwarf.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/event.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/elf.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/io.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/fmt.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/atomic.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/pdb.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/coff.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/hash.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/meta.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/fs.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/heap.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/start.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/time.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/process.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/macho.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/fs/file.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/mutex.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/bits/linux/x86_64.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/reset_event.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/progress.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/hash/wyhash.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/event/loop.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/meta/trait.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/thread.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/bits/linux.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/bits/linux/errno-generic.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/bits.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/linux.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/windows.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/debug/leb128.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/hash/auto_hash.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/fs/path.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/spinlock.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/linux/x86_64.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/linux/tls.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/linux/vdso.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/os/windows/bits.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/sqrt.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/cos.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/sin.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/fabs.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/tan.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/isnan.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/isinf.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/nan.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/floor.zig","/home/felix/software/zig-linux-x86_64-0.5.0+27b290f31/lib/zig/std/math/log2.zig"]};