// this file is a horrible mess.
// please don't look!

// it was auto-generated by zig translate-c and
// postprocessed by hand and with several "search-and-replace"-actions

// usage example:
// usingnamespace @import("xq3d").gles2;
// 
// pub fn main() void {
//     …
//     load_gles2(SDL_GL_GetProcAddress);
//     load_gles2Extensions(SDL_GL_GetProcAddress);
//     …
//     var err = glGetError();
//     …
// }

pub const LoaderFunction = extern fn ([*c]const u8) ?*c_void;

pub export fn load_gles2(gles2_get_proc_address: LoaderFunction) void {

    glActiveTexture_impl = @ptrCast(PFNGLACTIVETEXTUREPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glActiveTexture")));
    glAttachShader_impl = @ptrCast(PFNGLATTACHSHADERPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) void), gles2_get_proc_address(c"glAttachShader")));
    glBindAttribLocation_impl = @ptrCast(PFNGLBINDATTRIBLOCATIONPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, [*c]const GLchar) void), gles2_get_proc_address(c"glBindAttribLocation")));
    glBindBuffer_impl = @ptrCast(PFNGLBINDBUFFERPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glBindBuffer")));
    glBindFramebuffer_impl = @ptrCast(PFNGLBINDFRAMEBUFFERPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glBindFramebuffer")));
    glBindRenderbuffer_impl = @ptrCast(PFNGLBINDRENDERBUFFERPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glBindRenderbuffer")));
    glBindTexture_impl = @ptrCast(PFNGLBINDTEXTUREPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glBindTexture")));
    glBlendColor_impl = @ptrCast(PFNGLBLENDCOLORPROC, @alignCast(@alignOf(extern fn (GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glBlendColor")));
    glBlendEquation_impl = @ptrCast(PFNGLBLENDEQUATIONPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glBlendEquation")));
    glBlendEquationSeparate_impl = @ptrCast(PFNGLBLENDEQUATIONSEPARATEPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum) void), gles2_get_proc_address(c"glBlendEquationSeparate")));
    glBlendFunc_impl = @ptrCast(PFNGLBLENDFUNCPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum) void), gles2_get_proc_address(c"glBlendFunc")));
    glBlendFuncSeparate_impl = @ptrCast(PFNGLBLENDFUNCSEPARATEPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLenum) void), gles2_get_proc_address(c"glBlendFuncSeparate")));
    glBufferData_impl = @ptrCast(PFNGLBUFFERDATAPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizeiptr, ?*const c_void, GLenum) void), gles2_get_proc_address(c"glBufferData")));
    glBufferSubData_impl = @ptrCast(PFNGLBUFFERSUBDATAPROC, @alignCast(@alignOf(extern fn (GLenum, GLintptr, GLsizeiptr, ?*const c_void) void), gles2_get_proc_address(c"glBufferSubData")));
    glCheckFramebufferStatus_impl = @ptrCast(PFNGLCHECKFRAMEBUFFERSTATUSPROC, @alignCast(@alignOf(extern fn (GLenum) GLenum), gles2_get_proc_address(c"glCheckFramebufferStatus")));
    glClear_impl = @ptrCast(PFNGLCLEARPROC, @alignCast(@alignOf(extern fn (GLbitfield) void), gles2_get_proc_address(c"glClear")));
    glClearColor_impl = @ptrCast(PFNGLCLEARCOLORPROC, @alignCast(@alignOf(extern fn (GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glClearColor")));
    glClearDepthf_impl = @ptrCast(PFNGLCLEARDEPTHFPROC, @alignCast(@alignOf(extern fn (GLfloat) void), gles2_get_proc_address(c"glClearDepthf")));
    glClearStencil_impl = @ptrCast(PFNGLCLEARSTENCILPROC, @alignCast(@alignOf(extern fn (GLint) void), gles2_get_proc_address(c"glClearStencil")));
    glColorMask_impl = @ptrCast(PFNGLCOLORMASKPROC, @alignCast(@alignOf(extern fn (GLboolean, GLboolean, GLboolean, GLboolean) void), gles2_get_proc_address(c"glColorMask")));
    glCompileShader_impl = @ptrCast(PFNGLCOMPILESHADERPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glCompileShader")));
    glCompressedTexImage2D_impl = @ptrCast(PFNGLCOMPRESSEDTEXIMAGE2DPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void), gles2_get_proc_address(c"glCompressedTexImage2D")));
    glCompressedTexSubImage2D_impl = @ptrCast(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void), gles2_get_proc_address(c"glCompressedTexSubImage2D")));
    glCopyTexImage2D_impl = @ptrCast(PFNGLCOPYTEXIMAGE2DPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) void), gles2_get_proc_address(c"glCopyTexImage2D")));
    glCopyTexSubImage2D_impl = @ptrCast(PFNGLCOPYTEXSUBIMAGE2DPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glCopyTexSubImage2D")));
    glCreateProgram_impl = @ptrCast(PFNGLCREATEPROGRAMPROC, @alignCast(@alignOf(extern fn () GLuint), gles2_get_proc_address(c"glCreateProgram")));
    glCreateShader_impl = @ptrCast(PFNGLCREATESHADERPROC, @alignCast(@alignOf(extern fn (GLenum) GLuint), gles2_get_proc_address(c"glCreateShader")));
    glCullFace_impl = @ptrCast(PFNGLCULLFACEPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glCullFace")));
    glDeleteBuffers_impl = @ptrCast(PFNGLDELETEBUFFERSPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteBuffers")));
    glDeleteFramebuffers_impl = @ptrCast(PFNGLDELETEFRAMEBUFFERSPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteFramebuffers")));
    glDeleteProgram_impl = @ptrCast(PFNGLDELETEPROGRAMPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glDeleteProgram")));
    glDeleteRenderbuffers_impl = @ptrCast(PFNGLDELETERENDERBUFFERSPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteRenderbuffers")));
    glDeleteShader_impl = @ptrCast(PFNGLDELETESHADERPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glDeleteShader")));
    glDeleteTextures_impl = @ptrCast(PFNGLDELETETEXTURESPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteTextures")));
    glDepthFunc_impl = @ptrCast(PFNGLDEPTHFUNCPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glDepthFunc")));
    glDepthMask_impl = @ptrCast(PFNGLDEPTHMASKPROC, @alignCast(@alignOf(extern fn (GLboolean) void), gles2_get_proc_address(c"glDepthMask")));
    glDepthRangef_impl = @ptrCast(PFNGLDEPTHRANGEFPROC, @alignCast(@alignOf(extern fn (GLfloat, GLfloat) void), gles2_get_proc_address(c"glDepthRangef")));
    glDetachShader_impl = @ptrCast(PFNGLDETACHSHADERPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) void), gles2_get_proc_address(c"glDetachShader")));
    glDisable_impl = @ptrCast(PFNGLDISABLEPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glDisable")));
    glDisableVertexAttribArray_impl = @ptrCast(PFNGLDISABLEVERTEXATTRIBARRAYPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glDisableVertexAttribArray")));
    glDrawArrays_impl = @ptrCast(PFNGLDRAWARRAYSPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLsizei) void), gles2_get_proc_address(c"glDrawArrays")));
    glDrawElements_impl = @ptrCast(PFNGLDRAWELEMENTSPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glDrawElements")));
    glEnable_impl = @ptrCast(PFNGLENABLEPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glEnable")));
    glEnableVertexAttribArray_impl = @ptrCast(PFNGLENABLEVERTEXATTRIBARRAYPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glEnableVertexAttribArray")));
    glFinish_impl = @ptrCast(PFNGLFINISHPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glFinish")));
    glFlush_impl = @ptrCast(PFNGLFLUSHPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glFlush")));
    glFramebufferRenderbuffer_impl = @ptrCast(PFNGLFRAMEBUFFERRENDERBUFFERPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLuint) void), gles2_get_proc_address(c"glFramebufferRenderbuffer")));
    glFramebufferTexture2D_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTURE2DPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLuint, GLint) void), gles2_get_proc_address(c"glFramebufferTexture2D")));
    glFrontFace_impl = @ptrCast(PFNGLFRONTFACEPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glFrontFace")));
    glGenBuffers_impl = @ptrCast(PFNGLGENBUFFERSPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenBuffers")));
    glGenerateMipmap_impl = @ptrCast(PFNGLGENERATEMIPMAPPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glGenerateMipmap")));
    glGenFramebuffers_impl = @ptrCast(PFNGLGENFRAMEBUFFERSPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenFramebuffers")));
    glGenRenderbuffers_impl = @ptrCast(PFNGLGENRENDERBUFFERSPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenRenderbuffers")));
    glGenTextures_impl = @ptrCast(PFNGLGENTEXTURESPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenTextures")));
    glGetActiveAttrib_impl = @ptrCast(PFNGLGETACTIVEATTRIBPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) void), gles2_get_proc_address(c"glGetActiveAttrib")));
    glGetActiveUniform_impl = @ptrCast(PFNGLGETACTIVEUNIFORMPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) void), gles2_get_proc_address(c"glGetActiveUniform")));
    glGetAttachedShaders_impl = @ptrCast(PFNGLGETATTACHEDSHADERSPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGetAttachedShaders")));
    glGetAttribLocation_impl = @ptrCast(PFNGLGETATTRIBLOCATIONPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLchar) GLint), gles2_get_proc_address(c"glGetAttribLocation")));
    glGetBooleanv_impl = @ptrCast(PFNGLGETBOOLEANVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]GLboolean) void), gles2_get_proc_address(c"glGetBooleanv")));
    glGetBufferParameteriv_impl = @ptrCast(PFNGLGETBUFFERPARAMETERIVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetBufferParameteriv")));
    glGetError_impl = @ptrCast(PFNGLGETERRORPROC, @alignCast(@alignOf(extern fn () GLenum), gles2_get_proc_address(c"glGetError")));
    glGetFloatv_impl = @ptrCast(PFNGLGETFLOATVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]GLfloat) void), gles2_get_proc_address(c"glGetFloatv")));
    glGetFramebufferAttachmentParameteriv_impl = @ptrCast(PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetFramebufferAttachmentParameteriv")));
    glGetIntegerv_impl = @ptrCast(PFNGLGETINTEGERVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetIntegerv")));
    glGetProgramiv_impl = @ptrCast(PFNGLGETPROGRAMIVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetProgramiv")));
    glGetProgramInfoLog_impl = @ptrCast(PFNGLGETPROGRAMINFOLOGPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetProgramInfoLog")));
    glGetRenderbufferParameteriv_impl = @ptrCast(PFNGLGETRENDERBUFFERPARAMETERIVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetRenderbufferParameteriv")));
    glGetShaderiv_impl = @ptrCast(PFNGLGETSHADERIVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetShaderiv")));
    glGetShaderInfoLog_impl = @ptrCast(PFNGLGETSHADERINFOLOGPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetShaderInfoLog")));
    glGetShaderPrecisionFormat_impl = @ptrCast(PFNGLGETSHADERPRECISIONFORMATPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLint, [*c]GLint) void), gles2_get_proc_address(c"glGetShaderPrecisionFormat")));
    glGetShaderSource_impl = @ptrCast(PFNGLGETSHADERSOURCEPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetShaderSource")));
    glGetString_impl = @ptrCast(PFNGLGETSTRINGPROC, @alignCast(@alignOf(extern fn (GLenum) [*c]const GLubyte), gles2_get_proc_address(c"glGetString")));
    glGetTexParameterfv_impl = @ptrCast(PFNGLGETTEXPARAMETERFVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLfloat) void), gles2_get_proc_address(c"glGetTexParameterfv")));
    glGetTexParameteriv_impl = @ptrCast(PFNGLGETTEXPARAMETERIVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetTexParameteriv")));
    glGetUniformfv_impl = @ptrCast(PFNGLGETUNIFORMFVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, [*c]GLfloat) void), gles2_get_proc_address(c"glGetUniformfv")));
    glGetUniformiv_impl = @ptrCast(PFNGLGETUNIFORMIVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, [*c]GLint) void), gles2_get_proc_address(c"glGetUniformiv")));
    glGetUniformLocation_impl = @ptrCast(PFNGLGETUNIFORMLOCATIONPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLchar) GLint), gles2_get_proc_address(c"glGetUniformLocation")));
    glGetVertexAttribfv_impl = @ptrCast(PFNGLGETVERTEXATTRIBFVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLfloat) void), gles2_get_proc_address(c"glGetVertexAttribfv")));
    glGetVertexAttribiv_impl = @ptrCast(PFNGLGETVERTEXATTRIBIVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetVertexAttribiv")));
    glGetVertexAttribPointerv_impl = @ptrCast(PFNGLGETVERTEXATTRIBPOINTERVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c](?*c_void)) void), gles2_get_proc_address(c"glGetVertexAttribPointerv")));
    glHint_impl = @ptrCast(PFNGLHINTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum) void), gles2_get_proc_address(c"glHint")));
    glIsBuffer_impl = @ptrCast(PFNGLISBUFFERPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsBuffer")));
    glIsEnabled_impl = @ptrCast(PFNGLISENABLEDPROC, @alignCast(@alignOf(extern fn (GLenum) GLboolean), gles2_get_proc_address(c"glIsEnabled")));
    glIsFramebuffer_impl = @ptrCast(PFNGLISFRAMEBUFFERPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsFramebuffer")));
    glIsProgram_impl = @ptrCast(PFNGLISPROGRAMPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsProgram")));
    glIsRenderbuffer_impl = @ptrCast(PFNGLISRENDERBUFFERPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsRenderbuffer")));
    glIsShader_impl = @ptrCast(PFNGLISSHADERPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsShader")));
    glIsTexture_impl = @ptrCast(PFNGLISTEXTUREPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsTexture")));
    glLineWidth_impl = @ptrCast(PFNGLLINEWIDTHPROC, @alignCast(@alignOf(extern fn (GLfloat) void), gles2_get_proc_address(c"glLineWidth")));
    glLinkProgram_impl = @ptrCast(PFNGLLINKPROGRAMPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glLinkProgram")));
    glPixelStorei_impl = @ptrCast(PFNGLPIXELSTOREIPROC, @alignCast(@alignOf(extern fn (GLenum, GLint) void), gles2_get_proc_address(c"glPixelStorei")));
    glPolygonOffset_impl = @ptrCast(PFNGLPOLYGONOFFSETPROC, @alignCast(@alignOf(extern fn (GLfloat, GLfloat) void), gles2_get_proc_address(c"glPolygonOffset")));
    glReadPixels_impl = @ptrCast(PFNGLREADPIXELSPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) void), gles2_get_proc_address(c"glReadPixels")));
    glReleaseShaderCompiler_impl = @ptrCast(PFNGLRELEASESHADERCOMPILERPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glReleaseShaderCompiler")));
    glRenderbufferStorage_impl = @ptrCast(PFNGLRENDERBUFFERSTORAGEPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glRenderbufferStorage")));
    glSampleCoverage_impl = @ptrCast(PFNGLSAMPLECOVERAGEPROC, @alignCast(@alignOf(extern fn (GLfloat, GLboolean) void), gles2_get_proc_address(c"glSampleCoverage")));
    glScissor_impl = @ptrCast(PFNGLSCISSORPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glScissor")));
    glShaderBinary_impl = @ptrCast(PFNGLSHADERBINARYPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint, GLenum, ?*const c_void, GLsizei) void), gles2_get_proc_address(c"glShaderBinary")));
    glShaderSource_impl = @ptrCast(PFNGLSHADERSOURCEPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const ([*c]const GLchar), [*c]const GLint) void), gles2_get_proc_address(c"glShaderSource")));
    glStencilFunc_impl = @ptrCast(PFNGLSTENCILFUNCPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLuint) void), gles2_get_proc_address(c"glStencilFunc")));
    glStencilFuncSeparate_impl = @ptrCast(PFNGLSTENCILFUNCSEPARATEPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLint, GLuint) void), gles2_get_proc_address(c"glStencilFuncSeparate")));
    glStencilMask_impl = @ptrCast(PFNGLSTENCILMASKPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glStencilMask")));
    glStencilMaskSeparate_impl = @ptrCast(PFNGLSTENCILMASKSEPARATEPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glStencilMaskSeparate")));
    glStencilOp_impl = @ptrCast(PFNGLSTENCILOPPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum) void), gles2_get_proc_address(c"glStencilOp")));
    glStencilOpSeparate_impl = @ptrCast(PFNGLSTENCILOPSEPARATEPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLenum) void), gles2_get_proc_address(c"glStencilOpSeparate")));
    glTexImage2D_impl = @ptrCast(PFNGLTEXIMAGE2DPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glTexImage2D")));
    glTexParameterf_impl = @ptrCast(PFNGLTEXPARAMETERFPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLfloat) void), gles2_get_proc_address(c"glTexParameterf")));
    glTexParameterfv_impl = @ptrCast(PFNGLTEXPARAMETERFVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glTexParameterfv")));
    glTexParameteri_impl = @ptrCast(PFNGLTEXPARAMETERIPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLint) void), gles2_get_proc_address(c"glTexParameteri")));
    glTexParameteriv_impl = @ptrCast(PFNGLTEXPARAMETERIVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]const GLint) void), gles2_get_proc_address(c"glTexParameteriv")));
    glTexSubImage2D_impl = @ptrCast(PFNGLTEXSUBIMAGE2DPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glTexSubImage2D")));
    glUniform1f_impl = @ptrCast(PFNGLUNIFORM1FPROC, @alignCast(@alignOf(extern fn (GLint, GLfloat) void), gles2_get_proc_address(c"glUniform1f")));
    glUniform1fv_impl = @ptrCast(PFNGLUNIFORM1FVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniform1fv")));
    glUniform1i_impl = @ptrCast(PFNGLUNIFORM1IPROC, @alignCast(@alignOf(extern fn (GLint, GLint) void), gles2_get_proc_address(c"glUniform1i")));
    glUniform1iv_impl = @ptrCast(PFNGLUNIFORM1IVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glUniform1iv")));
    glUniform2f_impl = @ptrCast(PFNGLUNIFORM2FPROC, @alignCast(@alignOf(extern fn (GLint, GLfloat, GLfloat) void), gles2_get_proc_address(c"glUniform2f")));
    glUniform2fv_impl = @ptrCast(PFNGLUNIFORM2FVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniform2fv")));
    glUniform2i_impl = @ptrCast(PFNGLUNIFORM2IPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLint) void), gles2_get_proc_address(c"glUniform2i")));
    glUniform2iv_impl = @ptrCast(PFNGLUNIFORM2IVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glUniform2iv")));
    glUniform3f_impl = @ptrCast(PFNGLUNIFORM3FPROC, @alignCast(@alignOf(extern fn (GLint, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glUniform3f")));
    glUniform3fv_impl = @ptrCast(PFNGLUNIFORM3FVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniform3fv")));
    glUniform3i_impl = @ptrCast(PFNGLUNIFORM3IPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLint, GLint) void), gles2_get_proc_address(c"glUniform3i")));
    glUniform3iv_impl = @ptrCast(PFNGLUNIFORM3IVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glUniform3iv")));
    glUniform4f_impl = @ptrCast(PFNGLUNIFORM4FPROC, @alignCast(@alignOf(extern fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glUniform4f")));
    glUniform4fv_impl = @ptrCast(PFNGLUNIFORM4FVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniform4fv")));
    glUniform4i_impl = @ptrCast(PFNGLUNIFORM4IPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLint, GLint, GLint) void), gles2_get_proc_address(c"glUniform4i")));
    glUniform4iv_impl = @ptrCast(PFNGLUNIFORM4IVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glUniform4iv")));
    glUniformMatrix2fv_impl = @ptrCast(PFNGLUNIFORMMATRIX2FVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix2fv")));
    glUniformMatrix3fv_impl = @ptrCast(PFNGLUNIFORMMATRIX3FVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix3fv")));
    glUniformMatrix4fv_impl = @ptrCast(PFNGLUNIFORMMATRIX4FVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix4fv")));
    glUseProgram_impl = @ptrCast(PFNGLUSEPROGRAMPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glUseProgram")));
    glValidateProgram_impl = @ptrCast(PFNGLVALIDATEPROGRAMPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glValidateProgram")));
    glVertexAttrib1f_impl = @ptrCast(PFNGLVERTEXATTRIB1FPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat) void), gles2_get_proc_address(c"glVertexAttrib1f")));
    glVertexAttrib1fv_impl = @ptrCast(PFNGLVERTEXATTRIB1FVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLfloat) void), gles2_get_proc_address(c"glVertexAttrib1fv")));
    glVertexAttrib2f_impl = @ptrCast(PFNGLVERTEXATTRIB2FPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat) void), gles2_get_proc_address(c"glVertexAttrib2f")));
    glVertexAttrib2fv_impl = @ptrCast(PFNGLVERTEXATTRIB2FVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLfloat) void), gles2_get_proc_address(c"glVertexAttrib2fv")));
    glVertexAttrib3f_impl = @ptrCast(PFNGLVERTEXATTRIB3FPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glVertexAttrib3f")));
    glVertexAttrib3fv_impl = @ptrCast(PFNGLVERTEXATTRIB3FVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLfloat) void), gles2_get_proc_address(c"glVertexAttrib3fv")));
    glVertexAttrib4f_impl = @ptrCast(PFNGLVERTEXATTRIB4FPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glVertexAttrib4f")));
    glVertexAttrib4fv_impl = @ptrCast(PFNGLVERTEXATTRIB4FVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLfloat) void), gles2_get_proc_address(c"glVertexAttrib4fv")));
    glVertexAttribPointer_impl = @ptrCast(PFNGLVERTEXATTRIBPOINTERPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) void), gles2_get_proc_address(c"glVertexAttribPointer")));
    glViewport_impl = @ptrCast(PFNGLVIEWPORTPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glViewport")));
}

pub export fn load_gles2Extensions(gles2_get_proc_address: LoaderFunction) void {
    glBlendBarrierKHR_impl = @ptrCast(PFNGLBLENDBARRIERKHRPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glBlendBarrierKHR")));
    glDebugMessageControlKHR_impl = @ptrCast(PFNGLDEBUGMESSAGECONTROLKHRPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) void), gles2_get_proc_address(c"glDebugMessageControlKHR")));
    glDebugMessageInsertKHR_impl = @ptrCast(PFNGLDEBUGMESSAGEINSERTKHRPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) void), gles2_get_proc_address(c"glDebugMessageInsertKHR")));
    glDebugMessageCallbackKHR_impl = @ptrCast(PFNGLDEBUGMESSAGECALLBACKKHRPROC, @alignCast(@alignOf(extern fn (GLDEBUGPROCKHR, ?*const c_void) void), gles2_get_proc_address(c"glDebugMessageCallbackKHR")));
    glGetDebugMessageLogKHR_impl = @ptrCast(PFNGLGETDEBUGMESSAGELOGKHRPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) GLuint), gles2_get_proc_address(c"glGetDebugMessageLogKHR")));
    glPushDebugGroupKHR_impl = @ptrCast(PFNGLPUSHDEBUGGROUPKHRPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void), gles2_get_proc_address(c"glPushDebugGroupKHR")));
    glPopDebugGroupKHR_impl = @ptrCast(PFNGLPOPDEBUGGROUPKHRPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glPopDebugGroupKHR")));
    glObjectLabelKHR_impl = @ptrCast(PFNGLOBJECTLABELKHRPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void), gles2_get_proc_address(c"glObjectLabelKHR")));
    glGetObjectLabelKHR_impl = @ptrCast(PFNGLGETOBJECTLABELKHRPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetObjectLabelKHR")));
    glObjectPtrLabelKHR_impl = @ptrCast(PFNGLOBJECTPTRLABELKHRPROC, @alignCast(@alignOf(extern fn (?*const c_void, GLsizei, [*c]const GLchar) void), gles2_get_proc_address(c"glObjectPtrLabelKHR")));
    glGetObjectPtrLabelKHR_impl = @ptrCast(PFNGLGETOBJECTPTRLABELKHRPROC, @alignCast(@alignOf(extern fn (?*const c_void, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetObjectPtrLabelKHR")));
    glGetPointervKHR_impl = @ptrCast(PFNGLGETPOINTERVKHRPROC, @alignCast(@alignOf(extern fn (GLenum, [*c](?*c_void)) void), gles2_get_proc_address(c"glGetPointervKHR")));
    glMaxShaderCompilerThreadsKHR_impl = @ptrCast(PFNGLMAXSHADERCOMPILERTHREADSKHRPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glMaxShaderCompilerThreadsKHR")));
    glGetGraphicsResetStatusKHR_impl = @ptrCast(PFNGLGETGRAPHICSRESETSTATUSKHRPROC, @alignCast(@alignOf(extern fn () GLenum), gles2_get_proc_address(c"glGetGraphicsResetStatusKHR")));
    glReadnPixelsKHR_impl = @ptrCast(PFNGLREADNPIXELSKHRPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) void), gles2_get_proc_address(c"glReadnPixelsKHR")));
    glGetnUniformfvKHR_impl = @ptrCast(PFNGLGETNUNIFORMFVKHRPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]GLfloat) void), gles2_get_proc_address(c"glGetnUniformfvKHR")));
    glGetnUniformivKHR_impl = @ptrCast(PFNGLGETNUNIFORMIVKHRPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]GLint) void), gles2_get_proc_address(c"glGetnUniformivKHR")));
    glGetnUniformuivKHR_impl = @ptrCast(PFNGLGETNUNIFORMUIVKHRPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGetnUniformuivKHR")));
    glEGLImageTargetTexture2DOES_impl = @ptrCast(PFNGLEGLIMAGETARGETTEXTURE2DOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLeglImageOES) void), gles2_get_proc_address(c"glEGLImageTargetTexture2DOES")));
    glEGLImageTargetRenderbufferStorageOES_impl = @ptrCast(PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLeglImageOES) void), gles2_get_proc_address(c"glEGLImageTargetRenderbufferStorageOES")));
    glCopyImageSubDataOES_impl = @ptrCast(PFNGLCOPYIMAGESUBDATAOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void), gles2_get_proc_address(c"glCopyImageSubDataOES")));
    glEnableiOES_impl = @ptrCast(PFNGLENABLEIOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glEnableiOES")));
    glDisableiOES_impl = @ptrCast(PFNGLDISABLEIOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glDisableiOES")));
    glBlendEquationiOES_impl = @ptrCast(PFNGLBLENDEQUATIONIOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum) void), gles2_get_proc_address(c"glBlendEquationiOES")));
    glBlendEquationSeparateiOES_impl = @ptrCast(PFNGLBLENDEQUATIONSEPARATEIOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLenum) void), gles2_get_proc_address(c"glBlendEquationSeparateiOES")));
    glBlendFunciOES_impl = @ptrCast(PFNGLBLENDFUNCIOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLenum) void), gles2_get_proc_address(c"glBlendFunciOES")));
    glBlendFuncSeparateiOES_impl = @ptrCast(PFNGLBLENDFUNCSEPARATEIOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void), gles2_get_proc_address(c"glBlendFuncSeparateiOES")));
    glColorMaskiOES_impl = @ptrCast(PFNGLCOLORMASKIOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) void), gles2_get_proc_address(c"glColorMaskiOES")));
    glIsEnablediOES_impl = @ptrCast(PFNGLISENABLEDIOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) GLboolean), gles2_get_proc_address(c"glIsEnablediOES")));
    glDrawElementsBaseVertexOES_impl = @ptrCast(PFNGLDRAWELEMENTSBASEVERTEXOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) void), gles2_get_proc_address(c"glDrawElementsBaseVertexOES")));
    glDrawRangeElementsBaseVertexOES_impl = @ptrCast(PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) void), gles2_get_proc_address(c"glDrawRangeElementsBaseVertexOES")));
    glDrawElementsInstancedBaseVertexOES_impl = @ptrCast(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) void), gles2_get_proc_address(c"glDrawElementsInstancedBaseVertexOES")));
    glMultiDrawElementsBaseVertexEXT_impl = @ptrCast(PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLsizei, GLenum, [*c]const (?*const c_void), GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glMultiDrawElementsBaseVertexEXT")));
    glFramebufferTextureOES_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTUREOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint, GLint) void), gles2_get_proc_address(c"glFramebufferTextureOES")));
    glGetProgramBinaryOES_impl = @ptrCast(PFNGLGETPROGRAMBINARYOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*c_void) void), gles2_get_proc_address(c"glGetProgramBinaryOES")));
    glProgramBinaryOES_impl = @ptrCast(PFNGLPROGRAMBINARYOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, ?*const c_void, GLint) void), gles2_get_proc_address(c"glProgramBinaryOES")));
    glMapBufferOES_impl = @ptrCast(PFNGLMAPBUFFEROESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum) ?*c_void), gles2_get_proc_address(c"glMapBufferOES")));
    glUnmapBufferOES_impl = @ptrCast(PFNGLUNMAPBUFFEROESPROC, @alignCast(@alignOf(extern fn (GLenum) GLboolean), gles2_get_proc_address(c"glUnmapBufferOES")));
    glGetBufferPointervOES_impl = @ptrCast(PFNGLGETBUFFERPOINTERVOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c](?*c_void)) void), gles2_get_proc_address(c"glGetBufferPointervOES")));
    glPrimitiveBoundingBoxOES_impl = @ptrCast(PFNGLPRIMITIVEBOUNDINGBOXOESPROC, @alignCast(@alignOf(extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glPrimitiveBoundingBoxOES")));
    glMinSampleShadingOES_impl = @ptrCast(PFNGLMINSAMPLESHADINGOESPROC, @alignCast(@alignOf(extern fn (GLfloat) void), gles2_get_proc_address(c"glMinSampleShadingOES")));
    glPatchParameteriOES_impl = @ptrCast(PFNGLPATCHPARAMETERIOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLint) void), gles2_get_proc_address(c"glPatchParameteriOES")));
    glTexImage3DOES_impl = @ptrCast(PFNGLTEXIMAGE3DOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glTexImage3DOES")));
    glTexSubImage3DOES_impl = @ptrCast(PFNGLTEXSUBIMAGE3DOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glTexSubImage3DOES")));
    glCopyTexSubImage3DOES_impl = @ptrCast(PFNGLCOPYTEXSUBIMAGE3DOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glCopyTexSubImage3DOES")));
    glCompressedTexImage3DOES_impl = @ptrCast(PFNGLCOMPRESSEDTEXIMAGE3DOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void), gles2_get_proc_address(c"glCompressedTexImage3DOES")));
    glCompressedTexSubImage3DOES_impl = @ptrCast(PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void), gles2_get_proc_address(c"glCompressedTexSubImage3DOES")));
    glFramebufferTexture3DOES_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTURE3DOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) void), gles2_get_proc_address(c"glFramebufferTexture3DOES")));
    glTexParameterIivOES_impl = @ptrCast(PFNGLTEXPARAMETERIIVOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]const GLint) void), gles2_get_proc_address(c"glTexParameterIivOES")));
    glTexParameterIuivOES_impl = @ptrCast(PFNGLTEXPARAMETERIUIVOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]const GLuint) void), gles2_get_proc_address(c"glTexParameterIuivOES")));
    glGetTexParameterIivOES_impl = @ptrCast(PFNGLGETTEXPARAMETERIIVOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetTexParameterIivOES")));
    glGetTexParameterIuivOES_impl = @ptrCast(PFNGLGETTEXPARAMETERIUIVOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLuint) void), gles2_get_proc_address(c"glGetTexParameterIuivOES")));
    glSamplerParameterIivOES_impl = @ptrCast(PFNGLSAMPLERPARAMETERIIVOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLint) void), gles2_get_proc_address(c"glSamplerParameterIivOES")));
    glSamplerParameterIuivOES_impl = @ptrCast(PFNGLSAMPLERPARAMETERIUIVOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLuint) void), gles2_get_proc_address(c"glSamplerParameterIuivOES")));
    glGetSamplerParameterIivOES_impl = @ptrCast(PFNGLGETSAMPLERPARAMETERIIVOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetSamplerParameterIivOES")));
    glGetSamplerParameterIuivOES_impl = @ptrCast(PFNGLGETSAMPLERPARAMETERIUIVOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLuint) void), gles2_get_proc_address(c"glGetSamplerParameterIuivOES")));
    glTexBufferOES_impl = @ptrCast(PFNGLTEXBUFFEROESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint) void), gles2_get_proc_address(c"glTexBufferOES")));
    glTexBufferRangeOES_impl = @ptrCast(PFNGLTEXBUFFERRANGEOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) void), gles2_get_proc_address(c"glTexBufferRangeOES")));
    glTexStorage3DMultisampleOES_impl = @ptrCast(PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) void), gles2_get_proc_address(c"glTexStorage3DMultisampleOES")));
    glTextureViewOES_impl = @ptrCast(PFNGLTEXTUREVIEWOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) void), gles2_get_proc_address(c"glTextureViewOES")));
    glBindVertexArrayOES_impl = @ptrCast(PFNGLBINDVERTEXARRAYOESPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glBindVertexArrayOES")));
    glDeleteVertexArraysOES_impl = @ptrCast(PFNGLDELETEVERTEXARRAYSOESPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteVertexArraysOES")));
    glGenVertexArraysOES_impl = @ptrCast(PFNGLGENVERTEXARRAYSOESPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenVertexArraysOES")));
    glIsVertexArrayOES_impl = @ptrCast(PFNGLISVERTEXARRAYOESPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsVertexArrayOES")));
    glViewportArrayvOES_impl = @ptrCast(PFNGLVIEWPORTARRAYVOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glViewportArrayvOES")));
    glViewportIndexedfOES_impl = @ptrCast(PFNGLVIEWPORTINDEXEDFOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glViewportIndexedfOES")));
    glViewportIndexedfvOES_impl = @ptrCast(PFNGLVIEWPORTINDEXEDFVOESPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLfloat) void), gles2_get_proc_address(c"glViewportIndexedfvOES")));
    glScissorArrayvOES_impl = @ptrCast(PFNGLSCISSORARRAYVOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glScissorArrayvOES")));
    glScissorIndexedOES_impl = @ptrCast(PFNGLSCISSORINDEXEDOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glScissorIndexedOES")));
    glScissorIndexedvOES_impl = @ptrCast(PFNGLSCISSORINDEXEDVOESPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLint) void), gles2_get_proc_address(c"glScissorIndexedvOES")));
    glDepthRangeArrayfvOES_impl = @ptrCast(PFNGLDEPTHRANGEARRAYFVOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glDepthRangeArrayfvOES")));
    glDepthRangeIndexedfOES_impl = @ptrCast(PFNGLDEPTHRANGEINDEXEDFOESPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat) void), gles2_get_proc_address(c"glDepthRangeIndexedfOES")));
    glGetFloati_vOES_impl = @ptrCast(PFNGLGETFLOATI_VOESPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, [*c]GLfloat) void), gles2_get_proc_address(c"glGetFloati_vOES")));
    glRenderbufferStorageMultisampleAdvancedAMD_impl = @ptrCast(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glRenderbufferStorageMultisampleAdvancedAMD")));
    glNamedRenderbufferStorageMultisampleAdvancedAMD_impl = @ptrCast(PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glNamedRenderbufferStorageMultisampleAdvancedAMD")));
    glGetPerfMonitorGroupsAMD_impl = @ptrCast(PFNGLGETPERFMONITORGROUPSAMDPROC, @alignCast(@alignOf(extern fn ([*c]GLint, GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGetPerfMonitorGroupsAMD")));
    glGetPerfMonitorCountersAMD_impl = @ptrCast(PFNGLGETPERFMONITORCOUNTERSAMDPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGetPerfMonitorCountersAMD")));
    glGetPerfMonitorGroupStringAMD_impl = @ptrCast(PFNGLGETPERFMONITORGROUPSTRINGAMDPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetPerfMonitorGroupStringAMD")));
    glGetPerfMonitorCounterStringAMD_impl = @ptrCast(PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetPerfMonitorCounterStringAMD")));
    glGetPerfMonitorCounterInfoAMD_impl = @ptrCast(PFNGLGETPERFMONITORCOUNTERINFOAMDPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLenum, ?*c_void) void), gles2_get_proc_address(c"glGetPerfMonitorCounterInfoAMD")));
    glGenPerfMonitorsAMD_impl = @ptrCast(PFNGLGENPERFMONITORSAMDPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenPerfMonitorsAMD")));
    glDeletePerfMonitorsAMD_impl = @ptrCast(PFNGLDELETEPERFMONITORSAMDPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glDeletePerfMonitorsAMD")));
    glSelectPerfMonitorCountersAMD_impl = @ptrCast(PFNGLSELECTPERFMONITORCOUNTERSAMDPROC, @alignCast(@alignOf(extern fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) void), gles2_get_proc_address(c"glSelectPerfMonitorCountersAMD")));
    glBeginPerfMonitorAMD_impl = @ptrCast(PFNGLBEGINPERFMONITORAMDPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glBeginPerfMonitorAMD")));
    glEndPerfMonitorAMD_impl = @ptrCast(PFNGLENDPERFMONITORAMDPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glEndPerfMonitorAMD")));
    glGetPerfMonitorCounterDataAMD_impl = @ptrCast(PFNGLGETPERFMONITORCOUNTERDATAAMDPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) void), gles2_get_proc_address(c"glGetPerfMonitorCounterDataAMD")));
    glBlitFramebufferANGLE_impl = @ptrCast(PFNGLBLITFRAMEBUFFERANGLEPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) void), gles2_get_proc_address(c"glBlitFramebufferANGLE")));
    glRenderbufferStorageMultisampleANGLE_impl = @ptrCast(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glRenderbufferStorageMultisampleANGLE")));
    glDrawArraysInstancedANGLE_impl = @ptrCast(PFNGLDRAWARRAYSINSTANCEDANGLEPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glDrawArraysInstancedANGLE")));
    glDrawElementsInstancedANGLE_impl = @ptrCast(PFNGLDRAWELEMENTSINSTANCEDANGLEPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void), gles2_get_proc_address(c"glDrawElementsInstancedANGLE")));
    glVertexAttribDivisorANGLE_impl = @ptrCast(PFNGLVERTEXATTRIBDIVISORANGLEPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) void), gles2_get_proc_address(c"glVertexAttribDivisorANGLE")));
    glGetTranslatedShaderSourceANGLE_impl = @ptrCast(PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetTranslatedShaderSourceANGLE")));
    glCopyTextureLevelsAPPLE_impl = @ptrCast(PFNGLCOPYTEXTURELEVELSAPPLEPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLint, GLsizei) void), gles2_get_proc_address(c"glCopyTextureLevelsAPPLE")));
    glRenderbufferStorageMultisampleAPPLE_impl = @ptrCast(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glRenderbufferStorageMultisampleAPPLE")));
    glResolveMultisampleFramebufferAPPLE_impl = @ptrCast(PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glResolveMultisampleFramebufferAPPLE")));
    glFenceSyncAPPLE_impl = @ptrCast(PFNGLFENCESYNCAPPLEPROC, @alignCast(@alignOf(extern fn (GLenum, GLbitfield) GLsync), gles2_get_proc_address(c"glFenceSyncAPPLE")));
    glIsSyncAPPLE_impl = @ptrCast(PFNGLISSYNCAPPLEPROC, @alignCast(@alignOf(extern fn (GLsync) GLboolean), gles2_get_proc_address(c"glIsSyncAPPLE")));
    glDeleteSyncAPPLE_impl = @ptrCast(PFNGLDELETESYNCAPPLEPROC, @alignCast(@alignOf(extern fn (GLsync) void), gles2_get_proc_address(c"glDeleteSyncAPPLE")));
    glClientWaitSyncAPPLE_impl = @ptrCast(PFNGLCLIENTWAITSYNCAPPLEPROC, @alignCast(@alignOf(extern fn (GLsync, GLbitfield, GLuint64) GLenum), gles2_get_proc_address(c"glClientWaitSyncAPPLE")));
    glWaitSyncAPPLE_impl = @ptrCast(PFNGLWAITSYNCAPPLEPROC, @alignCast(@alignOf(extern fn (GLsync, GLbitfield, GLuint64) void), gles2_get_proc_address(c"glWaitSyncAPPLE")));
    glGetInteger64vAPPLE_impl = @ptrCast(PFNGLGETINTEGER64VAPPLEPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]GLint64) void), gles2_get_proc_address(c"glGetInteger64vAPPLE")));
    glGetSyncivAPPLE_impl = @ptrCast(PFNGLGETSYNCIVAPPLEPROC, @alignCast(@alignOf(extern fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) void), gles2_get_proc_address(c"glGetSyncivAPPLE")));
    glEGLImageTargetTexStorageEXT_impl = @ptrCast(PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLeglImageOES, [*c]const GLint) void), gles2_get_proc_address(c"glEGLImageTargetTexStorageEXT")));
    glEGLImageTargetTextureStorageEXT_impl = @ptrCast(PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLeglImageOES, [*c]const GLint) void), gles2_get_proc_address(c"glEGLImageTargetTextureStorageEXT")));
    glDrawArraysInstancedBaseInstanceEXT_impl = @ptrCast(PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLsizei, GLsizei, GLuint) void), gles2_get_proc_address(c"glDrawArraysInstancedBaseInstanceEXT")));
    glDrawElementsInstancedBaseInstanceEXT_impl = @ptrCast(PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLuint) void), gles2_get_proc_address(c"glDrawElementsInstancedBaseInstanceEXT")));
    glDrawElementsInstancedBaseVertexBaseInstanceEXT_impl = @ptrCast(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint, GLuint) void), gles2_get_proc_address(c"glDrawElementsInstancedBaseVertexBaseInstanceEXT")));
    glBindFragDataLocationIndexedEXT_impl = @ptrCast(PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLuint, [*c]const GLchar) void), gles2_get_proc_address(c"glBindFragDataLocationIndexedEXT")));
    glBindFragDataLocationEXT_impl = @ptrCast(PFNGLBINDFRAGDATALOCATIONEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, [*c]const GLchar) void), gles2_get_proc_address(c"glBindFragDataLocationEXT")));
    glGetProgramResourceLocationIndexEXT_impl = @ptrCast(PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLchar) GLint), gles2_get_proc_address(c"glGetProgramResourceLocationIndexEXT")));
    glGetFragDataIndexEXT_impl = @ptrCast(PFNGLGETFRAGDATAINDEXEXTPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLchar) GLint), gles2_get_proc_address(c"glGetFragDataIndexEXT")));
    glBufferStorageEXT_impl = @ptrCast(PFNGLBUFFERSTORAGEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizeiptr, ?*const c_void, GLbitfield) void), gles2_get_proc_address(c"glBufferStorageEXT")));
    glClearTexImageEXT_impl = @ptrCast(PFNGLCLEARTEXIMAGEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLenum, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glClearTexImageEXT")));
    glClearTexSubImageEXT_impl = @ptrCast(PFNGLCLEARTEXSUBIMAGEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glClearTexSubImageEXT")));
    glClipControlEXT_impl = @ptrCast(PFNGLCLIPCONTROLEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum) void), gles2_get_proc_address(c"glClipControlEXT")));
    glCopyImageSubDataEXT_impl = @ptrCast(PFNGLCOPYIMAGESUBDATAEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void), gles2_get_proc_address(c"glCopyImageSubDataEXT")));
    glLabelObjectEXT_impl = @ptrCast(PFNGLLABELOBJECTEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void), gles2_get_proc_address(c"glLabelObjectEXT")));
    glGetObjectLabelEXT_impl = @ptrCast(PFNGLGETOBJECTLABELEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetObjectLabelEXT")));
    glInsertEventMarkerEXT_impl = @ptrCast(PFNGLINSERTEVENTMARKEREXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLchar) void), gles2_get_proc_address(c"glInsertEventMarkerEXT")));
    glPushGroupMarkerEXT_impl = @ptrCast(PFNGLPUSHGROUPMARKEREXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLchar) void), gles2_get_proc_address(c"glPushGroupMarkerEXT")));
    glPopGroupMarkerEXT_impl = @ptrCast(PFNGLPOPGROUPMARKEREXTPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glPopGroupMarkerEXT")));
    glDiscardFramebufferEXT_impl = @ptrCast(PFNGLDISCARDFRAMEBUFFEREXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, [*c]const GLenum) void), gles2_get_proc_address(c"glDiscardFramebufferEXT")));
    glGenQueriesEXT_impl = @ptrCast(PFNGLGENQUERIESEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenQueriesEXT")));
    glDeleteQueriesEXT_impl = @ptrCast(PFNGLDELETEQUERIESEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteQueriesEXT")));
    glIsQueryEXT_impl = @ptrCast(PFNGLISQUERYEXTPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsQueryEXT")));
    glBeginQueryEXT_impl = @ptrCast(PFNGLBEGINQUERYEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glBeginQueryEXT")));
    glEndQueryEXT_impl = @ptrCast(PFNGLENDQUERYEXTPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glEndQueryEXT")));
    glQueryCounterEXT_impl = @ptrCast(PFNGLQUERYCOUNTEREXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum) void), gles2_get_proc_address(c"glQueryCounterEXT")));
    glGetQueryivEXT_impl = @ptrCast(PFNGLGETQUERYIVEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetQueryivEXT")));
    glGetQueryObjectivEXT_impl = @ptrCast(PFNGLGETQUERYOBJECTIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetQueryObjectivEXT")));
    glGetQueryObjectuivEXT_impl = @ptrCast(PFNGLGETQUERYOBJECTUIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLuint) void), gles2_get_proc_address(c"glGetQueryObjectuivEXT")));
    glGetQueryObjecti64vEXT_impl = @ptrCast(PFNGLGETQUERYOBJECTI64VEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint64) void), gles2_get_proc_address(c"glGetQueryObjecti64vEXT")));
    glGetQueryObjectui64vEXT_impl = @ptrCast(PFNGLGETQUERYOBJECTUI64VEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLuint64) void), gles2_get_proc_address(c"glGetQueryObjectui64vEXT")));
    glDrawBuffersEXT_impl = @ptrCast(PFNGLDRAWBUFFERSEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLenum) void), gles2_get_proc_address(c"glDrawBuffersEXT")));
    glEnableiEXT_impl = @ptrCast(PFNGLENABLEIEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glEnableiEXT")));
    glDisableiEXT_impl = @ptrCast(PFNGLDISABLEIEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glDisableiEXT")));
    glBlendEquationiEXT_impl = @ptrCast(PFNGLBLENDEQUATIONIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum) void), gles2_get_proc_address(c"glBlendEquationiEXT")));
    glBlendEquationSeparateiEXT_impl = @ptrCast(PFNGLBLENDEQUATIONSEPARATEIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLenum) void), gles2_get_proc_address(c"glBlendEquationSeparateiEXT")));
    glBlendFunciEXT_impl = @ptrCast(PFNGLBLENDFUNCIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLenum) void), gles2_get_proc_address(c"glBlendFunciEXT")));
    glBlendFuncSeparateiEXT_impl = @ptrCast(PFNGLBLENDFUNCSEPARATEIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void), gles2_get_proc_address(c"glBlendFuncSeparateiEXT")));
    glColorMaskiEXT_impl = @ptrCast(PFNGLCOLORMASKIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) void), gles2_get_proc_address(c"glColorMaskiEXT")));
    glIsEnablediEXT_impl = @ptrCast(PFNGLISENABLEDIEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) GLboolean), gles2_get_proc_address(c"glIsEnablediEXT")));
    glDrawElementsBaseVertexEXT_impl = @ptrCast(PFNGLDRAWELEMENTSBASEVERTEXEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) void), gles2_get_proc_address(c"glDrawElementsBaseVertexEXT")));
    glDrawRangeElementsBaseVertexEXT_impl = @ptrCast(PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) void), gles2_get_proc_address(c"glDrawRangeElementsBaseVertexEXT")));
    glDrawElementsInstancedBaseVertexEXT_impl = @ptrCast(PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) void), gles2_get_proc_address(c"glDrawElementsInstancedBaseVertexEXT")));
    glDrawArraysInstancedEXT_impl = @ptrCast(PFNGLDRAWARRAYSINSTANCEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glDrawArraysInstancedEXT")));
    glDrawElementsInstancedEXT_impl = @ptrCast(PFNGLDRAWELEMENTSINSTANCEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void), gles2_get_proc_address(c"glDrawElementsInstancedEXT")));
    glDrawTransformFeedbackEXT_impl = @ptrCast(PFNGLDRAWTRANSFORMFEEDBACKEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glDrawTransformFeedbackEXT")));
    glDrawTransformFeedbackInstancedEXT_impl = @ptrCast(PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLsizei) void), gles2_get_proc_address(c"glDrawTransformFeedbackInstancedEXT")));
    glBufferStorageExternalEXT_impl = @ptrCast(PFNGLBUFFERSTORAGEEXTERNALEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) void), gles2_get_proc_address(c"glBufferStorageExternalEXT")));
    glNamedBufferStorageExternalEXT_impl = @ptrCast(PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) void), gles2_get_proc_address(c"glNamedBufferStorageExternalEXT")));
    glFramebufferTextureEXT_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTUREEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint, GLint) void), gles2_get_proc_address(c"glFramebufferTextureEXT")));
    glVertexAttribDivisorEXT_impl = @ptrCast(PFNGLVERTEXATTRIBDIVISOREXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) void), gles2_get_proc_address(c"glVertexAttribDivisorEXT")));
    glMapBufferRangeEXT_impl = @ptrCast(PFNGLMAPBUFFERRANGEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) ?*c_void), gles2_get_proc_address(c"glMapBufferRangeEXT")));
    glFlushMappedBufferRangeEXT_impl = @ptrCast(PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLintptr, GLsizeiptr) void), gles2_get_proc_address(c"glFlushMappedBufferRangeEXT")));
    glGetUnsignedBytevEXT_impl = @ptrCast(PFNGLGETUNSIGNEDBYTEVEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]GLubyte) void), gles2_get_proc_address(c"glGetUnsignedBytevEXT")));
    glGetUnsignedBytei_vEXT_impl = @ptrCast(PFNGLGETUNSIGNEDBYTEI_VEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, [*c]GLubyte) void), gles2_get_proc_address(c"glGetUnsignedBytei_vEXT")));
    glDeleteMemoryObjectsEXT_impl = @ptrCast(PFNGLDELETEMEMORYOBJECTSEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteMemoryObjectsEXT")));
    glIsMemoryObjectEXT_impl = @ptrCast(PFNGLISMEMORYOBJECTEXTPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsMemoryObjectEXT")));
    glCreateMemoryObjectsEXT_impl = @ptrCast(PFNGLCREATEMEMORYOBJECTSEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glCreateMemoryObjectsEXT")));
    glMemoryObjectParameterivEXT_impl = @ptrCast(PFNGLMEMORYOBJECTPARAMETERIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLint) void), gles2_get_proc_address(c"glMemoryObjectParameterivEXT")));
    glGetMemoryObjectParameterivEXT_impl = @ptrCast(PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetMemoryObjectParameterivEXT")));
    glTexStorageMem2DEXT_impl = @ptrCast(PFNGLTEXSTORAGEMEM2DEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) void), gles2_get_proc_address(c"glTexStorageMem2DEXT")));
    glTexStorageMem2DMultisampleEXT_impl = @ptrCast(PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void), gles2_get_proc_address(c"glTexStorageMem2DMultisampleEXT")));
    glTexStorageMem3DEXT_impl = @ptrCast(PFNGLTEXSTORAGEMEM3DEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) void), gles2_get_proc_address(c"glTexStorageMem3DEXT")));
    glTexStorageMem3DMultisampleEXT_impl = @ptrCast(PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void), gles2_get_proc_address(c"glTexStorageMem3DMultisampleEXT")));
    glBufferStorageMemEXT_impl = @ptrCast(PFNGLBUFFERSTORAGEMEMEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizeiptr, GLuint, GLuint64) void), gles2_get_proc_address(c"glBufferStorageMemEXT")));
    glTextureStorageMem2DEXT_impl = @ptrCast(PFNGLTEXTURESTORAGEMEM2DEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) void), gles2_get_proc_address(c"glTextureStorageMem2DEXT")));
    glTextureStorageMem2DMultisampleEXT_impl = @ptrCast(PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void), gles2_get_proc_address(c"glTextureStorageMem2DMultisampleEXT")));
    glTextureStorageMem3DEXT_impl = @ptrCast(PFNGLTEXTURESTORAGEMEM3DEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) void), gles2_get_proc_address(c"glTextureStorageMem3DEXT")));
    glTextureStorageMem3DMultisampleEXT_impl = @ptrCast(PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void), gles2_get_proc_address(c"glTextureStorageMem3DMultisampleEXT")));
    glNamedBufferStorageMemEXT_impl = @ptrCast(PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizeiptr, GLuint, GLuint64) void), gles2_get_proc_address(c"glNamedBufferStorageMemEXT")));
    glImportMemoryFdEXT_impl = @ptrCast(PFNGLIMPORTMEMORYFDEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint64, GLenum, GLint) void), gles2_get_proc_address(c"glImportMemoryFdEXT")));
    glImportMemoryWin32HandleEXT_impl = @ptrCast(PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint64, GLenum, ?*c_void) void), gles2_get_proc_address(c"glImportMemoryWin32HandleEXT")));
    glImportMemoryWin32NameEXT_impl = @ptrCast(PFNGLIMPORTMEMORYWIN32NAMEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint64, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glImportMemoryWin32NameEXT")));
    glMultiDrawArraysEXT_impl = @ptrCast(PFNGLMULTIDRAWARRAYSEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) void), gles2_get_proc_address(c"glMultiDrawArraysEXT")));
    glMultiDrawElementsEXT_impl = @ptrCast(PFNGLMULTIDRAWELEMENTSEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLsizei, GLenum, [*c]const (?*const c_void), GLsizei) void), gles2_get_proc_address(c"glMultiDrawElementsEXT")));
    glMultiDrawArraysIndirectEXT_impl = @ptrCast(PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC, @alignCast(@alignOf(extern fn (GLenum, ?*const c_void, GLsizei, GLsizei) void), gles2_get_proc_address(c"glMultiDrawArraysIndirectEXT")));
    glMultiDrawElementsIndirectEXT_impl = @ptrCast(PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) void), gles2_get_proc_address(c"glMultiDrawElementsIndirectEXT")));
    glRenderbufferStorageMultisampleEXT_impl = @ptrCast(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glRenderbufferStorageMultisampleEXT")));
    glFramebufferTexture2DMultisampleEXT_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) void), gles2_get_proc_address(c"glFramebufferTexture2DMultisampleEXT")));
    glReadBufferIndexedEXT_impl = @ptrCast(PFNGLREADBUFFERINDEXEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLint) void), gles2_get_proc_address(c"glReadBufferIndexedEXT")));
    glDrawBuffersIndexedEXT_impl = @ptrCast(PFNGLDRAWBUFFERSINDEXEDEXTPROC, @alignCast(@alignOf(extern fn (GLint, [*c]const GLenum, [*c]const GLint) void), gles2_get_proc_address(c"glDrawBuffersIndexedEXT")));
    glGetIntegeri_vEXT_impl = @ptrCast(PFNGLGETINTEGERI_VEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, [*c]GLint) void), gles2_get_proc_address(c"glGetIntegeri_vEXT")));
    glPolygonOffsetClampEXT_impl = @ptrCast(PFNGLPOLYGONOFFSETCLAMPEXTPROC, @alignCast(@alignOf(extern fn (GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glPolygonOffsetClampEXT")));
    glPrimitiveBoundingBoxEXT_impl = @ptrCast(PFNGLPRIMITIVEBOUNDINGBOXEXTPROC, @alignCast(@alignOf(extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glPrimitiveBoundingBoxEXT")));
    glRasterSamplesEXT_impl = @ptrCast(PFNGLRASTERSAMPLESEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLboolean) void), gles2_get_proc_address(c"glRasterSamplesEXT")));
    glGetGraphicsResetStatusEXT_impl = @ptrCast(PFNGLGETGRAPHICSRESETSTATUSEXTPROC, @alignCast(@alignOf(extern fn () GLenum), gles2_get_proc_address(c"glGetGraphicsResetStatusEXT")));
    glReadnPixelsEXT_impl = @ptrCast(PFNGLREADNPIXELSEXTPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) void), gles2_get_proc_address(c"glReadnPixelsEXT")));
    glGetnUniformfvEXT_impl = @ptrCast(PFNGLGETNUNIFORMFVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]GLfloat) void), gles2_get_proc_address(c"glGetnUniformfvEXT")));
    glGetnUniformivEXT_impl = @ptrCast(PFNGLGETNUNIFORMIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]GLint) void), gles2_get_proc_address(c"glGetnUniformivEXT")));
    glGenSemaphoresEXT_impl = @ptrCast(PFNGLGENSEMAPHORESEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenSemaphoresEXT")));
    glDeleteSemaphoresEXT_impl = @ptrCast(PFNGLDELETESEMAPHORESEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteSemaphoresEXT")));
    glIsSemaphoreEXT_impl = @ptrCast(PFNGLISSEMAPHOREEXTPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsSemaphoreEXT")));
    glSemaphoreParameterui64vEXT_impl = @ptrCast(PFNGLSEMAPHOREPARAMETERUI64VEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLuint64) void), gles2_get_proc_address(c"glSemaphoreParameterui64vEXT")));
    glGetSemaphoreParameterui64vEXT_impl = @ptrCast(PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLuint64) void), gles2_get_proc_address(c"glGetSemaphoreParameterui64vEXT")));
    glWaitSemaphoreEXT_impl = @ptrCast(PFNGLWAITSEMAPHOREEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) void), gles2_get_proc_address(c"glWaitSemaphoreEXT")));
    glSignalSemaphoreEXT_impl = @ptrCast(PFNGLSIGNALSEMAPHOREEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) void), gles2_get_proc_address(c"glSignalSemaphoreEXT")));
    glImportSemaphoreFdEXT_impl = @ptrCast(PFNGLIMPORTSEMAPHOREFDEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLint) void), gles2_get_proc_address(c"glImportSemaphoreFdEXT")));
    glImportSemaphoreWin32HandleEXT_impl = @ptrCast(PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, ?*c_void) void), gles2_get_proc_address(c"glImportSemaphoreWin32HandleEXT")));
    glImportSemaphoreWin32NameEXT_impl = @ptrCast(PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glImportSemaphoreWin32NameEXT")));
    glActiveShaderProgramEXT_impl = @ptrCast(PFNGLACTIVESHADERPROGRAMEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) void), gles2_get_proc_address(c"glActiveShaderProgramEXT")));
    glBindProgramPipelineEXT_impl = @ptrCast(PFNGLBINDPROGRAMPIPELINEEXTPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glBindProgramPipelineEXT")));
    glCreateShaderProgramvEXT_impl = @ptrCast(PFNGLCREATESHADERPROGRAMVEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, [*c]([*c]const GLchar)) GLuint), gles2_get_proc_address(c"glCreateShaderProgramvEXT")));
    glDeleteProgramPipelinesEXT_impl = @ptrCast(PFNGLDELETEPROGRAMPIPELINESEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteProgramPipelinesEXT")));
    glGenProgramPipelinesEXT_impl = @ptrCast(PFNGLGENPROGRAMPIPELINESEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenProgramPipelinesEXT")));
    glGetProgramPipelineInfoLogEXT_impl = @ptrCast(PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetProgramPipelineInfoLogEXT")));
    glGetProgramPipelineivEXT_impl = @ptrCast(PFNGLGETPROGRAMPIPELINEIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetProgramPipelineivEXT")));
    glIsProgramPipelineEXT_impl = @ptrCast(PFNGLISPROGRAMPIPELINEEXTPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsProgramPipelineEXT")));
    glProgramParameteriEXT_impl = @ptrCast(PFNGLPROGRAMPARAMETERIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLint) void), gles2_get_proc_address(c"glProgramParameteriEXT")));
    glProgramUniform1fEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM1FEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLfloat) void), gles2_get_proc_address(c"glProgramUniform1fEXT")));
    glProgramUniform1fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM1FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniform1fvEXT")));
    glProgramUniform1iEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM1IEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint) void), gles2_get_proc_address(c"glProgramUniform1iEXT")));
    glProgramUniform1ivEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM1IVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glProgramUniform1ivEXT")));
    glProgramUniform2fEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM2FEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLfloat, GLfloat) void), gles2_get_proc_address(c"glProgramUniform2fEXT")));
    glProgramUniform2fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM2FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniform2fvEXT")));
    glProgramUniform2iEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM2IEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint, GLint) void), gles2_get_proc_address(c"glProgramUniform2iEXT")));
    glProgramUniform2ivEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM2IVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glProgramUniform2ivEXT")));
    glProgramUniform3fEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM3FEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glProgramUniform3fEXT")));
    glProgramUniform3fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM3FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniform3fvEXT")));
    glProgramUniform3iEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM3IEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint, GLint, GLint) void), gles2_get_proc_address(c"glProgramUniform3iEXT")));
    glProgramUniform3ivEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM3IVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glProgramUniform3ivEXT")));
    glProgramUniform4fEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM4FEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glProgramUniform4fEXT")));
    glProgramUniform4fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM4FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniform4fvEXT")));
    glProgramUniform4iEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM4IEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint, GLint, GLint, GLint) void), gles2_get_proc_address(c"glProgramUniform4iEXT")));
    glProgramUniform4ivEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM4IVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glProgramUniform4ivEXT")));
    glProgramUniformMatrix2fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix2fvEXT")));
    glProgramUniformMatrix3fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix3fvEXT")));
    glProgramUniformMatrix4fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix4fvEXT")));
    glUseProgramStagesEXT_impl = @ptrCast(PFNGLUSEPROGRAMSTAGESEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLbitfield, GLuint) void), gles2_get_proc_address(c"glUseProgramStagesEXT")));
    glValidateProgramPipelineEXT_impl = @ptrCast(PFNGLVALIDATEPROGRAMPIPELINEEXTPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glValidateProgramPipelineEXT")));
    glProgramUniform1uiEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM1UIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint) void), gles2_get_proc_address(c"glProgramUniform1uiEXT")));
    glProgramUniform2uiEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM2UIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint, GLuint) void), gles2_get_proc_address(c"glProgramUniform2uiEXT")));
    glProgramUniform3uiEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM3UIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint, GLuint, GLuint) void), gles2_get_proc_address(c"glProgramUniform3uiEXT")));
    glProgramUniform4uiEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM4UIEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) void), gles2_get_proc_address(c"glProgramUniform4uiEXT")));
    glProgramUniform1uivEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM1UIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glProgramUniform1uivEXT")));
    glProgramUniform2uivEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM2UIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glProgramUniform2uivEXT")));
    glProgramUniform3uivEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM3UIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glProgramUniform3uivEXT")));
    glProgramUniform4uivEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORM4UIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glProgramUniform4uivEXT")));
    glProgramUniformMatrix2x3fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix2x3fvEXT")));
    glProgramUniformMatrix3x2fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix3x2fvEXT")));
    glProgramUniformMatrix2x4fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix2x4fvEXT")));
    glProgramUniformMatrix4x2fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix4x2fvEXT")));
    glProgramUniformMatrix3x4fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix3x4fvEXT")));
    glProgramUniformMatrix4x3fvEXT_impl = @ptrCast(PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramUniformMatrix4x3fvEXT")));
    glFramebufferFetchBarrierEXT_impl = @ptrCast(PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glFramebufferFetchBarrierEXT")));
    glFramebufferPixelLocalStorageSizeEXT_impl = @ptrCast(PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei) void), gles2_get_proc_address(c"glFramebufferPixelLocalStorageSizeEXT")));
    glGetFramebufferPixelLocalStorageSizeEXT_impl = @ptrCast(PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC, @alignCast(@alignOf(extern fn (GLuint) GLsizei), gles2_get_proc_address(c"glGetFramebufferPixelLocalStorageSizeEXT")));
    glClearPixelLocalStorageuiEXT_impl = @ptrCast(PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC, @alignCast(@alignOf(extern fn (GLsizei, GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glClearPixelLocalStorageuiEXT")));
    glTexPageCommitmentEXT_impl = @ptrCast(PFNGLTEXPAGECOMMITMENTEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) void), gles2_get_proc_address(c"glTexPageCommitmentEXT")));
    glPatchParameteriEXT_impl = @ptrCast(PFNGLPATCHPARAMETERIEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLint) void), gles2_get_proc_address(c"glPatchParameteriEXT")));
    glTexParameterIivEXT_impl = @ptrCast(PFNGLTEXPARAMETERIIVEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]const GLint) void), gles2_get_proc_address(c"glTexParameterIivEXT")));
    glTexParameterIuivEXT_impl = @ptrCast(PFNGLTEXPARAMETERIUIVEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]const GLuint) void), gles2_get_proc_address(c"glTexParameterIuivEXT")));
    glGetTexParameterIivEXT_impl = @ptrCast(PFNGLGETTEXPARAMETERIIVEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetTexParameterIivEXT")));
    glGetTexParameterIuivEXT_impl = @ptrCast(PFNGLGETTEXPARAMETERIUIVEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, [*c]GLuint) void), gles2_get_proc_address(c"glGetTexParameterIuivEXT")));
    glSamplerParameterIivEXT_impl = @ptrCast(PFNGLSAMPLERPARAMETERIIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLint) void), gles2_get_proc_address(c"glSamplerParameterIivEXT")));
    glSamplerParameterIuivEXT_impl = @ptrCast(PFNGLSAMPLERPARAMETERIUIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLuint) void), gles2_get_proc_address(c"glSamplerParameterIuivEXT")));
    glGetSamplerParameterIivEXT_impl = @ptrCast(PFNGLGETSAMPLERPARAMETERIIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetSamplerParameterIivEXT")));
    glGetSamplerParameterIuivEXT_impl = @ptrCast(PFNGLGETSAMPLERPARAMETERIUIVEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLuint) void), gles2_get_proc_address(c"glGetSamplerParameterIuivEXT")));
    glTexBufferEXT_impl = @ptrCast(PFNGLTEXBUFFEREXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint) void), gles2_get_proc_address(c"glTexBufferEXT")));
    glTexBufferRangeEXT_impl = @ptrCast(PFNGLTEXBUFFERRANGEEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) void), gles2_get_proc_address(c"glTexBufferRangeEXT")));
    glTexStorage1DEXT_impl = @ptrCast(PFNGLTEXSTORAGE1DEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei) void), gles2_get_proc_address(c"glTexStorage1DEXT")));
    glTexStorage2DEXT_impl = @ptrCast(PFNGLTEXSTORAGE2DEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glTexStorage2DEXT")));
    glTexStorage3DEXT_impl = @ptrCast(PFNGLTEXSTORAGE3DEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) void), gles2_get_proc_address(c"glTexStorage3DEXT")));
    glTextureStorage1DEXT_impl = @ptrCast(PFNGLTEXTURESTORAGE1DEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) void), gles2_get_proc_address(c"glTextureStorage1DEXT")));
    glTextureStorage2DEXT_impl = @ptrCast(PFNGLTEXTURESTORAGE2DEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glTextureStorage2DEXT")));
    glTextureStorage3DEXT_impl = @ptrCast(PFNGLTEXTURESTORAGE3DEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) void), gles2_get_proc_address(c"glTextureStorage3DEXT")));
    glTextureViewEXT_impl = @ptrCast(PFNGLTEXTUREVIEWEXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) void), gles2_get_proc_address(c"glTextureViewEXT")));
    glAcquireKeyedMutexWin32EXT_impl = @ptrCast(PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint64, GLuint) GLboolean), gles2_get_proc_address(c"glAcquireKeyedMutexWin32EXT")));
    glReleaseKeyedMutexWin32EXT_impl = @ptrCast(PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint64) GLboolean), gles2_get_proc_address(c"glReleaseKeyedMutexWin32EXT")));
    glWindowRectanglesEXT_impl = @ptrCast(PFNGLWINDOWRECTANGLESEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glWindowRectanglesEXT")));
    glGetTextureHandleIMG_impl = @ptrCast(PFNGLGETTEXTUREHANDLEIMGPROC, @alignCast(@alignOf(extern fn (GLuint) GLuint64), gles2_get_proc_address(c"glGetTextureHandleIMG")));
    glGetTextureSamplerHandleIMG_impl = @ptrCast(PFNGLGETTEXTURESAMPLERHANDLEIMGPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) GLuint64), gles2_get_proc_address(c"glGetTextureSamplerHandleIMG")));
    glUniformHandleui64IMG_impl = @ptrCast(PFNGLUNIFORMHANDLEUI64IMGPROC, @alignCast(@alignOf(extern fn (GLint, GLuint64) void), gles2_get_proc_address(c"glUniformHandleui64IMG")));
    glUniformHandleui64vIMG_impl = @ptrCast(PFNGLUNIFORMHANDLEUI64VIMGPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLuint64) void), gles2_get_proc_address(c"glUniformHandleui64vIMG")));
    glProgramUniformHandleui64IMG_impl = @ptrCast(PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint64) void), gles2_get_proc_address(c"glProgramUniformHandleui64IMG")));
    glProgramUniformHandleui64vIMG_impl = @ptrCast(PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void), gles2_get_proc_address(c"glProgramUniformHandleui64vIMG")));
    glFramebufferTexture2DDownsampleIMG_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) void), gles2_get_proc_address(c"glFramebufferTexture2DDownsampleIMG")));
    glFramebufferTextureLayerDownsampleIMG_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) void), gles2_get_proc_address(c"glFramebufferTextureLayerDownsampleIMG")));
    glRenderbufferStorageMultisampleIMG_impl = @ptrCast(PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glRenderbufferStorageMultisampleIMG")));
    glFramebufferTexture2DMultisampleIMG_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) void), gles2_get_proc_address(c"glFramebufferTexture2DMultisampleIMG")));
    glApplyFramebufferAttachmentCMAAINTEL_impl = @ptrCast(PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glApplyFramebufferAttachmentCMAAINTEL")));
    glBeginPerfQueryINTEL_impl = @ptrCast(PFNGLBEGINPERFQUERYINTELPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glBeginPerfQueryINTEL")));
    glCreatePerfQueryINTEL_impl = @ptrCast(PFNGLCREATEPERFQUERYINTELPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]GLuint) void), gles2_get_proc_address(c"glCreatePerfQueryINTEL")));
    glDeletePerfQueryINTEL_impl = @ptrCast(PFNGLDELETEPERFQUERYINTELPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glDeletePerfQueryINTEL")));
    glEndPerfQueryINTEL_impl = @ptrCast(PFNGLENDPERFQUERYINTELPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glEndPerfQueryINTEL")));
    glGetFirstPerfQueryIdINTEL_impl = @ptrCast(PFNGLGETFIRSTPERFQUERYIDINTELPROC, @alignCast(@alignOf(extern fn ([*c]GLuint) void), gles2_get_proc_address(c"glGetFirstPerfQueryIdINTEL")));
    glGetNextPerfQueryIdINTEL_impl = @ptrCast(PFNGLGETNEXTPERFQUERYIDINTELPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]GLuint) void), gles2_get_proc_address(c"glGetNextPerfQueryIdINTEL")));
    glGetPerfCounterInfoINTEL_impl = @ptrCast(PFNGLGETPERFCOUNTERINFOINTELPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) void), gles2_get_proc_address(c"glGetPerfCounterInfoINTEL")));
    glGetPerfQueryDataINTEL_impl = @ptrCast(PFNGLGETPERFQUERYDATAINTELPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLsizei, ?*c_void, [*c]GLuint) void), gles2_get_proc_address(c"glGetPerfQueryDataINTEL")));
    glGetPerfQueryIdByNameINTEL_impl = @ptrCast(PFNGLGETPERFQUERYIDBYNAMEINTELPROC, @alignCast(@alignOf(extern fn ([*c]GLchar, [*c]GLuint) void), gles2_get_proc_address(c"glGetPerfQueryIdByNameINTEL")));
    glGetPerfQueryInfoINTEL_impl = @ptrCast(PFNGLGETPERFQUERYINFOINTELPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) void), gles2_get_proc_address(c"glGetPerfQueryInfoINTEL")));
    glGetTextureHandleNV_impl = @ptrCast(PFNGLGETTEXTUREHANDLENVPROC, @alignCast(@alignOf(extern fn (GLuint) GLuint64), gles2_get_proc_address(c"glGetTextureHandleNV")));
    glGetTextureSamplerHandleNV_impl = @ptrCast(PFNGLGETTEXTURESAMPLERHANDLENVPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) GLuint64), gles2_get_proc_address(c"glGetTextureSamplerHandleNV")));
    glMakeTextureHandleResidentNV_impl = @ptrCast(PFNGLMAKETEXTUREHANDLERESIDENTNVPROC, @alignCast(@alignOf(extern fn (GLuint64) void), gles2_get_proc_address(c"glMakeTextureHandleResidentNV")));
    glMakeTextureHandleNonResidentNV_impl = @ptrCast(PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC, @alignCast(@alignOf(extern fn (GLuint64) void), gles2_get_proc_address(c"glMakeTextureHandleNonResidentNV")));
    glGetImageHandleNV_impl = @ptrCast(PFNGLGETIMAGEHANDLENVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLboolean, GLint, GLenum) GLuint64), gles2_get_proc_address(c"glGetImageHandleNV")));
    glMakeImageHandleResidentNV_impl = @ptrCast(PFNGLMAKEIMAGEHANDLERESIDENTNVPROC, @alignCast(@alignOf(extern fn (GLuint64, GLenum) void), gles2_get_proc_address(c"glMakeImageHandleResidentNV")));
    glMakeImageHandleNonResidentNV_impl = @ptrCast(PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC, @alignCast(@alignOf(extern fn (GLuint64) void), gles2_get_proc_address(c"glMakeImageHandleNonResidentNV")));
    glUniformHandleui64NV_impl = @ptrCast(PFNGLUNIFORMHANDLEUI64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLuint64) void), gles2_get_proc_address(c"glUniformHandleui64NV")));
    glUniformHandleui64vNV_impl = @ptrCast(PFNGLUNIFORMHANDLEUI64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLuint64) void), gles2_get_proc_address(c"glUniformHandleui64vNV")));
    glProgramUniformHandleui64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint64) void), gles2_get_proc_address(c"glProgramUniformHandleui64NV")));
    glProgramUniformHandleui64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void), gles2_get_proc_address(c"glProgramUniformHandleui64vNV")));
    glIsTextureHandleResidentNV_impl = @ptrCast(PFNGLISTEXTUREHANDLERESIDENTNVPROC, @alignCast(@alignOf(extern fn (GLuint64) GLboolean), gles2_get_proc_address(c"glIsTextureHandleResidentNV")));
    glIsImageHandleResidentNV_impl = @ptrCast(PFNGLISIMAGEHANDLERESIDENTNVPROC, @alignCast(@alignOf(extern fn (GLuint64) GLboolean), gles2_get_proc_address(c"glIsImageHandleResidentNV")));
    glBlendParameteriNV_impl = @ptrCast(PFNGLBLENDPARAMETERINVPROC, @alignCast(@alignOf(extern fn (GLenum, GLint) void), gles2_get_proc_address(c"glBlendParameteriNV")));
    glBlendBarrierNV_impl = @ptrCast(PFNGLBLENDBARRIERNVPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glBlendBarrierNV")));
    glViewportPositionWScaleNV_impl = @ptrCast(PFNGLVIEWPORTPOSITIONWSCALENVPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat) void), gles2_get_proc_address(c"glViewportPositionWScaleNV")));
    glBeginConditionalRenderNV_impl = @ptrCast(PFNGLBEGINCONDITIONALRENDERNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum) void), gles2_get_proc_address(c"glBeginConditionalRenderNV")));
    glEndConditionalRenderNV_impl = @ptrCast(PFNGLENDCONDITIONALRENDERNVPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glEndConditionalRenderNV")));
    glSubpixelPrecisionBiasNV_impl = @ptrCast(PFNGLSUBPIXELPRECISIONBIASNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) void), gles2_get_proc_address(c"glSubpixelPrecisionBiasNV")));
    glConservativeRasterParameteriNV_impl = @ptrCast(PFNGLCONSERVATIVERASTERPARAMETERINVPROC, @alignCast(@alignOf(extern fn (GLenum, GLint) void), gles2_get_proc_address(c"glConservativeRasterParameteriNV")));
    glCopyBufferSubDataNV_impl = @ptrCast(PFNGLCOPYBUFFERSUBDATANVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) void), gles2_get_proc_address(c"glCopyBufferSubDataNV")));
    glCoverageMaskNV_impl = @ptrCast(PFNGLCOVERAGEMASKNVPROC, @alignCast(@alignOf(extern fn (GLboolean) void), gles2_get_proc_address(c"glCoverageMaskNV")));
    glCoverageOperationNV_impl = @ptrCast(PFNGLCOVERAGEOPERATIONNVPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glCoverageOperationNV")));
    glDrawBuffersNV_impl = @ptrCast(PFNGLDRAWBUFFERSNVPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLenum) void), gles2_get_proc_address(c"glDrawBuffersNV")));
    glDrawArraysInstancedNV_impl = @ptrCast(PFNGLDRAWARRAYSINSTANCEDNVPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glDrawArraysInstancedNV")));
    glDrawElementsInstancedNV_impl = @ptrCast(PFNGLDRAWELEMENTSINSTANCEDNVPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void), gles2_get_proc_address(c"glDrawElementsInstancedNV")));
    glDrawVkImageNV_impl = @ptrCast(PFNGLDRAWVKIMAGENVPROC, @alignCast(@alignOf(extern fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glDrawVkImageNV")));
    glGetVkProcAddrNV_impl = @ptrCast(PFNGLGETVKPROCADDRNVPROC, @alignCast(@alignOf(extern fn ([*c]const GLchar) GLVULKANPROCNV), gles2_get_proc_address(c"glGetVkProcAddrNV")));
    glWaitVkSemaphoreNV_impl = @ptrCast(PFNGLWAITVKSEMAPHORENVPROC, @alignCast(@alignOf(extern fn (GLuint64) void), gles2_get_proc_address(c"glWaitVkSemaphoreNV")));
    glSignalVkSemaphoreNV_impl = @ptrCast(PFNGLSIGNALVKSEMAPHORENVPROC, @alignCast(@alignOf(extern fn (GLuint64) void), gles2_get_proc_address(c"glSignalVkSemaphoreNV")));
    glSignalVkFenceNV_impl = @ptrCast(PFNGLSIGNALVKFENCENVPROC, @alignCast(@alignOf(extern fn (GLuint64) void), gles2_get_proc_address(c"glSignalVkFenceNV")));
    glDeleteFencesNV_impl = @ptrCast(PFNGLDELETEFENCESNVPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLuint) void), gles2_get_proc_address(c"glDeleteFencesNV")));
    glGenFencesNV_impl = @ptrCast(PFNGLGENFENCESNVPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGenFencesNV")));
    glIsFenceNV_impl = @ptrCast(PFNGLISFENCENVPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsFenceNV")));
    glTestFenceNV_impl = @ptrCast(PFNGLTESTFENCENVPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glTestFenceNV")));
    glGetFenceivNV_impl = @ptrCast(PFNGLGETFENCEIVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetFenceivNV")));
    glFinishFenceNV_impl = @ptrCast(PFNGLFINISHFENCENVPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glFinishFenceNV")));
    glSetFenceNV_impl = @ptrCast(PFNGLSETFENCENVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum) void), gles2_get_proc_address(c"glSetFenceNV")));
    glFragmentCoverageColorNV_impl = @ptrCast(PFNGLFRAGMENTCOVERAGECOLORNVPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glFragmentCoverageColorNV")));
    glBlitFramebufferNV_impl = @ptrCast(PFNGLBLITFRAMEBUFFERNVPROC, @alignCast(@alignOf(extern fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) void), gles2_get_proc_address(c"glBlitFramebufferNV")));
    glCoverageModulationTableNV_impl = @ptrCast(PFNGLCOVERAGEMODULATIONTABLENVPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glCoverageModulationTableNV")));
    glGetCoverageModulationTableNV_impl = @ptrCast(PFNGLGETCOVERAGEMODULATIONTABLENVPROC, @alignCast(@alignOf(extern fn (GLsizei, [*c]GLfloat) void), gles2_get_proc_address(c"glGetCoverageModulationTableNV")));
    glCoverageModulationNV_impl = @ptrCast(PFNGLCOVERAGEMODULATIONNVPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glCoverageModulationNV")));
    glRenderbufferStorageMultisampleNV_impl = @ptrCast(PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void), gles2_get_proc_address(c"glRenderbufferStorageMultisampleNV")));
    glUniform1i64NV_impl = @ptrCast(PFNGLUNIFORM1I64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLint64EXT) void), gles2_get_proc_address(c"glUniform1i64NV")));
    glUniform2i64NV_impl = @ptrCast(PFNGLUNIFORM2I64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLint64EXT, GLint64EXT) void), gles2_get_proc_address(c"glUniform2i64NV")));
    glUniform3i64NV_impl = @ptrCast(PFNGLUNIFORM3I64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) void), gles2_get_proc_address(c"glUniform3i64NV")));
    glUniform4i64NV_impl = @ptrCast(PFNGLUNIFORM4I64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) void), gles2_get_proc_address(c"glUniform4i64NV")));
    glUniform1i64vNV_impl = @ptrCast(PFNGLUNIFORM1I64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLint64EXT) void), gles2_get_proc_address(c"glUniform1i64vNV")));
    glUniform2i64vNV_impl = @ptrCast(PFNGLUNIFORM2I64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLint64EXT) void), gles2_get_proc_address(c"glUniform2i64vNV")));
    glUniform3i64vNV_impl = @ptrCast(PFNGLUNIFORM3I64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLint64EXT) void), gles2_get_proc_address(c"glUniform3i64vNV")));
    glUniform4i64vNV_impl = @ptrCast(PFNGLUNIFORM4I64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLint64EXT) void), gles2_get_proc_address(c"glUniform4i64vNV")));
    glUniform1ui64NV_impl = @ptrCast(PFNGLUNIFORM1UI64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLuint64EXT) void), gles2_get_proc_address(c"glUniform1ui64NV")));
    glUniform2ui64NV_impl = @ptrCast(PFNGLUNIFORM2UI64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLuint64EXT, GLuint64EXT) void), gles2_get_proc_address(c"glUniform2ui64NV")));
    glUniform3ui64NV_impl = @ptrCast(PFNGLUNIFORM3UI64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) void), gles2_get_proc_address(c"glUniform3ui64NV")));
    glUniform4ui64NV_impl = @ptrCast(PFNGLUNIFORM4UI64NVPROC, @alignCast(@alignOf(extern fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) void), gles2_get_proc_address(c"glUniform4ui64NV")));
    glUniform1ui64vNV_impl = @ptrCast(PFNGLUNIFORM1UI64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void), gles2_get_proc_address(c"glUniform1ui64vNV")));
    glUniform2ui64vNV_impl = @ptrCast(PFNGLUNIFORM2UI64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void), gles2_get_proc_address(c"glUniform2ui64vNV")));
    glUniform3ui64vNV_impl = @ptrCast(PFNGLUNIFORM3UI64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void), gles2_get_proc_address(c"glUniform3ui64vNV")));
    glUniform4ui64vNV_impl = @ptrCast(PFNGLUNIFORM4UI64VNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void), gles2_get_proc_address(c"glUniform4ui64vNV")));
    glGetUniformi64vNV_impl = @ptrCast(PFNGLGETUNIFORMI64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, [*c]GLint64EXT) void), gles2_get_proc_address(c"glGetUniformi64vNV")));
    glProgramUniform1i64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORM1I64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint64EXT) void), gles2_get_proc_address(c"glProgramUniform1i64NV")));
    glProgramUniform2i64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORM2I64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint64EXT, GLint64EXT) void), gles2_get_proc_address(c"glProgramUniform2i64NV")));
    glProgramUniform3i64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORM3I64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) void), gles2_get_proc_address(c"glProgramUniform3i64NV")));
    glProgramUniform4i64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORM4I64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) void), gles2_get_proc_address(c"glProgramUniform4i64NV")));
    glProgramUniform1i64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORM1I64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void), gles2_get_proc_address(c"glProgramUniform1i64vNV")));
    glProgramUniform2i64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORM2I64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void), gles2_get_proc_address(c"glProgramUniform2i64vNV")));
    glProgramUniform3i64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORM3I64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void), gles2_get_proc_address(c"glProgramUniform3i64vNV")));
    glProgramUniform4i64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORM4I64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void), gles2_get_proc_address(c"glProgramUniform4i64vNV")));
    glProgramUniform1ui64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORM1UI64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint64EXT) void), gles2_get_proc_address(c"glProgramUniform1ui64NV")));
    glProgramUniform2ui64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORM2UI64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) void), gles2_get_proc_address(c"glProgramUniform2ui64NV")));
    glProgramUniform3ui64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORM3UI64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) void), gles2_get_proc_address(c"glProgramUniform3ui64NV")));
    glProgramUniform4ui64NV_impl = @ptrCast(PFNGLPROGRAMUNIFORM4UI64NVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) void), gles2_get_proc_address(c"glProgramUniform4ui64NV")));
    glProgramUniform1ui64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORM1UI64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void), gles2_get_proc_address(c"glProgramUniform1ui64vNV")));
    glProgramUniform2ui64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORM2UI64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void), gles2_get_proc_address(c"glProgramUniform2ui64vNV")));
    glProgramUniform3ui64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORM3UI64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void), gles2_get_proc_address(c"glProgramUniform3ui64vNV")));
    glProgramUniform4ui64vNV_impl = @ptrCast(PFNGLPROGRAMUNIFORM4UI64VNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void), gles2_get_proc_address(c"glProgramUniform4ui64vNV")));
    glVertexAttribDivisorNV_impl = @ptrCast(PFNGLVERTEXATTRIBDIVISORNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) void), gles2_get_proc_address(c"glVertexAttribDivisorNV")));
    glGetInternalformatSampleivNV_impl = @ptrCast(PFNGLGETINTERNALFORMATSAMPLEIVNVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) void), gles2_get_proc_address(c"glGetInternalformatSampleivNV")));
    glUniformMatrix2x3fvNV_impl = @ptrCast(PFNGLUNIFORMMATRIX2X3FVNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix2x3fvNV")));
    glUniformMatrix3x2fvNV_impl = @ptrCast(PFNGLUNIFORMMATRIX3X2FVNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix3x2fvNV")));
    glUniformMatrix2x4fvNV_impl = @ptrCast(PFNGLUNIFORMMATRIX2X4FVNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix2x4fvNV")));
    glUniformMatrix4x2fvNV_impl = @ptrCast(PFNGLUNIFORMMATRIX4X2FVNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix4x2fvNV")));
    glUniformMatrix3x4fvNV_impl = @ptrCast(PFNGLUNIFORMMATRIX3X4FVNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix3x4fvNV")));
    glUniformMatrix4x3fvNV_impl = @ptrCast(PFNGLUNIFORMMATRIX4X3FVNVPROC, @alignCast(@alignOf(extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void), gles2_get_proc_address(c"glUniformMatrix4x3fvNV")));
    glGenPathsNV_impl = @ptrCast(PFNGLGENPATHSNVPROC, @alignCast(@alignOf(extern fn (GLsizei) GLuint), gles2_get_proc_address(c"glGenPathsNV")));
    glDeletePathsNV_impl = @ptrCast(PFNGLDELETEPATHSNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei) void), gles2_get_proc_address(c"glDeletePathsNV")));
    glIsPathNV_impl = @ptrCast(PFNGLISPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glIsPathNV")));
    glPathCommandsNV_impl = @ptrCast(PFNGLPATHCOMMANDSNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glPathCommandsNV")));
    glPathCoordsNV_impl = @ptrCast(PFNGLPATHCOORDSNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glPathCoordsNV")));
    glPathSubCommandsNV_impl = @ptrCast(PFNGLPATHSUBCOMMANDSNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glPathSubCommandsNV")));
    glPathSubCoordsNV_impl = @ptrCast(PFNGLPATHSUBCOORDSNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLsizei, GLenum, ?*const c_void) void), gles2_get_proc_address(c"glPathSubCoordsNV")));
    glPathStringNV_impl = @ptrCast(PFNGLPATHSTRINGNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLsizei, ?*const c_void) void), gles2_get_proc_address(c"glPathStringNV")));
    glPathGlyphsNV_impl = @ptrCast(PFNGLPATHGLYPHSNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLsizei, GLenum, ?*const c_void, GLenum, GLuint, GLfloat) void), gles2_get_proc_address(c"glPathGlyphsNV")));
    glPathGlyphRangeNV_impl = @ptrCast(PFNGLPATHGLYPHRANGENVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) void), gles2_get_proc_address(c"glPathGlyphRangeNV")));
    glWeightPathsNV_impl = @ptrCast(PFNGLWEIGHTPATHSNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) void), gles2_get_proc_address(c"glWeightPathsNV")));
    glCopyPathNV_impl = @ptrCast(PFNGLCOPYPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint) void), gles2_get_proc_address(c"glCopyPathNV")));
    glInterpolatePathsNV_impl = @ptrCast(PFNGLINTERPOLATEPATHSNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLuint, GLfloat) void), gles2_get_proc_address(c"glInterpolatePathsNV")));
    glTransformPathNV_impl = @ptrCast(PFNGLTRANSFORMPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glTransformPathNV")));
    glPathParameterivNV_impl = @ptrCast(PFNGLPATHPARAMETERIVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLint) void), gles2_get_proc_address(c"glPathParameterivNV")));
    glPathParameteriNV_impl = @ptrCast(PFNGLPATHPARAMETERINVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLint) void), gles2_get_proc_address(c"glPathParameteriNV")));
    glPathParameterfvNV_impl = @ptrCast(PFNGLPATHPARAMETERFVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glPathParameterfvNV")));
    glPathParameterfNV_impl = @ptrCast(PFNGLPATHPARAMETERFNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLfloat) void), gles2_get_proc_address(c"glPathParameterfNV")));
    glPathDashArrayNV_impl = @ptrCast(PFNGLPATHDASHARRAYNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glPathDashArrayNV")));
    glPathStencilFuncNV_impl = @ptrCast(PFNGLPATHSTENCILFUNCNVPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLuint) void), gles2_get_proc_address(c"glPathStencilFuncNV")));
    glPathStencilDepthOffsetNV_impl = @ptrCast(PFNGLPATHSTENCILDEPTHOFFSETNVPROC, @alignCast(@alignOf(extern fn (GLfloat, GLfloat) void), gles2_get_proc_address(c"glPathStencilDepthOffsetNV")));
    glStencilFillPathNV_impl = @ptrCast(PFNGLSTENCILFILLPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLuint) void), gles2_get_proc_address(c"glStencilFillPathNV")));
    glStencilStrokePathNV_impl = @ptrCast(PFNGLSTENCILSTROKEPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint) void), gles2_get_proc_address(c"glStencilStrokePathNV")));
    glStencilFillPathInstancedNV_impl = @ptrCast(PFNGLSTENCILFILLPATHINSTANCEDNVPROC, @alignCast(@alignOf(extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glStencilFillPathInstancedNV")));
    glStencilStrokePathInstancedNV_impl = @ptrCast(PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC, @alignCast(@alignOf(extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glStencilStrokePathInstancedNV")));
    glPathCoverDepthFuncNV_impl = @ptrCast(PFNGLPATHCOVERDEPTHFUNCNVPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glPathCoverDepthFuncNV")));
    glCoverFillPathNV_impl = @ptrCast(PFNGLCOVERFILLPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum) void), gles2_get_proc_address(c"glCoverFillPathNV")));
    glCoverStrokePathNV_impl = @ptrCast(PFNGLCOVERSTROKEPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum) void), gles2_get_proc_address(c"glCoverStrokePathNV")));
    glCoverFillPathInstancedNV_impl = @ptrCast(PFNGLCOVERFILLPATHINSTANCEDNVPROC, @alignCast(@alignOf(extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glCoverFillPathInstancedNV")));
    glCoverStrokePathInstancedNV_impl = @ptrCast(PFNGLCOVERSTROKEPATHINSTANCEDNVPROC, @alignCast(@alignOf(extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glCoverStrokePathInstancedNV")));
    glGetPathParameterivNV_impl = @ptrCast(PFNGLGETPATHPARAMETERIVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glGetPathParameterivNV")));
    glGetPathParameterfvNV_impl = @ptrCast(PFNGLGETPATHPARAMETERFVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLfloat) void), gles2_get_proc_address(c"glGetPathParameterfvNV")));
    glGetPathCommandsNV_impl = @ptrCast(PFNGLGETPATHCOMMANDSNVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]GLubyte) void), gles2_get_proc_address(c"glGetPathCommandsNV")));
    glGetPathCoordsNV_impl = @ptrCast(PFNGLGETPATHCOORDSNVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]GLfloat) void), gles2_get_proc_address(c"glGetPathCoordsNV")));
    glGetPathDashArrayNV_impl = @ptrCast(PFNGLGETPATHDASHARRAYNVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]GLfloat) void), gles2_get_proc_address(c"glGetPathDashArrayNV")));
    glGetPathMetricsNV_impl = @ptrCast(PFNGLGETPATHMETRICSNVPROC, @alignCast(@alignOf(extern fn (GLbitfield, GLsizei, GLenum, ?*const c_void, GLuint, GLsizei, [*c]GLfloat) void), gles2_get_proc_address(c"glGetPathMetricsNV")));
    glGetPathMetricRangeNV_impl = @ptrCast(PFNGLGETPATHMETRICRANGENVPROC, @alignCast(@alignOf(extern fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) void), gles2_get_proc_address(c"glGetPathMetricRangeNV")));
    glGetPathSpacingNV_impl = @ptrCast(PFNGLGETPATHSPACINGNVPROC, @alignCast(@alignOf(extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) void), gles2_get_proc_address(c"glGetPathSpacingNV")));
    glIsPointInFillPathNV_impl = @ptrCast(PFNGLISPOINTINFILLPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLfloat, GLfloat) GLboolean), gles2_get_proc_address(c"glIsPointInFillPathNV")));
    glIsPointInStrokePathNV_impl = @ptrCast(PFNGLISPOINTINSTROKEPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat) GLboolean), gles2_get_proc_address(c"glIsPointInStrokePathNV")));
    glGetPathLengthNV_impl = @ptrCast(PFNGLGETPATHLENGTHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLsizei) GLfloat), gles2_get_proc_address(c"glGetPathLengthNV")));
    glPointAlongPathNV_impl = @ptrCast(PFNGLPOINTALONGPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) GLboolean), gles2_get_proc_address(c"glPointAlongPathNV")));
    glMatrixLoad3x2fNV_impl = @ptrCast(PFNGLMATRIXLOAD3X2FNVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixLoad3x2fNV")));
    glMatrixLoad3x3fNV_impl = @ptrCast(PFNGLMATRIXLOAD3X3FNVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixLoad3x3fNV")));
    glMatrixLoadTranspose3x3fNV_impl = @ptrCast(PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixLoadTranspose3x3fNV")));
    glMatrixMult3x2fNV_impl = @ptrCast(PFNGLMATRIXMULT3X2FNVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixMult3x2fNV")));
    glMatrixMult3x3fNV_impl = @ptrCast(PFNGLMATRIXMULT3X3FNVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixMult3x3fNV")));
    glMatrixMultTranspose3x3fNV_impl = @ptrCast(PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixMultTranspose3x3fNV")));
    glStencilThenCoverFillPathNV_impl = @ptrCast(PFNGLSTENCILTHENCOVERFILLPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLuint, GLenum) void), gles2_get_proc_address(c"glStencilThenCoverFillPathNV")));
    glStencilThenCoverStrokePathNV_impl = @ptrCast(PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLuint, GLenum) void), gles2_get_proc_address(c"glStencilThenCoverStrokePathNV")));
    glStencilThenCoverFillPathInstancedNV_impl = @ptrCast(PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC, @alignCast(@alignOf(extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glStencilThenCoverFillPathInstancedNV")));
    glStencilThenCoverStrokePathInstancedNV_impl = @ptrCast(PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC, @alignCast(@alignOf(extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glStencilThenCoverStrokePathInstancedNV")));
    glPathGlyphIndexRangeNV_impl = @ptrCast(PFNGLPATHGLYPHINDEXRANGENVPROC, @alignCast(@alignOf(extern fn (GLenum, ?*const c_void, GLbitfield, GLuint, GLfloat, [*c]GLuint) GLenum), gles2_get_proc_address(c"glPathGlyphIndexRangeNV")));
    glPathGlyphIndexArrayNV_impl = @ptrCast(PFNGLPATHGLYPHINDEXARRAYNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) GLenum), gles2_get_proc_address(c"glPathGlyphIndexArrayNV")));
    glPathMemoryGlyphIndexArrayNV_impl = @ptrCast(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLsizeiptr, ?*const c_void, GLsizei, GLuint, GLsizei, GLuint, GLfloat) GLenum), gles2_get_proc_address(c"glPathMemoryGlyphIndexArrayNV")));
    glProgramPathFragmentInputGenNV_impl = @ptrCast(PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) void), gles2_get_proc_address(c"glProgramPathFragmentInputGenNV")));
    glGetProgramResourcefvNV_impl = @ptrCast(PFNGLGETPROGRAMRESOURCEFVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) void), gles2_get_proc_address(c"glGetProgramResourcefvNV")));
    glMatrixFrustumEXT_impl = @ptrCast(PFNGLMATRIXFRUSTUMEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) void), gles2_get_proc_address(c"glMatrixFrustumEXT")));
    glMatrixLoadIdentityEXT_impl = @ptrCast(PFNGLMATRIXLOADIDENTITYEXTPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glMatrixLoadIdentityEXT")));
    glMatrixLoadTransposefEXT_impl = @ptrCast(PFNGLMATRIXLOADTRANSPOSEFEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixLoadTransposefEXT")));
    glMatrixLoadTransposedEXT_impl = @ptrCast(PFNGLMATRIXLOADTRANSPOSEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLdouble) void), gles2_get_proc_address(c"glMatrixLoadTransposedEXT")));
    glMatrixLoadfEXT_impl = @ptrCast(PFNGLMATRIXLOADFEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixLoadfEXT")));
    glMatrixLoaddEXT_impl = @ptrCast(PFNGLMATRIXLOADDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLdouble) void), gles2_get_proc_address(c"glMatrixLoaddEXT")));
    glMatrixMultTransposefEXT_impl = @ptrCast(PFNGLMATRIXMULTTRANSPOSEFEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixMultTransposefEXT")));
    glMatrixMultTransposedEXT_impl = @ptrCast(PFNGLMATRIXMULTTRANSPOSEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLdouble) void), gles2_get_proc_address(c"glMatrixMultTransposedEXT")));
    glMatrixMultfEXT_impl = @ptrCast(PFNGLMATRIXMULTFEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLfloat) void), gles2_get_proc_address(c"glMatrixMultfEXT")));
    glMatrixMultdEXT_impl = @ptrCast(PFNGLMATRIXMULTDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, [*c]const GLdouble) void), gles2_get_proc_address(c"glMatrixMultdEXT")));
    glMatrixOrthoEXT_impl = @ptrCast(PFNGLMATRIXORTHOEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) void), gles2_get_proc_address(c"glMatrixOrthoEXT")));
    glMatrixPopEXT_impl = @ptrCast(PFNGLMATRIXPOPEXTPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glMatrixPopEXT")));
    glMatrixPushEXT_impl = @ptrCast(PFNGLMATRIXPUSHEXTPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glMatrixPushEXT")));
    glMatrixRotatefEXT_impl = @ptrCast(PFNGLMATRIXROTATEFEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glMatrixRotatefEXT")));
    glMatrixRotatedEXT_impl = @ptrCast(PFNGLMATRIXROTATEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) void), gles2_get_proc_address(c"glMatrixRotatedEXT")));
    glMatrixScalefEXT_impl = @ptrCast(PFNGLMATRIXSCALEFEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glMatrixScalefEXT")));
    glMatrixScaledEXT_impl = @ptrCast(PFNGLMATRIXSCALEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLdouble, GLdouble, GLdouble) void), gles2_get_proc_address(c"glMatrixScaledEXT")));
    glMatrixTranslatefEXT_impl = @ptrCast(PFNGLMATRIXTRANSLATEFEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glMatrixTranslatefEXT")));
    glMatrixTranslatedEXT_impl = @ptrCast(PFNGLMATRIXTRANSLATEDEXTPROC, @alignCast(@alignOf(extern fn (GLenum, GLdouble, GLdouble, GLdouble) void), gles2_get_proc_address(c"glMatrixTranslatedEXT")));
    glPolygonModeNV_impl = @ptrCast(PFNGLPOLYGONMODENVPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum) void), gles2_get_proc_address(c"glPolygonModeNV")));
    glReadBufferNV_impl = @ptrCast(PFNGLREADBUFFERNVPROC, @alignCast(@alignOf(extern fn (GLenum) void), gles2_get_proc_address(c"glReadBufferNV")));
    glFramebufferSampleLocationsfvNV_impl = @ptrCast(PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glFramebufferSampleLocationsfvNV")));
    glNamedFramebufferSampleLocationsfvNV_impl = @ptrCast(PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glNamedFramebufferSampleLocationsfvNV")));
    glResolveDepthValuesNV_impl = @ptrCast(PFNGLRESOLVEDEPTHVALUESNVPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glResolveDepthValuesNV")));
    glViewportArrayvNV_impl = @ptrCast(PFNGLVIEWPORTARRAYVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glViewportArrayvNV")));
    glViewportIndexedfNV_impl = @ptrCast(PFNGLVIEWPORTINDEXEDFNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glViewportIndexedfNV")));
    glViewportIndexedfvNV_impl = @ptrCast(PFNGLVIEWPORTINDEXEDFVNVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLfloat) void), gles2_get_proc_address(c"glViewportIndexedfvNV")));
    glScissorArrayvNV_impl = @ptrCast(PFNGLSCISSORARRAYVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLint) void), gles2_get_proc_address(c"glScissorArrayvNV")));
    glScissorIndexedNV_impl = @ptrCast(PFNGLSCISSORINDEXEDNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLint, GLint, GLsizei, GLsizei) void), gles2_get_proc_address(c"glScissorIndexedNV")));
    glScissorIndexedvNV_impl = @ptrCast(PFNGLSCISSORINDEXEDVNVPROC, @alignCast(@alignOf(extern fn (GLuint, [*c]const GLint) void), gles2_get_proc_address(c"glScissorIndexedvNV")));
    glDepthRangeArrayfvNV_impl = @ptrCast(PFNGLDEPTHRANGEARRAYFVNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]const GLfloat) void), gles2_get_proc_address(c"glDepthRangeArrayfvNV")));
    glDepthRangeIndexedfNV_impl = @ptrCast(PFNGLDEPTHRANGEINDEXEDFNVPROC, @alignCast(@alignOf(extern fn (GLuint, GLfloat, GLfloat) void), gles2_get_proc_address(c"glDepthRangeIndexedfNV")));
    glGetFloati_vNV_impl = @ptrCast(PFNGLGETFLOATI_VNVPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint, [*c]GLfloat) void), gles2_get_proc_address(c"glGetFloati_vNV")));
    glEnableiNV_impl = @ptrCast(PFNGLENABLEINVPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glEnableiNV")));
    glDisableiNV_impl = @ptrCast(PFNGLDISABLEINVPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) void), gles2_get_proc_address(c"glDisableiNV")));
    glIsEnablediNV_impl = @ptrCast(PFNGLISENABLEDINVPROC, @alignCast(@alignOf(extern fn (GLenum, GLuint) GLboolean), gles2_get_proc_address(c"glIsEnablediNV")));
    glViewportSwizzleNV_impl = @ptrCast(PFNGLVIEWPORTSWIZZLENVPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void), gles2_get_proc_address(c"glViewportSwizzleNV")));
    glFramebufferTextureMultiviewOVR_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) void), gles2_get_proc_address(c"glFramebufferTextureMultiviewOVR")));
    glFramebufferTextureMultisampleMultiviewOVR_impl = @ptrCast(PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) void), gles2_get_proc_address(c"glFramebufferTextureMultisampleMultiviewOVR")));
    glAlphaFuncQCOM_impl = @ptrCast(PFNGLALPHAFUNCQCOMPROC, @alignCast(@alignOf(extern fn (GLenum, GLclampf) void), gles2_get_proc_address(c"glAlphaFuncQCOM")));
    glGetDriverControlsQCOM_impl = @ptrCast(PFNGLGETDRIVERCONTROLSQCOMPROC, @alignCast(@alignOf(extern fn ([*c]GLint, GLsizei, [*c]GLuint) void), gles2_get_proc_address(c"glGetDriverControlsQCOM")));
    glGetDriverControlStringQCOM_impl = @ptrCast(PFNGLGETDRIVERCONTROLSTRINGQCOMPROC, @alignCast(@alignOf(extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void), gles2_get_proc_address(c"glGetDriverControlStringQCOM")));
    glEnableDriverControlQCOM_impl = @ptrCast(PFNGLENABLEDRIVERCONTROLQCOMPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glEnableDriverControlQCOM")));
    glDisableDriverControlQCOM_impl = @ptrCast(PFNGLDISABLEDRIVERCONTROLQCOMPROC, @alignCast(@alignOf(extern fn (GLuint) void), gles2_get_proc_address(c"glDisableDriverControlQCOM")));
    glExtGetTexturesQCOM_impl = @ptrCast(PFNGLEXTGETTEXTURESQCOMPROC, @alignCast(@alignOf(extern fn ([*c]GLuint, GLint, [*c]GLint) void), gles2_get_proc_address(c"glExtGetTexturesQCOM")));
    glExtGetBuffersQCOM_impl = @ptrCast(PFNGLEXTGETBUFFERSQCOMPROC, @alignCast(@alignOf(extern fn ([*c]GLuint, GLint, [*c]GLint) void), gles2_get_proc_address(c"glExtGetBuffersQCOM")));
    glExtGetRenderbuffersQCOM_impl = @ptrCast(PFNGLEXTGETRENDERBUFFERSQCOMPROC, @alignCast(@alignOf(extern fn ([*c]GLuint, GLint, [*c]GLint) void), gles2_get_proc_address(c"glExtGetRenderbuffersQCOM")));
    glExtGetFramebuffersQCOM_impl = @ptrCast(PFNGLEXTGETFRAMEBUFFERSQCOMPROC, @alignCast(@alignOf(extern fn ([*c]GLuint, GLint, [*c]GLint) void), gles2_get_proc_address(c"glExtGetFramebuffersQCOM")));
    glExtGetTexLevelParameterivQCOM_impl = @ptrCast(PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) void), gles2_get_proc_address(c"glExtGetTexLevelParameterivQCOM")));
    glExtTexObjectStateOverrideiQCOM_impl = @ptrCast(PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC, @alignCast(@alignOf(extern fn (GLenum, GLenum, GLint) void), gles2_get_proc_address(c"glExtTexObjectStateOverrideiQCOM")));
    glExtGetTexSubImageQCOM_impl = @ptrCast(PFNGLEXTGETTEXSUBIMAGEQCOMPROC, @alignCast(@alignOf(extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) void), gles2_get_proc_address(c"glExtGetTexSubImageQCOM")));
    glExtGetBufferPointervQCOM_impl = @ptrCast(PFNGLEXTGETBUFFERPOINTERVQCOMPROC, @alignCast(@alignOf(extern fn (GLenum, [*c](?*c_void)) void), gles2_get_proc_address(c"glExtGetBufferPointervQCOM")));
    glExtGetShadersQCOM_impl = @ptrCast(PFNGLEXTGETSHADERSQCOMPROC, @alignCast(@alignOf(extern fn ([*c]GLuint, GLint, [*c]GLint) void), gles2_get_proc_address(c"glExtGetShadersQCOM")));
    glExtGetProgramsQCOM_impl = @ptrCast(PFNGLEXTGETPROGRAMSQCOMPROC, @alignCast(@alignOf(extern fn ([*c]GLuint, GLint, [*c]GLint) void), gles2_get_proc_address(c"glExtGetProgramsQCOM")));
    glExtIsProgramBinaryQCOM_impl = @ptrCast(PFNGLEXTISPROGRAMBINARYQCOMPROC, @alignCast(@alignOf(extern fn (GLuint) GLboolean), gles2_get_proc_address(c"glExtIsProgramBinaryQCOM")));
    glExtGetProgramBinarySourceQCOM_impl = @ptrCast(PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC, @alignCast(@alignOf(extern fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) void), gles2_get_proc_address(c"glExtGetProgramBinarySourceQCOM")));
    glFramebufferFoveationConfigQCOM_impl = @ptrCast(PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) void), gles2_get_proc_address(c"glFramebufferFoveationConfigQCOM")));
    glFramebufferFoveationParametersQCOM_impl = @ptrCast(PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glFramebufferFoveationParametersQCOM")));
    glFramebufferFetchBarrierQCOM_impl = @ptrCast(PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC, @alignCast(@alignOf(extern fn () void), gles2_get_proc_address(c"glFramebufferFetchBarrierQCOM")));
    glTextureFoveationParametersQCOM_impl = @ptrCast(PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void), gles2_get_proc_address(c"glTextureFoveationParametersQCOM")));
    glStartTilingQCOM_impl = @ptrCast(PFNGLSTARTTILINGQCOMPROC, @alignCast(@alignOf(extern fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) void), gles2_get_proc_address(c"glStartTilingQCOM")));
    glEndTilingQCOM_impl = @ptrCast(PFNGLENDTILINGQCOMPROC, @alignCast(@alignOf(extern fn (GLbitfield) void), gles2_get_proc_address(c"glEndTilingQCOM")));
    }

pub const GLbyte = i8;
pub const GLclampf = f32;
pub const GLfixed = i32;
pub const GLshort = c_short;
pub const GLushort = c_ushort;
pub const GLvoid = c_void;
pub const GLsync = ?*@OpaqueType();
pub const GLint64 = i64;
pub const GLuint64 = u64;
pub const GLenum = c_uint;
pub const GLuint = c_uint;
pub const GLchar = u8;
pub const GLfloat = f32;
pub const GLsizeiptr = c_long;
pub const GLintptr = c_long;
pub const GLbitfield = c_uint;
pub const GLint = c_int;
pub const GLboolean = u8;
pub const GLsizei = c_int;
pub const GLubyte = u8;
pub const GLint64EXT = i64;
pub const GLuint64EXT = u64;
pub const GLdouble = f64;

pub const GLDEBUGPROCKHR = ?extern fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const c_void) void;
pub const GLeglImageOES = ?*c_void;
pub const GLeglClientBufferEXT = ?*c_void;

pub const GLVULKANPROCNV = ?extern fn () void;

const PFNGLACTIVETEXTUREPROC = ?extern fn (GLenum) void;
const PFNGLATTACHSHADERPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLBINDATTRIBLOCATIONPROC = ?extern fn (GLuint, GLuint, [*c]const GLchar) void;
const PFNGLBINDBUFFERPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLBINDFRAMEBUFFERPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLBINDRENDERBUFFERPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLBINDTEXTUREPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLBLENDCOLORPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLBLENDEQUATIONPROC = ?extern fn (GLenum) void;
const PFNGLBLENDEQUATIONSEPARATEPROC = ?extern fn (GLenum, GLenum) void;
const PFNGLBLENDFUNCPROC = ?extern fn (GLenum, GLenum) void;
const PFNGLBLENDFUNCSEPARATEPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum) void;
const PFNGLBUFFERDATAPROC = ?extern fn (GLenum, GLsizeiptr, ?*const c_void, GLenum) void;
const PFNGLBUFFERSUBDATAPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr, ?*const c_void) void;
const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?extern fn (GLenum) GLenum;
const PFNGLCLEARPROC = ?extern fn (GLbitfield) void;
const PFNGLCLEARCOLORPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLCLEARDEPTHFPROC = ?extern fn (GLfloat) void;
const PFNGLCLEARSTENCILPROC = ?extern fn (GLint) void;
const PFNGLCOLORMASKPROC = ?extern fn (GLboolean, GLboolean, GLboolean, GLboolean) void;
const PFNGLCOMPILESHADERPROC = ?extern fn (GLuint) void;
const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void;
const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
const PFNGLCOPYTEXIMAGE2DPROC = ?extern fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) void;
const PFNGLCOPYTEXSUBIMAGE2DPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
const PFNGLCREATEPROGRAMPROC = ?extern fn () GLuint;
const PFNGLCREATESHADERPROC = ?extern fn (GLenum) GLuint;
const PFNGLCULLFACEPROC = ?extern fn (GLenum) void;
const PFNGLDELETEBUFFERSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLDELETEFRAMEBUFFERSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLDELETEPROGRAMPROC = ?extern fn (GLuint) void;
const PFNGLDELETERENDERBUFFERSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLDELETESHADERPROC = ?extern fn (GLuint) void;
const PFNGLDELETETEXTURESPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLDEPTHFUNCPROC = ?extern fn (GLenum) void;
const PFNGLDEPTHMASKPROC = ?extern fn (GLboolean) void;
const PFNGLDEPTHRANGEFPROC = ?extern fn (GLfloat, GLfloat) void;
const PFNGLDETACHSHADERPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLDISABLEPROC = ?extern fn (GLenum) void;
const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?extern fn (GLuint) void;
const PFNGLDRAWARRAYSPROC = ?extern fn (GLenum, GLint, GLsizei) void;
const PFNGLDRAWELEMENTSPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void) void;
const PFNGLENABLEPROC = ?extern fn (GLenum) void;
const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?extern fn (GLuint) void;
const PFNGLFINISHPROC = ?extern fn () void;
const PFNGLFLUSHPROC = ?extern fn () void;
const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint) void;
const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint) void;
const PFNGLFRONTFACEPROC = ?extern fn (GLenum) void;
const PFNGLGENBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLGENERATEMIPMAPPROC = ?extern fn (GLenum) void;
const PFNGLGENFRAMEBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLGENRENDERBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLGENTEXTURESPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLGETACTIVEATTRIBPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) void;
const PFNGLGETACTIVEUNIFORMPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) void;
const PFNGLGETATTACHEDSHADERSPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) void;
const PFNGLGETATTRIBLOCATIONPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
const PFNGLGETBOOLEANVPROC = ?extern fn (GLenum, [*c]GLboolean) void;
const PFNGLGETBUFFERPARAMETERIVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
const PFNGLGETERRORPROC = ?extern fn () GLenum;
const PFNGLGETFLOATVPROC = ?extern fn (GLenum, [*c]GLfloat) void;
const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLint) void;
const PFNGLGETINTEGERVPROC = ?extern fn (GLenum, [*c]GLint) void;
const PFNGLGETPROGRAMIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLGETPROGRAMINFOLOGPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
const PFNGLGETSHADERIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLGETSHADERINFOLOGPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLGETSHADERPRECISIONFORMATPROC = ?extern fn (GLenum, GLenum, [*c]GLint, [*c]GLint) void;
const PFNGLGETSHADERSOURCEPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLGETSTRINGPROC = ?extern fn (GLenum) [*c]const GLubyte;
const PFNGLGETTEXPARAMETERFVPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
const PFNGLGETTEXPARAMETERIVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
const PFNGLGETUNIFORMFVPROC = ?extern fn (GLuint, GLint, [*c]GLfloat) void;
const PFNGLGETUNIFORMIVPROC = ?extern fn (GLuint, GLint, [*c]GLint) void;
const PFNGLGETUNIFORMLOCATIONPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
const PFNGLGETVERTEXATTRIBFVPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
const PFNGLGETVERTEXATTRIBIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?extern fn (GLuint, GLenum, [*c](?*c_void)) void;
const PFNGLHINTPROC = ?extern fn (GLenum, GLenum) void;
const PFNGLISBUFFERPROC = ?extern fn (GLuint) GLboolean;
const PFNGLISENABLEDPROC = ?extern fn (GLenum) GLboolean;
const PFNGLISFRAMEBUFFERPROC = ?extern fn (GLuint) GLboolean;
const PFNGLISPROGRAMPROC = ?extern fn (GLuint) GLboolean;
const PFNGLISRENDERBUFFERPROC = ?extern fn (GLuint) GLboolean;
const PFNGLISSHADERPROC = ?extern fn (GLuint) GLboolean;
const PFNGLISTEXTUREPROC = ?extern fn (GLuint) GLboolean;
const PFNGLLINEWIDTHPROC = ?extern fn (GLfloat) void;
const PFNGLLINKPROGRAMPROC = ?extern fn (GLuint) void;
const PFNGLPIXELSTOREIPROC = ?extern fn (GLenum, GLint) void;
const PFNGLPOLYGONOFFSETPROC = ?extern fn (GLfloat, GLfloat) void;
const PFNGLREADPIXELSPROC = ?extern fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) void;
const PFNGLRELEASESHADERCOMPILERPROC = ?extern fn () void;
const PFNGLRENDERBUFFERSTORAGEPROC = ?extern fn (GLenum, GLenum, GLsizei, GLsizei) void;
const PFNGLSAMPLECOVERAGEPROC = ?extern fn (GLfloat, GLboolean) void;
const PFNGLSCISSORPROC = ?extern fn (GLint, GLint, GLsizei, GLsizei) void;
const PFNGLSHADERBINARYPROC = ?extern fn (GLsizei, [*c]const GLuint, GLenum, ?*const c_void, GLsizei) void;
const PFNGLSHADERSOURCEPROC = ?extern fn (GLuint, GLsizei, [*c]const ([*c]const GLchar), [*c]const GLint) void;
const PFNGLSTENCILFUNCPROC = ?extern fn (GLenum, GLint, GLuint) void;
const PFNGLSTENCILFUNCSEPARATEPROC = ?extern fn (GLenum, GLenum, GLint, GLuint) void;
const PFNGLSTENCILMASKPROC = ?extern fn (GLuint) void;
const PFNGLSTENCILMASKSEPARATEPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLSTENCILOPPROC = ?extern fn (GLenum, GLenum, GLenum) void;
const PFNGLSTENCILOPSEPARATEPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum) void;
const PFNGLTEXIMAGE2DPROC = ?extern fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
const PFNGLTEXPARAMETERFPROC = ?extern fn (GLenum, GLenum, GLfloat) void;
const PFNGLTEXPARAMETERFVPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
const PFNGLTEXPARAMETERIPROC = ?extern fn (GLenum, GLenum, GLint) void;
const PFNGLTEXPARAMETERIVPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
const PFNGLTEXSUBIMAGE2DPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
const PFNGLUNIFORM1FPROC = ?extern fn (GLint, GLfloat) void;
const PFNGLUNIFORM1FVPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
const PFNGLUNIFORM1IPROC = ?extern fn (GLint, GLint) void;
const PFNGLUNIFORM1IVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
const PFNGLUNIFORM2FPROC = ?extern fn (GLint, GLfloat, GLfloat) void;
const PFNGLUNIFORM2FVPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
const PFNGLUNIFORM2IPROC = ?extern fn (GLint, GLint, GLint) void;
const PFNGLUNIFORM2IVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
const PFNGLUNIFORM3FPROC = ?extern fn (GLint, GLfloat, GLfloat, GLfloat) void;
const PFNGLUNIFORM3FVPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
const PFNGLUNIFORM3IPROC = ?extern fn (GLint, GLint, GLint, GLint) void;
const PFNGLUNIFORM3IVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
const PFNGLUNIFORM4FPROC = ?extern fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLUNIFORM4FVPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
const PFNGLUNIFORM4IPROC = ?extern fn (GLint, GLint, GLint, GLint, GLint) void;
const PFNGLUNIFORM4IVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
const PFNGLUNIFORMMATRIX2FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUNIFORMMATRIX3FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUNIFORMMATRIX4FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUSEPROGRAMPROC = ?extern fn (GLuint) void;
const PFNGLVALIDATEPROGRAMPROC = ?extern fn (GLuint) void;
const PFNGLVERTEXATTRIB1FPROC = ?extern fn (GLuint, GLfloat) void;
const PFNGLVERTEXATTRIB1FVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
const PFNGLVERTEXATTRIB2FPROC = ?extern fn (GLuint, GLfloat, GLfloat) void;
const PFNGLVERTEXATTRIB2FVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
const PFNGLVERTEXATTRIB3FPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat) void;
const PFNGLVERTEXATTRIB3FVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
const PFNGLVERTEXATTRIB4FPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLVERTEXATTRIB4FVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
const PFNGLVERTEXATTRIBPOINTERPROC = ?extern fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) void;
const PFNGLVIEWPORTPROC = ?extern fn (GLint, GLint, GLsizei, GLsizei) void;
const PFNGLBLENDBARRIERKHRPROC = ?extern fn () void;
const PFNGLDEBUGMESSAGECONTROLKHRPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) void;
const PFNGLDEBUGMESSAGEINSERTKHRPROC = ?extern fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) void;
const PFNGLDEBUGMESSAGECALLBACKKHRPROC = ?extern fn (GLDEBUGPROCKHR, ?*const c_void) void;
const PFNGLGETDEBUGMESSAGELOGKHRPROC = ?extern fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) GLuint;
const PFNGLPUSHDEBUGGROUPKHRPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void;
const PFNGLPOPDEBUGGROUPKHRPROC = ?extern fn () void;
const PFNGLOBJECTLABELKHRPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void;
const PFNGLGETOBJECTLABELKHRPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLOBJECTPTRLABELKHRPROC = ?extern fn (?*const c_void, GLsizei, [*c]const GLchar) void;
const PFNGLGETOBJECTPTRLABELKHRPROC = ?extern fn (?*const c_void, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLGETPOINTERVKHRPROC = ?extern fn (GLenum, [*c](?*c_void)) void;
const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?extern fn (GLuint) void;
const PFNGLGETGRAPHICSRESETSTATUSKHRPROC = ?extern fn () GLenum;
const PFNGLREADNPIXELSKHRPROC = ?extern fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) void;
const PFNGLGETNUNIFORMFVKHRPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLfloat) void;
const PFNGLGETNUNIFORMIVKHRPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLint) void;
const PFNGLGETNUNIFORMUIVKHRPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLuint) void;
const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?extern fn (GLenum, GLeglImageOES) void;
const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?extern fn (GLenum, GLeglImageOES) void;
const PFNGLCOPYIMAGESUBDATAOESPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void;
const PFNGLENABLEIOESPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLDISABLEIOESPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLBLENDEQUATIONIOESPROC = ?extern fn (GLuint, GLenum) void;
const PFNGLBLENDEQUATIONSEPARATEIOESPROC = ?extern fn (GLuint, GLenum, GLenum) void;
const PFNGLBLENDFUNCIOESPROC = ?extern fn (GLuint, GLenum, GLenum) void;
const PFNGLBLENDFUNCSEPARATEIOESPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void;
const PFNGLCOLORMASKIOESPROC = ?extern fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) void;
const PFNGLISENABLEDIOESPROC = ?extern fn (GLenum, GLuint) GLboolean;
const PFNGLDRAWELEMENTSBASEVERTEXOESPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) void;
const PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) void;
const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) void;
const PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC = ?extern fn (GLenum, [*c]const GLsizei, GLenum, [*c]const (?*const c_void), GLsizei, [*c]const GLint) void;
const PFNGLFRAMEBUFFERTEXTUREOESPROC = ?extern fn (GLenum, GLenum, GLuint, GLint) void;
const PFNGLGETPROGRAMBINARYOESPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*c_void) void;
const PFNGLPROGRAMBINARYOESPROC = ?extern fn (GLuint, GLenum, ?*const c_void, GLint) void;
const PFNGLMAPBUFFEROESPROC = ?extern fn (GLenum, GLenum) ?*c_void;
const PFNGLUNMAPBUFFEROESPROC = ?extern fn (GLenum) GLboolean;
const PFNGLGETBUFFERPOINTERVOESPROC = ?extern fn (GLenum, GLenum, [*c](?*c_void)) void;
const PFNGLPRIMITIVEBOUNDINGBOXOESPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLMINSAMPLESHADINGOESPROC = ?extern fn (GLfloat) void;
const PFNGLPATCHPARAMETERIOESPROC = ?extern fn (GLenum, GLint) void;
const PFNGLTEXIMAGE3DOESPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
const PFNGLTEXSUBIMAGE3DOESPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
const PFNGLCOPYTEXSUBIMAGE3DOESPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
const PFNGLCOMPRESSEDTEXIMAGE3DOESPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void;
const PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
const PFNGLFRAMEBUFFERTEXTURE3DOESPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) void;
const PFNGLTEXPARAMETERIIVOESPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
const PFNGLTEXPARAMETERIUIVOESPROC = ?extern fn (GLenum, GLenum, [*c]const GLuint) void;
const PFNGLGETTEXPARAMETERIIVOESPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
const PFNGLGETTEXPARAMETERIUIVOESPROC = ?extern fn (GLenum, GLenum, [*c]GLuint) void;
const PFNGLSAMPLERPARAMETERIIVOESPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
const PFNGLSAMPLERPARAMETERIUIVOESPROC = ?extern fn (GLuint, GLenum, [*c]const GLuint) void;
const PFNGLGETSAMPLERPARAMETERIIVOESPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLGETSAMPLERPARAMETERIUIVOESPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
const PFNGLTEXBUFFEROESPROC = ?extern fn (GLenum, GLenum, GLuint) void;
const PFNGLTEXBUFFERRANGEOESPROC = ?extern fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) void;
const PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) void;
const PFNGLTEXTUREVIEWOESPROC = ?extern fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) void;
const PFNGLBINDVERTEXARRAYOESPROC = ?extern fn (GLuint) void;
const PFNGLDELETEVERTEXARRAYSOESPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLGENVERTEXARRAYSOESPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLISVERTEXARRAYOESPROC = ?extern fn (GLuint) GLboolean;
const PFNGLVIEWPORTARRAYVOESPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
const PFNGLVIEWPORTINDEXEDFOESPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLVIEWPORTINDEXEDFVOESPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
const PFNGLSCISSORARRAYVOESPROC = ?extern fn (GLuint, GLsizei, [*c]const GLint) void;
const PFNGLSCISSORINDEXEDOESPROC = ?extern fn (GLuint, GLint, GLint, GLsizei, GLsizei) void;
const PFNGLSCISSORINDEXEDVOESPROC = ?extern fn (GLuint, [*c]const GLint) void;
const PFNGLDEPTHRANGEARRAYFVOESPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
const PFNGLDEPTHRANGEINDEXEDFOESPROC = ?extern fn (GLuint, GLfloat, GLfloat) void;
const PFNGLGETFLOATI_VOESPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?extern fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLGETPERFMONITORGROUPSAMDPROC = ?extern fn ([*c]GLint, GLsizei, [*c]GLuint) void;
const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?extern fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) void;
const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?extern fn (GLuint, GLuint, GLenum, ?*c_void) void;
const PFNGLGENPERFMONITORSAMDPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLDELETEPERFMONITORSAMDPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?extern fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) void;
const PFNGLBEGINPERFMONITORAMDPROC = ?extern fn (GLuint) void;
const PFNGLENDPERFMONITORAMDPROC = ?extern fn (GLuint) void;
const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?extern fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) void;
const PFNGLBLITFRAMEBUFFERANGLEPROC = ?extern fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) void;
const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLDRAWARRAYSINSTANCEDANGLEPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei) void;
const PFNGLDRAWELEMENTSINSTANCEDANGLEPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void;
const PFNGLVERTEXATTRIBDIVISORANGLEPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLCOPYTEXTURELEVELSAPPLEPROC = ?extern fn (GLuint, GLuint, GLint, GLsizei) void;
const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC = ?extern fn () void;
const PFNGLFENCESYNCAPPLEPROC = ?extern fn (GLenum, GLbitfield) GLsync;
const PFNGLISSYNCAPPLEPROC = ?extern fn (GLsync) GLboolean;
const PFNGLDELETESYNCAPPLEPROC = ?extern fn (GLsync) void;
const PFNGLCLIENTWAITSYNCAPPLEPROC = ?extern fn (GLsync, GLbitfield, GLuint64) GLenum;
const PFNGLWAITSYNCAPPLEPROC = ?extern fn (GLsync, GLbitfield, GLuint64) void;
const PFNGLGETINTEGER64VAPPLEPROC = ?extern fn (GLenum, [*c]GLint64) void;
const PFNGLGETSYNCIVAPPLEPROC = ?extern fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) void;
const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?extern fn (GLenum, GLeglImageOES, [*c]const GLint) void;
const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?extern fn (GLuint, GLeglImageOES, [*c]const GLint) void;
const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei, GLuint) void;
const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLuint) void;
const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint, GLuint) void;
const PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC = ?extern fn (GLuint, GLuint, GLuint, [*c]const GLchar) void;
const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?extern fn (GLuint, GLuint, [*c]const GLchar) void;
const PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC = ?extern fn (GLuint, GLenum, [*c]const GLchar) GLint;
const PFNGLGETFRAGDATAINDEXEXTPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
const PFNGLBUFFERSTORAGEEXTPROC = ?extern fn (GLenum, GLsizeiptr, ?*const c_void, GLbitfield) void;
const PFNGLCLEARTEXIMAGEEXTPROC = ?extern fn (GLuint, GLint, GLenum, GLenum, ?*const c_void) void;
const PFNGLCLEARTEXSUBIMAGEEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
const PFNGLCLIPCONTROLEXTPROC = ?extern fn (GLenum, GLenum) void;
const PFNGLCOPYIMAGESUBDATAEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void;
const PFNGLLABELOBJECTEXTPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void;
const PFNGLGETOBJECTLABELEXTPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLINSERTEVENTMARKEREXTPROC = ?extern fn (GLsizei, [*c]const GLchar) void;
const PFNGLPUSHGROUPMARKEREXTPROC = ?extern fn (GLsizei, [*c]const GLchar) void;
const PFNGLPOPGROUPMARKEREXTPROC = ?extern fn () void;
const PFNGLDISCARDFRAMEBUFFEREXTPROC = ?extern fn (GLenum, GLsizei, [*c]const GLenum) void;
const PFNGLGENQUERIESEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLDELETEQUERIESEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLISQUERYEXTPROC = ?extern fn (GLuint) GLboolean;
const PFNGLBEGINQUERYEXTPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLENDQUERYEXTPROC = ?extern fn (GLenum) void;
const PFNGLQUERYCOUNTEREXTPROC = ?extern fn (GLuint, GLenum) void;
const PFNGLGETQUERYIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
const PFNGLGETQUERYOBJECTIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLGETQUERYOBJECTUIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
const PFNGLGETQUERYOBJECTI64VEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint64) void;
const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64) void;
const PFNGLDRAWBUFFERSEXTPROC = ?extern fn (GLsizei, [*c]const GLenum) void;
const PFNGLENABLEIEXTPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLDISABLEIEXTPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLBLENDEQUATIONIEXTPROC = ?extern fn (GLuint, GLenum) void;
const PFNGLBLENDEQUATIONSEPARATEIEXTPROC = ?extern fn (GLuint, GLenum, GLenum) void;
const PFNGLBLENDFUNCIEXTPROC = ?extern fn (GLuint, GLenum, GLenum) void;
const PFNGLBLENDFUNCSEPARATEIEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void;
const PFNGLCOLORMASKIEXTPROC = ?extern fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) void;
const PFNGLISENABLEDIEXTPROC = ?extern fn (GLenum, GLuint) GLboolean;
const PFNGLDRAWELEMENTSBASEVERTEXEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) void;
const PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) void;
const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) void;
const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei) void;
const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void;
const PFNGLDRAWTRANSFORMFEEDBACKEXTPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC = ?extern fn (GLenum, GLuint, GLsizei) void;
const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) void;
const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) void;
const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?extern fn (GLenum, GLenum, GLuint, GLint) void;
const PFNGLVERTEXATTRIBDIVISOREXTPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLMAPBUFFERRANGEEXTPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) ?*c_void;
const PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr) void;
const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?extern fn (GLenum, [*c]GLubyte) void;
const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLubyte) void;
const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLISMEMORYOBJECTEXTPROC = ?extern fn (GLuint) GLboolean;
const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLTEXSTORAGEMEM2DEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) void;
const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void;
const PFNGLTEXSTORAGEMEM3DEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) void;
const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void;
const PFNGLBUFFERSTORAGEMEMEXTPROC = ?extern fn (GLenum, GLsizeiptr, GLuint, GLuint64) void;
const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) void;
const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void;
const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) void;
const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void;
const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?extern fn (GLuint, GLsizeiptr, GLuint, GLuint64) void;
const PFNGLIMPORTMEMORYFDEXTPROC = ?extern fn (GLuint, GLuint64, GLenum, GLint) void;
const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?extern fn (GLuint, GLuint64, GLenum, ?*c_void) void;
const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?extern fn (GLuint, GLuint64, GLenum, ?*const c_void) void;
const PFNGLMULTIDRAWARRAYSEXTPROC = ?extern fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) void;
const PFNGLMULTIDRAWELEMENTSEXTPROC = ?extern fn (GLenum, [*c]const GLsizei, GLenum, [*c]const (?*const c_void), GLsizei) void;
const PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC = ?extern fn (GLenum, ?*const c_void, GLsizei, GLsizei) void;
const PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC = ?extern fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) void;
const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) void;
const PFNGLREADBUFFERINDEXEDEXTPROC = ?extern fn (GLenum, GLint) void;
const PFNGLDRAWBUFFERSINDEXEDEXTPROC = ?extern fn (GLint, [*c]const GLenum, [*c]const GLint) void;
const PFNGLGETINTEGERI_VEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLint) void;
const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
const PFNGLPRIMITIVEBOUNDINGBOXEXTPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLRASTERSAMPLESEXTPROC = ?extern fn (GLuint, GLboolean) void;
const PFNGLGETGRAPHICSRESETSTATUSEXTPROC = ?extern fn () GLenum;
const PFNGLREADNPIXELSEXTPROC = ?extern fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) void;
const PFNGLGETNUNIFORMFVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLfloat) void;
const PFNGLGETNUNIFORMIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLint) void;
const PFNGLGENSEMAPHORESEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLDELETESEMAPHORESEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLISSEMAPHOREEXTPROC = ?extern fn (GLuint) GLboolean;
const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?extern fn (GLuint, GLenum, [*c]const GLuint64) void;
const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64) void;
const PFNGLWAITSEMAPHOREEXTPROC = ?extern fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) void;
const PFNGLSIGNALSEMAPHOREEXTPROC = ?extern fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) void;
const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?extern fn (GLuint, GLenum, GLint) void;
const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?extern fn (GLuint, GLenum, ?*c_void) void;
const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?extern fn (GLuint, GLenum, ?*const c_void) void;
const PFNGLACTIVESHADERPROGRAMEXTPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLBINDPROGRAMPIPELINEEXTPROC = ?extern fn (GLuint) void;
const PFNGLCREATESHADERPROGRAMVEXTPROC = ?extern fn (GLenum, GLsizei, [*c]([*c]const GLchar)) GLuint;
const PFNGLDELETEPROGRAMPIPELINESEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLGENPROGRAMPIPELINESEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLGETPROGRAMPIPELINEIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLISPROGRAMPIPELINEEXTPROC = ?extern fn (GLuint) GLboolean;
const PFNGLPROGRAMPARAMETERIEXTPROC = ?extern fn (GLuint, GLenum, GLint) void;
const PFNGLPROGRAMUNIFORM1FEXTPROC = ?extern fn (GLuint, GLint, GLfloat) void;
const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORM1IEXTPROC = ?extern fn (GLuint, GLint, GLint) void;
const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
const PFNGLPROGRAMUNIFORM2FEXTPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat) void;
const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORM2IEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint) void;
const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
const PFNGLPROGRAMUNIFORM3FEXTPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) void;
const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORM3IEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint) void;
const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
const PFNGLPROGRAMUNIFORM4FEXTPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORM4IEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLint) void;
const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUSEPROGRAMSTAGESEXTPROC = ?extern fn (GLuint, GLbitfield, GLuint) void;
const PFNGLVALIDATEPROGRAMPIPELINEEXTPROC = ?extern fn (GLuint) void;
const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?extern fn (GLuint, GLint, GLuint) void;
const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?extern fn (GLuint, GLint, GLuint, GLuint) void;
const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?extern fn (GLuint, GLint, GLuint, GLuint, GLuint) void;
const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?extern fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) void;
const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?extern fn () void;
const PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?extern fn (GLuint, GLsizei) void;
const PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?extern fn (GLuint) GLsizei;
const PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC = ?extern fn (GLsizei, GLsizei, [*c]const GLuint) void;
const PFNGLTEXPAGECOMMITMENTEXTPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) void;
const PFNGLPATCHPARAMETERIEXTPROC = ?extern fn (GLenum, GLint) void;
const PFNGLTEXPARAMETERIIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
const PFNGLTEXPARAMETERIUIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]const GLuint) void;
const PFNGLGETTEXPARAMETERIIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLuint) void;
const PFNGLSAMPLERPARAMETERIIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
const PFNGLSAMPLERPARAMETERIUIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]const GLuint) void;
const PFNGLGETSAMPLERPARAMETERIIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLGETSAMPLERPARAMETERIUIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
const PFNGLTEXBUFFEREXTPROC = ?extern fn (GLenum, GLenum, GLuint) void;
const PFNGLTEXBUFFERRANGEEXTPROC = ?extern fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) void;
const PFNGLTEXSTORAGE1DEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei) void;
const PFNGLTEXSTORAGE2DEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLTEXSTORAGE3DEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) void;
const PFNGLTEXTURESTORAGE1DEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) void;
const PFNGLTEXTURESTORAGE2DEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLTEXTURESTORAGE3DEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) void;
const PFNGLTEXTUREVIEWEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) void;
const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?extern fn (GLuint, GLuint64, GLuint) GLboolean;
const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?extern fn (GLuint, GLuint64) GLboolean;
const PFNGLWINDOWRECTANGLESEXTPROC = ?extern fn (GLenum, GLsizei, [*c]const GLint) void;
const PFNGLGETTEXTUREHANDLEIMGPROC = ?extern fn (GLuint) GLuint64;
const PFNGLGETTEXTURESAMPLERHANDLEIMGPROC = ?extern fn (GLuint, GLuint) GLuint64;
const PFNGLUNIFORMHANDLEUI64IMGPROC = ?extern fn (GLint, GLuint64) void;
const PFNGLUNIFORMHANDLEUI64VIMGPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64) void;
const PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC = ?extern fn (GLuint, GLint, GLuint64) void;
const PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void;
const PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) void;
const PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) void;
const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) void;
const PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ?extern fn () void;
const PFNGLBEGINPERFQUERYINTELPROC = ?extern fn (GLuint) void;
const PFNGLCREATEPERFQUERYINTELPROC = ?extern fn (GLuint, [*c]GLuint) void;
const PFNGLDELETEPERFQUERYINTELPROC = ?extern fn (GLuint) void;
const PFNGLENDPERFQUERYINTELPROC = ?extern fn (GLuint) void;
const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?extern fn ([*c]GLuint) void;
const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?extern fn (GLuint, [*c]GLuint) void;
const PFNGLGETPERFCOUNTERINFOINTELPROC = ?extern fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) void;
const PFNGLGETPERFQUERYDATAINTELPROC = ?extern fn (GLuint, GLuint, GLsizei, ?*c_void, [*c]GLuint) void;
const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?extern fn ([*c]GLchar, [*c]GLuint) void;
const PFNGLGETPERFQUERYINFOINTELPROC = ?extern fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) void;
const PFNGLGETTEXTUREHANDLENVPROC = ?extern fn (GLuint) GLuint64;
const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?extern fn (GLuint, GLuint) GLuint64;
const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?extern fn (GLuint64) void;
const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?extern fn (GLuint64) void;
const PFNGLGETIMAGEHANDLENVPROC = ?extern fn (GLuint, GLint, GLboolean, GLint, GLenum) GLuint64;
const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?extern fn (GLuint64, GLenum) void;
const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?extern fn (GLuint64) void;
const PFNGLUNIFORMHANDLEUI64NVPROC = ?extern fn (GLint, GLuint64) void;
const PFNGLUNIFORMHANDLEUI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64) void;
const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?extern fn (GLuint, GLint, GLuint64) void;
const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void;
const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?extern fn (GLuint64) GLboolean;
const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?extern fn (GLuint64) GLboolean;
const PFNGLBLENDPARAMETERINVPROC = ?extern fn (GLenum, GLint) void;
const PFNGLBLENDBARRIERNVPROC = ?extern fn () void;
const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?extern fn (GLuint, GLfloat, GLfloat) void;
const PFNGLBEGINCONDITIONALRENDERNVPROC = ?extern fn (GLuint, GLenum) void;
const PFNGLENDCONDITIONALRENDERNVPROC = ?extern fn () void;
const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?extern fn (GLenum, GLint) void;
const PFNGLCOPYBUFFERSUBDATANVPROC = ?extern fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) void;
const PFNGLCOVERAGEMASKNVPROC = ?extern fn (GLboolean) void;
const PFNGLCOVERAGEOPERATIONNVPROC = ?extern fn (GLenum) void;
const PFNGLDRAWBUFFERSNVPROC = ?extern fn (GLsizei, [*c]const GLenum) void;
const PFNGLDRAWARRAYSINSTANCEDNVPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei) void;
const PFNGLDRAWELEMENTSINSTANCEDNVPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void;
const PFNGLDRAWVKIMAGENVPROC = ?extern fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLGETVKPROCADDRNVPROC = ?extern fn ([*c]const GLchar) GLVULKANPROCNV;
const PFNGLWAITVKSEMAPHORENVPROC = ?extern fn (GLuint64) void;
const PFNGLSIGNALVKSEMAPHORENVPROC = ?extern fn (GLuint64) void;
const PFNGLSIGNALVKFENCENVPROC = ?extern fn (GLuint64) void;
const PFNGLDELETEFENCESNVPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
const PFNGLGENFENCESNVPROC = ?extern fn (GLsizei, [*c]GLuint) void;
const PFNGLISFENCENVPROC = ?extern fn (GLuint) GLboolean;
const PFNGLTESTFENCENVPROC = ?extern fn (GLuint) GLboolean;
const PFNGLGETFENCEIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLFINISHFENCENVPROC = ?extern fn (GLuint) void;
const PFNGLSETFENCENVPROC = ?extern fn (GLuint, GLenum) void;
const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?extern fn (GLuint) void;
const PFNGLBLITFRAMEBUFFERNVPROC = ?extern fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) void;
const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?extern fn (GLsizei, [*c]const GLfloat) void;
const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?extern fn (GLsizei, [*c]GLfloat) void;
const PFNGLCOVERAGEMODULATIONNVPROC = ?extern fn (GLenum) void;
const PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
const PFNGLUNIFORM1I64NVPROC = ?extern fn (GLint, GLint64EXT) void;
const PFNGLUNIFORM2I64NVPROC = ?extern fn (GLint, GLint64EXT, GLint64EXT) void;
const PFNGLUNIFORM3I64NVPROC = ?extern fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) void;
const PFNGLUNIFORM4I64NVPROC = ?extern fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) void;
const PFNGLUNIFORM1I64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64EXT) void;
const PFNGLUNIFORM2I64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64EXT) void;
const PFNGLUNIFORM3I64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64EXT) void;
const PFNGLUNIFORM4I64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64EXT) void;
const PFNGLUNIFORM1UI64NVPROC = ?extern fn (GLint, GLuint64EXT) void;
const PFNGLUNIFORM2UI64NVPROC = ?extern fn (GLint, GLuint64EXT, GLuint64EXT) void;
const PFNGLUNIFORM3UI64NVPROC = ?extern fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
const PFNGLUNIFORM4UI64NVPROC = ?extern fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
const PFNGLUNIFORM1UI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
const PFNGLUNIFORM2UI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
const PFNGLUNIFORM3UI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
const PFNGLUNIFORM4UI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
const PFNGLGETUNIFORMI64VNVPROC = ?extern fn (GLuint, GLint, [*c]GLint64EXT) void;
const PFNGLPROGRAMUNIFORM1I64NVPROC = ?extern fn (GLuint, GLint, GLint64EXT) void;
const PFNGLPROGRAMUNIFORM2I64NVPROC = ?extern fn (GLuint, GLint, GLint64EXT, GLint64EXT) void;
const PFNGLPROGRAMUNIFORM3I64NVPROC = ?extern fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) void;
const PFNGLPROGRAMUNIFORM4I64NVPROC = ?extern fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) void;
const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void;
const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void;
const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void;
const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void;
const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT) void;
const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) void;
const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
const PFNGLVERTEXATTRIBDIVISORNVPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?extern fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) void;
const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?extern fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) void;
const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?extern fn (GLuint, GLenum) void;
const PFNGLTEXATTACHMEMORYNVPROC = ?extern fn (GLenum, GLuint, GLuint64) void;
const PFNGLBUFFERATTACHMEMORYNVPROC = ?extern fn (GLenum, GLuint, GLuint64) void;
const PFNGLTEXTUREATTACHMEMORYNVPROC = ?extern fn (GLuint, GLuint, GLuint64) void;
const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?extern fn (GLuint, GLuint, GLuint64) void;
const PFNGLDRAWMESHTASKSNVPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?extern fn (GLintptr) void;
const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?extern fn (GLintptr, GLsizei, GLsizei) void;
const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?extern fn (GLintptr, GLintptr, GLsizei, GLsizei) void;
const PFNGLUNIFORMMATRIX2X3FVNVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUNIFORMMATRIX3X2FVNVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUNIFORMMATRIX2X4FVNVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUNIFORMMATRIX4X2FVNVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUNIFORMMATRIX3X4FVNVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLUNIFORMMATRIX4X3FVNVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
const PFNGLGENPATHSNVPROC = ?extern fn (GLsizei) GLuint;
const PFNGLDELETEPATHSNVPROC = ?extern fn (GLuint, GLsizei) void;
const PFNGLISPATHNVPROC = ?extern fn (GLuint) GLboolean;
const PFNGLPATHCOMMANDSNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) void;
const PFNGLPATHCOORDSNVPROC = ?extern fn (GLuint, GLsizei, GLenum, ?*const c_void) void;
const PFNGLPATHSUBCOMMANDSNVPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) void;
const PFNGLPATHSUBCOORDSNVPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLenum, ?*const c_void) void;
const PFNGLPATHSTRINGNVPROC = ?extern fn (GLuint, GLenum, GLsizei, ?*const c_void) void;
const PFNGLPATHGLYPHSNVPROC = ?extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLsizei, GLenum, ?*const c_void, GLenum, GLuint, GLfloat) void;
const PFNGLPATHGLYPHRANGENVPROC = ?extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) void;
const PFNGLWEIGHTPATHSNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) void;
const PFNGLCOPYPATHNVPROC = ?extern fn (GLuint, GLuint) void;
const PFNGLINTERPOLATEPATHSNVPROC = ?extern fn (GLuint, GLuint, GLuint, GLfloat) void;
const PFNGLTRANSFORMPATHNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]const GLfloat) void;
const PFNGLPATHPARAMETERIVNVPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
const PFNGLPATHPARAMETERINVPROC = ?extern fn (GLuint, GLenum, GLint) void;
const PFNGLPATHPARAMETERFVNVPROC = ?extern fn (GLuint, GLenum, [*c]const GLfloat) void;
const PFNGLPATHPARAMETERFNVPROC = ?extern fn (GLuint, GLenum, GLfloat) void;
const PFNGLPATHDASHARRAYNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
const PFNGLPATHSTENCILFUNCNVPROC = ?extern fn (GLenum, GLint, GLuint) void;
const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?extern fn (GLfloat, GLfloat) void;
const PFNGLSTENCILFILLPATHNVPROC = ?extern fn (GLuint, GLenum, GLuint) void;
const PFNGLSTENCILSTROKEPATHNVPROC = ?extern fn (GLuint, GLint, GLuint) void;
const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) void;
const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) void;
const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?extern fn (GLenum) void;
const PFNGLCOVERFILLPATHNVPROC = ?extern fn (GLuint, GLenum) void;
const PFNGLCOVERSTROKEPATHNVPROC = ?extern fn (GLuint, GLenum) void;
const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) void;
const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) void;
const PFNGLGETPATHPARAMETERIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
const PFNGLGETPATHPARAMETERFVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
const PFNGLGETPATHCOMMANDSNVPROC = ?extern fn (GLuint, [*c]GLubyte) void;
const PFNGLGETPATHCOORDSNVPROC = ?extern fn (GLuint, [*c]GLfloat) void;
const PFNGLGETPATHDASHARRAYNVPROC = ?extern fn (GLuint, [*c]GLfloat) void;
const PFNGLGETPATHMETRICSNVPROC = ?extern fn (GLbitfield, GLsizei, GLenum, ?*const c_void, GLuint, GLsizei, [*c]GLfloat) void;
const PFNGLGETPATHMETRICRANGENVPROC = ?extern fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) void;
const PFNGLGETPATHSPACINGNVPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) void;
const PFNGLISPOINTINFILLPATHNVPROC = ?extern fn (GLuint, GLuint, GLfloat, GLfloat) GLboolean;
const PFNGLISPOINTINSTROKEPATHNVPROC = ?extern fn (GLuint, GLfloat, GLfloat) GLboolean;
const PFNGLGETPATHLENGTHNVPROC = ?extern fn (GLuint, GLsizei, GLsizei) GLfloat;
const PFNGLPOINTALONGPATHNVPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) GLboolean;
const PFNGLMATRIXLOAD3X2FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXLOAD3X3FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXMULT3X2FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXMULT3X3FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?extern fn (GLuint, GLenum, GLuint, GLenum) void;
const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?extern fn (GLuint, GLint, GLuint, GLenum) void;
const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) void;
const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) void;
const PFNGLPATHGLYPHINDEXRANGENVPROC = ?extern fn (GLenum, ?*const c_void, GLbitfield, GLuint, GLfloat, [*c]GLuint) GLenum;
const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) GLenum;
const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?extern fn (GLuint, GLenum, GLsizeiptr, ?*const c_void, GLsizei, GLuint, GLsizei, GLuint, GLfloat) GLenum;
const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?extern fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) void;
const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) void;
const PFNGLMATRIXFRUSTUMEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) void;
const PFNGLMATRIXLOADIDENTITYEXTPROC = ?extern fn (GLenum) void;
const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
const PFNGLMATRIXLOADFEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXLOADDEXTPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
const PFNGLMATRIXMULTFEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
const PFNGLMATRIXMULTDEXTPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
const PFNGLMATRIXORTHOEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) void;
const PFNGLMATRIXPOPEXTPROC = ?extern fn (GLenum) void;
const PFNGLMATRIXPUSHEXTPROC = ?extern fn (GLenum) void;
const PFNGLMATRIXROTATEFEXTPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLMATRIXROTATEDEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) void;
const PFNGLMATRIXSCALEFEXTPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat) void;
const PFNGLMATRIXSCALEDEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble) void;
const PFNGLMATRIXTRANSLATEFEXTPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat) void;
const PFNGLMATRIXTRANSLATEDEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble) void;
const PFNGLPOLYGONMODENVPROC = ?extern fn (GLenum, GLenum) void;
const PFNGLREADBUFFERNVPROC = ?extern fn (GLenum) void;
const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) void;
const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) void;
const PFNGLRESOLVEDEPTHVALUESNVPROC = ?extern fn () void;
const PFNGLSCISSOREXCLUSIVENVPROC = ?extern fn (GLint, GLint, GLsizei, GLsizei) void;
const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLint) void;
const PFNGLBINDSHADINGRATEIMAGENVPROC = ?extern fn (GLuint) void;
const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?extern fn (GLuint, GLuint, [*c]GLenum) void;
const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?extern fn (GLenum, GLuint, GLuint, [*c]GLint) void;
const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?extern fn (GLboolean) void;
const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]const GLenum) void;
const PFNGLSHADINGRATESAMPLEORDERNVPROC = ?extern fn (GLenum) void;
const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLint) void;
const PFNGLVIEWPORTARRAYVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
const PFNGLVIEWPORTINDEXEDFNVPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLVIEWPORTINDEXEDFVNVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
const PFNGLSCISSORARRAYVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLint) void;
const PFNGLSCISSORINDEXEDNVPROC = ?extern fn (GLuint, GLint, GLint, GLsizei, GLsizei) void;
const PFNGLSCISSORINDEXEDVNVPROC = ?extern fn (GLuint, [*c]const GLint) void;
const PFNGLDEPTHRANGEARRAYFVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
const PFNGLDEPTHRANGEINDEXEDFNVPROC = ?extern fn (GLuint, GLfloat, GLfloat) void;
const PFNGLGETFLOATI_VNVPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
const PFNGLENABLEINVPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLDISABLEINVPROC = ?extern fn (GLenum, GLuint) void;
const PFNGLISENABLEDINVPROC = ?extern fn (GLenum, GLuint) GLboolean;
const PFNGLVIEWPORTSWIZZLENVPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void;
const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) void;
const PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) void;
const PFNGLALPHAFUNCQCOMPROC = ?extern fn (GLenum, GLclampf) void;
const PFNGLGETDRIVERCONTROLSQCOMPROC = ?extern fn ([*c]GLint, GLsizei, [*c]GLuint) void;
const PFNGLGETDRIVERCONTROLSTRINGQCOMPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
const PFNGLENABLEDRIVERCONTROLQCOMPROC = ?extern fn (GLuint) void;
const PFNGLDISABLEDRIVERCONTROLQCOMPROC = ?extern fn (GLuint) void;
const PFNGLEXTGETTEXTURESQCOMPROC = ?extern fn ([*c]GLuint, GLint, [*c]GLint) void;
const PFNGLEXTGETBUFFERSQCOMPROC = ?extern fn ([*c]GLuint, GLint, [*c]GLint) void;
const PFNGLEXTGETRENDERBUFFERSQCOMPROC = ?extern fn ([*c]GLuint, GLint, [*c]GLint) void;
const PFNGLEXTGETFRAMEBUFFERSQCOMPROC = ?extern fn ([*c]GLuint, GLint, [*c]GLint) void;
const PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) void;
const PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC = ?extern fn (GLenum, GLenum, GLint) void;
const PFNGLEXTGETTEXSUBIMAGEQCOMPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) void;
const PFNGLEXTGETBUFFERPOINTERVQCOMPROC = ?extern fn (GLenum, [*c](?*c_void)) void;
const PFNGLEXTGETSHADERSQCOMPROC = ?extern fn ([*c]GLuint, GLint, [*c]GLint) void;
const PFNGLEXTGETPROGRAMSQCOMPROC = ?extern fn ([*c]GLuint, GLint, [*c]GLint) void;
const PFNGLEXTISPROGRAMBINARYQCOMPROC = ?extern fn (GLuint) GLboolean;
const PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC = ?extern fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) void;
const PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC = ?extern fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) void;
const PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC = ?extern fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC = ?extern fn () void;
const PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC = ?extern fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
const PFNGLSTARTTILINGQCOMPROC = ?extern fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) void;
const PFNGLENDTILINGQCOMPROC = ?extern fn (GLbitfield) void;




pub export fn glActiveTexture(texture: GLenum) void {
    
    glActiveTexture_impl.?(texture);
}
pub export fn glAttachShader(program: GLuint, shader: GLuint) void {
    
    glAttachShader_impl.?(program, shader);
}
pub export fn glBindAttribLocation(program: GLuint, index: GLuint, name: [*c]const GLchar) void {
    
    glBindAttribLocation_impl.?(program, index, name);
}
pub export fn glBindBuffer(target: GLenum, buffer: GLuint) void {
    
    glBindBuffer_impl.?(target, buffer);
}
pub export fn glBindFramebuffer(target: GLenum, framebuffer: GLuint) void {
    
    glBindFramebuffer_impl.?(target, framebuffer);
}
pub export fn glBindRenderbuffer(target: GLenum, renderbuffer: GLuint) void {
    
    glBindRenderbuffer_impl.?(target, renderbuffer);
}
pub export fn glBindTexture(target: GLenum, texture: GLuint) void {
    
    glBindTexture_impl.?(target, texture);
}
pub export fn glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void {
    
    glBlendColor_impl.?(red, green, blue, alpha);
}
pub export fn glBlendEquation(mode: GLenum) void {
    
    glBlendEquation_impl.?(mode);
}
pub export fn glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) void {
    
    glBlendEquationSeparate_impl.?(modeRGB, modeAlpha);
}
pub export fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void {
    
    glBlendFunc_impl.?(sfactor, dfactor);
}
pub export fn glBlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) void {
    
    glBlendFuncSeparate_impl.?(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
pub export fn glBufferData(target: GLenum, size: GLsizeiptr, data: ?*const c_void, usage: GLenum) void {
    
    glBufferData_impl.?(target, size, data, usage);
}
pub export fn glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: ?*const c_void) void {
    
    glBufferSubData_impl.?(target, offset, size, data);
}
pub export fn glCheckFramebufferStatus(target: GLenum) GLenum {
    
    return glCheckFramebufferStatus_impl.?(target);
}
pub export fn glClear(mask: GLbitfield) void {
    
    glClear_impl.?(mask);
}
pub export fn glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void {
    
    glClearColor_impl.?(red, green, blue, alpha);
}
pub export fn glClearDepthf(d: GLfloat) void {
    
    glClearDepthf_impl.?(d);
}
pub export fn glClearStencil(s: GLint) void {
    
    glClearStencil_impl.?(s);
}
pub export fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void {
    
    glColorMask_impl.?(red, green, blue, alpha);
}
pub export fn glCompileShader(shader: GLuint) void {
    
    glCompileShader_impl.?(shader);
}
pub export fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const c_void) void {
    
    glCompressedTexImage2D_impl.?(target, level, internalformat, width, height, border, imageSize, data);
}
pub export fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) void {
    
    glCompressedTexSubImage2D_impl.?(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
pub export fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void {
    
    glCopyTexImage2D_impl.?(target, level, internalformat, x, y, width, height, border);
}
pub export fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void {
    
    glCopyTexSubImage2D_impl.?(target, level, xoffset, yoffset, x, y, width, height);
}
pub export fn glCreateProgram() GLuint {
    
    return glCreateProgram_impl.?();
}
pub export fn glCreateShader(type_0: GLenum) GLuint {
    
    return glCreateShader_impl.?(type_0);
}
pub export fn glCullFace(mode: GLenum) void {
    
    glCullFace_impl.?(mode);
}
pub export fn glDeleteBuffers(n: GLsizei, buffers: [*c]const GLuint) void {
    
    glDeleteBuffers_impl.?(n, buffers);
}
pub export fn glDeleteFramebuffers(n: GLsizei, framebuffers: [*c]const GLuint) void {
    
    glDeleteFramebuffers_impl.?(n, framebuffers);
}
pub export fn glDeleteProgram(program: GLuint) void {
    
    glDeleteProgram_impl.?(program);
}
pub export fn glDeleteRenderbuffers(n: GLsizei, renderbuffers: [*c]const GLuint) void {
    
    glDeleteRenderbuffers_impl.?(n, renderbuffers);
}
pub export fn glDeleteShader(shader: GLuint) void {
    
    glDeleteShader_impl.?(shader);
}
pub export fn glDeleteTextures(n: GLsizei, textures: [*c]const GLuint) void {
    
    glDeleteTextures_impl.?(n, textures);
}
pub export fn glDepthFunc(func: GLenum) void {
    
    glDepthFunc_impl.?(func);
}
pub export fn glDepthMask(flag: GLboolean) void {
    
    glDepthMask_impl.?(flag);
}
pub export fn glDepthRangef(n: GLfloat, f: GLfloat) void {
    
    glDepthRangef_impl.?(n, f);
}
pub export fn glDetachShader(program: GLuint, shader: GLuint) void {
    
    glDetachShader_impl.?(program, shader);
}
pub export fn glDisable(cap: GLenum) void {
    
    glDisable_impl.?(cap);
}
pub export fn glDisableVertexAttribArray(index: GLuint) void {
    
    glDisableVertexAttribArray_impl.?(index);
}
pub export fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void {
    
    glDrawArrays_impl.?(mode, first, count);
}
pub export fn glDrawElements(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void) void {
    
    glDrawElements_impl.?(mode, count, type_0, indices);
}
pub export fn glEnable(cap: GLenum) void {
    
    glEnable_impl.?(cap);
}
pub export fn glEnableVertexAttribArray(index: GLuint) void {
    
    glEnableVertexAttribArray_impl.?(index);
}
pub export fn glFinish() void {
    
    glFinish_impl.?();
}
pub export fn glFlush() void {
    
    glFlush_impl.?();
}
pub export fn glFramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) void {
    
    glFramebufferRenderbuffer_impl.?(target, attachment, renderbuffertarget, renderbuffer);
}
pub export fn glFramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void {
    
    glFramebufferTexture2D_impl.?(target, attachment, textarget, texture, level);
}
pub export fn glFrontFace(mode: GLenum) void {
    
    glFrontFace_impl.?(mode);
}
pub export fn glGenBuffers(n: GLsizei, buffers: [*c]GLuint) void {
    
    glGenBuffers_impl.?(n, buffers);
}
pub export fn glGenerateMipmap(target: GLenum) void {
    
    glGenerateMipmap_impl.?(target);
}
pub export fn glGenFramebuffers(n: GLsizei, framebuffers: [*c]GLuint) void {
    
    glGenFramebuffers_impl.?(n, framebuffers);
}
pub export fn glGenRenderbuffers(n: GLsizei, renderbuffers: [*c]GLuint) void {
    
    glGenRenderbuffers_impl.?(n, renderbuffers);
}
pub export fn glGenTextures(n: GLsizei, textures: [*c]GLuint) void {
    
    glGenTextures_impl.?(n, textures);
}
pub export fn glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLint, type_0: [*c]GLenum, name: [*c]GLchar) void {
    
    glGetActiveAttrib_impl.?(program, index, bufSize, length, size, type_0, name);
}
pub export fn glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLint, type_0: [*c]GLenum, name: [*c]GLchar) void {
    
    glGetActiveUniform_impl.?(program, index, bufSize, length, size, type_0, name);
}
pub export fn glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: [*c]GLsizei, shaders: [*c]GLuint) void {
    
    glGetAttachedShaders_impl.?(program, maxCount, count, shaders);
}
pub export fn glGetAttribLocation(program: GLuint, name: [*c]const GLchar) GLint {
    
    return glGetAttribLocation_impl.?(program, name);
}
pub export fn glGetBooleanv(pname: GLenum, data: [*c]GLboolean) void {
    
    glGetBooleanv_impl.?(pname, data);
}
pub export fn glGetBufferParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void {
    
    glGetBufferParameteriv_impl.?(target, pname, params);
}
pub export fn glGetError() GLenum {
    
    return glGetError_impl.?();
}
pub export fn glGetFloatv(pname: GLenum, data: [*c]GLfloat) void {
    
    glGetFloatv_impl.?(pname, data);
}
pub export fn glGetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: [*c]GLint) void {
    
    glGetFramebufferAttachmentParameteriv_impl.?(target, attachment, pname, params);
}
pub export fn glGetIntegerv(pname: GLenum, data: [*c]GLint) void {
    
    glGetIntegerv_impl.?(pname, data);
}
pub export fn glGetProgramiv(program: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetProgramiv_impl.?(program, pname, params);
}
pub export fn glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) void {
    
    glGetProgramInfoLog_impl.?(program, bufSize, length, infoLog);
}
pub export fn glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void {
    
    glGetRenderbufferParameteriv_impl.?(target, pname, params);
}
pub export fn glGetShaderiv(shader: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetShaderiv_impl.?(shader, pname, params);
}
pub export fn glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) void {
    
    glGetShaderInfoLog_impl.?(shader, bufSize, length, infoLog);
}
pub export fn glGetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: [*c]GLint, precision: [*c]GLint) void {
    
    glGetShaderPrecisionFormat_impl.?(shadertype, precisiontype, range, precision);
}
pub export fn glGetShaderSource(shader: GLuint, bufSize: GLsizei, length: [*c]GLsizei, source: [*c]GLchar) void {
    
    glGetShaderSource_impl.?(shader, bufSize, length, source);
}
pub export fn glGetString(name: GLenum) [*c]const GLubyte {
    
    return glGetString_impl.?(name);
}
pub export fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void {
    
    glGetTexParameterfv_impl.?(target, pname, params);
}
pub export fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void {
    
    glGetTexParameteriv_impl.?(target, pname, params);
}
pub export fn glGetUniformfv(program: GLuint, location: GLint, params: [*c]GLfloat) void {
    
    glGetUniformfv_impl.?(program, location, params);
}
pub export fn glGetUniformiv(program: GLuint, location: GLint, params: [*c]GLint) void {
    
    glGetUniformiv_impl.?(program, location, params);
}
pub export fn glGetUniformLocation(program: GLuint, name: [*c]const GLchar) GLint {
    
    return glGetUniformLocation_impl.?(program, name);
}
pub export fn glGetVertexAttribfv(index: GLuint, pname: GLenum, params: [*c]GLfloat) void {
    
    glGetVertexAttribfv_impl.?(index, pname, params);
}
pub export fn glGetVertexAttribiv(index: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetVertexAttribiv_impl.?(index, pname, params);
}
pub export fn glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: [*c](?*c_void)) void {
    
    glGetVertexAttribPointerv_impl.?(index, pname, pointer);
}
pub export fn glHint(target: GLenum, mode: GLenum) void {
    
    glHint_impl.?(target, mode);
}
pub export fn glIsBuffer(buffer: GLuint) GLboolean {
    
    return glIsBuffer_impl.?(buffer);
}
pub export fn glIsEnabled(cap: GLenum) GLboolean {
    
    return glIsEnabled_impl.?(cap);
}
pub export fn glIsFramebuffer(framebuffer: GLuint) GLboolean {
    
    return glIsFramebuffer_impl.?(framebuffer);
}
pub export fn glIsProgram(program: GLuint) GLboolean {
    
    return glIsProgram_impl.?(program);
}
pub export fn glIsRenderbuffer(renderbuffer: GLuint) GLboolean {
    
    return glIsRenderbuffer_impl.?(renderbuffer);
}
pub export fn glIsShader(shader: GLuint) GLboolean {
    
    return glIsShader_impl.?(shader);
}
pub export fn glIsTexture(texture: GLuint) GLboolean {
    
    return glIsTexture_impl.?(texture);
}
pub export fn glLineWidth(width: GLfloat) void {
    
    glLineWidth_impl.?(width);
}
pub export fn glLinkProgram(program: GLuint) void {
    
    glLinkProgram_impl.?(program);
}
pub export fn glPixelStorei(pname: GLenum, param: GLint) void {
    
    glPixelStorei_impl.?(pname, param);
}
pub export fn glPolygonOffset(factor: GLfloat, units: GLfloat) void {
    
    glPolygonOffset_impl.?(factor, units);
}
pub export fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*c_void) void {
    
    glReadPixels_impl.?(x, y, width, height, format, type_0, pixels);
}
pub export fn glReleaseShaderCompiler() void {
    
    glReleaseShaderCompiler_impl.?();
}
pub export fn glRenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glRenderbufferStorage_impl.?(target, internalformat, width, height);
}
pub export fn glSampleCoverage(value: GLfloat, invert: GLboolean) void {
    
    glSampleCoverage_impl.?(value, invert);
}
pub export fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void {
    
    glScissor_impl.?(x, y, width, height);
}
pub export fn glShaderBinary(count: GLsizei, shaders: [*c]const GLuint, binaryformat: GLenum, binary: ?*const c_void, length: GLsizei) void {
    
    glShaderBinary_impl.?(count, shaders, binaryformat, binary, length);
}
pub export fn glShaderSource(shader: GLuint, count: GLsizei, string: [*c]const ([*c]const GLchar), length: [*c]const GLint) void {
    
    glShaderSource_impl.?(shader, count, string, length);
}
pub export fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void {
    
    glStencilFunc_impl.?(func, ref, mask);
}
pub export fn glStencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint) void {
    
    glStencilFuncSeparate_impl.?(face, func, ref, mask);
}
pub export fn glStencilMask(mask: GLuint) void {
    
    glStencilMask_impl.?(mask);
}
pub export fn glStencilMaskSeparate(face: GLenum, mask: GLuint) void {
    
    glStencilMaskSeparate_impl.?(face, mask);
}
pub export fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void {
    
    glStencilOp_impl.?(fail, zfail, zpass);
}
pub export fn glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) void {
    
    glStencilOpSeparate_impl.?(face, sfail, dpfail, dppass);
}
pub export fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const c_void) void {
    
    glTexImage2D_impl.?(target, level, internalformat, width, height, border, format, type_0, pixels);
}
pub export fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void {
    
    glTexParameterf_impl.?(target, pname, param);
}
pub export fn glTexParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void {
    
    glTexParameterfv_impl.?(target, pname, params);
}
pub export fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void {
    
    glTexParameteri_impl.?(target, pname, param);
}
pub export fn glTexParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void {
    
    glTexParameteriv_impl.?(target, pname, params);
}
pub export fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const c_void) void {
    
    glTexSubImage2D_impl.?(target, level, xoffset, yoffset, width, height, format, type_0, pixels);
}
pub export fn glUniform1f(location: GLint, v0: GLfloat) void {
    
    glUniform1f_impl.?(location, v0);
}
pub export fn glUniform1fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void {
    
    glUniform1fv_impl.?(location, count, value);
}
pub export fn glUniform1i(location: GLint, v0: GLint) void {
    
    glUniform1i_impl.?(location, v0);
}
pub export fn glUniform1iv(location: GLint, count: GLsizei, value: [*c]const GLint) void {
    
    glUniform1iv_impl.?(location, count, value);
}
pub export fn glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat) void {
    
    glUniform2f_impl.?(location, v0, v1);
}
pub export fn glUniform2fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void {
    
    glUniform2fv_impl.?(location, count, value);
}
pub export fn glUniform2i(location: GLint, v0: GLint, v1: GLint) void {
    
    glUniform2i_impl.?(location, v0, v1);
}
pub export fn glUniform2iv(location: GLint, count: GLsizei, value: [*c]const GLint) void {
    
    glUniform2iv_impl.?(location, count, value);
}
pub export fn glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void {
    
    glUniform3f_impl.?(location, v0, v1, v2);
}
pub export fn glUniform3fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void {
    
    glUniform3fv_impl.?(location, count, value);
}
pub export fn glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) void {
    
    glUniform3i_impl.?(location, v0, v1, v2);
}
pub export fn glUniform3iv(location: GLint, count: GLsizei, value: [*c]const GLint) void {
    
    glUniform3iv_impl.?(location, count, value);
}
pub export fn glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void {
    
    glUniform4f_impl.?(location, v0, v1, v2, v3);
}
pub export fn glUniform4fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void {
    
    glUniform4fv_impl.?(location, count, value);
}
pub export fn glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void {
    
    glUniform4i_impl.?(location, v0, v1, v2, v3);
}
pub export fn glUniform4iv(location: GLint, count: GLsizei, value: [*c]const GLint) void {
    
    glUniform4iv_impl.?(location, count, value);
}
pub export fn glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix2fv_impl.?(location, count, transpose, value);
}
pub export fn glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix3fv_impl.?(location, count, transpose, value);
}
pub export fn glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix4fv_impl.?(location, count, transpose, value);
}
pub export fn glUseProgram(program: GLuint) void {
    
    glUseProgram_impl.?(program);
}
pub export fn glValidateProgram(program: GLuint) void {
    
    glValidateProgram_impl.?(program);
}
pub export fn glVertexAttrib1f(index: GLuint, x: GLfloat) void {
    
    glVertexAttrib1f_impl.?(index, x);
}
pub export fn glVertexAttrib1fv(index: GLuint, v: [*c]const GLfloat) void {
    
    glVertexAttrib1fv_impl.?(index, v);
}
pub export fn glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) void {
    
    glVertexAttrib2f_impl.?(index, x, y);
}
pub export fn glVertexAttrib2fv(index: GLuint, v: [*c]const GLfloat) void {
    
    glVertexAttrib2fv_impl.?(index, v);
}
pub export fn glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) void {
    
    glVertexAttrib3f_impl.?(index, x, y, z);
}
pub export fn glVertexAttrib3fv(index: GLuint, v: [*c]const GLfloat) void {
    
    glVertexAttrib3fv_impl.?(index, v);
}
pub export fn glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void {
    
    glVertexAttrib4f_impl.?(index, x, y, z, w);
}
pub export fn glVertexAttrib4fv(index: GLuint, v: [*c]const GLfloat) void {
    
    glVertexAttrib4fv_impl.?(index, v);
}
pub export fn glVertexAttribPointer(index: GLuint, size: GLint, type_0: GLenum, normalized: GLboolean, stride: GLsizei, pointer: ?*const c_void) void {
    
    glVertexAttribPointer_impl.?(index, size, type_0, normalized, stride, pointer);
}
pub export fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void {
    
    glViewport_impl.?(x, y, width, height);
}

pub export fn glBlendBarrierKHR() void {
    
    glBlendBarrierKHR_impl.?();
}
pub export fn glDebugMessageControlKHR(source: GLenum, type_0: GLenum, severity: GLenum, count: GLsizei, ids: [*c]const GLuint, enabled: GLboolean) void {
    
    glDebugMessageControlKHR_impl.?(source, type_0, severity, count, ids, enabled);
}
pub export fn glDebugMessageInsertKHR(source: GLenum, type_0: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: [*c]const GLchar) void {
    
    glDebugMessageInsertKHR_impl.?(source, type_0, id, severity, length, buf);
}
pub export fn glDebugMessageCallbackKHR(callback: GLDEBUGPROCKHR, userParam: ?*const c_void) void {
    
    glDebugMessageCallbackKHR_impl.?(callback, userParam);
}
pub export fn glGetDebugMessageLogKHR(count: GLuint, bufSize: GLsizei, sources: [*c]GLenum, types: [*c]GLenum, ids: [*c]GLuint, severities: [*c]GLenum, lengths: [*c]GLsizei, messageLog: [*c]GLchar) GLuint {
    
    return glGetDebugMessageLogKHR_impl.?(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
pub export fn glPushDebugGroupKHR(source: GLenum, id: GLuint, length: GLsizei, message: [*c]const GLchar) void {
    
    glPushDebugGroupKHR_impl.?(source, id, length, message);
}
pub export fn glPopDebugGroupKHR() void {
    
    glPopDebugGroupKHR_impl.?();
}
pub export fn glObjectLabelKHR(identifier: GLenum, name: GLuint, length: GLsizei, label: [*c]const GLchar) void {
    
    glObjectLabelKHR_impl.?(identifier, name, length, label);
}
pub export fn glGetObjectLabelKHR(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: [*c]GLsizei, label: [*c]GLchar) void {
    
    glGetObjectLabelKHR_impl.?(identifier, name, bufSize, length, label);
}
pub export fn glObjectPtrLabelKHR(ptr: ?*const c_void, length: GLsizei, label: [*c]const GLchar) void {
    
    glObjectPtrLabelKHR_impl.?(ptr, length, label);
}
pub export fn glGetObjectPtrLabelKHR(ptr: ?*const c_void, bufSize: GLsizei, length: [*c]GLsizei, label: [*c]GLchar) void {
    
    glGetObjectPtrLabelKHR_impl.?(ptr, bufSize, length, label);
}
pub export fn glGetPointervKHR(pname: GLenum, params: [*c](?*c_void)) void {
    
    glGetPointervKHR_impl.?(pname, params);
}
pub export fn glMaxShaderCompilerThreadsKHR(count: GLuint) void {
    
    glMaxShaderCompilerThreadsKHR_impl.?(count);
}
pub export fn glGetGraphicsResetStatusKHR() GLenum {
    
    return glGetGraphicsResetStatusKHR_impl.?();
}
pub export fn glReadnPixelsKHR(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, bufSize: GLsizei, data: ?*c_void) void {
    
    glReadnPixelsKHR_impl.?(x, y, width, height, format, type_0, bufSize, data);
}
pub export fn glGetnUniformfvKHR(program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLfloat) void {
    
    glGetnUniformfvKHR_impl.?(program, location, bufSize, params);
}
pub export fn glGetnUniformivKHR(program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLint) void {
    
    glGetnUniformivKHR_impl.?(program, location, bufSize, params);
}
pub export fn glGetnUniformuivKHR(program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLuint) void {
    
    glGetnUniformuivKHR_impl.?(program, location, bufSize, params);
}
pub export fn glEGLImageTargetTexture2DOES(target: GLenum, image: GLeglImageOES) void {
    
    glEGLImageTargetTexture2DOES_impl.?(target, image);
}
pub export fn glEGLImageTargetRenderbufferStorageOES(target: GLenum, image: GLeglImageOES) void {
    
    glEGLImageTargetRenderbufferStorageOES_impl.?(target, image);
}
pub export fn glCopyImageSubDataOES(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) void {
    
    glCopyImageSubDataOES_impl.?(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
pub export fn glEnableiOES(target: GLenum, index: GLuint) void {
    
    glEnableiOES_impl.?(target, index);
}
pub export fn glDisableiOES(target: GLenum, index: GLuint) void {
    
    glDisableiOES_impl.?(target, index);
}
pub export fn glBlendEquationiOES(buf: GLuint, mode: GLenum) void {
    
    glBlendEquationiOES_impl.?(buf, mode);
}
pub export fn glBlendEquationSeparateiOES(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) void {
    
    glBlendEquationSeparateiOES_impl.?(buf, modeRGB, modeAlpha);
}
pub export fn glBlendFunciOES(buf: GLuint, src: GLenum, dst: GLenum) void {
    
    glBlendFunciOES_impl.?(buf, src, dst);
}
pub export fn glBlendFuncSeparateiOES(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) void {
    
    glBlendFuncSeparateiOES_impl.?(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
pub export fn glColorMaskiOES(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) void {
    
    glColorMaskiOES_impl.?(index, r, g, b, a);
}
pub export fn glIsEnablediOES(target: GLenum, index: GLuint) GLboolean {
    
    return glIsEnablediOES_impl.?(target, index);
}
pub export fn glDrawElementsBaseVertexOES(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, basevertex: GLint) void {
    
    glDrawElementsBaseVertexOES_impl.?(mode, count, type_0, indices, basevertex);
}
pub export fn glDrawRangeElementsBaseVertexOES(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_0: GLenum, indices: ?*const c_void, basevertex: GLint) void {
    
    glDrawRangeElementsBaseVertexOES_impl.?(mode, start, end, count, type_0, indices, basevertex);
}
pub export fn glDrawElementsInstancedBaseVertexOES(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, instancecount: GLsizei, basevertex: GLint) void {
    
    glDrawElementsInstancedBaseVertexOES_impl.?(mode, count, type_0, indices, instancecount, basevertex);
}
pub export fn glMultiDrawElementsBaseVertexEXT(mode: GLenum, count: [*c]const GLsizei, type_0: GLenum, indices: [*c]const (?*const c_void), primcount: GLsizei, basevertex: [*c]const GLint) void {
    
    glMultiDrawElementsBaseVertexEXT_impl.?(mode, count, type_0, indices, primcount, basevertex);
}
pub export fn glFramebufferTextureOES(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) void {
    
    glFramebufferTextureOES_impl.?(target, attachment, texture, level);
}
pub export fn glGetProgramBinaryOES(program: GLuint, bufSize: GLsizei, length: [*c]GLsizei, binaryFormat: [*c]GLenum, binary: ?*c_void) void {
    
    glGetProgramBinaryOES_impl.?(program, bufSize, length, binaryFormat, binary);
}
pub export fn glProgramBinaryOES(program: GLuint, binaryFormat: GLenum, binary: ?*const c_void, length: GLint) void {
    
    glProgramBinaryOES_impl.?(program, binaryFormat, binary, length);
}
pub export fn glMapBufferOES(target: GLenum, access: GLenum) ?*c_void {
    
    return glMapBufferOES_impl.?(target, access);
}
pub export fn glUnmapBufferOES(target: GLenum) GLboolean {
    
    return glUnmapBufferOES_impl.?(target);
}
pub export fn glGetBufferPointervOES(target: GLenum, pname: GLenum, params: [*c](?*c_void)) void {
    
    glGetBufferPointervOES_impl.?(target, pname, params);
}
pub export fn glPrimitiveBoundingBoxOES(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) void {
    
    glPrimitiveBoundingBoxOES_impl.?(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
pub export fn glMinSampleShadingOES(value: GLfloat) void {
    
    glMinSampleShadingOES_impl.?(value);
}
pub export fn glPatchParameteriOES(pname: GLenum, value: GLint) void {
    
    glPatchParameteriOES_impl.?(pname, value);
}
pub export fn glTexImage3DOES(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const c_void) void {
    
    glTexImage3DOES_impl.?(target, level, internalformat, width, height, depth, border, format, type_0, pixels);
}
pub export fn glTexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const c_void) void {
    
    glTexSubImage3DOES_impl.?(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_0, pixels);
}
pub export fn glCopyTexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void {
    
    glCopyTexSubImage3DOES_impl.?(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
pub export fn glCompressedTexImage3DOES(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const c_void) void {
    
    glCompressedTexImage3DOES_impl.?(target, level, internalformat, width, height, depth, border, imageSize, data);
}
pub export fn glCompressedTexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const c_void) void {
    
    glCompressedTexSubImage3DOES_impl.?(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
pub export fn glFramebufferTexture3DOES(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) void {
    
    glFramebufferTexture3DOES_impl.?(target, attachment, textarget, texture, level, zoffset);
}
pub export fn glTexParameterIivOES(target: GLenum, pname: GLenum, params: [*c]const GLint) void {
    
    glTexParameterIivOES_impl.?(target, pname, params);
}
pub export fn glTexParameterIuivOES(target: GLenum, pname: GLenum, params: [*c]const GLuint) void {
    
    glTexParameterIuivOES_impl.?(target, pname, params);
}
pub export fn glGetTexParameterIivOES(target: GLenum, pname: GLenum, params: [*c]GLint) void {
    
    glGetTexParameterIivOES_impl.?(target, pname, params);
}
pub export fn glGetTexParameterIuivOES(target: GLenum, pname: GLenum, params: [*c]GLuint) void {
    
    glGetTexParameterIuivOES_impl.?(target, pname, params);
}
pub export fn glSamplerParameterIivOES(sampler: GLuint, pname: GLenum, param: [*c]const GLint) void {
    
    glSamplerParameterIivOES_impl.?(sampler, pname, param);
}
pub export fn glSamplerParameterIuivOES(sampler: GLuint, pname: GLenum, param: [*c]const GLuint) void {
    
    glSamplerParameterIuivOES_impl.?(sampler, pname, param);
}
pub export fn glGetSamplerParameterIivOES(sampler: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetSamplerParameterIivOES_impl.?(sampler, pname, params);
}
pub export fn glGetSamplerParameterIuivOES(sampler: GLuint, pname: GLenum, params: [*c]GLuint) void {
    
    glGetSamplerParameterIuivOES_impl.?(sampler, pname, params);
}
pub export fn glTexBufferOES(target: GLenum, internalformat: GLenum, buffer: GLuint) void {
    
    glTexBufferOES_impl.?(target, internalformat, buffer);
}
pub export fn glTexBufferRangeOES(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) void {
    
    glTexBufferRangeOES_impl.?(target, internalformat, buffer, offset, size);
}
pub export fn glTexStorage3DMultisampleOES(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) void {
    
    glTexStorage3DMultisampleOES_impl.?(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
pub export fn glTextureViewOES(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) void {
    
    glTextureViewOES_impl.?(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
pub export fn glBindVertexArrayOES(array: GLuint) void {
    
    glBindVertexArrayOES_impl.?(array);
}
pub export fn glDeleteVertexArraysOES(n: GLsizei, arrays: [*c]const GLuint) void {
    
    glDeleteVertexArraysOES_impl.?(n, arrays);
}
pub export fn glGenVertexArraysOES(n: GLsizei, arrays: [*c]GLuint) void {
    
    glGenVertexArraysOES_impl.?(n, arrays);
}
pub export fn glIsVertexArrayOES(array: GLuint) GLboolean {
    
    return glIsVertexArrayOES_impl.?(array);
}
pub export fn glViewportArrayvOES(first: GLuint, count: GLsizei, v: [*c]const GLfloat) void {
    
    glViewportArrayvOES_impl.?(first, count, v);
}
pub export fn glViewportIndexedfOES(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) void {
    
    glViewportIndexedfOES_impl.?(index, x, y, w, h);
}
pub export fn glViewportIndexedfvOES(index: GLuint, v: [*c]const GLfloat) void {
    
    glViewportIndexedfvOES_impl.?(index, v);
}
pub export fn glScissorArrayvOES(first: GLuint, count: GLsizei, v: [*c]const GLint) void {
    
    glScissorArrayvOES_impl.?(first, count, v);
}
pub export fn glScissorIndexedOES(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) void {
    
    glScissorIndexedOES_impl.?(index, left, bottom, width, height);
}
pub export fn glScissorIndexedvOES(index: GLuint, v: [*c]const GLint) void {
    
    glScissorIndexedvOES_impl.?(index, v);
}
pub export fn glDepthRangeArrayfvOES(first: GLuint, count: GLsizei, v: [*c]const GLfloat) void {
    
    glDepthRangeArrayfvOES_impl.?(first, count, v);
}
pub export fn glDepthRangeIndexedfOES(index: GLuint, n: GLfloat, f: GLfloat) void {
    
    glDepthRangeIndexedfOES_impl.?(index, n, f);
}
pub export fn glGetFloati_vOES(target: GLenum, index: GLuint, data: [*c]GLfloat) void {
    
    glGetFloati_vOES_impl.?(target, index, data);
}
pub export fn glRenderbufferStorageMultisampleAdvancedAMD(target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glRenderbufferStorageMultisampleAdvancedAMD_impl.?(target, samples, storageSamples, internalformat, width, height);
}
pub export fn glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glNamedRenderbufferStorageMultisampleAdvancedAMD_impl.?(renderbuffer, samples, storageSamples, internalformat, width, height);
}
pub export fn glGetPerfMonitorGroupsAMD(numGroups: [*c]GLint, groupsSize: GLsizei, groups: [*c]GLuint) void {
    
    glGetPerfMonitorGroupsAMD_impl.?(numGroups, groupsSize, groups);
}
pub export fn glGetPerfMonitorCountersAMD(group: GLuint, numCounters: [*c]GLint, maxActiveCounters: [*c]GLint, counterSize: GLsizei, counters: [*c]GLuint) void {
    
    glGetPerfMonitorCountersAMD_impl.?(group, numCounters, maxActiveCounters, counterSize, counters);
}
pub export fn glGetPerfMonitorGroupStringAMD(group: GLuint, bufSize: GLsizei, length: [*c]GLsizei, groupString: [*c]GLchar) void {
    
    glGetPerfMonitorGroupStringAMD_impl.?(group, bufSize, length, groupString);
}
pub export fn glGetPerfMonitorCounterStringAMD(group: GLuint, counter: GLuint, bufSize: GLsizei, length: [*c]GLsizei, counterString: [*c]GLchar) void {
    
    glGetPerfMonitorCounterStringAMD_impl.?(group, counter, bufSize, length, counterString);
}
pub export fn glGetPerfMonitorCounterInfoAMD(group: GLuint, counter: GLuint, pname: GLenum, data: ?*c_void) void {
    
    glGetPerfMonitorCounterInfoAMD_impl.?(group, counter, pname, data);
}
pub export fn glGenPerfMonitorsAMD(n: GLsizei, monitors: [*c]GLuint) void {
    
    glGenPerfMonitorsAMD_impl.?(n, monitors);
}
pub export fn glDeletePerfMonitorsAMD(n: GLsizei, monitors: [*c]GLuint) void {
    
    glDeletePerfMonitorsAMD_impl.?(n, monitors);
}
pub export fn glSelectPerfMonitorCountersAMD(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: [*c]GLuint) void {
    
    glSelectPerfMonitorCountersAMD_impl.?(monitor, enable, group, numCounters, counterList);
}
pub export fn glBeginPerfMonitorAMD(monitor: GLuint) void {
    
    glBeginPerfMonitorAMD_impl.?(monitor);
}
pub export fn glEndPerfMonitorAMD(monitor: GLuint) void {
    
    glEndPerfMonitorAMD_impl.?(monitor);
}
pub export fn glGetPerfMonitorCounterDataAMD(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: [*c]GLuint, bytesWritten: [*c]GLint) void {
    
    glGetPerfMonitorCounterDataAMD_impl.?(monitor, pname, dataSize, data, bytesWritten);
}
pub export fn glBlitFramebufferANGLE(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void {
    
    glBlitFramebufferANGLE_impl.?(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
pub export fn glRenderbufferStorageMultisampleANGLE(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glRenderbufferStorageMultisampleANGLE_impl.?(target, samples, internalformat, width, height);
}
pub export fn glDrawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) void {
    
    glDrawArraysInstancedANGLE_impl.?(mode, first, count, primcount);
}
pub export fn glDrawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, primcount: GLsizei) void {
    
    glDrawElementsInstancedANGLE_impl.?(mode, count, type_0, indices, primcount);
}
pub export fn glVertexAttribDivisorANGLE(index: GLuint, divisor: GLuint) void {
    
    glVertexAttribDivisorANGLE_impl.?(index, divisor);
}
pub export fn glGetTranslatedShaderSourceANGLE(shader: GLuint, bufsize: GLsizei, length: [*c]GLsizei, source: [*c]GLchar) void {
    
    glGetTranslatedShaderSourceANGLE_impl.?(shader, bufsize, length, source);
}
pub export fn glCopyTextureLevelsAPPLE(destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) void {
    
    glCopyTextureLevelsAPPLE_impl.?(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}
pub export fn glRenderbufferStorageMultisampleAPPLE(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glRenderbufferStorageMultisampleAPPLE_impl.?(target, samples, internalformat, width, height);
}
pub export fn glResolveMultisampleFramebufferAPPLE() void {
    
    glResolveMultisampleFramebufferAPPLE_impl.?();
}
pub export fn glFenceSyncAPPLE(condition: GLenum, flags: GLbitfield) GLsync {
    
    return glFenceSyncAPPLE_impl.?(condition, flags);
}
pub export fn glIsSyncAPPLE(sync: GLsync) GLboolean {
    
    return glIsSyncAPPLE_impl.?(sync);
}
pub export fn glDeleteSyncAPPLE(sync: GLsync) void {
    
    glDeleteSyncAPPLE_impl.?(sync);
}
pub export fn glClientWaitSyncAPPLE(sync: GLsync, flags: GLbitfield, timeout: GLuint64) GLenum {
    
    return glClientWaitSyncAPPLE_impl.?(sync, flags, timeout);
}
pub export fn glWaitSyncAPPLE(sync: GLsync, flags: GLbitfield, timeout: GLuint64) void {
    
    glWaitSyncAPPLE_impl.?(sync, flags, timeout);
}
pub export fn glGetInteger64vAPPLE(pname: GLenum, params: [*c]GLint64) void {
    
    glGetInteger64vAPPLE_impl.?(pname, params);
}
pub export fn glGetSyncivAPPLE(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: [*c]GLsizei, values: [*c]GLint) void {
    
    glGetSyncivAPPLE_impl.?(sync, pname, bufSize, length, values);
}
pub export fn glEGLImageTargetTexStorageEXT(target: GLenum, image: GLeglImageOES, attrib_list: [*c]const GLint) void {
    
    glEGLImageTargetTexStorageEXT_impl.?(target, image, attrib_list);
}
pub export fn glEGLImageTargetTextureStorageEXT(texture: GLuint, image: GLeglImageOES, attrib_list: [*c]const GLint) void {
    
    glEGLImageTargetTextureStorageEXT_impl.?(texture, image, attrib_list);
}
pub export fn glDrawArraysInstancedBaseInstanceEXT(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) void {
    
    glDrawArraysInstancedBaseInstanceEXT_impl.?(mode, first, count, instancecount, baseinstance);
}
pub export fn glDrawElementsInstancedBaseInstanceEXT(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, instancecount: GLsizei, baseinstance: GLuint) void {
    
    glDrawElementsInstancedBaseInstanceEXT_impl.?(mode, count, type_0, indices, instancecount, baseinstance);
}
pub export fn glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) void {
    
    glDrawElementsInstancedBaseVertexBaseInstanceEXT_impl.?(mode, count, type_0, indices, instancecount, basevertex, baseinstance);
}
pub export fn glBindFragDataLocationIndexedEXT(program: GLuint, colorNumber: GLuint, index: GLuint, name: [*c]const GLchar) void {
    
    glBindFragDataLocationIndexedEXT_impl.?(program, colorNumber, index, name);
}
pub export fn glBindFragDataLocationEXT(program: GLuint, color: GLuint, name: [*c]const GLchar) void {
    
    glBindFragDataLocationEXT_impl.?(program, color, name);
}
pub export fn glGetProgramResourceLocationIndexEXT(program: GLuint, programInterface: GLenum, name: [*c]const GLchar) GLint {
    
    return glGetProgramResourceLocationIndexEXT_impl.?(program, programInterface, name);
}
pub export fn glGetFragDataIndexEXT(program: GLuint, name: [*c]const GLchar) GLint {
    
    return glGetFragDataIndexEXT_impl.?(program, name);
}
pub export fn glBufferStorageEXT(target: GLenum, size: GLsizeiptr, data: ?*const c_void, flags: GLbitfield) void {
    
    glBufferStorageEXT_impl.?(target, size, data, flags);
}
pub export fn glClearTexImageEXT(texture: GLuint, level: GLint, format: GLenum, type_0: GLenum, data: ?*const c_void) void {
    
    glClearTexImageEXT_impl.?(texture, level, format, type_0, data);
}
pub export fn glClearTexSubImageEXT(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_0: GLenum, data: ?*const c_void) void {
    
    glClearTexSubImageEXT_impl.?(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type_0, data);
}
pub export fn glClipControlEXT(origin: GLenum, depth: GLenum) void {
    
    glClipControlEXT_impl.?(origin, depth);
}
pub export fn glCopyImageSubDataEXT(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) void {
    
    glCopyImageSubDataEXT_impl.?(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
pub export fn glLabelObjectEXT(type_0: GLenum, object: GLuint, length: GLsizei, label: [*c]const GLchar) void {
    
    glLabelObjectEXT_impl.?(type_0, object, length, label);
}
pub export fn glGetObjectLabelEXT(type_0: GLenum, object: GLuint, bufSize: GLsizei, length: [*c]GLsizei, label: [*c]GLchar) void {
    
    glGetObjectLabelEXT_impl.?(type_0, object, bufSize, length, label);
}
pub export fn glInsertEventMarkerEXT(length: GLsizei, marker: [*c]const GLchar) void {
    
    glInsertEventMarkerEXT_impl.?(length, marker);
}
pub export fn glPushGroupMarkerEXT(length: GLsizei, marker: [*c]const GLchar) void {
    
    glPushGroupMarkerEXT_impl.?(length, marker);
}
pub export fn glPopGroupMarkerEXT() void {
    
    glPopGroupMarkerEXT_impl.?();
}
pub export fn glDiscardFramebufferEXT(target: GLenum, numAttachments: GLsizei, attachments: [*c]const GLenum) void {
    
    glDiscardFramebufferEXT_impl.?(target, numAttachments, attachments);
}
pub export fn glGenQueriesEXT(n: GLsizei, ids: [*c]GLuint) void {
    
    glGenQueriesEXT_impl.?(n, ids);
}
pub export fn glDeleteQueriesEXT(n: GLsizei, ids: [*c]const GLuint) void {
    
    glDeleteQueriesEXT_impl.?(n, ids);
}
pub export fn glIsQueryEXT(id: GLuint) GLboolean {
    
    return glIsQueryEXT_impl.?(id);
}
pub export fn glBeginQueryEXT(target: GLenum, id: GLuint) void {
    
    glBeginQueryEXT_impl.?(target, id);
}
pub export fn glEndQueryEXT(target: GLenum) void {
    
    glEndQueryEXT_impl.?(target);
}
pub export fn glQueryCounterEXT(id: GLuint, target: GLenum) void {
    
    glQueryCounterEXT_impl.?(id, target);
}
pub export fn glGetQueryivEXT(target: GLenum, pname: GLenum, params: [*c]GLint) void {
    
    glGetQueryivEXT_impl.?(target, pname, params);
}
pub export fn glGetQueryObjectivEXT(id: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetQueryObjectivEXT_impl.?(id, pname, params);
}
pub export fn glGetQueryObjectuivEXT(id: GLuint, pname: GLenum, params: [*c]GLuint) void {
    
    glGetQueryObjectuivEXT_impl.?(id, pname, params);
}
pub export fn glGetQueryObjecti64vEXT(id: GLuint, pname: GLenum, params: [*c]GLint64) void {
    
    glGetQueryObjecti64vEXT_impl.?(id, pname, params);
}
pub export fn glGetQueryObjectui64vEXT(id: GLuint, pname: GLenum, params: [*c]GLuint64) void {
    
    glGetQueryObjectui64vEXT_impl.?(id, pname, params);
}
pub export fn glDrawBuffersEXT(n: GLsizei, bufs: [*c]const GLenum) void {
    
    glDrawBuffersEXT_impl.?(n, bufs);
}
pub export fn glEnableiEXT(target: GLenum, index: GLuint) void {
    
    glEnableiEXT_impl.?(target, index);
}
pub export fn glDisableiEXT(target: GLenum, index: GLuint) void {
    
    glDisableiEXT_impl.?(target, index);
}
pub export fn glBlendEquationiEXT(buf: GLuint, mode: GLenum) void {
    
    glBlendEquationiEXT_impl.?(buf, mode);
}
pub export fn glBlendEquationSeparateiEXT(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) void {
    
    glBlendEquationSeparateiEXT_impl.?(buf, modeRGB, modeAlpha);
}
pub export fn glBlendFunciEXT(buf: GLuint, src: GLenum, dst: GLenum) void {
    
    glBlendFunciEXT_impl.?(buf, src, dst);
}
pub export fn glBlendFuncSeparateiEXT(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) void {
    
    glBlendFuncSeparateiEXT_impl.?(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
pub export fn glColorMaskiEXT(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) void {
    
    glColorMaskiEXT_impl.?(index, r, g, b, a);
}
pub export fn glIsEnablediEXT(target: GLenum, index: GLuint) GLboolean {
    
    return glIsEnablediEXT_impl.?(target, index);
}
pub export fn glDrawElementsBaseVertexEXT(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, basevertex: GLint) void {
    
    glDrawElementsBaseVertexEXT_impl.?(mode, count, type_0, indices, basevertex);
}
pub export fn glDrawRangeElementsBaseVertexEXT(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_0: GLenum, indices: ?*const c_void, basevertex: GLint) void {
    
    glDrawRangeElementsBaseVertexEXT_impl.?(mode, start, end, count, type_0, indices, basevertex);
}
pub export fn glDrawElementsInstancedBaseVertexEXT(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, instancecount: GLsizei, basevertex: GLint) void {
    
    glDrawElementsInstancedBaseVertexEXT_impl.?(mode, count, type_0, indices, instancecount, basevertex);
}
pub export fn glDrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) void {
    
    glDrawArraysInstancedEXT_impl.?(mode, start, count, primcount);
}
pub export fn glDrawElementsInstancedEXT(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, primcount: GLsizei) void {
    
    glDrawElementsInstancedEXT_impl.?(mode, count, type_0, indices, primcount);
}
pub export fn glDrawTransformFeedbackEXT(mode: GLenum, id: GLuint) void {
    
    glDrawTransformFeedbackEXT_impl.?(mode, id);
}
pub export fn glDrawTransformFeedbackInstancedEXT(mode: GLenum, id: GLuint, instancecount: GLsizei) void {
    
    glDrawTransformFeedbackInstancedEXT_impl.?(mode, id, instancecount);
}
pub export fn glBufferStorageExternalEXT(target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) void {
    
    glBufferStorageExternalEXT_impl.?(target, offset, size, clientBuffer, flags);
}
pub export fn glNamedBufferStorageExternalEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) void {
    
    glNamedBufferStorageExternalEXT_impl.?(buffer, offset, size, clientBuffer, flags);
}
pub export fn glFramebufferTextureEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) void {
    
    glFramebufferTextureEXT_impl.?(target, attachment, texture, level);
}
pub export fn glVertexAttribDivisorEXT(index: GLuint, divisor: GLuint) void {
    
    glVertexAttribDivisorEXT_impl.?(index, divisor);
}
pub export fn glMapBufferRangeEXT(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) ?*c_void {
    
    return glMapBufferRangeEXT_impl.?(target, offset, length, access);
}
pub export fn glFlushMappedBufferRangeEXT(target: GLenum, offset: GLintptr, length: GLsizeiptr) void {
    
    glFlushMappedBufferRangeEXT_impl.?(target, offset, length);
}
pub export fn glGetUnsignedBytevEXT(pname: GLenum, data: [*c]GLubyte) void {
    
    glGetUnsignedBytevEXT_impl.?(pname, data);
}
pub export fn glGetUnsignedBytei_vEXT(target: GLenum, index: GLuint, data: [*c]GLubyte) void {
    
    glGetUnsignedBytei_vEXT_impl.?(target, index, data);
}
pub export fn glDeleteMemoryObjectsEXT(n: GLsizei, memoryObjects: [*c]const GLuint) void {
    
    glDeleteMemoryObjectsEXT_impl.?(n, memoryObjects);
}
pub export fn glIsMemoryObjectEXT(memoryObject: GLuint) GLboolean {
    
    return glIsMemoryObjectEXT_impl.?(memoryObject);
}
pub export fn glCreateMemoryObjectsEXT(n: GLsizei, memoryObjects: [*c]GLuint) void {
    
    glCreateMemoryObjectsEXT_impl.?(n, memoryObjects);
}
pub export fn glMemoryObjectParameterivEXT(memoryObject: GLuint, pname: GLenum, params: [*c]const GLint) void {
    
    glMemoryObjectParameterivEXT_impl.?(memoryObject, pname, params);
}
pub export fn glGetMemoryObjectParameterivEXT(memoryObject: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetMemoryObjectParameterivEXT_impl.?(memoryObject, pname, params);
}
pub export fn glTexStorageMem2DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) void {
    
    glTexStorageMem2DEXT_impl.?(target, levels, internalFormat, width, height, memory, offset);
}
pub export fn glTexStorageMem2DMultisampleEXT(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) void {
    
    glTexStorageMem2DMultisampleEXT_impl.?(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}
pub export fn glTexStorageMem3DEXT(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) void {
    
    glTexStorageMem3DEXT_impl.?(target, levels, internalFormat, width, height, depth, memory, offset);
}
pub export fn glTexStorageMem3DMultisampleEXT(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) void {
    
    glTexStorageMem3DMultisampleEXT_impl.?(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}
pub export fn glBufferStorageMemEXT(target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) void {
    
    glBufferStorageMemEXT_impl.?(target, size, memory, offset);
}
pub export fn glTextureStorageMem2DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) void {
    
    glTextureStorageMem2DEXT_impl.?(texture, levels, internalFormat, width, height, memory, offset);
}
pub export fn glTextureStorageMem2DMultisampleEXT(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) void {
    
    glTextureStorageMem2DMultisampleEXT_impl.?(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}
pub export fn glTextureStorageMem3DEXT(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) void {
    
    glTextureStorageMem3DEXT_impl.?(texture, levels, internalFormat, width, height, depth, memory, offset);
}
pub export fn glTextureStorageMem3DMultisampleEXT(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) void {
    
    glTextureStorageMem3DMultisampleEXT_impl.?(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}
pub export fn glNamedBufferStorageMemEXT(buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) void {
    
    glNamedBufferStorageMemEXT_impl.?(buffer, size, memory, offset);
}
pub export fn glImportMemoryFdEXT(memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) void {
    
    glImportMemoryFdEXT_impl.?(memory, size, handleType, fd);
}
pub export fn glImportMemoryWin32HandleEXT(memory: GLuint, size: GLuint64, handleType: GLenum, handle: ?*c_void) void {
    
    glImportMemoryWin32HandleEXT_impl.?(memory, size, handleType, handle);
}
pub export fn glImportMemoryWin32NameEXT(memory: GLuint, size: GLuint64, handleType: GLenum, name: ?*const c_void) void {
    
    glImportMemoryWin32NameEXT_impl.?(memory, size, handleType, name);
}
pub export fn glMultiDrawArraysEXT(mode: GLenum, first: [*c]const GLint, count: [*c]const GLsizei, primcount: GLsizei) void {
    
    glMultiDrawArraysEXT_impl.?(mode, first, count, primcount);
}
pub export fn glMultiDrawElementsEXT(mode: GLenum, count: [*c]const GLsizei, type_0: GLenum, indices: [*c]const (?*const c_void), primcount: GLsizei) void {
    
    glMultiDrawElementsEXT_impl.?(mode, count, type_0, indices, primcount);
}
pub export fn glMultiDrawArraysIndirectEXT(mode: GLenum, indirect: ?*const c_void, drawcount: GLsizei, stride: GLsizei) void {
    
    glMultiDrawArraysIndirectEXT_impl.?(mode, indirect, drawcount, stride);
}
pub export fn glMultiDrawElementsIndirectEXT(mode: GLenum, type_0: GLenum, indirect: ?*const c_void, drawcount: GLsizei, stride: GLsizei) void {
    
    glMultiDrawElementsIndirectEXT_impl.?(mode, type_0, indirect, drawcount, stride);
}
pub export fn glRenderbufferStorageMultisampleEXT(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glRenderbufferStorageMultisampleEXT_impl.?(target, samples, internalformat, width, height);
}
pub export fn glFramebufferTexture2DMultisampleEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) void {
    
    glFramebufferTexture2DMultisampleEXT_impl.?(target, attachment, textarget, texture, level, samples);
}
pub export fn glReadBufferIndexedEXT(src: GLenum, index: GLint) void {
    
    glReadBufferIndexedEXT_impl.?(src, index);
}
pub export fn glDrawBuffersIndexedEXT(n: GLint, location: [*c]const GLenum, indices: [*c]const GLint) void {
    
    glDrawBuffersIndexedEXT_impl.?(n, location, indices);
}
pub export fn glGetIntegeri_vEXT(target: GLenum, index: GLuint, data: [*c]GLint) void {
    
    glGetIntegeri_vEXT_impl.?(target, index, data);
}
pub export fn glPolygonOffsetClampEXT(factor: GLfloat, units: GLfloat, clamp: GLfloat) void {
    
    glPolygonOffsetClampEXT_impl.?(factor, units, clamp);
}
pub export fn glPrimitiveBoundingBoxEXT(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) void {
    
    glPrimitiveBoundingBoxEXT_impl.?(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
pub export fn glRasterSamplesEXT(samples: GLuint, fixedsamplelocations: GLboolean) void {
    
    glRasterSamplesEXT_impl.?(samples, fixedsamplelocations);
}
pub export fn glGetGraphicsResetStatusEXT() GLenum {
    
    return glGetGraphicsResetStatusEXT_impl.?();
}
pub export fn glReadnPixelsEXT(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, bufSize: GLsizei, data: ?*c_void) void {
    
    glReadnPixelsEXT_impl.?(x, y, width, height, format, type_0, bufSize, data);
}
pub export fn glGetnUniformfvEXT(program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLfloat) void {
    
    glGetnUniformfvEXT_impl.?(program, location, bufSize, params);
}
pub export fn glGetnUniformivEXT(program: GLuint, location: GLint, bufSize: GLsizei, params: [*c]GLint) void {
    
    glGetnUniformivEXT_impl.?(program, location, bufSize, params);
}
pub export fn glGenSemaphoresEXT(n: GLsizei, semaphores: [*c]GLuint) void {
    
    glGenSemaphoresEXT_impl.?(n, semaphores);
}
pub export fn glDeleteSemaphoresEXT(n: GLsizei, semaphores: [*c]const GLuint) void {
    
    glDeleteSemaphoresEXT_impl.?(n, semaphores);
}
pub export fn glIsSemaphoreEXT(semaphore: GLuint) GLboolean {
    
    return glIsSemaphoreEXT_impl.?(semaphore);
}
pub export fn glSemaphoreParameterui64vEXT(semaphore: GLuint, pname: GLenum, params: [*c]const GLuint64) void {
    
    glSemaphoreParameterui64vEXT_impl.?(semaphore, pname, params);
}
pub export fn glGetSemaphoreParameterui64vEXT(semaphore: GLuint, pname: GLenum, params: [*c]GLuint64) void {
    
    glGetSemaphoreParameterui64vEXT_impl.?(semaphore, pname, params);
}
pub export fn glWaitSemaphoreEXT(semaphore: GLuint, numBufferBarriers: GLuint, buffers: [*c]const GLuint, numTextureBarriers: GLuint, textures: [*c]const GLuint, srcLayouts: [*c]const GLenum) void {
    
    glWaitSemaphoreEXT_impl.?(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}
pub export fn glSignalSemaphoreEXT(semaphore: GLuint, numBufferBarriers: GLuint, buffers: [*c]const GLuint, numTextureBarriers: GLuint, textures: [*c]const GLuint, dstLayouts: [*c]const GLenum) void {
    
    glSignalSemaphoreEXT_impl.?(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}
pub export fn glImportSemaphoreFdEXT(semaphore: GLuint, handleType: GLenum, fd: GLint) void {
    
    glImportSemaphoreFdEXT_impl.?(semaphore, handleType, fd);
}
pub export fn glImportSemaphoreWin32HandleEXT(semaphore: GLuint, handleType: GLenum, handle: ?*c_void) void {
    
    glImportSemaphoreWin32HandleEXT_impl.?(semaphore, handleType, handle);
}
pub export fn glImportSemaphoreWin32NameEXT(semaphore: GLuint, handleType: GLenum, name: ?*const c_void) void {
    
    glImportSemaphoreWin32NameEXT_impl.?(semaphore, handleType, name);
}
pub export fn glActiveShaderProgramEXT(pipeline: GLuint, program: GLuint) void {
    
    glActiveShaderProgramEXT_impl.?(pipeline, program);
}
pub export fn glBindProgramPipelineEXT(pipeline: GLuint) void {
    
    glBindProgramPipelineEXT_impl.?(pipeline);
}
pub export fn glCreateShaderProgramvEXT(type_0: GLenum, count: GLsizei, strings: [*c]([*c]const GLchar)) GLuint {
    
    return glCreateShaderProgramvEXT_impl.?(type_0, count, strings);
}
pub export fn glDeleteProgramPipelinesEXT(n: GLsizei, pipelines: [*c]const GLuint) void {
    
    glDeleteProgramPipelinesEXT_impl.?(n, pipelines);
}
pub export fn glGenProgramPipelinesEXT(n: GLsizei, pipelines: [*c]GLuint) void {
    
    glGenProgramPipelinesEXT_impl.?(n, pipelines);
}
pub export fn glGetProgramPipelineInfoLogEXT(pipeline: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) void {
    
    glGetProgramPipelineInfoLogEXT_impl.?(pipeline, bufSize, length, infoLog);
}
pub export fn glGetProgramPipelineivEXT(pipeline: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetProgramPipelineivEXT_impl.?(pipeline, pname, params);
}
pub export fn glIsProgramPipelineEXT(pipeline: GLuint) GLboolean {
    
    return glIsProgramPipelineEXT_impl.?(pipeline);
}
pub export fn glProgramParameteriEXT(program: GLuint, pname: GLenum, value: GLint) void {
    
    glProgramParameteriEXT_impl.?(program, pname, value);
}
pub export fn glProgramUniform1fEXT(program: GLuint, location: GLint, v0: GLfloat) void {
    
    glProgramUniform1fEXT_impl.?(program, location, v0);
}
pub export fn glProgramUniform1fvEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) void {
    
    glProgramUniform1fvEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform1iEXT(program: GLuint, location: GLint, v0: GLint) void {
    
    glProgramUniform1iEXT_impl.?(program, location, v0);
}
pub export fn glProgramUniform1ivEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) void {
    
    glProgramUniform1ivEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform2fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) void {
    
    glProgramUniform2fEXT_impl.?(program, location, v0, v1);
}
pub export fn glProgramUniform2fvEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) void {
    
    glProgramUniform2fvEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform2iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint) void {
    
    glProgramUniform2iEXT_impl.?(program, location, v0, v1);
}
pub export fn glProgramUniform2ivEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) void {
    
    glProgramUniform2ivEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform3fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void {
    
    glProgramUniform3fEXT_impl.?(program, location, v0, v1, v2);
}
pub export fn glProgramUniform3fvEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) void {
    
    glProgramUniform3fvEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform3iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) void {
    
    glProgramUniform3iEXT_impl.?(program, location, v0, v1, v2);
}
pub export fn glProgramUniform3ivEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) void {
    
    glProgramUniform3ivEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform4fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void {
    
    glProgramUniform4fEXT_impl.?(program, location, v0, v1, v2, v3);
}
pub export fn glProgramUniform4fvEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLfloat) void {
    
    glProgramUniform4fvEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform4iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void {
    
    glProgramUniform4iEXT_impl.?(program, location, v0, v1, v2, v3);
}
pub export fn glProgramUniform4ivEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint) void {
    
    glProgramUniform4ivEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniformMatrix2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix2fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glProgramUniformMatrix3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix3fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glProgramUniformMatrix4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix4fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glUseProgramStagesEXT(pipeline: GLuint, stages: GLbitfield, program: GLuint) void {
    
    glUseProgramStagesEXT_impl.?(pipeline, stages, program);
}
pub export fn glValidateProgramPipelineEXT(pipeline: GLuint) void {
    
    glValidateProgramPipelineEXT_impl.?(pipeline);
}
pub export fn glProgramUniform1uiEXT(program: GLuint, location: GLint, v0: GLuint) void {
    
    glProgramUniform1uiEXT_impl.?(program, location, v0);
}
pub export fn glProgramUniform2uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) void {
    
    glProgramUniform2uiEXT_impl.?(program, location, v0, v1);
}
pub export fn glProgramUniform3uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) void {
    
    glProgramUniform3uiEXT_impl.?(program, location, v0, v1, v2);
}
pub export fn glProgramUniform4uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) void {
    
    glProgramUniform4uiEXT_impl.?(program, location, v0, v1, v2, v3);
}
pub export fn glProgramUniform1uivEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) void {
    
    glProgramUniform1uivEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform2uivEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) void {
    
    glProgramUniform2uivEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform3uivEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) void {
    
    glProgramUniform3uivEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniform4uivEXT(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint) void {
    
    glProgramUniform4uivEXT_impl.?(program, location, count, value);
}
pub export fn glProgramUniformMatrix2x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix2x3fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glProgramUniformMatrix3x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix3x2fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glProgramUniformMatrix2x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix2x4fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glProgramUniformMatrix4x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix4x2fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glProgramUniformMatrix3x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix3x4fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glProgramUniformMatrix4x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glProgramUniformMatrix4x3fvEXT_impl.?(program, location, count, transpose, value);
}
pub export fn glFramebufferFetchBarrierEXT() void {
    
    glFramebufferFetchBarrierEXT_impl.?();
}
pub export fn glFramebufferPixelLocalStorageSizeEXT(target: GLuint, size: GLsizei) void {
    
    glFramebufferPixelLocalStorageSizeEXT_impl.?(target, size);
}
pub export fn glGetFramebufferPixelLocalStorageSizeEXT(target: GLuint) GLsizei {
    
    return glGetFramebufferPixelLocalStorageSizeEXT_impl.?(target);
}
pub export fn glClearPixelLocalStorageuiEXT(offset: GLsizei, n: GLsizei, values: [*c]const GLuint) void {
    
    glClearPixelLocalStorageuiEXT_impl.?(offset, n, values);
}
pub export fn glTexPageCommitmentEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) void {
    
    glTexPageCommitmentEXT_impl.?(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}
pub export fn glPatchParameteriEXT(pname: GLenum, value: GLint) void {
    
    glPatchParameteriEXT_impl.?(pname, value);
}
pub export fn glTexParameterIivEXT(target: GLenum, pname: GLenum, params: [*c]const GLint) void {
    
    glTexParameterIivEXT_impl.?(target, pname, params);
}
pub export fn glTexParameterIuivEXT(target: GLenum, pname: GLenum, params: [*c]const GLuint) void {
    
    glTexParameterIuivEXT_impl.?(target, pname, params);
}
pub export fn glGetTexParameterIivEXT(target: GLenum, pname: GLenum, params: [*c]GLint) void {
    
    glGetTexParameterIivEXT_impl.?(target, pname, params);
}
pub export fn glGetTexParameterIuivEXT(target: GLenum, pname: GLenum, params: [*c]GLuint) void {
    
    glGetTexParameterIuivEXT_impl.?(target, pname, params);
}
pub export fn glSamplerParameterIivEXT(sampler: GLuint, pname: GLenum, param: [*c]const GLint) void {
    
    glSamplerParameterIivEXT_impl.?(sampler, pname, param);
}
pub export fn glSamplerParameterIuivEXT(sampler: GLuint, pname: GLenum, param: [*c]const GLuint) void {
    
    glSamplerParameterIuivEXT_impl.?(sampler, pname, param);
}
pub export fn glGetSamplerParameterIivEXT(sampler: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetSamplerParameterIivEXT_impl.?(sampler, pname, params);
}
pub export fn glGetSamplerParameterIuivEXT(sampler: GLuint, pname: GLenum, params: [*c]GLuint) void {
    
    glGetSamplerParameterIuivEXT_impl.?(sampler, pname, params);
}
pub export fn glTexBufferEXT(target: GLenum, internalformat: GLenum, buffer: GLuint) void {
    
    glTexBufferEXT_impl.?(target, internalformat, buffer);
}
pub export fn glTexBufferRangeEXT(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) void {
    
    glTexBufferRangeEXT_impl.?(target, internalformat, buffer, offset, size);
}
pub export fn glTexStorage1DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) void {
    
    glTexStorage1DEXT_impl.?(target, levels, internalformat, width);
}
pub export fn glTexStorage2DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glTexStorage2DEXT_impl.?(target, levels, internalformat, width, height);
}
pub export fn glTexStorage3DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) void {
    
    glTexStorage3DEXT_impl.?(target, levels, internalformat, width, height, depth);
}
pub export fn glTextureStorage1DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) void {
    
    glTextureStorage1DEXT_impl.?(texture, target, levels, internalformat, width);
}
pub export fn glTextureStorage2DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glTextureStorage2DEXT_impl.?(texture, target, levels, internalformat, width, height);
}
pub export fn glTextureStorage3DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) void {
    
    glTextureStorage3DEXT_impl.?(texture, target, levels, internalformat, width, height, depth);
}
pub export fn glTextureViewEXT(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) void {
    
    glTextureViewEXT_impl.?(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
pub export fn glAcquireKeyedMutexWin32EXT(memory: GLuint, key: GLuint64, timeout: GLuint) GLboolean {
    
    return glAcquireKeyedMutexWin32EXT_impl.?(memory, key, timeout);
}
pub export fn glReleaseKeyedMutexWin32EXT(memory: GLuint, key: GLuint64) GLboolean {
    
    return glReleaseKeyedMutexWin32EXT_impl.?(memory, key);
}
pub export fn glWindowRectanglesEXT(mode: GLenum, count: GLsizei, box: [*c]const GLint) void {
    
    glWindowRectanglesEXT_impl.?(mode, count, box);
}
pub export fn glGetTextureHandleIMG(texture: GLuint) GLuint64 {
    
    return glGetTextureHandleIMG_impl.?(texture);
}
pub export fn glGetTextureSamplerHandleIMG(texture: GLuint, sampler: GLuint) GLuint64 {
    
    return glGetTextureSamplerHandleIMG_impl.?(texture, sampler);
}
pub export fn glUniformHandleui64IMG(location: GLint, value: GLuint64) void {
    
    glUniformHandleui64IMG_impl.?(location, value);
}
pub export fn glUniformHandleui64vIMG(location: GLint, count: GLsizei, value: [*c]const GLuint64) void {
    
    glUniformHandleui64vIMG_impl.?(location, count, value);
}
pub export fn glProgramUniformHandleui64IMG(program: GLuint, location: GLint, value: GLuint64) void {
    
    glProgramUniformHandleui64IMG_impl.?(program, location, value);
}
pub export fn glProgramUniformHandleui64vIMG(program: GLuint, location: GLint, count: GLsizei, values: [*c]const GLuint64) void {
    
    glProgramUniformHandleui64vIMG_impl.?(program, location, count, values);
}
pub export fn glFramebufferTexture2DDownsampleIMG(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, xscale: GLint, yscale: GLint) void {
    
    glFramebufferTexture2DDownsampleIMG_impl.?(target, attachment, textarget, texture, level, xscale, yscale);
}
pub export fn glFramebufferTextureLayerDownsampleIMG(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint, xscale: GLint, yscale: GLint) void {
    
    glFramebufferTextureLayerDownsampleIMG_impl.?(target, attachment, texture, level, layer, xscale, yscale);
}
pub export fn glRenderbufferStorageMultisampleIMG(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glRenderbufferStorageMultisampleIMG_impl.?(target, samples, internalformat, width, height);
}
pub export fn glFramebufferTexture2DMultisampleIMG(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) void {
    
    glFramebufferTexture2DMultisampleIMG_impl.?(target, attachment, textarget, texture, level, samples);
}
pub export fn glApplyFramebufferAttachmentCMAAINTEL() void {
    
    glApplyFramebufferAttachmentCMAAINTEL_impl.?();
}
pub export fn glBeginPerfQueryINTEL(queryHandle: GLuint) void {
    
    glBeginPerfQueryINTEL_impl.?(queryHandle);
}
pub export fn glCreatePerfQueryINTEL(queryId: GLuint, queryHandle: [*c]GLuint) void {
    
    glCreatePerfQueryINTEL_impl.?(queryId, queryHandle);
}
pub export fn glDeletePerfQueryINTEL(queryHandle: GLuint) void {
    
    glDeletePerfQueryINTEL_impl.?(queryHandle);
}
pub export fn glEndPerfQueryINTEL(queryHandle: GLuint) void {
    
    glEndPerfQueryINTEL_impl.?(queryHandle);
}
pub export fn glGetFirstPerfQueryIdINTEL(queryId: [*c]GLuint) void {
    
    glGetFirstPerfQueryIdINTEL_impl.?(queryId);
}
pub export fn glGetNextPerfQueryIdINTEL(queryId: GLuint, nextQueryId: [*c]GLuint) void {
    
    glGetNextPerfQueryIdINTEL_impl.?(queryId, nextQueryId);
}
pub export fn glGetPerfCounterInfoINTEL(queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: [*c]GLchar, counterDescLength: GLuint, counterDesc: [*c]GLchar, counterOffset: [*c]GLuint, counterDataSize: [*c]GLuint, counterTypeEnum: [*c]GLuint, counterDataTypeEnum: [*c]GLuint, rawCounterMaxValue: [*c]GLuint64) void {
    
    glGetPerfCounterInfoINTEL_impl.?(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}
pub export fn glGetPerfQueryDataINTEL(queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: ?*c_void, bytesWritten: [*c]GLuint) void {
    
    glGetPerfQueryDataINTEL_impl.?(queryHandle, flags, dataSize, data, bytesWritten);
}
pub export fn glGetPerfQueryIdByNameINTEL(queryName: [*c]GLchar, queryId: [*c]GLuint) void {
    
    glGetPerfQueryIdByNameINTEL_impl.?(queryName, queryId);
}
pub export fn glGetPerfQueryInfoINTEL(queryId: GLuint, queryNameLength: GLuint, queryName: [*c]GLchar, dataSize: [*c]GLuint, noCounters: [*c]GLuint, noInstances: [*c]GLuint, capsMask: [*c]GLuint) void {
    
    glGetPerfQueryInfoINTEL_impl.?(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}
pub export fn glGetTextureHandleNV(texture: GLuint) GLuint64 {
    
    return glGetTextureHandleNV_impl.?(texture);
}
pub export fn glGetTextureSamplerHandleNV(texture: GLuint, sampler: GLuint) GLuint64 {
    
    return glGetTextureSamplerHandleNV_impl.?(texture, sampler);
}
pub export fn glMakeTextureHandleResidentNV(handle: GLuint64) void {
    
    glMakeTextureHandleResidentNV_impl.?(handle);
}
pub export fn glMakeTextureHandleNonResidentNV(handle: GLuint64) void {
    
    glMakeTextureHandleNonResidentNV_impl.?(handle);
}
pub export fn glGetImageHandleNV(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) GLuint64 {
    
    return glGetImageHandleNV_impl.?(texture, level, layered, layer, format);
}
pub export fn glMakeImageHandleResidentNV(handle: GLuint64, access: GLenum) void {
    
    glMakeImageHandleResidentNV_impl.?(handle, access);
}
pub export fn glMakeImageHandleNonResidentNV(handle: GLuint64) void {
    
    glMakeImageHandleNonResidentNV_impl.?(handle);
}
pub export fn glUniformHandleui64NV(location: GLint, value: GLuint64) void {
    
    glUniformHandleui64NV_impl.?(location, value);
}
pub export fn glUniformHandleui64vNV(location: GLint, count: GLsizei, value: [*c]const GLuint64) void {
    
    glUniformHandleui64vNV_impl.?(location, count, value);
}
pub export fn glProgramUniformHandleui64NV(program: GLuint, location: GLint, value: GLuint64) void {
    
    glProgramUniformHandleui64NV_impl.?(program, location, value);
}
pub export fn glProgramUniformHandleui64vNV(program: GLuint, location: GLint, count: GLsizei, values: [*c]const GLuint64) void {
    
    glProgramUniformHandleui64vNV_impl.?(program, location, count, values);
}
pub export fn glIsTextureHandleResidentNV(handle: GLuint64) GLboolean {
    
    return glIsTextureHandleResidentNV_impl.?(handle);
}
pub export fn glIsImageHandleResidentNV(handle: GLuint64) GLboolean {
    
    return glIsImageHandleResidentNV_impl.?(handle);
}
pub export fn glBlendParameteriNV(pname: GLenum, value: GLint) void {
    
    glBlendParameteriNV_impl.?(pname, value);
}
pub export fn glBlendBarrierNV() void {
    
    glBlendBarrierNV_impl.?();
}
pub export fn glViewportPositionWScaleNV(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) void {
    
    glViewportPositionWScaleNV_impl.?(index, xcoeff, ycoeff);
}
pub export fn glBeginConditionalRenderNV(id: GLuint, mode: GLenum) void {
    
    glBeginConditionalRenderNV_impl.?(id, mode);
}
pub export fn glEndConditionalRenderNV() void {
    
    glEndConditionalRenderNV_impl.?();
}
pub export fn glSubpixelPrecisionBiasNV(xbits: GLuint, ybits: GLuint) void {
    
    glSubpixelPrecisionBiasNV_impl.?(xbits, ybits);
}
pub export fn glConservativeRasterParameteriNV(pname: GLenum, param: GLint) void {
    
    glConservativeRasterParameteriNV_impl.?(pname, param);
}
pub export fn glCopyBufferSubDataNV(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) void {
    
    glCopyBufferSubDataNV_impl.?(readTarget, writeTarget, readOffset, writeOffset, size);
}
pub export fn glCoverageMaskNV(mask: GLboolean) void {
    
    glCoverageMaskNV_impl.?(mask);
}
pub export fn glCoverageOperationNV(operation: GLenum) void {
    
    glCoverageOperationNV_impl.?(operation);
}
pub export fn glDrawBuffersNV(n: GLsizei, bufs: [*c]const GLenum) void {
    
    glDrawBuffersNV_impl.?(n, bufs);
}
pub export fn glDrawArraysInstancedNV(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) void {
    
    glDrawArraysInstancedNV_impl.?(mode, first, count, primcount);
}
pub export fn glDrawElementsInstancedNV(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const c_void, primcount: GLsizei) void {
    
    glDrawElementsInstancedNV_impl.?(mode, count, type_0, indices, primcount);
}
pub export fn glDrawVkImageNV(vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) void {
    
    glDrawVkImageNV_impl.?(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}
pub export fn glGetVkProcAddrNV(name: [*c]const GLchar) GLVULKANPROCNV {
    
    return glGetVkProcAddrNV_impl.?(name);
}
pub export fn glWaitVkSemaphoreNV(vkSemaphore: GLuint64) void {
    
    glWaitVkSemaphoreNV_impl.?(vkSemaphore);
}
pub export fn glSignalVkSemaphoreNV(vkSemaphore: GLuint64) void {
    
    glSignalVkSemaphoreNV_impl.?(vkSemaphore);
}
pub export fn glSignalVkFenceNV(vkFence: GLuint64) void {
    
    glSignalVkFenceNV_impl.?(vkFence);
}
pub export fn glDeleteFencesNV(n: GLsizei, fences: [*c]const GLuint) void {
    
    glDeleteFencesNV_impl.?(n, fences);
}
pub export fn glGenFencesNV(n: GLsizei, fences: [*c]GLuint) void {
    
    glGenFencesNV_impl.?(n, fences);
}
pub export fn glIsFenceNV(fence: GLuint) GLboolean {
    
    return glIsFenceNV_impl.?(fence);
}
pub export fn glTestFenceNV(fence: GLuint) GLboolean {
    
    return glTestFenceNV_impl.?(fence);
}
pub export fn glGetFenceivNV(fence: GLuint, pname: GLenum, params: [*c]GLint) void {
    
    glGetFenceivNV_impl.?(fence, pname, params);
}
pub export fn glFinishFenceNV(fence: GLuint) void {
    
    glFinishFenceNV_impl.?(fence);
}
pub export fn glSetFenceNV(fence: GLuint, condition: GLenum) void {
    
    glSetFenceNV_impl.?(fence, condition);
}
pub export fn glFragmentCoverageColorNV(color: GLuint) void {
    
    glFragmentCoverageColorNV_impl.?(color);
}
pub export fn glBlitFramebufferNV(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void {
    
    glBlitFramebufferNV_impl.?(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
pub export fn glCoverageModulationTableNV(n: GLsizei, v: [*c]const GLfloat) void {
    
    glCoverageModulationTableNV_impl.?(n, v);
}
pub export fn glGetCoverageModulationTableNV(bufsize: GLsizei, v: [*c]GLfloat) void {
    
    glGetCoverageModulationTableNV_impl.?(bufsize, v);
}
pub export fn glCoverageModulationNV(components: GLenum) void {
    
    glCoverageModulationNV_impl.?(components);
}
pub export fn glRenderbufferStorageMultisampleNV(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void {
    
    glRenderbufferStorageMultisampleNV_impl.?(target, samples, internalformat, width, height);
}
pub export fn glUniform1i64NV(location: GLint, x: GLint64EXT) void {
    
    glUniform1i64NV_impl.?(location, x);
}
pub export fn glUniform2i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT) void {
    
    glUniform2i64NV_impl.?(location, x, y);
}
pub export fn glUniform3i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) void {
    
    glUniform3i64NV_impl.?(location, x, y, z);
}
pub export fn glUniform4i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) void {
    
    glUniform4i64NV_impl.?(location, x, y, z, w);
}
pub export fn glUniform1i64vNV(location: GLint, count: GLsizei, value: [*c]const GLint64EXT) void {
    
    glUniform1i64vNV_impl.?(location, count, value);
}
pub export fn glUniform2i64vNV(location: GLint, count: GLsizei, value: [*c]const GLint64EXT) void {
    
    glUniform2i64vNV_impl.?(location, count, value);
}
pub export fn glUniform3i64vNV(location: GLint, count: GLsizei, value: [*c]const GLint64EXT) void {
    
    glUniform3i64vNV_impl.?(location, count, value);
}
pub export fn glUniform4i64vNV(location: GLint, count: GLsizei, value: [*c]const GLint64EXT) void {
    
    glUniform4i64vNV_impl.?(location, count, value);
}
pub export fn glUniform1ui64NV(location: GLint, x: GLuint64EXT) void {
    
    glUniform1ui64NV_impl.?(location, x);
}
pub export fn glUniform2ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT) void {
    
    glUniform2ui64NV_impl.?(location, x, y);
}
pub export fn glUniform3ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) void {
    
    glUniform3ui64NV_impl.?(location, x, y, z);
}
pub export fn glUniform4ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) void {
    
    glUniform4ui64NV_impl.?(location, x, y, z, w);
}
pub export fn glUniform1ui64vNV(location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) void {
    
    glUniform1ui64vNV_impl.?(location, count, value);
}
pub export fn glUniform2ui64vNV(location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) void {
    
    glUniform2ui64vNV_impl.?(location, count, value);
}
pub export fn glUniform3ui64vNV(location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) void {
    
    glUniform3ui64vNV_impl.?(location, count, value);
}
pub export fn glUniform4ui64vNV(location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) void {
    
    glUniform4ui64vNV_impl.?(location, count, value);
}
pub export fn glGetUniformi64vNV(program: GLuint, location: GLint, params: [*c]GLint64EXT) void {
    
    glGetUniformi64vNV_impl.?(program, location, params);
}
pub export fn glProgramUniform1i64NV(program: GLuint, location: GLint, x: GLint64EXT) void {
    
    glProgramUniform1i64NV_impl.?(program, location, x);
}
pub export fn glProgramUniform2i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) void {
    
    glProgramUniform2i64NV_impl.?(program, location, x, y);
}
pub export fn glProgramUniform3i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) void {
    
    glProgramUniform3i64NV_impl.?(program, location, x, y, z);
}
pub export fn glProgramUniform4i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) void {
    
    glProgramUniform4i64NV_impl.?(program, location, x, y, z, w);
}
pub export fn glProgramUniform1i64vNV(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64EXT) void {
    
    glProgramUniform1i64vNV_impl.?(program, location, count, value);
}
pub export fn glProgramUniform2i64vNV(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64EXT) void {
    
    glProgramUniform2i64vNV_impl.?(program, location, count, value);
}
pub export fn glProgramUniform3i64vNV(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64EXT) void {
    
    glProgramUniform3i64vNV_impl.?(program, location, count, value);
}
pub export fn glProgramUniform4i64vNV(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLint64EXT) void {
    
    glProgramUniform4i64vNV_impl.?(program, location, count, value);
}
pub export fn glProgramUniform1ui64NV(program: GLuint, location: GLint, x: GLuint64EXT) void {
    
    glProgramUniform1ui64NV_impl.?(program, location, x);
}
pub export fn glProgramUniform2ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) void {
    
    glProgramUniform2ui64NV_impl.?(program, location, x, y);
}
pub export fn glProgramUniform3ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) void {
    
    glProgramUniform3ui64NV_impl.?(program, location, x, y, z);
}
pub export fn glProgramUniform4ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) void {
    
    glProgramUniform4ui64NV_impl.?(program, location, x, y, z, w);
}
pub export fn glProgramUniform1ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) void {
    
    glProgramUniform1ui64vNV_impl.?(program, location, count, value);
}
pub export fn glProgramUniform2ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) void {
    
    glProgramUniform2ui64vNV_impl.?(program, location, count, value);
}
pub export fn glProgramUniform3ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) void {
    
    glProgramUniform3ui64vNV_impl.?(program, location, count, value);
}
pub export fn glProgramUniform4ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: [*c]const GLuint64EXT) void {
    
    glProgramUniform4ui64vNV_impl.?(program, location, count, value);
}
pub export fn glVertexAttribDivisorNV(index: GLuint, divisor: GLuint) void {
    
    glVertexAttribDivisorNV_impl.?(index, divisor);
}
pub export fn glGetInternalformatSampleivNV(target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, bufSize: GLsizei, params: [*c]GLint) void {
    
    glGetInternalformatSampleivNV_impl.?(target, internalformat, samples, pname, bufSize, params);
}
pub export fn glUniformMatrix2x3fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix2x3fvNV_impl.?(location, count, transpose, value);
}
pub export fn glUniformMatrix3x2fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix3x2fvNV_impl.?(location, count, transpose, value);
}
pub export fn glUniformMatrix2x4fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix2x4fvNV_impl.?(location, count, transpose, value);
}
pub export fn glUniformMatrix4x2fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix4x2fvNV_impl.?(location, count, transpose, value);
}
pub export fn glUniformMatrix3x4fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix3x4fvNV_impl.?(location, count, transpose, value);
}
pub export fn glUniformMatrix4x3fvNV(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void {
    
    glUniformMatrix4x3fvNV_impl.?(location, count, transpose, value);
}
pub export fn glGenPathsNV(range: GLsizei) GLuint {
    
    return glGenPathsNV_impl.?(range);
}
pub export fn glDeletePathsNV(path: GLuint, range: GLsizei) void {
    
    glDeletePathsNV_impl.?(path, range);
}
pub export fn glIsPathNV(path: GLuint) GLboolean {
    
    return glIsPathNV_impl.?(path);
}
pub export fn glPathCommandsNV(path: GLuint, numCommands: GLsizei, commands: [*c]const GLubyte, numCoords: GLsizei, coordType: GLenum, coords: ?*const c_void) void {
    
    glPathCommandsNV_impl.?(path, numCommands, commands, numCoords, coordType, coords);
}
pub export fn glPathCoordsNV(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: ?*const c_void) void {
    
    glPathCoordsNV_impl.?(path, numCoords, coordType, coords);
}
pub export fn glPathSubCommandsNV(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: [*c]const GLubyte, numCoords: GLsizei, coordType: GLenum, coords: ?*const c_void) void {
    
    glPathSubCommandsNV_impl.?(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}
pub export fn glPathSubCoordsNV(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: ?*const c_void) void {
    
    glPathSubCoordsNV_impl.?(path, coordStart, numCoords, coordType, coords);
}
pub export fn glPathStringNV(path: GLuint, format: GLenum, length: GLsizei, pathString: ?*const c_void) void {
    
    glPathStringNV_impl.?(path, format, length, pathString);
}
pub export fn glPathGlyphsNV(firstPathName: GLuint, fontTarget: GLenum, fontName: ?*const c_void, fontStyle: GLbitfield, numGlyphs: GLsizei, type_0: GLenum, charcodes: ?*const c_void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) void {
    
    glPathGlyphsNV_impl.?(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type_0, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}
pub export fn glPathGlyphRangeNV(firstPathName: GLuint, fontTarget: GLenum, fontName: ?*const c_void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) void {
    
    glPathGlyphRangeNV_impl.?(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}
pub export fn glWeightPathsNV(resultPath: GLuint, numPaths: GLsizei, paths: [*c]const GLuint, weights: [*c]const GLfloat) void {
    
    glWeightPathsNV_impl.?(resultPath, numPaths, paths, weights);
}
pub export fn glCopyPathNV(resultPath: GLuint, srcPath: GLuint) void {
    
    glCopyPathNV_impl.?(resultPath, srcPath);
}
pub export fn glInterpolatePathsNV(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) void {
    
    glInterpolatePathsNV_impl.?(resultPath, pathA, pathB, weight);
}
pub export fn glTransformPathNV(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: [*c]const GLfloat) void {
    
    glTransformPathNV_impl.?(resultPath, srcPath, transformType, transformValues);
}
pub export fn glPathParameterivNV(path: GLuint, pname: GLenum, value: [*c]const GLint) void {
    
    glPathParameterivNV_impl.?(path, pname, value);
}
pub export fn glPathParameteriNV(path: GLuint, pname: GLenum, value: GLint) void {
    
    glPathParameteriNV_impl.?(path, pname, value);
}
pub export fn glPathParameterfvNV(path: GLuint, pname: GLenum, value: [*c]const GLfloat) void {
    
    glPathParameterfvNV_impl.?(path, pname, value);
}
pub export fn glPathParameterfNV(path: GLuint, pname: GLenum, value: GLfloat) void {
    
    glPathParameterfNV_impl.?(path, pname, value);
}
pub export fn glPathDashArrayNV(path: GLuint, dashCount: GLsizei, dashArray: [*c]const GLfloat) void {
    
    glPathDashArrayNV_impl.?(path, dashCount, dashArray);
}
pub export fn glPathStencilFuncNV(func: GLenum, ref: GLint, mask: GLuint) void {
    
    glPathStencilFuncNV_impl.?(func, ref, mask);
}
pub export fn glPathStencilDepthOffsetNV(factor: GLfloat, units: GLfloat) void {
    
    glPathStencilDepthOffsetNV_impl.?(factor, units);
}
pub export fn glStencilFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint) void {
    
    glStencilFillPathNV_impl.?(path, fillMode, mask);
}
pub export fn glStencilStrokePathNV(path: GLuint, reference: GLint, mask: GLuint) void {
    
    glStencilStrokePathNV_impl.?(path, reference, mask);
}
pub export fn glStencilFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: [*c]const GLfloat) void {
    
    glStencilFillPathInstancedNV_impl.?(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}
pub export fn glStencilStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: [*c]const GLfloat) void {
    
    glStencilStrokePathInstancedNV_impl.?(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}
pub export fn glPathCoverDepthFuncNV(func: GLenum) void {
    
    glPathCoverDepthFuncNV_impl.?(func);
}
pub export fn glCoverFillPathNV(path: GLuint, coverMode: GLenum) void {
    
    glCoverFillPathNV_impl.?(path, coverMode);
}
pub export fn glCoverStrokePathNV(path: GLuint, coverMode: GLenum) void {
    
    glCoverStrokePathNV_impl.?(path, coverMode);
}
pub export fn glCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: [*c]const GLfloat) void {
    
    glCoverFillPathInstancedNV_impl.?(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}
pub export fn glCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: [*c]const GLfloat) void {
    
    glCoverStrokePathInstancedNV_impl.?(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}
pub export fn glGetPathParameterivNV(path: GLuint, pname: GLenum, value: [*c]GLint) void {
    
    glGetPathParameterivNV_impl.?(path, pname, value);
}
pub export fn glGetPathParameterfvNV(path: GLuint, pname: GLenum, value: [*c]GLfloat) void {
    
    glGetPathParameterfvNV_impl.?(path, pname, value);
}
pub export fn glGetPathCommandsNV(path: GLuint, commands: [*c]GLubyte) void {
    
    glGetPathCommandsNV_impl.?(path, commands);
}
pub export fn glGetPathCoordsNV(path: GLuint, coords: [*c]GLfloat) void {
    
    glGetPathCoordsNV_impl.?(path, coords);
}
pub export fn glGetPathDashArrayNV(path: GLuint, dashArray: [*c]GLfloat) void {
    
    glGetPathDashArrayNV_impl.?(path, dashArray);
}
pub export fn glGetPathMetricsNV(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, stride: GLsizei, metrics: [*c]GLfloat) void {
    
    glGetPathMetricsNV_impl.?(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}
pub export fn glGetPathMetricRangeNV(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: [*c]GLfloat) void {
    
    glGetPathMetricRangeNV_impl.?(metricQueryMask, firstPathName, numPaths, stride, metrics);
}
pub export fn glGetPathSpacingNV(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: [*c]GLfloat) void {
    
    glGetPathSpacingNV_impl.?(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}
pub export fn glIsPointInFillPathNV(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) GLboolean {
    
    return glIsPointInFillPathNV_impl.?(path, mask, x, y);
}
pub export fn glIsPointInStrokePathNV(path: GLuint, x: GLfloat, y: GLfloat) GLboolean {
    
    return glIsPointInStrokePathNV_impl.?(path, x, y);
}
pub export fn glGetPathLengthNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) GLfloat {
    
    return glGetPathLengthNV_impl.?(path, startSegment, numSegments);
}
pub export fn glPointAlongPathNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: [*c]GLfloat, y: [*c]GLfloat, tangentX: [*c]GLfloat, tangentY: [*c]GLfloat) GLboolean {
    
    return glPointAlongPathNV_impl.?(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
}
pub export fn glMatrixLoad3x2fNV(matrixMode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixLoad3x2fNV_impl.?(matrixMode, m);
}
pub export fn glMatrixLoad3x3fNV(matrixMode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixLoad3x3fNV_impl.?(matrixMode, m);
}
pub export fn glMatrixLoadTranspose3x3fNV(matrixMode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixLoadTranspose3x3fNV_impl.?(matrixMode, m);
}
pub export fn glMatrixMult3x2fNV(matrixMode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixMult3x2fNV_impl.?(matrixMode, m);
}
pub export fn glMatrixMult3x3fNV(matrixMode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixMult3x3fNV_impl.?(matrixMode, m);
}
pub export fn glMatrixMultTranspose3x3fNV(matrixMode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixMultTranspose3x3fNV_impl.?(matrixMode, m);
}
pub export fn glStencilThenCoverFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) void {
    
    glStencilThenCoverFillPathNV_impl.?(path, fillMode, mask, coverMode);
}
pub export fn glStencilThenCoverStrokePathNV(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) void {
    
    glStencilThenCoverStrokePathNV_impl.?(path, reference, mask, coverMode);
}
pub export fn glStencilThenCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: [*c]const GLfloat) void {
    
    glStencilThenCoverFillPathInstancedNV_impl.?(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
}
pub export fn glStencilThenCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: ?*const c_void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: [*c]const GLfloat) void {
    
    glStencilThenCoverStrokePathInstancedNV_impl.?(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
}
pub export fn glPathGlyphIndexRangeNV(fontTarget: GLenum, fontName: ?*const c_void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: [*c]GLuint) GLenum {
    
    return glPathGlyphIndexRangeNV_impl.?(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
}
pub export fn glPathGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontName: ?*const c_void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) GLenum {
    
    return glPathGlyphIndexArrayNV_impl.?(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}
pub export fn glPathMemoryGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: ?*const c_void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) GLenum {
    
    return glPathMemoryGlyphIndexArrayNV_impl.?(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}
pub export fn glProgramPathFragmentInputGenNV(program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: [*c]const GLfloat) void {
    
    glProgramPathFragmentInputGenNV_impl.?(program, location, genMode, components, coeffs);
}
pub export fn glGetProgramResourcefvNV(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: [*c]const GLenum, bufSize: GLsizei, length: [*c]GLsizei, params: [*c]GLfloat) void {
    
    glGetProgramResourcefvNV_impl.?(program, programInterface, index, propCount, props, bufSize, length, params);
}
pub export fn glMatrixFrustumEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void {
    
    glMatrixFrustumEXT_impl.?(mode, left, right, bottom, top, zNear, zFar);
}
pub export fn glMatrixLoadIdentityEXT(mode: GLenum) void {
    
    glMatrixLoadIdentityEXT_impl.?(mode);
}
pub export fn glMatrixLoadTransposefEXT(mode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixLoadTransposefEXT_impl.?(mode, m);
}
pub export fn glMatrixLoadTransposedEXT(mode: GLenum, m: [*c]const GLdouble) void {
    
    glMatrixLoadTransposedEXT_impl.?(mode, m);
}
pub export fn glMatrixLoadfEXT(mode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixLoadfEXT_impl.?(mode, m);
}
pub export fn glMatrixLoaddEXT(mode: GLenum, m: [*c]const GLdouble) void {
    
    glMatrixLoaddEXT_impl.?(mode, m);
}
pub export fn glMatrixMultTransposefEXT(mode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixMultTransposefEXT_impl.?(mode, m);
}
pub export fn glMatrixMultTransposedEXT(mode: GLenum, m: [*c]const GLdouble) void {
    
    glMatrixMultTransposedEXT_impl.?(mode, m);
}
pub export fn glMatrixMultfEXT(mode: GLenum, m: [*c]const GLfloat) void {
    
    glMatrixMultfEXT_impl.?(mode, m);
}
pub export fn glMatrixMultdEXT(mode: GLenum, m: [*c]const GLdouble) void {
    
    glMatrixMultdEXT_impl.?(mode, m);
}
pub export fn glMatrixOrthoEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void {
    
    glMatrixOrthoEXT_impl.?(mode, left, right, bottom, top, zNear, zFar);
}
pub export fn glMatrixPopEXT(mode: GLenum) void {
    
    glMatrixPopEXT_impl.?(mode);
}
pub export fn glMatrixPushEXT(mode: GLenum) void {
    
    glMatrixPushEXT_impl.?(mode);
}
pub export fn glMatrixRotatefEXT(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void {
    
    glMatrixRotatefEXT_impl.?(mode, angle, x, y, z);
}
pub export fn glMatrixRotatedEXT(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void {
    
    glMatrixRotatedEXT_impl.?(mode, angle, x, y, z);
}
pub export fn glMatrixScalefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) void {
    
    glMatrixScalefEXT_impl.?(mode, x, y, z);
}
pub export fn glMatrixScaledEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) void {
    
    glMatrixScaledEXT_impl.?(mode, x, y, z);
}
pub export fn glMatrixTranslatefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) void {
    
    glMatrixTranslatefEXT_impl.?(mode, x, y, z);
}
pub export fn glMatrixTranslatedEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) void {
    
    glMatrixTranslatedEXT_impl.?(mode, x, y, z);
}
pub export fn glPolygonModeNV(face: GLenum, mode: GLenum) void {
    
    glPolygonModeNV_impl.?(face, mode);
}
pub export fn glReadBufferNV(mode: GLenum) void {
    
    glReadBufferNV_impl.?(mode);
}
pub export fn glFramebufferSampleLocationsfvNV(target: GLenum, start: GLuint, count: GLsizei, v: [*c]const GLfloat) void {
    
    glFramebufferSampleLocationsfvNV_impl.?(target, start, count, v);
}
pub export fn glNamedFramebufferSampleLocationsfvNV(framebuffer: GLuint, start: GLuint, count: GLsizei, v: [*c]const GLfloat) void {
    
    glNamedFramebufferSampleLocationsfvNV_impl.?(framebuffer, start, count, v);
}
pub export fn glResolveDepthValuesNV() void {
    
    glResolveDepthValuesNV_impl.?();
}
pub export fn glViewportArrayvNV(first: GLuint, count: GLsizei, v: [*c]const GLfloat) void {
    
    glViewportArrayvNV_impl.?(first, count, v);
}
pub export fn glViewportIndexedfNV(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) void {
    
    glViewportIndexedfNV_impl.?(index, x, y, w, h);
}
pub export fn glViewportIndexedfvNV(index: GLuint, v: [*c]const GLfloat) void {
    
    glViewportIndexedfvNV_impl.?(index, v);
}
pub export fn glScissorArrayvNV(first: GLuint, count: GLsizei, v: [*c]const GLint) void {
    
    glScissorArrayvNV_impl.?(first, count, v);
}
pub export fn glScissorIndexedNV(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) void {
    
    glScissorIndexedNV_impl.?(index, left, bottom, width, height);
}
pub export fn glScissorIndexedvNV(index: GLuint, v: [*c]const GLint) void {
    
    glScissorIndexedvNV_impl.?(index, v);
}
pub export fn glDepthRangeArrayfvNV(first: GLuint, count: GLsizei, v: [*c]const GLfloat) void {
    
    glDepthRangeArrayfvNV_impl.?(first, count, v);
}
pub export fn glDepthRangeIndexedfNV(index: GLuint, n: GLfloat, f: GLfloat) void {
    
    glDepthRangeIndexedfNV_impl.?(index, n, f);
}
pub export fn glGetFloati_vNV(target: GLenum, index: GLuint, data: [*c]GLfloat) void {
    
    glGetFloati_vNV_impl.?(target, index, data);
}
pub export fn glEnableiNV(target: GLenum, index: GLuint) void {
    
    glEnableiNV_impl.?(target, index);
}
pub export fn glDisableiNV(target: GLenum, index: GLuint) void {
    
    glDisableiNV_impl.?(target, index);
}
pub export fn glIsEnablediNV(target: GLenum, index: GLuint) GLboolean {
    
    return glIsEnablediNV_impl.?(target, index);
}
pub export fn glViewportSwizzleNV(index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) void {
    
    glViewportSwizzleNV_impl.?(index, swizzlex, swizzley, swizzlez, swizzlew);
}
pub export fn glFramebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) void {
    
    glFramebufferTextureMultiviewOVR_impl.?(target, attachment, texture, level, baseViewIndex, numViews);
}
pub export fn glFramebufferTextureMultisampleMultiviewOVR(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, samples: GLsizei, baseViewIndex: GLint, numViews: GLsizei) void {
    
    glFramebufferTextureMultisampleMultiviewOVR_impl.?(target, attachment, texture, level, samples, baseViewIndex, numViews);
}
pub export fn glAlphaFuncQCOM(func: GLenum, ref: GLclampf) void {
    
    glAlphaFuncQCOM_impl.?(func, ref);
}
pub export fn glGetDriverControlsQCOM(num: [*c]GLint, size: GLsizei, driverControls: [*c]GLuint) void {
    
    glGetDriverControlsQCOM_impl.?(num, size, driverControls);
}
pub export fn glGetDriverControlStringQCOM(driverControl: GLuint, bufSize: GLsizei, length: [*c]GLsizei, driverControlString: [*c]GLchar) void {
    
    glGetDriverControlStringQCOM_impl.?(driverControl, bufSize, length, driverControlString);
}
pub export fn glEnableDriverControlQCOM(driverControl: GLuint) void {
    
    glEnableDriverControlQCOM_impl.?(driverControl);
}
pub export fn glDisableDriverControlQCOM(driverControl: GLuint) void {
    
    glDisableDriverControlQCOM_impl.?(driverControl);
}
pub export fn glExtGetTexturesQCOM(textures: [*c]GLuint, maxTextures: GLint, numTextures: [*c]GLint) void {
    
    glExtGetTexturesQCOM_impl.?(textures, maxTextures, numTextures);
}
pub export fn glExtGetBuffersQCOM(buffers: [*c]GLuint, maxBuffers: GLint, numBuffers: [*c]GLint) void {
    
    glExtGetBuffersQCOM_impl.?(buffers, maxBuffers, numBuffers);
}
pub export fn glExtGetRenderbuffersQCOM(renderbuffers: [*c]GLuint, maxRenderbuffers: GLint, numRenderbuffers: [*c]GLint) void {
    
    glExtGetRenderbuffersQCOM_impl.?(renderbuffers, maxRenderbuffers, numRenderbuffers);
}
pub export fn glExtGetFramebuffersQCOM(framebuffers: [*c]GLuint, maxFramebuffers: GLint, numFramebuffers: [*c]GLint) void {
    
    glExtGetFramebuffersQCOM_impl.?(framebuffers, maxFramebuffers, numFramebuffers);
}
pub export fn glExtGetTexLevelParameterivQCOM(texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) void {
    
    glExtGetTexLevelParameterivQCOM_impl.?(texture, face, level, pname, params);
}
pub export fn glExtTexObjectStateOverrideiQCOM(target: GLenum, pname: GLenum, param: GLint) void {
    
    glExtTexObjectStateOverrideiQCOM_impl.?(target, pname, param);
}
pub export fn glExtGetTexSubImageQCOM(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_0: GLenum, texels: ?*c_void) void {
    
    glExtGetTexSubImageQCOM_impl.?(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_0, texels);
}
pub export fn glExtGetBufferPointervQCOM(target: GLenum, params: [*c](?*c_void)) void {
    
    glExtGetBufferPointervQCOM_impl.?(target, params);
}
pub export fn glExtGetShadersQCOM(shaders: [*c]GLuint, maxShaders: GLint, numShaders: [*c]GLint) void {
    
    glExtGetShadersQCOM_impl.?(shaders, maxShaders, numShaders);
}
pub export fn glExtGetProgramsQCOM(programs: [*c]GLuint, maxPrograms: GLint, numPrograms: [*c]GLint) void {
    
    glExtGetProgramsQCOM_impl.?(programs, maxPrograms, numPrograms);
}
pub export fn glExtIsProgramBinaryQCOM(program: GLuint) GLboolean {
    
    return glExtIsProgramBinaryQCOM_impl.?(program);
}
pub export fn glExtGetProgramBinarySourceQCOM(program: GLuint, shadertype: GLenum, source: [*c]GLchar, length: [*c]GLint) void {
    
    glExtGetProgramBinarySourceQCOM_impl.?(program, shadertype, source, length);
}
pub export fn glFramebufferFoveationConfigQCOM(framebuffer: GLuint, numLayers: GLuint, focalPointsPerLayer: GLuint, requestedFeatures: GLuint, providedFeatures: [*c]GLuint) void {
    
    glFramebufferFoveationConfigQCOM_impl.?(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
}
pub export fn glFramebufferFoveationParametersQCOM(framebuffer: GLuint, layer: GLuint, focalPoint: GLuint, focalX: GLfloat, focalY: GLfloat, gainX: GLfloat, gainY: GLfloat, foveaArea: GLfloat) void {
    
    glFramebufferFoveationParametersQCOM_impl.?(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}
pub export fn glFramebufferFetchBarrierQCOM() void {
    
    glFramebufferFetchBarrierQCOM_impl.?();
}
pub export fn glTextureFoveationParametersQCOM(texture: GLuint, layer: GLuint, focalPoint: GLuint, focalX: GLfloat, focalY: GLfloat, gainX: GLfloat, gainY: GLfloat, foveaArea: GLfloat) void {
    
    glTextureFoveationParametersQCOM_impl.?(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}
pub export fn glStartTilingQCOM(x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) void {
    
    glStartTilingQCOM_impl.?(x, y, width, height, preserveMask);
}
pub export fn glEndTilingQCOM(preserveMask: GLbitfield) void {
    
    glEndTilingQCOM_impl.?(preserveMask);
}

pub const GL_3DC_X_AMD = 34809;
pub const GL_3DC_XY_AMD = 34810;
pub const GL_ACCUM_ADJACENT_PAIRS_NV = 37037;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;
pub const GL_ACTIVE_ATTRIBUTES = 35721;
pub const GL_ACTIVE_PROGRAM_EXT = 33369;
pub const GL_ACTIVE_TEXTURE = 34016;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;
pub const GL_ACTIVE_UNIFORMS = 35718;
pub const GL_ADJACENT_PAIRS_NV = 37038;
pub const GL_AFFINE_2D_NV = 37010;
pub const GL_AFFINE_3D_NV = 37012;
pub const GL_ALIASED_LINE_WIDTH_RANGE = 33902;
pub const GL_ALIASED_POINT_SIZE_RANGE = 33901;
pub const GL_ALL_COMPLETED_NV = 34034;
pub const GL_ALL_SHADER_BITS_EXT = 4294967295;
pub const GL_ALPHA = 6406;
pub const GL_ALPHA_BITS = 3413;
pub const GL_ALPHA_TEST_FUNC_QCOM = 3009;
pub const GL_ALPHA_TEST_QCOM = 3008;
pub const GL_ALPHA_TEST_REF_QCOM = 3010;
pub const GL_ALPHA16F_EXT = 34844;
pub const GL_ALPHA32F_EXT = 34838;
pub const GL_ALPHA8_EXT = 32828;
pub const GL_ALPHA8_OES = 32828;
pub const GL_ALREADY_SIGNALED_APPLE = 37146;
pub const GL_ALWAYS = 519;
pub const GL_AMD_compressed_3DC_texture = 1;
pub const GL_AMD_compressed_ATC_texture = 1;
pub const GL_AMD_framebuffer_multisample_advanced = 1;
pub const GL_AMD_performance_monitor = 1;
pub const GL_AMD_program_binary_Z400 = 1;
pub const GL_ANDROID_extension_pack_es31a = 1;
pub const GL_ANGLE_depth_texture = 1;
pub const GL_ANGLE_framebuffer_blit = 1;
pub const GL_ANGLE_framebuffer_multisample = 1;
pub const GL_ANGLE_instanced_arrays = 1;
pub const GL_ANGLE_pack_reverse_row_order = 1;
pub const GL_ANGLE_program_binary = 1;
pub const GL_ANGLE_texture_compression_dxt3 = 1;
pub const GL_ANGLE_texture_compression_dxt5 = 1;
pub const GL_ANGLE_texture_usage = 1;
pub const GL_ANGLE_translated_shader_source = 1;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 36202;
pub const GL_ANY_SAMPLES_PASSED_EXT = 35887;
pub const GL_APICALL = KHRONOS_APICALL;
pub const GL_APIENTRY = KHRONOS_APIENTRY;
pub const GL_APIENTRYP = [*c]GL_APIENTRY;
pub const GL_APPLE_clip_distance = 1;
pub const GL_APPLE_color_buffer_packed_float = 1;
pub const GL_APPLE_copy_texture_levels = 1;
pub const GL_APPLE_framebuffer_multisample = 1;
pub const GL_APPLE_rgb_422 = 1;
pub const GL_APPLE_sync = 1;
pub const GL_APPLE_texture_format_BGRA8888 = 1;
pub const GL_APPLE_texture_max_level = 1;
pub const GL_APPLE_texture_packed_float = 1;
pub const GL_ARC_TO_NV = 254;
pub const GL_ARM_mali_program_binary = 1;
pub const GL_ARM_mali_shader_binary = 1;
pub const GL_ARM_rgba8 = 1;
pub const GL_ARM_shader_framebuffer_fetch = 1;
pub const GL_ARM_shader_framebuffer_fetch_depth_stencil = 1;
pub const GL_ARRAY_BUFFER = 34962;
pub const GL_ARRAY_BUFFER_BINDING = 34964;
pub const GL_ATC_RGB_AMD = 35986;
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 34798;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 38302;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 38303;
pub const GL_ATTACHED_MEMORY_OBJECT_NV = 38308;
pub const GL_ATTACHED_MEMORY_OFFSET_NV = 38309;
pub const GL_ATTACHED_SHADERS = 35717;
pub const GL_BACK = 1029;
pub const GL_BEVEL_NV = 37030;
pub const GL_BGRA_EXT = 32993;
pub const GL_BGRA_IMG = 32993;
pub const GL_BGRA8_EXT = 37793;
pub const GL_BINNING_CONTROL_HINT_QCOM = 36784;
pub const GL_BLACKHOLE_RENDER_INTEL = 33788;
pub const GL_BLEND = 3042;
pub const GL_BLEND_ADVANCED_COHERENT_KHR = 37509;
pub const GL_BLEND_ADVANCED_COHERENT_NV = 37509;
pub const GL_BLEND_COLOR = 32773;
pub const GL_BLEND_DST_ALPHA = 32970;
pub const GL_BLEND_DST_RGB = 32968;
pub const GL_BLEND_EQUATION = 32777;
pub const GL_BLEND_EQUATION_ALPHA = 34877;
pub const GL_BLEND_EQUATION_RGB = 32777;
pub const GL_BLEND_OVERLAP_NV = 37505;
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = 37504;
pub const GL_BLEND_SRC_ALPHA = 32971;
pub const GL_BLEND_SRC_RGB = 32969;
pub const GL_BLUE_BITS = 3412;
pub const GL_BLUE_NV = 6405;
pub const GL_BOLD_BIT_NV = 1;
pub const GL_BOOL = 35670;
pub const GL_BOOL_VEC2 = 35671;
pub const GL_BOOL_VEC3 = 35672;
pub const GL_BOOL_VEC4 = 35673;
pub const GL_BOUNDING_BOX_NV = 37005;
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020;
pub const GL_BUFFER_ACCESS_OES = 35003;
pub const GL_BUFFER_IMMUTABLE_STORAGE_EXT = 33311;
pub const GL_BUFFER_KHR = 33504;
pub const GL_BUFFER_MAP_POINTER_OES = 35005;
pub const GL_BUFFER_MAPPED_OES = 35004;
pub const GL_BUFFER_OBJECT_EXT = 37201;
pub const GL_BUFFER_SIZE = 34660;
pub const GL_BUFFER_STORAGE_FLAGS_EXT = 33312;
pub const GL_BUFFER_USAGE = 34661;
pub const GL_BYTE = 5120;
pub const GL_CCW = 2305;
pub const GL_CIRCULAR_CCW_ARC_TO_NV = 248;
pub const GL_CIRCULAR_CW_ARC_TO_NV = 250;
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = 252;
pub const GL_CLAMP_TO_BORDER_EXT = 33069;
pub const GL_CLAMP_TO_BORDER_NV = 33069;
pub const GL_CLAMP_TO_BORDER_OES = 33069;
pub const GL_CLAMP_TO_EDGE = 33071;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 16384;
pub const GL_CLIENT_STORAGE_BIT_EXT = 512;
pub const GL_CLIP_DEPTH_MODE_EXT = 37725;
pub const GL_CLIP_DISTANCE0_APPLE = 12288;
pub const GL_CLIP_DISTANCE0_EXT = 12288;
pub const GL_CLIP_DISTANCE1_APPLE = 12289;
pub const GL_CLIP_DISTANCE1_EXT = 12289;
pub const GL_CLIP_DISTANCE2_APPLE = 12290;
pub const GL_CLIP_DISTANCE2_EXT = 12290;
pub const GL_CLIP_DISTANCE3_APPLE = 12291;
pub const GL_CLIP_DISTANCE3_EXT = 12291;
pub const GL_CLIP_DISTANCE4_APPLE = 12292;
pub const GL_CLIP_DISTANCE4_EXT = 12292;
pub const GL_CLIP_DISTANCE5_APPLE = 12293;
pub const GL_CLIP_DISTANCE5_EXT = 12293;
pub const GL_CLIP_DISTANCE6_APPLE = 12294;
pub const GL_CLIP_DISTANCE6_EXT = 12294;
pub const GL_CLIP_DISTANCE7_APPLE = 12295;
pub const GL_CLIP_DISTANCE7_EXT = 12295;
pub const GL_CLIP_ORIGIN_EXT = 37724;
pub const GL_CLOSE_PATH_NV = 0;
pub const GL_COLOR_ATTACHMENT_EXT = 37104;
pub const GL_COLOR_ATTACHMENT0 = 36064;
pub const GL_COLOR_ATTACHMENT0_EXT = 36064;
pub const GL_COLOR_ATTACHMENT0_NV = 36064;
pub const GL_COLOR_ATTACHMENT1_EXT = 36065;
pub const GL_COLOR_ATTACHMENT1_NV = 36065;
pub const GL_COLOR_ATTACHMENT10_EXT = 36074;
pub const GL_COLOR_ATTACHMENT10_NV = 36074;
pub const GL_COLOR_ATTACHMENT11_EXT = 36075;
pub const GL_COLOR_ATTACHMENT11_NV = 36075;
pub const GL_COLOR_ATTACHMENT12_EXT = 36076;
pub const GL_COLOR_ATTACHMENT12_NV = 36076;
pub const GL_COLOR_ATTACHMENT13_EXT = 36077;
pub const GL_COLOR_ATTACHMENT13_NV = 36077;
pub const GL_COLOR_ATTACHMENT14_EXT = 36078;
pub const GL_COLOR_ATTACHMENT14_NV = 36078;
pub const GL_COLOR_ATTACHMENT15_EXT = 36079;
pub const GL_COLOR_ATTACHMENT15_NV = 36079;
pub const GL_COLOR_ATTACHMENT2_EXT = 36066;
pub const GL_COLOR_ATTACHMENT2_NV = 36066;
pub const GL_COLOR_ATTACHMENT3_EXT = 36067;
pub const GL_COLOR_ATTACHMENT3_NV = 36067;
pub const GL_COLOR_ATTACHMENT4_EXT = 36068;
pub const GL_COLOR_ATTACHMENT4_NV = 36068;
pub const GL_COLOR_ATTACHMENT5_EXT = 36069;
pub const GL_COLOR_ATTACHMENT5_NV = 36069;
pub const GL_COLOR_ATTACHMENT6_EXT = 36070;
pub const GL_COLOR_ATTACHMENT6_NV = 36070;
pub const GL_COLOR_ATTACHMENT7_EXT = 36071;
pub const GL_COLOR_ATTACHMENT7_NV = 36071;
pub const GL_COLOR_ATTACHMENT8_EXT = 36072;
pub const GL_COLOR_ATTACHMENT8_NV = 36072;
pub const GL_COLOR_ATTACHMENT9_EXT = 36073;
pub const GL_COLOR_ATTACHMENT9_NV = 36073;
pub const GL_COLOR_BUFFER_BIT = 16384;
pub const GL_COLOR_BUFFER_BIT0_QCOM = 1;
pub const GL_COLOR_BUFFER_BIT1_QCOM = 2;
pub const GL_COLOR_BUFFER_BIT2_QCOM = 4;
pub const GL_COLOR_BUFFER_BIT3_QCOM = 8;
pub const GL_COLOR_BUFFER_BIT4_QCOM = 16;
pub const GL_COLOR_BUFFER_BIT5_QCOM = 32;
pub const GL_COLOR_BUFFER_BIT6_QCOM = 64;
pub const GL_COLOR_BUFFER_BIT7_QCOM = 128;
pub const GL_COLOR_CLEAR_VALUE = 3106;
pub const GL_COLOR_EXT = 6144;
pub const GL_COLOR_SAMPLES_NV = 36384;
pub const GL_COLOR_WRITEMASK = 3107;
pub const GL_COLORBURN_KHR = 37530;
pub const GL_COLORBURN_NV = 37530;
pub const GL_COLORDODGE_KHR = 37529;
pub const GL_COLORDODGE_NV = 37529;
pub const GL_COMPARE_REF_TO_TEXTURE_EXT = 34894;
pub const GL_COMPILE_STATUS = 35713;
pub const GL_COMPLETION_STATUS_KHR = 37297;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 36285;
pub const GL_COMPRESSED_RED_RGTC1_EXT = 36283;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 36494;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 36495;
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821;
pub const GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 37824;
pub const GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 37825;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808;
pub const GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 37826;
pub const GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 37827;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809;
pub const GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 37828;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810;
pub const GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 37829;
pub const GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 37830;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811;
pub const GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 37831;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812;
pub const GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 37832;
pub const GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 37833;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = 36492;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 33778;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 33779;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 36286;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 36284;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 36493;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 35414;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 37872;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 35415;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 37873;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 35917;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 35918;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 35919;
pub const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 35412;
pub const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 35413;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 35916;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 37856;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 37857;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 37858;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 37859;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 37860;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 37861;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 37862;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 37863;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 37864;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 37865;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847;
pub const GL_COMPRESSED_TEXTURE_FORMATS = 34467;
pub const GL_CONDITION_SATISFIED_APPLE = 37148;
pub const GL_CONFORMANT_NV = 37748;
pub const GL_CONIC_CURVE_TO_NV = 26;
pub const GL_CONJOINT_NV = 37508;
pub const GL_CONSERVATIVE_RASTER_MODE_NV = 38221;
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 38222;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 38224;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 38223;
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = 33790;
pub const GL_CONSERVATIVE_RASTERIZATION_NV = 37702;
pub const GL_CONSTANT_ALPHA = 32771;
pub const GL_CONSTANT_COLOR = 32769;
pub const GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 2;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 8;
pub const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 16;
pub const GL_CONTEXT_LOST_KHR = 1287;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 33532;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 33531;
pub const GL_CONTEXT_ROBUST_ACCESS_EXT = 37107;
pub const GL_CONTEXT_ROBUST_ACCESS_KHR = 37107;
pub const GL_CONTRAST_NV = 37537;
pub const GL_CONVEX_HULL_NV = 37003;
pub const GL_COPY_READ_BUFFER_NV = 36662;
pub const GL_COPY_WRITE_BUFFER_NV = 36663;
pub const GL_COUNT_DOWN_NV = 37001;
pub const GL_COUNT_UP_NV = 37000;
pub const GL_COUNTER_RANGE_AMD = 35777;
pub const GL_COUNTER_TYPE_AMD = 35776;
pub const GL_COVERAGE_ALL_FRAGMENTS_NV = 36565;
pub const GL_COVERAGE_ATTACHMENT_NV = 36562;
pub const GL_COVERAGE_AUTOMATIC_NV = 36567;
pub const GL_COVERAGE_BUFFER_BIT_NV = 32768;
pub const GL_COVERAGE_BUFFERS_NV = 36563;
pub const GL_COVERAGE_COMPONENT_NV = 36560;
pub const GL_COVERAGE_COMPONENT4_NV = 36561;
pub const GL_COVERAGE_EDGE_FRAGMENTS_NV = 36566;
pub const GL_COVERAGE_MODULATION_NV = 37682;
pub const GL_COVERAGE_MODULATION_TABLE_NV = 37681;
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 37683;
pub const GL_COVERAGE_SAMPLES_NV = 36564;
pub const GL_CPU_OPTIMIZED_QCOM = 36785;
pub const GL_CUBIC_CURVE_TO_NV = 12;
pub const GL_CUBIC_IMG = 37177;
pub const GL_CUBIC_MIPMAP_LINEAR_IMG = 37179;
pub const GL_CUBIC_MIPMAP_NEAREST_IMG = 37178;
pub const GL_CULL_FACE = 2884;
pub const GL_CULL_FACE_MODE = 2885;
pub const GL_CURRENT_PROGRAM = 35725;
pub const GL_CURRENT_QUERY_EXT = 34917;
pub const GL_CURRENT_VERTEX_ATTRIB = 34342;
pub const GL_CW = 2304;
pub const GL_D3D12_FENCE_VALUE_EXT = 38293;
pub const GL_DARKEN_KHR = 37527;
pub const GL_DARKEN_NV = 37527;
pub const GL_DEBUG_CALLBACK_FUNCTION_KHR = 33348;
pub const GL_DEBUG_CALLBACK_USER_PARAM_KHR = 33349;
pub const GL_DEBUG_GROUP_STACK_DEPTH_KHR = 33389;
pub const GL_DEBUG_LOGGED_MESSAGES_KHR = 37189;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 33347;
pub const GL_DEBUG_OUTPUT_KHR = 37600;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 33346;
pub const GL_DEBUG_SEVERITY_HIGH_KHR = 37190;
pub const GL_DEBUG_SEVERITY_LOW_KHR = 37192;
pub const GL_DEBUG_SEVERITY_MEDIUM_KHR = 37191;
pub const GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 33387;
pub const GL_DEBUG_SOURCE_API_KHR = 33350;
pub const GL_DEBUG_SOURCE_APPLICATION_KHR = 33354;
pub const GL_DEBUG_SOURCE_OTHER_KHR = 33355;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 33352;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 33353;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 33351;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 33357;
pub const GL_DEBUG_TYPE_ERROR_KHR = 33356;
pub const GL_DEBUG_TYPE_MARKER_KHR = 33384;
pub const GL_DEBUG_TYPE_OTHER_KHR = 33361;
pub const GL_DEBUG_TYPE_PERFORMANCE_KHR = 33360;
pub const GL_DEBUG_TYPE_POP_GROUP_KHR = 33386;
pub const GL_DEBUG_TYPE_PORTABILITY_KHR = 33359;
pub const GL_DEBUG_TYPE_PUSH_GROUP_KHR = 33385;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 33358;
pub const GL_DECODE_EXT = 35401;
pub const GL_DECR = 7683;
pub const GL_DECR_WRAP = 34056;
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = 38273;
pub const GL_DELETE_STATUS = 35712;
pub const GL_DEPTH_ATTACHMENT = 36096;
pub const GL_DEPTH_BITS = 3414;
pub const GL_DEPTH_BUFFER_BIT = 256;
pub const GL_DEPTH_BUFFER_BIT0_QCOM = 256;
pub const GL_DEPTH_BUFFER_BIT1_QCOM = 512;
pub const GL_DEPTH_BUFFER_BIT2_QCOM = 1024;
pub const GL_DEPTH_BUFFER_BIT3_QCOM = 2048;
pub const GL_DEPTH_BUFFER_BIT4_QCOM = 4096;
pub const GL_DEPTH_BUFFER_BIT5_QCOM = 8192;
pub const GL_DEPTH_BUFFER_BIT6_QCOM = 16384;
pub const GL_DEPTH_BUFFER_BIT7_QCOM = 32768;
pub const GL_DEPTH_CLAMP_EXT = 34383;
pub const GL_DEPTH_CLEAR_VALUE = 2931;
pub const GL_DEPTH_COMPONENT = 6402;
pub const GL_DEPTH_COMPONENT16 = 33189;
pub const GL_DEPTH_COMPONENT16_NONLINEAR_NV = 36396;
pub const GL_DEPTH_COMPONENT16_OES = 33189;
pub const GL_DEPTH_COMPONENT24_OES = 33190;
pub const GL_DEPTH_COMPONENT32_OES = 33191;
pub const GL_DEPTH_EXT = 6145;
pub const GL_DEPTH_FUNC = 2932;
pub const GL_DEPTH_RANGE = 2928;
pub const GL_DEPTH_SAMPLES_NV = 37677;
pub const GL_DEPTH_STENCIL_OES = 34041;
pub const GL_DEPTH_TEST = 2929;
pub const GL_DEPTH_WRITEMASK = 2930;
pub const GL_DEPTH24_STENCIL8_OES = 35056;
pub const GL_DETACHED_BUFFERS_NV = 38315;
pub const GL_DETACHED_MEMORY_INCARNATION_NV = 38313;
pub const GL_DETACHED_TEXTURES_NV = 38314;
pub const GL_DEVICE_LUID_EXT = 38297;
pub const GL_DEVICE_NODE_MASK_EXT = 38298;
pub const GL_DEVICE_UUID_EXT = 38295;
pub const GL_DIFFERENCE_KHR = 37534;
pub const GL_DIFFERENCE_NV = 37534;
pub const GL_DISJOINT_NV = 37507;
pub const GL_DITHER = 3024;
pub const GL_DMP_program_binary = 1;
pub const GL_DMP_PROGRAM_BINARY_DMP = 37459;
pub const GL_DMP_shader_binary = 1;
pub const GL_DONT_CARE = 4352;
pub const GL_DOWNSAMPLE_SCALES_IMG = 37182;
pub const GL_DRAW_BUFFER_EXT = 3073;
pub const GL_DRAW_BUFFER0_EXT = 34853;
pub const GL_DRAW_BUFFER0_NV = 34853;
pub const GL_DRAW_BUFFER1_EXT = 34854;
pub const GL_DRAW_BUFFER1_NV = 34854;
pub const GL_DRAW_BUFFER10_EXT = 34863;
pub const GL_DRAW_BUFFER10_NV = 34863;
pub const GL_DRAW_BUFFER11_EXT = 34864;
pub const GL_DRAW_BUFFER11_NV = 34864;
pub const GL_DRAW_BUFFER12_EXT = 34865;
pub const GL_DRAW_BUFFER12_NV = 34865;
pub const GL_DRAW_BUFFER13_EXT = 34866;
pub const GL_DRAW_BUFFER13_NV = 34866;
pub const GL_DRAW_BUFFER14_EXT = 34867;
pub const GL_DRAW_BUFFER14_NV = 34867;
pub const GL_DRAW_BUFFER15_EXT = 34868;
pub const GL_DRAW_BUFFER15_NV = 34868;
pub const GL_DRAW_BUFFER2_EXT = 34855;
pub const GL_DRAW_BUFFER2_NV = 34855;
pub const GL_DRAW_BUFFER3_EXT = 34856;
pub const GL_DRAW_BUFFER3_NV = 34856;
pub const GL_DRAW_BUFFER4_EXT = 34857;
pub const GL_DRAW_BUFFER4_NV = 34857;
pub const GL_DRAW_BUFFER5_EXT = 34858;
pub const GL_DRAW_BUFFER5_NV = 34858;
pub const GL_DRAW_BUFFER6_EXT = 34859;
pub const GL_DRAW_BUFFER6_NV = 34859;
pub const GL_DRAW_BUFFER7_EXT = 34860;
pub const GL_DRAW_BUFFER7_NV = 34860;
pub const GL_DRAW_BUFFER8_EXT = 34861;
pub const GL_DRAW_BUFFER8_NV = 34861;
pub const GL_DRAW_BUFFER9_EXT = 34862;
pub const GL_DRAW_BUFFER9_NV = 34862;
pub const GL_DRAW_FRAMEBUFFER_ANGLE = 36009;
pub const GL_DRAW_FRAMEBUFFER_APPLE = 36009;
pub const GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 36006;
pub const GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 36006;
pub const GL_DRAW_FRAMEBUFFER_BINDING_NV = 36006;
pub const GL_DRAW_FRAMEBUFFER_NV = 36009;
pub const GL_DRIVER_UUID_EXT = 38296;
pub const GL_DST_ALPHA = 772;
pub const GL_DST_ATOP_NV = 37519;
pub const GL_DST_COLOR = 774;
pub const GL_DST_IN_NV = 37515;
pub const GL_DST_NV = 37511;
pub const GL_DST_OUT_NV = 37517;
pub const GL_DST_OVER_NV = 37513;
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 242;
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = 244;
pub const GL_DYNAMIC_DRAW = 35048;
pub const GL_DYNAMIC_STORAGE_BIT_EXT = 256;
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = 37676;
pub const GL_ELEMENT_ARRAY_BUFFER = 34963;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
pub const GL_EQUAL = 514;
pub const GL_ES_VERSION_2_0 = 1;
pub const GL_ETC1_RGB8_OES = 36196;
pub const GL_ETC1_SRGB8_NV = 35054;
pub const GL_EXCLUSION_KHR = 37536;
pub const GL_EXCLUSION_NV = 37536;
pub const GL_EXCLUSIVE_EXT = 36625;
pub const GL_EXT_base_instance = 1;
pub const GL_EXT_blend_func_extended = 1;
pub const GL_EXT_blend_minmax = 1;
pub const GL_EXT_buffer_storage = 1;
pub const GL_EXT_clear_texture = 1;
pub const GL_EXT_clip_control = 1;
pub const GL_EXT_clip_cull_distance = 1;
pub const GL_EXT_color_buffer_float = 1;
pub const GL_EXT_color_buffer_half_float = 1;
pub const GL_EXT_conservative_depth = 1;
pub const GL_EXT_copy_image = 1;
pub const GL_EXT_debug_label = 1;
pub const GL_EXT_debug_marker = 1;
pub const GL_EXT_depth_clamp = 1;
pub const GL_EXT_discard_framebuffer = 1;
pub const GL_EXT_disjoint_timer_query = 1;
pub const GL_EXT_draw_buffers = 1;
pub const GL_EXT_draw_buffers_indexed = 1;
pub const GL_EXT_draw_elements_base_vertex = 1;
pub const GL_EXT_draw_instanced = 1;
pub const GL_EXT_draw_transform_feedback = 1;
pub const GL_EXT_EGL_image_array = 1;
pub const GL_EXT_EGL_image_storage = 1;
pub const GL_EXT_external_buffer = 1;
pub const GL_EXT_float_blend = 1;
pub const GL_EXT_geometry_point_size = 1;
pub const GL_EXT_geometry_shader = 1;
pub const GL_EXT_gpu_shader5 = 1;
pub const GL_EXT_instanced_arrays = 1;
pub const GL_EXT_map_buffer_range = 1;
pub const GL_EXT_memory_object = 1;
pub const GL_EXT_memory_object_fd = 1;
pub const GL_EXT_memory_object_win32 = 1;
pub const GL_EXT_multi_draw_arrays = 1;
pub const GL_EXT_multi_draw_indirect = 1;
pub const GL_EXT_multisampled_compatibility = 1;
pub const GL_EXT_multisampled_render_to_texture = 1;
pub const GL_EXT_multiview_draw_buffers = 1;
pub const GL_EXT_multiview_tessellation_geometry_shader = 1;
pub const GL_EXT_multiview_texture_multisample = 1;
pub const GL_EXT_multiview_timer_query = 1;
pub const GL_EXT_occlusion_query_boolean = 1;
pub const GL_EXT_polygon_offset_clamp = 1;
pub const GL_EXT_post_depth_coverage = 1;
pub const GL_EXT_primitive_bounding_box = 1;
pub const GL_EXT_protected_textures = 1;
pub const GL_EXT_pvrtc_sRGB = 1;
pub const GL_EXT_raster_multisample = 1;
pub const GL_EXT_read_format_bgra = 1;
pub const GL_EXT_render_snorm = 1;
pub const GL_EXT_robustness = 1;
pub const GL_EXT_semaphore = 1;
pub const GL_EXT_semaphore_fd = 1;
pub const GL_EXT_semaphore_win32 = 1;
pub const GL_EXT_separate_shader_objects = 1;
pub const GL_EXT_shader_framebuffer_fetch = 1;
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = 1;
pub const GL_EXT_shader_group_vote = 1;
pub const GL_EXT_shader_implicit_conversions = 1;
pub const GL_EXT_shader_integer_mix = 1;
pub const GL_EXT_shader_io_blocks = 1;
pub const GL_EXT_shader_non_constant_global_initializers = 1;
pub const GL_EXT_shader_pixel_local_storage = 1;
pub const GL_EXT_shader_pixel_local_storage2 = 1;
pub const GL_EXT_shader_texture_lod = 1;
pub const GL_EXT_shadow_samplers = 1;
pub const GL_EXT_sparse_texture = 1;
pub const GL_EXT_sparse_texture2 = 1;
pub const GL_EXT_sRGB = 1;
pub const GL_EXT_sRGB_write_control = 1;
pub const GL_EXT_tessellation_point_size = 1;
pub const GL_EXT_tessellation_shader = 1;
pub const GL_EXT_texture_border_clamp = 1;
pub const GL_EXT_texture_buffer = 1;
pub const GL_EXT_texture_compression_astc_decode_mode = 1;
pub const GL_EXT_texture_compression_bptc = 1;
pub const GL_EXT_texture_compression_dxt1 = 1;
pub const GL_EXT_texture_compression_rgtc = 1;
pub const GL_EXT_texture_compression_s3tc = 1;
pub const GL_EXT_texture_compression_s3tc_srgb = 1;
pub const GL_EXT_texture_cube_map_array = 1;
pub const GL_EXT_texture_filter_anisotropic = 1;
pub const GL_EXT_texture_filter_minmax = 1;
pub const GL_EXT_texture_format_BGRA8888 = 1;
pub const GL_EXT_texture_format_sRGB_override = 1;
pub const GL_EXT_texture_mirror_clamp_to_edge = 1;
pub const GL_EXT_texture_norm16 = 1;
pub const GL_EXT_texture_query_lod = 1;
pub const GL_EXT_texture_rg = 1;
pub const GL_EXT_texture_shadow_lod = 1;
pub const GL_EXT_texture_sRGB_decode = 1;
pub const GL_EXT_texture_sRGB_R8 = 1;
pub const GL_EXT_texture_sRGB_RG8 = 1;
pub const GL_EXT_texture_storage = 1;
pub const GL_EXT_texture_type_2_10_10_10_REV = 1;
pub const GL_EXT_texture_view = 1;
pub const GL_EXT_unpack_subimage = 1;
pub const GL_EXT_win32_keyed_mutex = 1;
pub const GL_EXT_window_rectangles = 1;
pub const GL_EXT_YUV_target = 1;
pub const GL_EXTENSIONS = 7939;
pub const GL_FACTOR_MAX_AMD = 36893;
pub const GL_FACTOR_MIN_AMD = 36892;
pub const GL_FALSE = 0;
pub const GL_FASTEST = 4353;
pub const GL_FENCE_CONDITION_NV = 34036;
pub const GL_FENCE_STATUS_NV = 34035;
pub const GL_FETCH_PER_SAMPLE_ARM = 36709;
pub const GL_FILE_NAME_NV = 36980;
pub const GL_FILL_NV = 6914;
pub const GL_FILL_RECTANGLE_NV = 37692;
pub const GL_FIRST_TO_REST_NV = 37039;
pub const GL_FIRST_VERTEX_CONVENTION_EXT = 36429;
pub const GL_FIRST_VERTEX_CONVENTION_OES = 36429;
pub const GL_FIXED = 5132;
pub const GL_FJ_shader_binary_GCCSO = 1;
pub const GL_FLOAT = 5126;
pub const GL_FLOAT_MAT2 = 35674;
pub const GL_FLOAT_MAT2x3_NV = 35685;
pub const GL_FLOAT_MAT2x4_NV = 35686;
pub const GL_FLOAT_MAT3 = 35675;
pub const GL_FLOAT_MAT3x2_NV = 35687;
pub const GL_FLOAT_MAT3x4_NV = 35688;
pub const GL_FLOAT_MAT4 = 35676;
pub const GL_FLOAT_MAT4x2_NV = 35689;
pub const GL_FLOAT_MAT4x3_NV = 35690;
pub const GL_FLOAT_VEC2 = 35664;
pub const GL_FLOAT_VEC3 = 35665;
pub const GL_FLOAT_VEC4 = 35666;
pub const GL_FLOAT16_NV = 36856;
pub const GL_FLOAT16_VEC2_NV = 36857;
pub const GL_FLOAT16_VEC3_NV = 36858;
pub const GL_FLOAT16_VEC4_NV = 36859;
pub const GL_FONT_ASCENDER_BIT_NV = 2097152;
pub const GL_FONT_DESCENDER_BIT_NV = 4194304;
pub const GL_FONT_GLYPHS_AVAILABLE_NV = 37736;
pub const GL_FONT_HAS_KERNING_BIT_NV = 268435456;
pub const GL_FONT_HEIGHT_BIT_NV = 8388608;
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432;
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216;
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 536870912;
pub const GL_FONT_TARGET_UNAVAILABLE_NV = 37737;
pub const GL_FONT_UNAVAILABLE_NV = 37738;
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = 67108864;
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728;
pub const GL_FONT_UNINTELLIGIBLE_NV = 37739;
pub const GL_FONT_UNITS_PER_EM_BIT_NV = 1048576;
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = 262144;
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = 65536;
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = 524288;
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = 131072;
pub const GL_FOVEATION_ENABLE_BIT_QCOM = 1;
pub const GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 2;
pub const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 4;
pub const GL_FRACTIONAL_EVEN_EXT = 36476;
pub const GL_FRACTIONAL_EVEN_OES = 36476;
pub const GL_FRACTIONAL_ODD_EXT = 36475;
pub const GL_FRACTIONAL_ODD_OES = 36475;
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = 37598;
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 37597;
pub const GL_FRAGMENT_INPUT_NV = 37741;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 36445;
pub const GL_FRAGMENT_SHADER = 35632;
pub const GL_FRAGMENT_SHADER_BIT_EXT = 2;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 35723;
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 35410;
pub const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 36710;
pub const GL_FRAMEBUFFER = 36160;
pub const GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 37795;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 33296;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 33297;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 36263;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 36052;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 36204;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 37183;
pub const GL_FRAMEBUFFER_BINDING = 36006;
pub const GL_FRAMEBUFFER_COMPLETE = 36053;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 37650;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 37650;
pub const GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 38562;
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = 35771;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
pub const GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 35839;
pub const GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 38482;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 36264;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 37180;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 36182;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 36182;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 37172;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 36182;
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 37698;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 37699;
pub const GL_FRAMEBUFFER_SRGB_EXT = 36281;
pub const GL_FRAMEBUFFER_UNDEFINED_OES = 33305;
pub const GL_FRAMEBUFFER_UNSUPPORTED = 36061;
pub const GL_FRONT = 1028;
pub const GL_FRONT_AND_BACK = 1032;
pub const GL_FRONT_FACE = 2886;
pub const GL_FUNC_ADD = 32774;
pub const GL_FUNC_REVERSE_SUBTRACT = 32779;
pub const GL_FUNC_SUBTRACT = 32778;
pub const GL_GCCSO_SHADER_BINARY_FJ = 37472;
pub const GL_GENERATE_MIPMAP_HINT = 33170;
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095;
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 35095;
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096;
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 35096;
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094;
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 35094;
pub const GL_GEOMETRY_SHADER_BIT_EXT = 4;
pub const GL_GEOMETRY_SHADER_BIT_OES = 4;
pub const GL_GEOMETRY_SHADER_EXT = 36313;
pub const GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 34943;
pub const GL_GEOMETRY_SHADER_INVOCATIONS_OES = 34943;
pub const GL_GEOMETRY_SHADER_OES = 36313;
pub const GL_GEQUAL = 518;
pub const GL_GLES_PROTOTYPES = 1;
pub const GL_GLYPH_HAS_KERNING_BIT_NV = 256;
pub const GL_GLYPH_HEIGHT_BIT_NV = 2;
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16;
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4;
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8;
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128;
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 32;
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64;
pub const GL_GLYPH_WIDTH_BIT_NV = 1;
pub const GL_GPU_DISJOINT_EXT = 36795;
pub const GL_GPU_OPTIMIZED_QCOM = 36786;
pub const GL_GREATER = 516;
pub const GL_GREEN_BITS = 3411;
pub const GL_GREEN_NV = 6404;
pub const GL_GUILTY_CONTEXT_RESET_EXT = 33363;
pub const GL_GUILTY_CONTEXT_RESET_KHR = 33363;
pub const GL_HALF_FLOAT_OES = 36193;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 38283;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 38284;
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = 38292;
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 38282;
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 38281;
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = 38278;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 38279;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 38280;
pub const GL_HARDLIGHT_KHR = 37531;
pub const GL_HARDLIGHT_NV = 37531;
pub const GL_HARDMIX_NV = 37545;
pub const GL_HIGH_FLOAT = 36338;
pub const GL_HIGH_INT = 36341;
pub const GL_HORIZONTAL_LINE_TO_NV = 6;
pub const GL_HSL_COLOR_KHR = 37551;
pub const GL_HSL_COLOR_NV = 37551;
pub const GL_HSL_HUE_KHR = 37549;
pub const GL_HSL_HUE_NV = 37549;
pub const GL_HSL_LUMINOSITY_KHR = 37552;
pub const GL_HSL_LUMINOSITY_NV = 37552;
pub const GL_HSL_SATURATION_KHR = 37550;
pub const GL_HSL_SATURATION_NV = 37550;
pub const GL_IMAGE_BUFFER_EXT = 36945;
pub const GL_IMAGE_BUFFER_OES = 36945;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948;
pub const GL_IMAGE_CUBE_MAP_ARRAY_OES = 36948;
pub const GL_IMG_bindless_texture = 1;
pub const GL_IMG_framebuffer_downsample = 1;
pub const GL_IMG_multisampled_render_to_texture = 1;
pub const GL_IMG_program_binary = 1;
pub const GL_IMG_read_format = 1;
pub const GL_IMG_shader_binary = 1;
pub const GL_IMG_texture_compression_pvrtc = 1;
pub const GL_IMG_texture_compression_pvrtc2 = 1;
pub const GL_IMG_texture_filter_cubic = 1;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;
pub const GL_INCLUSIVE_EXT = 36624;
pub const GL_INCR = 7682;
pub const GL_INCR_WRAP = 34055;
pub const GL_INFO_LOG_LENGTH = 35716;
pub const GL_INNOCENT_CONTEXT_RESET_EXT = 33364;
pub const GL_INNOCENT_CONTEXT_RESET_KHR = 33364;
pub const GL_INT = 5124;
pub const GL_INT_10_10_10_2_OES = 36343;
pub const GL_INT_IMAGE_BUFFER_EXT = 36956;
pub const GL_INT_IMAGE_BUFFER_OES = 36956;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 36959;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37132;
pub const GL_INT_SAMPLER_BUFFER_EXT = 36304;
pub const GL_INT_SAMPLER_BUFFER_OES = 36304;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36878;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 36878;
pub const GL_INT_VEC2 = 35667;
pub const GL_INT_VEC3 = 35668;
pub const GL_INT_VEC4 = 35669;
pub const GL_INT16_NV = 36836;
pub const GL_INT16_VEC2_NV = 36837;
pub const GL_INT16_VEC3_NV = 36838;
pub const GL_INT16_VEC4_NV = 36839;
pub const GL_INT64_NV = 5134;
pub const GL_INT64_VEC2_NV = 36841;
pub const GL_INT64_VEC3_NV = 36842;
pub const GL_INT64_VEC4_NV = 36843;
pub const GL_INT8_NV = 36832;
pub const GL_INT8_VEC2_NV = 36833;
pub const GL_INT8_VEC3_NV = 36834;
pub const GL_INT8_VEC4_NV = 36835;
pub const GL_INTEL_blackhole_render = 1;
pub const GL_INTEL_conservative_rasterization = 1;
pub const GL_INTEL_framebuffer_CMAA = 1;
pub const GL_INTEL_performance_query = 1;
pub const GL_INVALID_ENUM = 1280;
pub const GL_INVALID_FRAMEBUFFER_OPERATION = 1286;
pub const GL_INVALID_OPERATION = 1282;
pub const GL_INVALID_VALUE = 1281;
pub const GL_INVERT = 5386;
pub const GL_INVERT_OVG_NV = 37556;
pub const GL_INVERT_RGB_NV = 37539;
pub const GL_IS_PER_PATCH_EXT = 37607;
pub const GL_IS_PER_PATCH_OES = 37607;
pub const GL_ISOLINES_EXT = 36474;
pub const GL_ISOLINES_OES = 36474;
pub const GL_ITALIC_BIT_NV = 2;
pub const GL_KEEP = 7680;
pub const GL_KHR_blend_equation_advanced = 1;
pub const GL_KHR_blend_equation_advanced_coherent = 1;
pub const GL_KHR_context_flush_control = 1;
pub const GL_KHR_debug = 1;
pub const GL_KHR_no_error = 1;
pub const GL_KHR_parallel_shader_compile = 1;
pub const GL_KHR_robust_buffer_access_behavior = 1;
pub const GL_KHR_robustness = 1;
pub const GL_KHR_texture_compression_astc_hdr = 1;
pub const GL_KHR_texture_compression_astc_ldr = 1;
pub const GL_KHR_texture_compression_astc_sliced_3d = 1;
pub const GL_LARGE_CCW_ARC_TO_NV = 22;
pub const GL_LARGE_CW_ARC_TO_NV = 24;
pub const GL_LAST_VERTEX_CONVENTION_EXT = 36430;
pub const GL_LAST_VERTEX_CONVENTION_OES = 36430;
pub const GL_LAYER_PROVOKING_VERTEX_EXT = 33374;
pub const GL_LAYER_PROVOKING_VERTEX_OES = 33374;
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = 38286;
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 38193;
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 38192;
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 38287;
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 38288;
pub const GL_LAYOUT_GENERAL_EXT = 38285;
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = 38289;
pub const GL_LAYOUT_TRANSFER_DST_EXT = 38291;
pub const GL_LAYOUT_TRANSFER_SRC_EXT = 38290;
pub const GL_LEQUAL = 515;
pub const GL_LESS = 513;
pub const GL_LIGHTEN_KHR = 37528;
pub const GL_LIGHTEN_NV = 37528;
pub const GL_LINE_LOOP = 2;
pub const GL_LINE_NV = 6913;
pub const GL_LINE_STRIP = 3;
pub const GL_LINE_STRIP_ADJACENCY_EXT = 11;
pub const GL_LINE_STRIP_ADJACENCY_OES = 11;
pub const GL_LINE_TO_NV = 4;
pub const GL_LINE_WIDTH = 2849;
pub const GL_LINEAR = 9729;
pub const GL_LINEAR_MIPMAP_LINEAR = 9987;
pub const GL_LINEAR_MIPMAP_NEAREST = 9985;
pub const GL_LINEAR_TILING_EXT = 38277;
pub const GL_LINEARBURN_NV = 37541;
pub const GL_LINEARDODGE_NV = 37540;
pub const GL_LINEARLIGHT_NV = 37543;
pub const GL_LINES = 1;
pub const GL_LINES_ADJACENCY_EXT = 10;
pub const GL_LINES_ADJACENCY_OES = 10;
pub const GL_LINK_STATUS = 35714;
pub const GL_LOCATION_INDEX_EXT = 37647;
pub const GL_LOSE_CONTEXT_ON_RESET_EXT = 33362;
pub const GL_LOSE_CONTEXT_ON_RESET_KHR = 33362;
pub const GL_LOW_FLOAT = 36336;
pub const GL_LOW_INT = 36339;
pub const GL_LOWER_LEFT_EXT = 36001;
pub const GL_LUID_SIZE_EXT = 8;
pub const GL_LUMINANCE = 6409;
pub const GL_LUMINANCE_ALPHA = 6410;
pub const GL_LUMINANCE_ALPHA16F_EXT = 34847;
pub const GL_LUMINANCE_ALPHA32F_EXT = 34841;
pub const GL_LUMINANCE16F_EXT = 34846;
pub const GL_LUMINANCE32F_EXT = 34840;
pub const GL_LUMINANCE4_ALPHA4_OES = 32835;
pub const GL_LUMINANCE8_ALPHA8_EXT = 32837;
pub const GL_LUMINANCE8_ALPHA8_OES = 32837;
pub const GL_LUMINANCE8_EXT = 32832;
pub const GL_LUMINANCE8_OES = 32832;
pub const GL_MALI_PROGRAM_BINARY_ARM = 36705;
pub const GL_MALI_SHADER_BINARY_ARM = 36704;
pub const GL_MAP_COHERENT_BIT_EXT = 128;
pub const GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 16;
pub const GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 8;
pub const GL_MAP_INVALIDATE_RANGE_BIT_EXT = 4;
pub const GL_MAP_PERSISTENT_BIT_EXT = 64;
pub const GL_MAP_READ_BIT = 1;
pub const GL_MAP_READ_BIT_EXT = 1;
pub const GL_MAP_UNSYNCHRONIZED_BIT_EXT = 32;
pub const GL_MAP_WRITE_BIT = 2;
pub const GL_MAP_WRITE_BIT_EXT = 2;
pub const GL_MAX = 32776;
pub const GL_MAX_3D_TEXTURE_SIZE_OES = 32883;
pub const GL_MAX_CLIP_DISTANCES_APPLE = 3378;
pub const GL_MAX_CLIP_DISTANCES_EXT = 3378;
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 38239;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = 36063;
pub const GL_MAX_COLOR_ATTACHMENTS_NV = 36063;
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 37299;
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 37300;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 33530;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 35378;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 35378;
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 36455;
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 36463;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36382;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36382;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36383;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36383;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
pub const GL_MAX_CULL_DISTANCES_EXT = 33529;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 33388;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 37188;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 37187;
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 37301;
pub const GL_MAX_DETACHED_BUFFERS_NV = 38317;
pub const GL_MAX_DETACHED_TEXTURES_NV = 38316;
pub const GL_MAX_DRAW_BUFFERS_EXT = 34852;
pub const GL_MAX_DRAW_BUFFERS_NV = 34852;
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 38205;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 35068;
pub const GL_MAX_EXT = 32776;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 36444;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
pub const GL_MAX_FRAMEBUFFER_LAYERS_EXT = 37655;
pub const GL_MAX_FRAMEBUFFER_LAYERS_OES = 37655;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 37583;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 37583;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 37589;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 37589;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 37069;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 37069;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 37155;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 37155;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 37156;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 37156;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 36320;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 36442;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 36442;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 37079;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 37079;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 35881;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 36321;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 35372;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 35372;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 36319;
pub const GL_MAX_LABEL_LENGTH_KHR = 33512;
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 36452;
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = 36453;
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = 36450;
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 38201;
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = 38200;
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 36454;
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 36449;
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 38198;
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = 36448;
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 36451;
pub const GL_MAX_MESH_VIEWS_NV = 38231;
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 38306;
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = 38203;
pub const GL_MAX_MULTIVIEW_BUFFERS_EXT = 37106;
pub const GL_MAX_PATCH_VERTICES_EXT = 36477;
pub const GL_MAX_PATCH_VERTICES_OES = 36477;
pub const GL_MAX_RASTER_SAMPLES_EXT = 37673;
pub const GL_MAX_RENDERBUFFER_SIZE = 34024;
pub const GL_MAX_SAMPLES_ANGLE = 36183;
pub const GL_MAX_SAMPLES_APPLE = 36183;
pub const GL_MAX_SAMPLES_EXT = 36183;
pub const GL_MAX_SAMPLES_IMG = 37173;
pub const GL_MAX_SAMPLES_NV = 36183;
pub const GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 37137;
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 38480;
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 38481;
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = 37296;
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 36707;
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 36711;
pub const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 36769;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 37273;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 37274;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 37272;
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 37705;
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 36460;
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = 36461;
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = 36458;
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = 38202;
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 36462;
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 36457;
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 38199;
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = 36456;
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 36459;
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 38307;
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = 38204;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 37581;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 37581;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 37587;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 37587;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 37067;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 37067;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 34924;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 34924;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 36483;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 36483;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 37080;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 37080;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 36481;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 36481;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 36485;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 36485;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 36489;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 36489;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36479;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36479;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 37582;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 37582;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 37588;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 37588;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 37068;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 37068;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 34925;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 34925;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 36486;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 36486;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 37081;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 37081;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 36482;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 36482;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 36490;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 36490;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36480;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36480;
pub const GL_MAX_TESS_GEN_LEVEL_EXT = 36478;
pub const GL_MAX_TESS_GEN_LEVEL_OES = 36478;
pub const GL_MAX_TESS_PATCH_COMPONENTS_EXT = 36484;
pub const GL_MAX_TESS_PATCH_COMPONENTS_OES = 36484;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_OES = 35883;
pub const GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
pub const GL_MAX_TEXTURE_SIZE = 3379;
pub const GL_MAX_VARYING_VECTORS = 36348;
pub const GL_MAX_VERTEX_ATTRIBS = 34921;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
pub const GL_MAX_VIEWPORT_DIMS = 3386;
pub const GL_MAX_VIEWPORTS_NV = 33371;
pub const GL_MAX_VIEWPORTS_OES = 33371;
pub const GL_MAX_VIEWS_OVR = 38449;
pub const GL_MAX_WINDOW_RECTANGLES_EXT = 36628;
pub const GL_MEDIUM_FLOAT = 36337;
pub const GL_MEDIUM_INT = 36340;
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 38310;
pub const GL_MEMORY_ATTACHABLE_NV = 38312;
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = 38311;
pub const GL_MESA_framebuffer_flip_y = 1;
pub const GL_MESA_program_binary_formats = 1;
pub const GL_MESA_shader_integer_functions = 1;
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 38211;
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 37599;
pub const GL_MESH_OUTPUT_TYPE_NV = 38267;
pub const GL_MESH_PRIMITIVES_OUT_NV = 38266;
pub const GL_MESH_SHADER_BIT_NV = 64;
pub const GL_MESH_SHADER_NV = 38233;
pub const GL_MESH_SUBROUTINE_NV = 38268;
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = 38270;
pub const GL_MESH_VERTICES_OUT_NV = 38265;
pub const GL_MESH_WORK_GROUP_SIZE_NV = 38206;
pub const GL_MIN = 32775;
pub const GL_MIN_EXT = 32775;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 36443;
pub const GL_MIN_SAMPLE_SHADING_VALUE_OES = 35895;
pub const GL_MINUS_CLAMPED_NV = 37555;
pub const GL_MINUS_NV = 37535;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = 34627;
pub const GL_MIRRORED_REPEAT = 33648;
pub const GL_MITER_REVERT_NV = 37031;
pub const GL_MITER_TRUNCATE_NV = 37032;
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679;
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680;
pub const GL_MOVE_TO_CONTINUES_NV = 37046;
pub const GL_MOVE_TO_NV = 2;
pub const GL_MOVE_TO_RESETS_NV = 37045;
pub const GL_MULTIPLY_KHR = 37524;
pub const GL_MULTIPLY_NV = 37524;
pub const GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 16777216;
pub const GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 33554432;
pub const GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 67108864;
pub const GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 134217728;
pub const GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 268435456;
pub const GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 536870912;
pub const GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 1073741824;
pub const GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 2147483648;
pub const GL_MULTISAMPLE_EXT = 32925;
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675;
pub const GL_MULTISAMPLES_NV = 37745;
pub const GL_MULTIVIEW_EXT = 37105;
pub const GL_NEAREST = 9728;
pub const GL_NEAREST_MIPMAP_LINEAR = 9986;
pub const GL_NEAREST_MIPMAP_NEAREST = 9984;
pub const GL_NEGATIVE_ONE_TO_ONE_EXT = 37726;
pub const GL_NEVER = 512;
pub const GL_NICEST = 4354;
pub const GL_NO_ERROR = 0;
pub const GL_NO_RESET_NOTIFICATION_EXT = 33377;
pub const GL_NO_RESET_NOTIFICATION_KHR = 33377;
pub const GL_NONE = 0;
pub const GL_NOTEQUAL = 517;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
pub const GL_NUM_DEVICE_UUIDS_EXT = 38294;
pub const GL_NUM_DOWNSAMPLE_SCALES_IMG = 37181;
pub const GL_NUM_PROGRAM_BINARY_FORMATS_OES = 34814;
pub const GL_NUM_SHADER_BINARY_FORMATS = 36345;
pub const GL_NUM_SPARSE_LEVELS_EXT = 37290;
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 37302;
pub const GL_NUM_TILING_TYPES_EXT = 38274;
pub const GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 37288;
pub const GL_NUM_WINDOW_RECTANGLES_EXT = 36629;
pub const GL_NV_bindless_texture = 1;
pub const GL_NV_blend_equation_advanced = 1;
pub const GL_NV_blend_equation_advanced_coherent = 1;
pub const GL_NV_blend_minmax_factor = 1;
pub const GL_NV_clip_space_w_scaling = 1;
pub const GL_NV_compute_shader_derivatives = 1;
pub const GL_NV_conditional_render = 1;
pub const GL_NV_conservative_raster = 1;
pub const GL_NV_conservative_raster_pre_snap = 1;
pub const GL_NV_conservative_raster_pre_snap_triangles = 1;
pub const GL_NV_copy_buffer = 1;
pub const GL_NV_coverage_sample = 1;
pub const GL_NV_depth_nonlinear = 1;
pub const GL_NV_draw_buffers = 1;
pub const GL_NV_draw_instanced = 1;
pub const GL_NV_draw_vulkan_image = 1;
pub const GL_NV_explicit_attrib_location = 1;
pub const GL_NV_fbo_color_attachments = 1;
pub const GL_NV_fence = 1;
pub const GL_NV_fill_rectangle = 1;
pub const GL_NV_fragment_coverage_to_color = 1;
pub const GL_NV_fragment_shader_barycentric = 1;
pub const GL_NV_fragment_shader_interlock = 1;
pub const GL_NV_framebuffer_blit = 1;
pub const GL_NV_framebuffer_mixed_samples = 1;
pub const GL_NV_framebuffer_multisample = 1;
pub const GL_NV_generate_mipmap_sRGB = 1;
pub const GL_NV_geometry_shader_passthrough = 1;
pub const GL_NV_gpu_shader5 = 1;
pub const GL_NV_image_formats = 1;
pub const GL_NV_instanced_arrays = 1;
pub const GL_NV_internalformat_sample_query = 1;
pub const GL_NV_memory_attachment = 1;
pub const GL_NV_mesh_shader = 1;
pub const GL_NV_non_square_matrices = 1;
pub const GL_NV_path_rendering = 1;
pub const GL_NV_path_rendering_shared_edge = 1;
pub const GL_NV_pixel_buffer_object = 1;
pub const GL_NV_polygon_mode = 1;
pub const GL_NV_read_buffer = 1;
pub const GL_NV_read_buffer_front = 1;
pub const GL_NV_read_depth = 1;
pub const GL_NV_read_depth_stencil = 1;
pub const GL_NV_read_stencil = 1;
pub const GL_NV_representative_fragment_test = 1;
pub const GL_NV_sample_locations = 1;
pub const GL_NV_sample_mask_override_coverage = 1;
pub const GL_NV_scissor_exclusive = 1;
pub const GL_NV_shader_atomic_fp16_vector = 1;
pub const GL_NV_shader_noperspective_interpolation = 1;
pub const GL_NV_shader_texture_footprint = 1;
pub const GL_NV_shading_rate_image = 1;
pub const GL_NV_shadow_samplers_array = 1;
pub const GL_NV_shadow_samplers_cube = 1;
pub const GL_NV_sRGB_formats = 1;
pub const GL_NV_stereo_view_rendering = 1;
pub const GL_NV_texture_border_clamp = 1;
pub const GL_NV_texture_compression_s3tc_update = 1;
pub const GL_NV_texture_npot_2D_mipmap = 1;
pub const GL_NV_viewport_array = 1;
pub const GL_NV_viewport_array2 = 1;
pub const GL_NV_viewport_swizzle = 1;
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = 1;
pub const GL_OBJECT_TYPE_APPLE = 37138;
pub const GL_OES_compressed_ETC1_RGB8_sub_texture = 1;
pub const GL_OES_compressed_ETC1_RGB8_texture = 1;
pub const GL_OES_compressed_paletted_texture = 1;
pub const GL_OES_copy_image = 1;
pub const GL_OES_depth_texture = 1;
pub const GL_OES_depth24 = 1;
pub const GL_OES_depth32 = 1;
pub const GL_OES_draw_buffers_indexed = 1;
pub const GL_OES_draw_elements_base_vertex = 1;
pub const GL_OES_EGL_image = 1;
pub const GL_OES_EGL_image_external = 1;
pub const GL_OES_EGL_image_external_essl3 = 1;
pub const GL_OES_element_index_uint = 1;
pub const GL_OES_fbo_render_mipmap = 1;
pub const GL_OES_fragment_precision_high = 1;
pub const GL_OES_geometry_point_size = 1;
pub const GL_OES_geometry_shader = 1;
pub const GL_OES_get_program_binary = 1;
pub const GL_OES_gpu_shader5 = 1;
pub const GL_OES_mapbuffer = 1;
pub const GL_OES_packed_depth_stencil = 1;
pub const GL_OES_primitive_bounding_box = 1;
pub const GL_OES_required_internalformat = 1;
pub const GL_OES_rgb8_rgba8 = 1;
pub const GL_OES_sample_shading = 1;
pub const GL_OES_sample_variables = 1;
pub const GL_OES_shader_image_atomic = 1;
pub const GL_OES_shader_io_blocks = 1;
pub const GL_OES_shader_multisample_interpolation = 1;
pub const GL_OES_standard_derivatives = 1;
pub const GL_OES_stencil1 = 1;
pub const GL_OES_stencil4 = 1;
pub const GL_OES_surfaceless_context = 1;
pub const GL_OES_tessellation_point_size = 1;
pub const GL_OES_tessellation_shader = 1;
pub const GL_OES_texture_3D = 1;
pub const GL_OES_texture_border_clamp = 1;
pub const GL_OES_texture_buffer = 1;
pub const GL_OES_texture_compression_astc = 1;
pub const GL_OES_texture_cube_map_array = 1;
pub const GL_OES_texture_float = 1;
pub const GL_OES_texture_float_linear = 1;
pub const GL_OES_texture_half_float = 1;
pub const GL_OES_texture_half_float_linear = 1;
pub const GL_OES_texture_npot = 1;
pub const GL_OES_texture_stencil8 = 1;
pub const GL_OES_texture_storage_multisample_2d_array = 1;
pub const GL_OES_texture_view = 1;
pub const GL_OES_vertex_array_object = 1;
pub const GL_OES_vertex_half_float = 1;
pub const GL_OES_vertex_type_10_10_10_2 = 1;
pub const GL_OES_viewport_array = 1;
pub const GL_ONE = 1;
pub const GL_ONE_MINUS_CONSTANT_ALPHA = 32772;
pub const GL_ONE_MINUS_CONSTANT_COLOR = 32770;
pub const GL_ONE_MINUS_DST_ALPHA = 773;
pub const GL_ONE_MINUS_DST_COLOR = 775;
pub const GL_ONE_MINUS_SRC_ALPHA = 771;
pub const GL_ONE_MINUS_SRC_COLOR = 769;
pub const GL_ONE_MINUS_SRC1_ALPHA_EXT = 35067;
pub const GL_ONE_MINUS_SRC1_COLOR_EXT = 35066;
pub const GL_OPTIMAL_TILING_EXT = 38276;
pub const GL_OUT_OF_MEMORY = 1285;
pub const GL_OVERLAY_KHR = 37526;
pub const GL_OVERLAY_NV = 37526;
pub const GL_OVR_multiview = 1;
pub const GL_OVR_multiview_multisampled_render_to_texture = 1;
pub const GL_OVR_multiview2 = 1;
pub const GL_PACK_ALIGNMENT = 3333;
pub const GL_PACK_REVERSE_ROW_ORDER_ANGLE = 37796;
pub const GL_PALETTE4_R5_G6_B5_OES = 35730;
pub const GL_PALETTE4_RGB5_A1_OES = 35732;
pub const GL_PALETTE4_RGB8_OES = 35728;
pub const GL_PALETTE4_RGBA4_OES = 35731;
pub const GL_PALETTE4_RGBA8_OES = 35729;
pub const GL_PALETTE8_R5_G6_B5_OES = 35735;
pub const GL_PALETTE8_RGB5_A1_OES = 35737;
pub const GL_PALETTE8_RGB8_OES = 35733;
pub const GL_PALETTE8_RGBA4_OES = 35736;
pub const GL_PALETTE8_RGBA8_OES = 35734;
pub const GL_PATCH_VERTICES_EXT = 36466;
pub const GL_PATCH_VERTICES_OES = 36466;
pub const GL_PATCHES = 14;
pub const GL_PATCHES_EXT = 14;
pub const GL_PATCHES_OES = 14;
pub const GL_PATH_CLIENT_LENGTH_NV = 36991;
pub const GL_PATH_COMMAND_COUNT_NV = 37021;
pub const GL_PATH_COMPUTED_LENGTH_NV = 37024;
pub const GL_PATH_COORD_COUNT_NV = 37022;
pub const GL_PATH_COVER_DEPTH_FUNC_NV = 37055;
pub const GL_PATH_DASH_ARRAY_COUNT_NV = 37023;
pub const GL_PATH_DASH_CAPS_NV = 36987;
pub const GL_PATH_DASH_OFFSET_NV = 36990;
pub const GL_PATH_DASH_OFFSET_RESET_NV = 37044;
pub const GL_PATH_END_CAPS_NV = 36982;
pub const GL_PATH_ERROR_POSITION_NV = 37035;
pub const GL_PATH_FILL_BOUNDING_BOX_NV = 37025;
pub const GL_PATH_FILL_COVER_MODE_NV = 36994;
pub const GL_PATH_FILL_MASK_NV = 36993;
pub const GL_PATH_FILL_MODE_NV = 36992;
pub const GL_PATH_FORMAT_PS_NV = 36977;
pub const GL_PATH_FORMAT_SVG_NV = 36976;
pub const GL_PATH_GEN_COEFF_NV = 37041;
pub const GL_PATH_GEN_COMPONENTS_NV = 37043;
pub const GL_PATH_GEN_MODE_NV = 37040;
pub const GL_PATH_INITIAL_DASH_CAP_NV = 36988;
pub const GL_PATH_INITIAL_END_CAP_NV = 36983;
pub const GL_PATH_JOIN_STYLE_NV = 36985;
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 3382;
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 3384;
pub const GL_PATH_MITER_LIMIT_NV = 36986;
pub const GL_PATH_MODELVIEW_MATRIX_NV = 2982;
pub const GL_PATH_MODELVIEW_NV = 5888;
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV = 2979;
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = 37002;
pub const GL_PATH_PROJECTION_MATRIX_NV = 2983;
pub const GL_PATH_PROJECTION_NV = 5889;
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV = 2980;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054;
pub const GL_PATH_STENCIL_FUNC_NV = 37047;
pub const GL_PATH_STENCIL_REF_NV = 37048;
pub const GL_PATH_STENCIL_VALUE_MASK_NV = 37049;
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = 37026;
pub const GL_PATH_STROKE_COVER_MODE_NV = 36995;
pub const GL_PATH_STROKE_MASK_NV = 36996;
pub const GL_PATH_STROKE_WIDTH_NV = 36981;
pub const GL_PATH_TERMINAL_DASH_CAP_NV = 36989;
pub const GL_PATH_TERMINAL_END_CAP_NV = 36984;
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 34019;
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 34020;
pub const GL_PERCENTAGE_AMD = 35779;
pub const GL_PERFMON_GLOBAL_MODE_QCOM = 36768;
pub const GL_PERFMON_RESULT_AMD = 35782;
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = 35780;
pub const GL_PERFMON_RESULT_SIZE_AMD = 35781;
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140;
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139;
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138;
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136;
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137;
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143;
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129;
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130;
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = 38128;
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142;
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = 38132;
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131;
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133;
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = 33785;
pub const GL_PERFQUERY_FLUSH_INTEL = 33786;
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 1;
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144;
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141;
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0;
pub const GL_PERFQUERY_WAIT_INTEL = 33787;
pub const GL_PINLIGHT_NV = 37544;
pub const GL_PIXEL_PACK_BUFFER_BINDING_NV = 35053;
pub const GL_PIXEL_PACK_BUFFER_NV = 35051;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_NV = 35055;
pub const GL_PIXEL_UNPACK_BUFFER_NV = 35052;
pub const GL_PLUS_CLAMPED_ALPHA_NV = 37554;
pub const GL_PLUS_CLAMPED_NV = 37553;
pub const GL_PLUS_DARKER_NV = 37522;
pub const GL_PLUS_NV = 37521;
pub const GL_POINT_NV = 6912;
pub const GL_POINTS = 0;
pub const GL_POLYGON_MODE_NV = 2880;
pub const GL_POLYGON_OFFSET_CLAMP_EXT = 36379;
pub const GL_POLYGON_OFFSET_FACTOR = 32824;
pub const GL_POLYGON_OFFSET_FILL = 32823;
pub const GL_POLYGON_OFFSET_LINE_NV = 10754;
pub const GL_POLYGON_OFFSET_POINT_NV = 10753;
pub const GL_POLYGON_OFFSET_UNITS = 10752;
pub const GL_PRIMITIVE_BOUNDING_BOX_EXT = 37566;
pub const GL_PRIMITIVE_BOUNDING_BOX_OES = 37566;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 33313;
pub const GL_PRIMITIVES_GENERATED_EXT = 35975;
pub const GL_PRIMITIVES_GENERATED_OES = 35975;
pub const GL_PROGRAM_BINARY_ANGLE = 37798;
pub const GL_PROGRAM_BINARY_FORMAT_MESA = 34655;
pub const GL_PROGRAM_BINARY_FORMATS_OES = 34815;
pub const GL_PROGRAM_BINARY_LENGTH_OES = 34625;
pub const GL_PROGRAM_KHR = 33506;
pub const GL_PROGRAM_OBJECT_EXT = 35648;
pub const GL_PROGRAM_PIPELINE_BINDING_EXT = 33370;
pub const GL_PROGRAM_PIPELINE_KHR = 33508;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = 35407;
pub const GL_PROGRAM_SEPARABLE_EXT = 33368;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 37697;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 37696;
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = 38299;
pub const GL_QCOM_alpha_test = 1;
pub const GL_QCOM_binning_control = 1;
pub const GL_QCOM_driver_control = 1;
pub const GL_QCOM_extended_get = 1;
pub const GL_QCOM_extended_get2 = 1;
pub const GL_QCOM_framebuffer_foveated = 1;
pub const GL_QCOM_perfmon_global_mode = 1;
pub const GL_QCOM_shader_framebuffer_fetch_noncoherent = 1;
pub const GL_QCOM_shader_framebuffer_fetch_rate = 1;
pub const GL_QCOM_texture_foveated = 1;
pub const GL_QCOM_texture_foveated_subsampled_layout = 1;
pub const GL_QCOM_tiled_rendering = 1;
pub const GL_QCOM_writeonly_rendering = 1;
pub const GL_QCOM_YUV_texture_gather = 1;
pub const GL_QUADRATIC_CURVE_TO_NV = 10;
pub const GL_QUADS_EXT = 7;
pub const GL_QUADS_OES = 7;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = 36374;
pub const GL_QUERY_BY_REGION_WAIT_NV = 36373;
pub const GL_QUERY_COUNTER_BITS_EXT = 34916;
pub const GL_QUERY_KHR = 33507;
pub const GL_QUERY_NO_WAIT_NV = 36372;
pub const GL_QUERY_OBJECT_EXT = 37203;
pub const GL_QUERY_RESULT_AVAILABLE_EXT = 34919;
pub const GL_QUERY_RESULT_EXT = 34918;
pub const GL_QUERY_WAIT_NV = 36371;
pub const GL_R11F_G11F_B10F_APPLE = 35898;
pub const GL_R16_EXT = 33322;
pub const GL_R16_SNORM_EXT = 36760;
pub const GL_R16F_EXT = 33325;
pub const GL_R32F_EXT = 33326;
pub const GL_R8_EXT = 33321;
pub const GL_R8_SNORM = 36756;
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674;
pub const GL_RASTER_MULTISAMPLE_EXT = 37671;
pub const GL_RASTER_SAMPLES_EXT = 37672;
pub const GL_READ_BUFFER_EXT = 3074;
pub const GL_READ_BUFFER_NV = 3074;
pub const GL_READ_FRAMEBUFFER_ANGLE = 36008;
pub const GL_READ_FRAMEBUFFER_APPLE = 36008;
pub const GL_READ_FRAMEBUFFER_BINDING_ANGLE = 36010;
pub const GL_READ_FRAMEBUFFER_BINDING_APPLE = 36010;
pub const GL_READ_FRAMEBUFFER_BINDING_NV = 36010;
pub const GL_READ_FRAMEBUFFER_NV = 36008;
pub const GL_RECT_NV = 246;
pub const GL_RED_BITS = 3410;
pub const GL_RED_EXT = 6403;
pub const GL_RED_NV = 6403;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 37641;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 37641;
pub const GL_REFERENCED_BY_MESH_SHADER_NV = 38304;
pub const GL_REFERENCED_BY_TASK_SHADER_NV = 38305;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 37639;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 37639;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 37640;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 37640;
pub const GL_RELATIVE_ARC_TO_NV = 255;
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = 27;
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = 13;
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 7;
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 23;
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = 25;
pub const GL_RELATIVE_LINE_TO_NV = 5;
pub const GL_RELATIVE_MOVE_TO_NV = 3;
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 11;
pub const GL_RELATIVE_RECT_NV = 247;
pub const GL_RELATIVE_ROUNDED_RECT_NV = 233;
pub const GL_RELATIVE_ROUNDED_RECT2_NV = 235;
pub const GL_RELATIVE_ROUNDED_RECT4_NV = 237;
pub const GL_RELATIVE_ROUNDED_RECT8_NV = 239;
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 19;
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = 21;
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17;
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15;
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = 9;
pub const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 36787;
pub const GL_RENDERBUFFER = 36161;
pub const GL_RENDERBUFFER_ALPHA_SIZE = 36179;
pub const GL_RENDERBUFFER_BINDING = 36007;
pub const GL_RENDERBUFFER_BLUE_SIZE = 36178;
pub const GL_RENDERBUFFER_DEPTH_SIZE = 36180;
pub const GL_RENDERBUFFER_GREEN_SIZE = 36177;
pub const GL_RENDERBUFFER_HEIGHT = 36163;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;
pub const GL_RENDERBUFFER_RED_SIZE = 36176;
pub const GL_RENDERBUFFER_SAMPLES_ANGLE = 36011;
pub const GL_RENDERBUFFER_SAMPLES_APPLE = 36011;
pub const GL_RENDERBUFFER_SAMPLES_EXT = 36011;
pub const GL_RENDERBUFFER_SAMPLES_IMG = 37171;
pub const GL_RENDERBUFFER_SAMPLES_NV = 36011;
pub const GL_RENDERBUFFER_STENCIL_SIZE = 36181;
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 37298;
pub const GL_RENDERBUFFER_WIDTH = 36162;
pub const GL_RENDERER = 7937;
pub const GL_REPEAT = 10497;
pub const GL_REPLACE = 7681;
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 37759;
pub const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 36200;
pub const GL_RESET_NOTIFICATION_STRATEGY_EXT = 33366;
pub const GL_RESET_NOTIFICATION_STRATEGY_KHR = 33366;
pub const GL_RESTART_PATH_NV = 240;
pub const GL_RG_EXT = 33319;
pub const GL_RG16_EXT = 33324;
pub const GL_RG16_SNORM_EXT = 36761;
pub const GL_RG16F_EXT = 33327;
pub const GL_RG32F_EXT = 33328;
pub const GL_RG8_EXT = 33323;
pub const GL_RG8_SNORM = 36757;
pub const GL_RGB = 6407;
pub const GL_RGB_422_APPLE = 35359;
pub const GL_RGB_RAW_422_APPLE = 35409;
pub const GL_RGB10_A2_EXT = 32857;
pub const GL_RGB10_EXT = 32850;
pub const GL_RGB16_EXT = 32852;
pub const GL_RGB16_SNORM_EXT = 36762;
pub const GL_RGB16F_EXT = 34843;
pub const GL_RGB32F_EXT = 34837;
pub const GL_RGB5_A1 = 32855;
pub const GL_RGB5_A1_OES = 32855;
pub const GL_RGB565 = 36194;
pub const GL_RGB565_OES = 36194;
pub const GL_RGB8_OES = 32849;
pub const GL_RGB9_E5_APPLE = 35901;
pub const GL_RGBA = 6408;
pub const GL_RGBA16_EXT = 32859;
pub const GL_RGBA16_SNORM_EXT = 36763;
pub const GL_RGBA16F_EXT = 34842;
pub const GL_RGBA32F_EXT = 34836;
pub const GL_RGBA4 = 32854;
pub const GL_RGBA4_OES = 32854;
pub const GL_RGBA8_OES = 32856;
pub const GL_RGBA8_SNORM = 36759;
pub const GL_ROUND_NV = 37028;
pub const GL_ROUNDED_RECT_NV = 232;
pub const GL_ROUNDED_RECT2_NV = 234;
pub const GL_ROUNDED_RECT4_NV = 236;
pub const GL_ROUNDED_RECT8_NV = 238;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = 32927;
pub const GL_SAMPLE_BUFFERS = 32936;
pub const GL_SAMPLE_COVERAGE = 32928;
pub const GL_SAMPLE_COVERAGE_INVERT = 32939;
pub const GL_SAMPLE_COVERAGE_VALUE = 32938;
pub const GL_SAMPLE_LOCATION_NV = 36432;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 37695;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 37694;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 37693;
pub const GL_SAMPLE_SHADING_OES = 35894;
pub const GL_SAMPLER = 33510;
pub const GL_SAMPLER_2D = 35678;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_NV = 36292;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37131;
pub const GL_SAMPLER_2D_SHADOW_EXT = 35682;
pub const GL_SAMPLER_3D_OES = 35679;
pub const GL_SAMPLER_BUFFER_EXT = 36290;
pub const GL_SAMPLER_BUFFER_OES = 36290;
pub const GL_SAMPLER_CUBE = 35680;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_OES = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 36877;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 36877;
pub const GL_SAMPLER_CUBE_SHADOW_NV = 36293;
pub const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 35815;
pub const GL_SAMPLER_EXTERNAL_OES = 36198;
pub const GL_SAMPLER_KHR = 33510;
pub const GL_SAMPLES = 32937;
pub const GL_SCISSOR_BOX = 3088;
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = 38230;
pub const GL_SCISSOR_TEST = 3089;
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = 38229;
pub const GL_SCREEN_KHR = 37525;
pub const GL_SCREEN_NV = 37525;
pub const GL_SGX_BINARY_IMG = 35850;
pub const GL_SGX_PROGRAM_BINARY_IMG = 37168;
pub const GL_SHADER_BINARY_DMP = 37456;
pub const GL_SHADER_BINARY_FORMATS = 36344;
pub const GL_SHADER_BINARY_VIV = 36804;
pub const GL_SHADER_COMPILER = 36346;
pub const GL_SHADER_KHR = 33505;
pub const GL_SHADER_OBJECT_EXT = 35656;
pub const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 36708;
pub const GL_SHADER_SOURCE_LENGTH = 35720;
pub const GL_SHADER_TYPE = 35663;
pub const GL_SHADING_LANGUAGE_VERSION = 35724;
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 38246;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 38247;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 38248;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 38249;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 38250;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 38251;
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 38245;
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 38255;
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 38252;
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 38253;
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 38254;
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = 38235;
pub const GL_SHADING_RATE_IMAGE_NV = 38243;
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 38238;
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 38237;
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 38236;
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = 38244;
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 38318;
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 38319;
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 38320;
pub const GL_SHARED_EDGE_NV = 192;
pub const GL_SHORT = 5122;
pub const GL_SIGNALED_APPLE = 37145;
pub const GL_SKIP_DECODE_EXT = 35402;
pub const GL_SKIP_MISSING_GLYPH_NV = 37033;
pub const GL_SLUMINANCE_ALPHA_NV = 35908;
pub const GL_SLUMINANCE_NV = 35910;
pub const GL_SLUMINANCE8_ALPHA8_NV = 35909;
pub const GL_SLUMINANCE8_NV = 35911;
pub const GL_SMALL_CCW_ARC_TO_NV = 18;
pub const GL_SMALL_CW_ARC_TO_NV = 20;
pub const GL_SMAPHS_PROGRAM_BINARY_DMP = 37458;
pub const GL_SMAPHS30_PROGRAM_BINARY_DMP = 37457;
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = 16;
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 14;
pub const GL_SOFTLIGHT_KHR = 37532;
pub const GL_SOFTLIGHT_NV = 37532;
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 37289;
pub const GL_SQUARE_NV = 37027;
pub const GL_SR8_EXT = 36797;
pub const GL_SRC_ALPHA = 770;
pub const GL_SRC_ALPHA_SATURATE = 776;
pub const GL_SRC_ALPHA_SATURATE_EXT = 776;
pub const GL_SRC_ATOP_NV = 37518;
pub const GL_SRC_COLOR = 768;
pub const GL_SRC_IN_NV = 37514;
pub const GL_SRC_NV = 37510;
pub const GL_SRC_OUT_NV = 37516;
pub const GL_SRC_OVER_NV = 37512;
pub const GL_SRC1_ALPHA_EXT = 34185;
pub const GL_SRC1_COLOR_EXT = 35065;
pub const GL_SRG8_EXT = 36798;
pub const GL_SRGB_ALPHA_EXT = 35906;
pub const GL_SRGB_EXT = 35904;
pub const GL_SRGB8_ALPHA8_EXT = 35907;
pub const GL_SRGB8_NV = 35905;
pub const GL_STACK_OVERFLOW_KHR = 1283;
pub const GL_STACK_UNDERFLOW_KHR = 1284;
pub const GL_STANDARD_FONT_FORMAT_NV = 37740;
pub const GL_STANDARD_FONT_NAME_NV = 36978;
pub const GL_STATE_RESTORE = 35804;
pub const GL_STATIC_DRAW = 35044;
pub const GL_STENCIL_ATTACHMENT = 36128;
pub const GL_STENCIL_BACK_FAIL = 34817;
pub const GL_STENCIL_BACK_FUNC = 34816;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;
pub const GL_STENCIL_BACK_REF = 36003;
pub const GL_STENCIL_BACK_VALUE_MASK = 36004;
pub const GL_STENCIL_BACK_WRITEMASK = 36005;
pub const GL_STENCIL_BITS = 3415;
pub const GL_STENCIL_BUFFER_BIT = 1024;
pub const GL_STENCIL_BUFFER_BIT0_QCOM = 65536;
pub const GL_STENCIL_BUFFER_BIT1_QCOM = 131072;
pub const GL_STENCIL_BUFFER_BIT2_QCOM = 262144;
pub const GL_STENCIL_BUFFER_BIT3_QCOM = 524288;
pub const GL_STENCIL_BUFFER_BIT4_QCOM = 1048576;
pub const GL_STENCIL_BUFFER_BIT5_QCOM = 2097152;
pub const GL_STENCIL_BUFFER_BIT6_QCOM = 4194304;
pub const GL_STENCIL_BUFFER_BIT7_QCOM = 8388608;
pub const GL_STENCIL_CLEAR_VALUE = 2961;
pub const GL_STENCIL_EXT = 6146;
pub const GL_STENCIL_FAIL = 2964;
pub const GL_STENCIL_FUNC = 2962;
pub const GL_STENCIL_INDEX_OES = 6401;
pub const GL_STENCIL_INDEX1_OES = 36166;
pub const GL_STENCIL_INDEX4_OES = 36167;
pub const GL_STENCIL_INDEX8 = 36168;
pub const GL_STENCIL_INDEX8_OES = 36168;
pub const GL_STENCIL_PASS_DEPTH_FAIL = 2965;
pub const GL_STENCIL_PASS_DEPTH_PASS = 2966;
pub const GL_STENCIL_REF = 2967;
pub const GL_STENCIL_SAMPLES_NV = 37678;
pub const GL_STENCIL_TEST = 2960;
pub const GL_STENCIL_VALUE_MASK = 2963;
pub const GL_STENCIL_WRITEMASK = 2968;
pub const GL_STREAM_DRAW = 35040;
pub const GL_SUBPIXEL_BITS = 3408;
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 37703;
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 37704;
pub const GL_SUPERSAMPLE_SCALE_X_NV = 37746;
pub const GL_SUPERSAMPLE_SCALE_Y_NV = 37747;
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 37303;
pub const GL_SYNC_CONDITION_APPLE = 37139;
pub const GL_SYNC_FENCE_APPLE = 37142;
pub const GL_SYNC_FLAGS_APPLE = 37141;
pub const GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 1;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 37143;
pub const GL_SYNC_OBJECT_APPLE = 35411;
pub const GL_SYNC_STATUS_APPLE = 37140;
pub const GL_SYSTEM_FONT_NAME_NV = 36979;
pub const GL_TASK_SHADER_BIT_NV = 128;
pub const GL_TASK_SHADER_NV = 38234;
pub const GL_TASK_SUBROUTINE_NV = 38269;
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = 38271;
pub const GL_TASK_WORK_GROUP_SIZE_NV = 38207;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 36469;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 36469;
pub const GL_TESS_CONTROL_SHADER_BIT_EXT = 8;
pub const GL_TESS_CONTROL_SHADER_BIT_OES = 8;
pub const GL_TESS_CONTROL_SHADER_EXT = 36488;
pub const GL_TESS_CONTROL_SHADER_OES = 36488;
pub const GL_TESS_EVALUATION_SHADER_BIT_EXT = 16;
pub const GL_TESS_EVALUATION_SHADER_BIT_OES = 16;
pub const GL_TESS_EVALUATION_SHADER_EXT = 36487;
pub const GL_TESS_EVALUATION_SHADER_OES = 36487;
pub const GL_TESS_GEN_MODE_EXT = 36470;
pub const GL_TESS_GEN_MODE_OES = 36470;
pub const GL_TESS_GEN_POINT_MODE_EXT = 36473;
pub const GL_TESS_GEN_POINT_MODE_OES = 36473;
pub const GL_TESS_GEN_SPACING_EXT = 36471;
pub const GL_TESS_GEN_SPACING_OES = 36471;
pub const GL_TESS_GEN_VERTEX_ORDER_EXT = 36472;
pub const GL_TESS_GEN_VERTEX_ORDER_OES = 36472;
pub const GL_TEXTURE = 5890;
pub const GL_TEXTURE_2D = 3553;
pub const GL_TEXTURE_2D_ARRAY = 35866;
pub const GL_TEXTURE_2D_MULTISAMPLE = 37120;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 37122;
pub const GL_TEXTURE_3D = 32879;
pub const GL_TEXTURE_3D_OES = 32879;
pub const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 36713;
pub const GL_TEXTURE_BINDING_2D = 32873;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 37125;
pub const GL_TEXTURE_BINDING_3D_OES = 32874;
pub const GL_TEXTURE_BINDING_BUFFER_EXT = 35884;
pub const GL_TEXTURE_BINDING_BUFFER_OES = 35884;
pub const GL_TEXTURE_BINDING_CUBE_MAP = 34068;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 36874;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 36874;
pub const GL_TEXTURE_BINDING_EXTERNAL_OES = 36199;
pub const GL_TEXTURE_BORDER_COLOR_EXT = 4100;
pub const GL_TEXTURE_BORDER_COLOR_NV = 4100;
pub const GL_TEXTURE_BORDER_COLOR_OES = 4100;
pub const GL_TEXTURE_BUFFER_BINDING_EXT = 35882;
pub const GL_TEXTURE_BUFFER_BINDING_OES = 35882;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 35885;
pub const GL_TEXTURE_BUFFER_EXT = 35882;
pub const GL_TEXTURE_BUFFER_OES = 35882;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 37279;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 37279;
pub const GL_TEXTURE_BUFFER_OFFSET_EXT = 37277;
pub const GL_TEXTURE_BUFFER_OFFSET_OES = 37277;
pub const GL_TEXTURE_BUFFER_SIZE_EXT = 37278;
pub const GL_TEXTURE_BUFFER_SIZE_OES = 37278;
pub const GL_TEXTURE_COMPARE_FUNC_EXT = 34893;
pub const GL_TEXTURE_COMPARE_MODE_EXT = 34892;
pub const GL_TEXTURE_CUBE_MAP = 34067;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 36873;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_OES = 36873;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
pub const GL_TEXTURE_DEPTH_QCOM = 35796;
pub const GL_TEXTURE_EXTERNAL_OES = 36197;
pub const GL_TEXTURE_FORMAT_QCOM = 35798;
pub const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 36799;
pub const GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 35835;
pub const GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 35837;
pub const GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 35836;
pub const GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 35838;
pub const GL_TEXTURE_HEIGHT_QCOM = 35795;
pub const GL_TEXTURE_IMAGE_VALID_QCOM = 35800;
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 37167;
pub const GL_TEXTURE_IMMUTABLE_LEVELS = 33503;
pub const GL_TEXTURE_INTERNAL_FORMAT_QCOM = 35797;
pub const GL_TEXTURE_MAG_FILTER = 10240;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
pub const GL_TEXTURE_MAX_LEVEL_APPLE = 33085;
pub const GL_TEXTURE_MIN_FILTER = 10241;
pub const GL_TEXTURE_NUM_LEVELS_QCOM = 35801;
pub const GL_TEXTURE_OBJECT_VALID_QCOM = 35803;
pub const GL_TEXTURE_PROTECTED_EXT = 35834;
pub const GL_TEXTURE_REDUCTION_MODE_EXT = 37734;
pub const GL_TEXTURE_SAMPLES_IMG = 37174;
pub const GL_TEXTURE_SPARSE_EXT = 37286;
pub const GL_TEXTURE_SRGB_DECODE_EXT = 35400;
pub const GL_TEXTURE_TARGET_QCOM = 35802;
pub const GL_TEXTURE_TILING_EXT = 38272;
pub const GL_TEXTURE_TYPE_QCOM = 35799;
pub const GL_TEXTURE_USAGE_ANGLE = 37794;
pub const GL_TEXTURE_VIEW_MIN_LAYER_EXT = 33501;
pub const GL_TEXTURE_VIEW_MIN_LAYER_OES = 33501;
pub const GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 33499;
pub const GL_TEXTURE_VIEW_MIN_LEVEL_OES = 33499;
pub const GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 33502;
pub const GL_TEXTURE_VIEW_NUM_LAYERS_OES = 33502;
pub const GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 33500;
pub const GL_TEXTURE_VIEW_NUM_LEVELS_OES = 33500;
pub const GL_TEXTURE_WIDTH_QCOM = 35794;
pub const GL_TEXTURE_WRAP_R_OES = 32882;
pub const GL_TEXTURE_WRAP_S = 10242;
pub const GL_TEXTURE_WRAP_T = 10243;
pub const GL_TEXTURE0 = 33984;
pub const GL_TEXTURE1 = 33985;
pub const GL_TEXTURE10 = 33994;
pub const GL_TEXTURE11 = 33995;
pub const GL_TEXTURE12 = 33996;
pub const GL_TEXTURE13 = 33997;
pub const GL_TEXTURE14 = 33998;
pub const GL_TEXTURE15 = 33999;
pub const GL_TEXTURE16 = 34000;
pub const GL_TEXTURE17 = 34001;
pub const GL_TEXTURE18 = 34002;
pub const GL_TEXTURE19 = 34003;
pub const GL_TEXTURE2 = 33986;
pub const GL_TEXTURE20 = 34004;
pub const GL_TEXTURE21 = 34005;
pub const GL_TEXTURE22 = 34006;
pub const GL_TEXTURE23 = 34007;
pub const GL_TEXTURE24 = 34008;
pub const GL_TEXTURE25 = 34009;
pub const GL_TEXTURE26 = 34010;
pub const GL_TEXTURE27 = 34011;
pub const GL_TEXTURE28 = 34012;
pub const GL_TEXTURE29 = 34013;
pub const GL_TEXTURE3 = 33987;
pub const GL_TEXTURE30 = 34014;
pub const GL_TEXTURE31 = 34015;
pub const GL_TEXTURE4 = 33988;
pub const GL_TEXTURE5 = 33989;
pub const GL_TEXTURE6 = 33990;
pub const GL_TEXTURE7 = 33991;
pub const GL_TEXTURE8 = 33992;
pub const GL_TEXTURE9 = 33993;
pub const GL_TILING_TYPES_EXT = 38275;
pub const GL_TIME_ELAPSED_EXT = 35007;
pub const GL_TIMEOUT_EXPIRED_APPLE = 37147;
pub const GL_TIMEOUT_IGNORED_APPLE = c_ulonglong(18446744073709551615);
pub const GL_TIMESTAMP_EXT = 36392;
pub const GL_TRANSFORM_FEEDBACK = 36386;
pub const GL_TRANSLATE_2D_NV = 37008;
pub const GL_TRANSLATE_3D_NV = 37009;
pub const GL_TRANSLATE_X_NV = 37006;
pub const GL_TRANSLATE_Y_NV = 37007;
pub const GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 37792;
pub const GL_TRANSPOSE_AFFINE_2D_NV = 37014;
pub const GL_TRANSPOSE_AFFINE_3D_NV = 37016;
pub const GL_TRIANGLE_FAN = 6;
pub const GL_TRIANGLE_STRIP = 5;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13;
pub const GL_TRIANGLE_STRIP_ADJACENCY_OES = 13;
pub const GL_TRIANGLES = 4;
pub const GL_TRIANGLES_ADJACENCY_EXT = 12;
pub const GL_TRIANGLES_ADJACENCY_OES = 12;
pub const GL_TRIANGULAR_NV = 37029;
pub const GL_TRUE = 1;
pub const GL_UNCORRELATED_NV = 37506;
pub const GL_UNDEFINED_VERTEX_EXT = 33376;
pub const GL_UNDEFINED_VERTEX_OES = 33376;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 38300;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 38301;
pub const GL_UNKNOWN_CONTEXT_RESET_EXT = 33365;
pub const GL_UNKNOWN_CONTEXT_RESET_KHR = 33365;
pub const GL_UNPACK_ALIGNMENT = 3317;
pub const GL_UNPACK_ROW_LENGTH_EXT = 3314;
pub const GL_UNPACK_SKIP_PIXELS_EXT = 3316;
pub const GL_UNPACK_SKIP_ROWS_EXT = 3315;
pub const GL_UNSIGNALED_APPLE = 37144;
pub const GL_UNSIGNED_BYTE = 5121;
pub const GL_UNSIGNED_INT = 5125;
pub const GL_UNSIGNED_INT_10_10_10_2_OES = 36342;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 35899;
pub const GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 33640;
pub const GL_UNSIGNED_INT_24_8_OES = 34042;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 35902;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 36967;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 36970;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37133;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 36312;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36879;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 36879;
pub const GL_UNSIGNED_INT16_NV = 36848;
pub const GL_UNSIGNED_INT16_VEC2_NV = 36849;
pub const GL_UNSIGNED_INT16_VEC3_NV = 36850;
pub const GL_UNSIGNED_INT16_VEC4_NV = 36851;
pub const GL_UNSIGNED_INT64_AMD = 35778;
pub const GL_UNSIGNED_INT64_NV = 5135;
pub const GL_UNSIGNED_INT64_VEC2_NV = 36853;
pub const GL_UNSIGNED_INT64_VEC3_NV = 36854;
pub const GL_UNSIGNED_INT64_VEC4_NV = 36855;
pub const GL_UNSIGNED_INT8_NV = 36844;
pub const GL_UNSIGNED_INT8_VEC2_NV = 36845;
pub const GL_UNSIGNED_INT8_VEC3_NV = 36846;
pub const GL_UNSIGNED_INT8_VEC4_NV = 36847;
pub const GL_UNSIGNED_NORMALIZED_EXT = 35863;
pub const GL_UNSIGNED_SHORT = 5123;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 33638;
pub const GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 33637;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 33637;
pub const GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
pub const GL_UNSIGNED_SHORT_5_6_5 = 33635;
pub const GL_UNSIGNED_SHORT_8_8_APPLE = 34234;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235;
pub const GL_UPPER_LEFT_EXT = 36002;
pub const GL_USE_MISSING_GLYPH_NV = 37034;
pub const GL_UTF16_NV = 37019;
pub const GL_UTF8_NV = 37018;
pub const GL_UUID_SIZE_EXT = 16;
pub const GL_VALIDATE_STATUS = 35715;
pub const GL_VENDOR = 7936;
pub const GL_VERSION = 7938;
pub const GL_VERTEX_ARRAY_BINDING_OES = 34229;
pub const GL_VERTEX_ARRAY_KHR = 32884;
pub const GL_VERTEX_ARRAY_OBJECT_EXT = 37204;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 35070;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 35070;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 35070;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;
pub const GL_VERTEX_SHADER = 35633;
pub const GL_VERTEX_SHADER_BIT_EXT = 1;
pub const GL_VERTICAL_LINE_TO_NV = 8;
pub const GL_VIEWPORT = 2978;
pub const GL_VIEWPORT_BOUNDS_RANGE_NV = 33373;
pub const GL_VIEWPORT_BOUNDS_RANGE_OES = 33373;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 33375;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 33375;
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = 37756;
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 37757;
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 37758;
pub const GL_VIEWPORT_SUBPIXEL_BITS_NV = 33372;
pub const GL_VIEWPORT_SUBPIXEL_BITS_OES = 33372;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 37719;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 37713;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 37715;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 37717;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 37718;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 37712;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 37714;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 37716;
pub const GL_VIEWPORT_SWIZZLE_W_NV = 37723;
pub const GL_VIEWPORT_SWIZZLE_X_NV = 37720;
pub const GL_VIEWPORT_SWIZZLE_Y_NV = 37721;
pub const GL_VIEWPORT_SWIZZLE_Z_NV = 37722;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 37287;
pub const GL_VIRTUAL_PAGE_SIZE_X_EXT = 37269;
pub const GL_VIRTUAL_PAGE_SIZE_Y_EXT = 37270;
pub const GL_VIRTUAL_PAGE_SIZE_Z_EXT = 37271;
pub const GL_VIV_shader_binary = 1;
pub const GL_VIVIDLIGHT_NV = 37542;
pub const GL_WAIT_FAILED_APPLE = 37149;
pub const GL_WEIGHTED_AVERAGE_EXT = 37735;
pub const GL_WINDOW_RECTANGLE_EXT = 36626;
pub const GL_WINDOW_RECTANGLE_MODE_EXT = 36627;
pub const GL_WRITE_ONLY_OES = 35001;
pub const GL_WRITEONLY_RENDERING_QCOM = 34851;
pub const GL_XOR_NV = 5382;
pub const GL_Z400_BINARY_AMD = 34624;
pub const GL_ZERO = 0;
pub const GL_ZERO_TO_ONE_EXT = 37727;

var glBlendBarrierKHR_impl : PFNGLBLENDBARRIERKHRPROC = undefined;
var glDebugMessageControlKHR_impl : PFNGLDEBUGMESSAGECONTROLKHRPROC = undefined;
var glDebugMessageInsertKHR_impl : PFNGLDEBUGMESSAGEINSERTKHRPROC = undefined;
var glDebugMessageCallbackKHR_impl : PFNGLDEBUGMESSAGECALLBACKKHRPROC = undefined;
var glGetDebugMessageLogKHR_impl : PFNGLGETDEBUGMESSAGELOGKHRPROC = undefined;
var glPushDebugGroupKHR_impl : PFNGLPUSHDEBUGGROUPKHRPROC = undefined;
var glPopDebugGroupKHR_impl : PFNGLPOPDEBUGGROUPKHRPROC = undefined;
var glObjectLabelKHR_impl : PFNGLOBJECTLABELKHRPROC = undefined;
var glGetObjectLabelKHR_impl : PFNGLGETOBJECTLABELKHRPROC = undefined;
var glObjectPtrLabelKHR_impl : PFNGLOBJECTPTRLABELKHRPROC = undefined;
var glGetObjectPtrLabelKHR_impl : PFNGLGETOBJECTPTRLABELKHRPROC = undefined;
var glGetPointervKHR_impl : PFNGLGETPOINTERVKHRPROC = undefined;
var glMaxShaderCompilerThreadsKHR_impl : PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = undefined;
var glGetGraphicsResetStatusKHR_impl : PFNGLGETGRAPHICSRESETSTATUSKHRPROC = undefined;
var glReadnPixelsKHR_impl : PFNGLREADNPIXELSKHRPROC = undefined;
var glGetnUniformfvKHR_impl : PFNGLGETNUNIFORMFVKHRPROC = undefined;
var glGetnUniformivKHR_impl : PFNGLGETNUNIFORMIVKHRPROC = undefined;
var glGetnUniformuivKHR_impl : PFNGLGETNUNIFORMUIVKHRPROC = undefined;
var glEGLImageTargetTexture2DOES_impl : PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = undefined;
var glEGLImageTargetRenderbufferStorageOES_impl : PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = undefined;
var glCopyImageSubDataOES_impl : PFNGLCOPYIMAGESUBDATAOESPROC = undefined;
var glEnableiOES_impl : PFNGLENABLEIOESPROC = undefined;
var glDisableiOES_impl : PFNGLDISABLEIOESPROC = undefined;
var glBlendEquationiOES_impl : PFNGLBLENDEQUATIONIOESPROC = undefined;
var glBlendEquationSeparateiOES_impl : PFNGLBLENDEQUATIONSEPARATEIOESPROC = undefined;
var glBlendFunciOES_impl : PFNGLBLENDFUNCIOESPROC = undefined;
var glBlendFuncSeparateiOES_impl : PFNGLBLENDFUNCSEPARATEIOESPROC = undefined;
var glColorMaskiOES_impl : PFNGLCOLORMASKIOESPROC = undefined;
var glIsEnablediOES_impl : PFNGLISENABLEDIOESPROC = undefined;
var glDrawElementsBaseVertexOES_impl : PFNGLDRAWELEMENTSBASEVERTEXOESPROC = undefined;
var glDrawRangeElementsBaseVertexOES_impl : PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC = undefined;
var glDrawElementsInstancedBaseVertexOES_impl : PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC = undefined;
var glMultiDrawElementsBaseVertexEXT_impl : PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC = undefined;
var glFramebufferTextureOES_impl : PFNGLFRAMEBUFFERTEXTUREOESPROC = undefined;
var glGetProgramBinaryOES_impl : PFNGLGETPROGRAMBINARYOESPROC = undefined;
var glProgramBinaryOES_impl : PFNGLPROGRAMBINARYOESPROC = undefined;
var glMapBufferOES_impl : PFNGLMAPBUFFEROESPROC = undefined;
var glUnmapBufferOES_impl : PFNGLUNMAPBUFFEROESPROC = undefined;
var glGetBufferPointervOES_impl : PFNGLGETBUFFERPOINTERVOESPROC = undefined;
var glPrimitiveBoundingBoxOES_impl : PFNGLPRIMITIVEBOUNDINGBOXOESPROC = undefined;
var glMinSampleShadingOES_impl : PFNGLMINSAMPLESHADINGOESPROC = undefined;
var glPatchParameteriOES_impl : PFNGLPATCHPARAMETERIOESPROC = undefined;
var glTexImage3DOES_impl : PFNGLTEXIMAGE3DOESPROC = undefined;
var glTexSubImage3DOES_impl : PFNGLTEXSUBIMAGE3DOESPROC = undefined;
var glCopyTexSubImage3DOES_impl : PFNGLCOPYTEXSUBIMAGE3DOESPROC = undefined;
var glCompressedTexImage3DOES_impl : PFNGLCOMPRESSEDTEXIMAGE3DOESPROC = undefined;
var glCompressedTexSubImage3DOES_impl : PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC = undefined;
var glFramebufferTexture3DOES_impl : PFNGLFRAMEBUFFERTEXTURE3DOESPROC = undefined;
var glTexParameterIivOES_impl : PFNGLTEXPARAMETERIIVOESPROC = undefined;
var glTexParameterIuivOES_impl : PFNGLTEXPARAMETERIUIVOESPROC = undefined;
var glGetTexParameterIivOES_impl : PFNGLGETTEXPARAMETERIIVOESPROC = undefined;
var glGetTexParameterIuivOES_impl : PFNGLGETTEXPARAMETERIUIVOESPROC = undefined;
var glSamplerParameterIivOES_impl : PFNGLSAMPLERPARAMETERIIVOESPROC = undefined;
var glSamplerParameterIuivOES_impl : PFNGLSAMPLERPARAMETERIUIVOESPROC = undefined;
var glGetSamplerParameterIivOES_impl : PFNGLGETSAMPLERPARAMETERIIVOESPROC = undefined;
var glGetSamplerParameterIuivOES_impl : PFNGLGETSAMPLERPARAMETERIUIVOESPROC = undefined;
var glTexBufferOES_impl : PFNGLTEXBUFFEROESPROC = undefined;
var glTexBufferRangeOES_impl : PFNGLTEXBUFFERRANGEOESPROC = undefined;
var glTexStorage3DMultisampleOES_impl : PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC = undefined;
var glTextureViewOES_impl : PFNGLTEXTUREVIEWOESPROC = undefined;
var glBindVertexArrayOES_impl : PFNGLBINDVERTEXARRAYOESPROC = undefined;
var glDeleteVertexArraysOES_impl : PFNGLDELETEVERTEXARRAYSOESPROC = undefined;
var glGenVertexArraysOES_impl : PFNGLGENVERTEXARRAYSOESPROC = undefined;
var glIsVertexArrayOES_impl : PFNGLISVERTEXARRAYOESPROC = undefined;
var glViewportArrayvOES_impl : PFNGLVIEWPORTARRAYVOESPROC = undefined;
var glViewportIndexedfOES_impl : PFNGLVIEWPORTINDEXEDFOESPROC = undefined;
var glViewportIndexedfvOES_impl : PFNGLVIEWPORTINDEXEDFVOESPROC = undefined;
var glScissorArrayvOES_impl : PFNGLSCISSORARRAYVOESPROC = undefined;
var glScissorIndexedOES_impl : PFNGLSCISSORINDEXEDOESPROC = undefined;
var glScissorIndexedvOES_impl : PFNGLSCISSORINDEXEDVOESPROC = undefined;
var glDepthRangeArrayfvOES_impl : PFNGLDEPTHRANGEARRAYFVOESPROC = undefined;
var glDepthRangeIndexedfOES_impl : PFNGLDEPTHRANGEINDEXEDFOESPROC = undefined;
var glGetFloati_vOES_impl : PFNGLGETFLOATI_VOESPROC = undefined;
var glRenderbufferStorageMultisampleAdvancedAMD_impl : PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = undefined;
var glNamedRenderbufferStorageMultisampleAdvancedAMD_impl : PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = undefined;
var glGetPerfMonitorGroupsAMD_impl : PFNGLGETPERFMONITORGROUPSAMDPROC = undefined;
var glGetPerfMonitorCountersAMD_impl : PFNGLGETPERFMONITORCOUNTERSAMDPROC = undefined;
var glGetPerfMonitorGroupStringAMD_impl : PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = undefined;
var glGetPerfMonitorCounterStringAMD_impl : PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = undefined;
var glGetPerfMonitorCounterInfoAMD_impl : PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = undefined;
var glGenPerfMonitorsAMD_impl : PFNGLGENPERFMONITORSAMDPROC = undefined;
var glDeletePerfMonitorsAMD_impl : PFNGLDELETEPERFMONITORSAMDPROC = undefined;
var glSelectPerfMonitorCountersAMD_impl : PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = undefined;
var glBeginPerfMonitorAMD_impl : PFNGLBEGINPERFMONITORAMDPROC = undefined;
var glEndPerfMonitorAMD_impl : PFNGLENDPERFMONITORAMDPROC = undefined;
var glGetPerfMonitorCounterDataAMD_impl : PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = undefined;
var glBlitFramebufferANGLE_impl : PFNGLBLITFRAMEBUFFERANGLEPROC = undefined;
var glRenderbufferStorageMultisampleANGLE_impl : PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC = undefined;
var glDrawArraysInstancedANGLE_impl : PFNGLDRAWARRAYSINSTANCEDANGLEPROC = undefined;
var glDrawElementsInstancedANGLE_impl : PFNGLDRAWELEMENTSINSTANCEDANGLEPROC = undefined;
var glVertexAttribDivisorANGLE_impl : PFNGLVERTEXATTRIBDIVISORANGLEPROC = undefined;
var glGetTranslatedShaderSourceANGLE_impl : PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC = undefined;
var glCopyTextureLevelsAPPLE_impl : PFNGLCOPYTEXTURELEVELSAPPLEPROC = undefined;
var glRenderbufferStorageMultisampleAPPLE_impl : PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC = undefined;
var glResolveMultisampleFramebufferAPPLE_impl : PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC = undefined;
var glFenceSyncAPPLE_impl : PFNGLFENCESYNCAPPLEPROC = undefined;
var glIsSyncAPPLE_impl : PFNGLISSYNCAPPLEPROC = undefined;
var glDeleteSyncAPPLE_impl : PFNGLDELETESYNCAPPLEPROC = undefined;
var glClientWaitSyncAPPLE_impl : PFNGLCLIENTWAITSYNCAPPLEPROC = undefined;
var glWaitSyncAPPLE_impl : PFNGLWAITSYNCAPPLEPROC = undefined;
var glGetInteger64vAPPLE_impl : PFNGLGETINTEGER64VAPPLEPROC = undefined;
var glGetSyncivAPPLE_impl : PFNGLGETSYNCIVAPPLEPROC = undefined;
var glEGLImageTargetTexStorageEXT_impl : PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = undefined;
var glEGLImageTargetTextureStorageEXT_impl : PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = undefined;
var glDrawArraysInstancedBaseInstanceEXT_impl : PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC = undefined;
var glDrawElementsInstancedBaseInstanceEXT_impl : PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC = undefined;
var glDrawElementsInstancedBaseVertexBaseInstanceEXT_impl : PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC = undefined;
var glBindFragDataLocationIndexedEXT_impl : PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC = undefined;
var glBindFragDataLocationEXT_impl : PFNGLBINDFRAGDATALOCATIONEXTPROC = undefined;
var glGetProgramResourceLocationIndexEXT_impl : PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC = undefined;
var glGetFragDataIndexEXT_impl : PFNGLGETFRAGDATAINDEXEXTPROC = undefined;
var glBufferStorageEXT_impl : PFNGLBUFFERSTORAGEEXTPROC = undefined;
var glClearTexImageEXT_impl : PFNGLCLEARTEXIMAGEEXTPROC = undefined;
var glClearTexSubImageEXT_impl : PFNGLCLEARTEXSUBIMAGEEXTPROC = undefined;
var glClipControlEXT_impl : PFNGLCLIPCONTROLEXTPROC = undefined;
var glCopyImageSubDataEXT_impl : PFNGLCOPYIMAGESUBDATAEXTPROC = undefined;
var glLabelObjectEXT_impl : PFNGLLABELOBJECTEXTPROC = undefined;
var glGetObjectLabelEXT_impl : PFNGLGETOBJECTLABELEXTPROC = undefined;
var glInsertEventMarkerEXT_impl : PFNGLINSERTEVENTMARKEREXTPROC = undefined;
var glPushGroupMarkerEXT_impl : PFNGLPUSHGROUPMARKEREXTPROC = undefined;
var glPopGroupMarkerEXT_impl : PFNGLPOPGROUPMARKEREXTPROC = undefined;
var glDiscardFramebufferEXT_impl : PFNGLDISCARDFRAMEBUFFEREXTPROC = undefined;
var glGenQueriesEXT_impl : PFNGLGENQUERIESEXTPROC = undefined;
var glDeleteQueriesEXT_impl : PFNGLDELETEQUERIESEXTPROC = undefined;
var glIsQueryEXT_impl : PFNGLISQUERYEXTPROC = undefined;
var glBeginQueryEXT_impl : PFNGLBEGINQUERYEXTPROC = undefined;
var glEndQueryEXT_impl : PFNGLENDQUERYEXTPROC = undefined;
var glQueryCounterEXT_impl : PFNGLQUERYCOUNTEREXTPROC = undefined;
var glGetQueryivEXT_impl : PFNGLGETQUERYIVEXTPROC = undefined;
var glGetQueryObjectivEXT_impl : PFNGLGETQUERYOBJECTIVEXTPROC = undefined;
var glGetQueryObjectuivEXT_impl : PFNGLGETQUERYOBJECTUIVEXTPROC = undefined;
var glGetQueryObjecti64vEXT_impl : PFNGLGETQUERYOBJECTI64VEXTPROC = undefined;
var glGetQueryObjectui64vEXT_impl : PFNGLGETQUERYOBJECTUI64VEXTPROC = undefined;
var glDrawBuffersEXT_impl : PFNGLDRAWBUFFERSEXTPROC = undefined;
var glEnableiEXT_impl : PFNGLENABLEIEXTPROC = undefined;
var glDisableiEXT_impl : PFNGLDISABLEIEXTPROC = undefined;
var glBlendEquationiEXT_impl : PFNGLBLENDEQUATIONIEXTPROC = undefined;
var glBlendEquationSeparateiEXT_impl : PFNGLBLENDEQUATIONSEPARATEIEXTPROC = undefined;
var glBlendFunciEXT_impl : PFNGLBLENDFUNCIEXTPROC = undefined;
var glBlendFuncSeparateiEXT_impl : PFNGLBLENDFUNCSEPARATEIEXTPROC = undefined;
var glColorMaskiEXT_impl : PFNGLCOLORMASKIEXTPROC = undefined;
var glIsEnablediEXT_impl : PFNGLISENABLEDIEXTPROC = undefined;
var glDrawElementsBaseVertexEXT_impl : PFNGLDRAWELEMENTSBASEVERTEXEXTPROC = undefined;
var glDrawRangeElementsBaseVertexEXT_impl : PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC = undefined;
var glDrawElementsInstancedBaseVertexEXT_impl : PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC = undefined;
var glDrawArraysInstancedEXT_impl : PFNGLDRAWARRAYSINSTANCEDEXTPROC = undefined;
var glDrawElementsInstancedEXT_impl : PFNGLDRAWELEMENTSINSTANCEDEXTPROC = undefined;
var glDrawTransformFeedbackEXT_impl : PFNGLDRAWTRANSFORMFEEDBACKEXTPROC = undefined;
var glDrawTransformFeedbackInstancedEXT_impl : PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC = undefined;
var glBufferStorageExternalEXT_impl : PFNGLBUFFERSTORAGEEXTERNALEXTPROC = undefined;
var glNamedBufferStorageExternalEXT_impl : PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = undefined;
var glFramebufferTextureEXT_impl : PFNGLFRAMEBUFFERTEXTUREEXTPROC = undefined;
var glVertexAttribDivisorEXT_impl : PFNGLVERTEXATTRIBDIVISOREXTPROC = undefined;
var glMapBufferRangeEXT_impl : PFNGLMAPBUFFERRANGEEXTPROC = undefined;
var glFlushMappedBufferRangeEXT_impl : PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC = undefined;
var glGetUnsignedBytevEXT_impl : PFNGLGETUNSIGNEDBYTEVEXTPROC = undefined;
var glGetUnsignedBytei_vEXT_impl : PFNGLGETUNSIGNEDBYTEI_VEXTPROC = undefined;
var glDeleteMemoryObjectsEXT_impl : PFNGLDELETEMEMORYOBJECTSEXTPROC = undefined;
var glIsMemoryObjectEXT_impl : PFNGLISMEMORYOBJECTEXTPROC = undefined;
var glCreateMemoryObjectsEXT_impl : PFNGLCREATEMEMORYOBJECTSEXTPROC = undefined;
var glMemoryObjectParameterivEXT_impl : PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = undefined;
var glGetMemoryObjectParameterivEXT_impl : PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = undefined;
var glTexStorageMem2DEXT_impl : PFNGLTEXSTORAGEMEM2DEXTPROC = undefined;
var glTexStorageMem2DMultisampleEXT_impl : PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = undefined;
var glTexStorageMem3DEXT_impl : PFNGLTEXSTORAGEMEM3DEXTPROC = undefined;
var glTexStorageMem3DMultisampleEXT_impl : PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = undefined;
var glBufferStorageMemEXT_impl : PFNGLBUFFERSTORAGEMEMEXTPROC = undefined;
var glTextureStorageMem2DEXT_impl : PFNGLTEXTURESTORAGEMEM2DEXTPROC = undefined;
var glTextureStorageMem2DMultisampleEXT_impl : PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = undefined;
var glTextureStorageMem3DEXT_impl : PFNGLTEXTURESTORAGEMEM3DEXTPROC = undefined;
var glTextureStorageMem3DMultisampleEXT_impl : PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = undefined;
var glNamedBufferStorageMemEXT_impl : PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = undefined;
var glImportMemoryFdEXT_impl : PFNGLIMPORTMEMORYFDEXTPROC = undefined;
var glImportMemoryWin32HandleEXT_impl : PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = undefined;
var glImportMemoryWin32NameEXT_impl : PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = undefined;
var glMultiDrawArraysEXT_impl : PFNGLMULTIDRAWARRAYSEXTPROC = undefined;
var glMultiDrawElementsEXT_impl : PFNGLMULTIDRAWELEMENTSEXTPROC = undefined;
var glMultiDrawArraysIndirectEXT_impl : PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC = undefined;
var glMultiDrawElementsIndirectEXT_impl : PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC = undefined;
var glRenderbufferStorageMultisampleEXT_impl : PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = undefined;
var glFramebufferTexture2DMultisampleEXT_impl : PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC = undefined;
var glReadBufferIndexedEXT_impl : PFNGLREADBUFFERINDEXEDEXTPROC = undefined;
var glDrawBuffersIndexedEXT_impl : PFNGLDRAWBUFFERSINDEXEDEXTPROC = undefined;
var glGetIntegeri_vEXT_impl : PFNGLGETINTEGERI_VEXTPROC = undefined;
var glPolygonOffsetClampEXT_impl : PFNGLPOLYGONOFFSETCLAMPEXTPROC = undefined;
var glPrimitiveBoundingBoxEXT_impl : PFNGLPRIMITIVEBOUNDINGBOXEXTPROC = undefined;
var glRasterSamplesEXT_impl : PFNGLRASTERSAMPLESEXTPROC = undefined;
var glGetGraphicsResetStatusEXT_impl : PFNGLGETGRAPHICSRESETSTATUSEXTPROC = undefined;
var glReadnPixelsEXT_impl : PFNGLREADNPIXELSEXTPROC = undefined;
var glGetnUniformfvEXT_impl : PFNGLGETNUNIFORMFVEXTPROC = undefined;
var glGetnUniformivEXT_impl : PFNGLGETNUNIFORMIVEXTPROC = undefined;
var glGenSemaphoresEXT_impl : PFNGLGENSEMAPHORESEXTPROC = undefined;
var glDeleteSemaphoresEXT_impl : PFNGLDELETESEMAPHORESEXTPROC = undefined;
var glIsSemaphoreEXT_impl : PFNGLISSEMAPHOREEXTPROC = undefined;
var glSemaphoreParameterui64vEXT_impl : PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = undefined;
var glGetSemaphoreParameterui64vEXT_impl : PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = undefined;
var glWaitSemaphoreEXT_impl : PFNGLWAITSEMAPHOREEXTPROC = undefined;
var glSignalSemaphoreEXT_impl : PFNGLSIGNALSEMAPHOREEXTPROC = undefined;
var glImportSemaphoreFdEXT_impl : PFNGLIMPORTSEMAPHOREFDEXTPROC = undefined;
var glImportSemaphoreWin32HandleEXT_impl : PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = undefined;
var glImportSemaphoreWin32NameEXT_impl : PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = undefined;
var glActiveShaderProgramEXT_impl : PFNGLACTIVESHADERPROGRAMEXTPROC = undefined;
var glBindProgramPipelineEXT_impl : PFNGLBINDPROGRAMPIPELINEEXTPROC = undefined;
var glCreateShaderProgramvEXT_impl : PFNGLCREATESHADERPROGRAMVEXTPROC = undefined;
var glDeleteProgramPipelinesEXT_impl : PFNGLDELETEPROGRAMPIPELINESEXTPROC = undefined;
var glGenProgramPipelinesEXT_impl : PFNGLGENPROGRAMPIPELINESEXTPROC = undefined;
var glGetProgramPipelineInfoLogEXT_impl : PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC = undefined;
var glGetProgramPipelineivEXT_impl : PFNGLGETPROGRAMPIPELINEIVEXTPROC = undefined;
var glIsProgramPipelineEXT_impl : PFNGLISPROGRAMPIPELINEEXTPROC = undefined;
var glProgramParameteriEXT_impl : PFNGLPROGRAMPARAMETERIEXTPROC = undefined;
var glProgramUniform1fEXT_impl : PFNGLPROGRAMUNIFORM1FEXTPROC = undefined;
var glProgramUniform1fvEXT_impl : PFNGLPROGRAMUNIFORM1FVEXTPROC = undefined;
var glProgramUniform1iEXT_impl : PFNGLPROGRAMUNIFORM1IEXTPROC = undefined;
var glProgramUniform1ivEXT_impl : PFNGLPROGRAMUNIFORM1IVEXTPROC = undefined;
var glProgramUniform2fEXT_impl : PFNGLPROGRAMUNIFORM2FEXTPROC = undefined;
var glProgramUniform2fvEXT_impl : PFNGLPROGRAMUNIFORM2FVEXTPROC = undefined;
var glProgramUniform2iEXT_impl : PFNGLPROGRAMUNIFORM2IEXTPROC = undefined;
var glProgramUniform2ivEXT_impl : PFNGLPROGRAMUNIFORM2IVEXTPROC = undefined;
var glProgramUniform3fEXT_impl : PFNGLPROGRAMUNIFORM3FEXTPROC = undefined;
var glProgramUniform3fvEXT_impl : PFNGLPROGRAMUNIFORM3FVEXTPROC = undefined;
var glProgramUniform3iEXT_impl : PFNGLPROGRAMUNIFORM3IEXTPROC = undefined;
var glProgramUniform3ivEXT_impl : PFNGLPROGRAMUNIFORM3IVEXTPROC = undefined;
var glProgramUniform4fEXT_impl : PFNGLPROGRAMUNIFORM4FEXTPROC = undefined;
var glProgramUniform4fvEXT_impl : PFNGLPROGRAMUNIFORM4FVEXTPROC = undefined;
var glProgramUniform4iEXT_impl : PFNGLPROGRAMUNIFORM4IEXTPROC = undefined;
var glProgramUniform4ivEXT_impl : PFNGLPROGRAMUNIFORM4IVEXTPROC = undefined;
var glProgramUniformMatrix2fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = undefined;
var glProgramUniformMatrix3fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = undefined;
var glProgramUniformMatrix4fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = undefined;
var glUseProgramStagesEXT_impl : PFNGLUSEPROGRAMSTAGESEXTPROC = undefined;
var glValidateProgramPipelineEXT_impl : PFNGLVALIDATEPROGRAMPIPELINEEXTPROC = undefined;
var glProgramUniform1uiEXT_impl : PFNGLPROGRAMUNIFORM1UIEXTPROC = undefined;
var glProgramUniform2uiEXT_impl : PFNGLPROGRAMUNIFORM2UIEXTPROC = undefined;
var glProgramUniform3uiEXT_impl : PFNGLPROGRAMUNIFORM3UIEXTPROC = undefined;
var glProgramUniform4uiEXT_impl : PFNGLPROGRAMUNIFORM4UIEXTPROC = undefined;
var glProgramUniform1uivEXT_impl : PFNGLPROGRAMUNIFORM1UIVEXTPROC = undefined;
var glProgramUniform2uivEXT_impl : PFNGLPROGRAMUNIFORM2UIVEXTPROC = undefined;
var glProgramUniform3uivEXT_impl : PFNGLPROGRAMUNIFORM3UIVEXTPROC = undefined;
var glProgramUniform4uivEXT_impl : PFNGLPROGRAMUNIFORM4UIVEXTPROC = undefined;
var glProgramUniformMatrix2x3fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = undefined;
var glProgramUniformMatrix3x2fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = undefined;
var glProgramUniformMatrix2x4fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = undefined;
var glProgramUniformMatrix4x2fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = undefined;
var glProgramUniformMatrix3x4fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = undefined;
var glProgramUniformMatrix4x3fvEXT_impl : PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = undefined;
var glFramebufferFetchBarrierEXT_impl : PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = undefined;
var glFramebufferPixelLocalStorageSizeEXT_impl : PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = undefined;
var glGetFramebufferPixelLocalStorageSizeEXT_impl : PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = undefined;
var glClearPixelLocalStorageuiEXT_impl : PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC = undefined;
var glTexPageCommitmentEXT_impl : PFNGLTEXPAGECOMMITMENTEXTPROC = undefined;
var glPatchParameteriEXT_impl : PFNGLPATCHPARAMETERIEXTPROC = undefined;
var glTexParameterIivEXT_impl : PFNGLTEXPARAMETERIIVEXTPROC = undefined;
var glTexParameterIuivEXT_impl : PFNGLTEXPARAMETERIUIVEXTPROC = undefined;
var glGetTexParameterIivEXT_impl : PFNGLGETTEXPARAMETERIIVEXTPROC = undefined;
var glGetTexParameterIuivEXT_impl : PFNGLGETTEXPARAMETERIUIVEXTPROC = undefined;
var glSamplerParameterIivEXT_impl : PFNGLSAMPLERPARAMETERIIVEXTPROC = undefined;
var glSamplerParameterIuivEXT_impl : PFNGLSAMPLERPARAMETERIUIVEXTPROC = undefined;
var glGetSamplerParameterIivEXT_impl : PFNGLGETSAMPLERPARAMETERIIVEXTPROC = undefined;
var glGetSamplerParameterIuivEXT_impl : PFNGLGETSAMPLERPARAMETERIUIVEXTPROC = undefined;
var glTexBufferEXT_impl : PFNGLTEXBUFFEREXTPROC = undefined;
var glTexBufferRangeEXT_impl : PFNGLTEXBUFFERRANGEEXTPROC = undefined;
var glTexStorage1DEXT_impl : PFNGLTEXSTORAGE1DEXTPROC = undefined;
var glTexStorage2DEXT_impl : PFNGLTEXSTORAGE2DEXTPROC = undefined;
var glTexStorage3DEXT_impl : PFNGLTEXSTORAGE3DEXTPROC = undefined;
var glTextureStorage1DEXT_impl : PFNGLTEXTURESTORAGE1DEXTPROC = undefined;
var glTextureStorage2DEXT_impl : PFNGLTEXTURESTORAGE2DEXTPROC = undefined;
var glTextureStorage3DEXT_impl : PFNGLTEXTURESTORAGE3DEXTPROC = undefined;
var glTextureViewEXT_impl : PFNGLTEXTUREVIEWEXTPROC = undefined;
var glAcquireKeyedMutexWin32EXT_impl : PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = undefined;
var glReleaseKeyedMutexWin32EXT_impl : PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = undefined;
var glWindowRectanglesEXT_impl : PFNGLWINDOWRECTANGLESEXTPROC = undefined;
var glGetTextureHandleIMG_impl : PFNGLGETTEXTUREHANDLEIMGPROC = undefined;
var glGetTextureSamplerHandleIMG_impl : PFNGLGETTEXTURESAMPLERHANDLEIMGPROC = undefined;
var glUniformHandleui64IMG_impl : PFNGLUNIFORMHANDLEUI64IMGPROC = undefined;
var glUniformHandleui64vIMG_impl : PFNGLUNIFORMHANDLEUI64VIMGPROC = undefined;
var glProgramUniformHandleui64IMG_impl : PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC = undefined;
var glProgramUniformHandleui64vIMG_impl : PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC = undefined;
var glFramebufferTexture2DDownsampleIMG_impl : PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC = undefined;
var glFramebufferTextureLayerDownsampleIMG_impl : PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC = undefined;
var glRenderbufferStorageMultisampleIMG_impl : PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC = undefined;
var glFramebufferTexture2DMultisampleIMG_impl : PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC = undefined;
var glApplyFramebufferAttachmentCMAAINTEL_impl : PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = undefined;
var glBeginPerfQueryINTEL_impl : PFNGLBEGINPERFQUERYINTELPROC = undefined;
var glCreatePerfQueryINTEL_impl : PFNGLCREATEPERFQUERYINTELPROC = undefined;
var glDeletePerfQueryINTEL_impl : PFNGLDELETEPERFQUERYINTELPROC = undefined;
var glEndPerfQueryINTEL_impl : PFNGLENDPERFQUERYINTELPROC = undefined;
var glGetFirstPerfQueryIdINTEL_impl : PFNGLGETFIRSTPERFQUERYIDINTELPROC = undefined;
var glGetNextPerfQueryIdINTEL_impl : PFNGLGETNEXTPERFQUERYIDINTELPROC = undefined;
var glGetPerfCounterInfoINTEL_impl : PFNGLGETPERFCOUNTERINFOINTELPROC = undefined;
var glGetPerfQueryDataINTEL_impl : PFNGLGETPERFQUERYDATAINTELPROC = undefined;
var glGetPerfQueryIdByNameINTEL_impl : PFNGLGETPERFQUERYIDBYNAMEINTELPROC = undefined;
var glGetPerfQueryInfoINTEL_impl : PFNGLGETPERFQUERYINFOINTELPROC = undefined;
var glGetTextureHandleNV_impl : PFNGLGETTEXTUREHANDLENVPROC = undefined;
var glGetTextureSamplerHandleNV_impl : PFNGLGETTEXTURESAMPLERHANDLENVPROC = undefined;
var glMakeTextureHandleResidentNV_impl : PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = undefined;
var glMakeTextureHandleNonResidentNV_impl : PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = undefined;
var glGetImageHandleNV_impl : PFNGLGETIMAGEHANDLENVPROC = undefined;
var glMakeImageHandleResidentNV_impl : PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = undefined;
var glMakeImageHandleNonResidentNV_impl : PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = undefined;
var glUniformHandleui64NV_impl : PFNGLUNIFORMHANDLEUI64NVPROC = undefined;
var glUniformHandleui64vNV_impl : PFNGLUNIFORMHANDLEUI64VNVPROC = undefined;
var glProgramUniformHandleui64NV_impl : PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = undefined;
var glProgramUniformHandleui64vNV_impl : PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = undefined;
var glIsTextureHandleResidentNV_impl : PFNGLISTEXTUREHANDLERESIDENTNVPROC = undefined;
var glIsImageHandleResidentNV_impl : PFNGLISIMAGEHANDLERESIDENTNVPROC = undefined;
var glBlendParameteriNV_impl : PFNGLBLENDPARAMETERINVPROC = undefined;
var glBlendBarrierNV_impl : PFNGLBLENDBARRIERNVPROC = undefined;
var glViewportPositionWScaleNV_impl : PFNGLVIEWPORTPOSITIONWSCALENVPROC = undefined;
var glBeginConditionalRenderNV_impl : PFNGLBEGINCONDITIONALRENDERNVPROC = undefined;
var glEndConditionalRenderNV_impl : PFNGLENDCONDITIONALRENDERNVPROC = undefined;
var glSubpixelPrecisionBiasNV_impl : PFNGLSUBPIXELPRECISIONBIASNVPROC = undefined;
var glConservativeRasterParameteriNV_impl : PFNGLCONSERVATIVERASTERPARAMETERINVPROC = undefined;
var glCopyBufferSubDataNV_impl : PFNGLCOPYBUFFERSUBDATANVPROC = undefined;
var glCoverageMaskNV_impl : PFNGLCOVERAGEMASKNVPROC = undefined;
var glCoverageOperationNV_impl : PFNGLCOVERAGEOPERATIONNVPROC = undefined;
var glDrawBuffersNV_impl : PFNGLDRAWBUFFERSNVPROC = undefined;
var glDrawArraysInstancedNV_impl : PFNGLDRAWARRAYSINSTANCEDNVPROC = undefined;
var glDrawElementsInstancedNV_impl : PFNGLDRAWELEMENTSINSTANCEDNVPROC = undefined;
var glDrawVkImageNV_impl : PFNGLDRAWVKIMAGENVPROC = undefined;
var glGetVkProcAddrNV_impl : PFNGLGETVKPROCADDRNVPROC = undefined;
var glWaitVkSemaphoreNV_impl : PFNGLWAITVKSEMAPHORENVPROC = undefined;
var glSignalVkSemaphoreNV_impl : PFNGLSIGNALVKSEMAPHORENVPROC = undefined;
var glSignalVkFenceNV_impl : PFNGLSIGNALVKFENCENVPROC = undefined;
var glDeleteFencesNV_impl : PFNGLDELETEFENCESNVPROC = undefined;
var glGenFencesNV_impl : PFNGLGENFENCESNVPROC = undefined;
var glIsFenceNV_impl : PFNGLISFENCENVPROC = undefined;
var glTestFenceNV_impl : PFNGLTESTFENCENVPROC = undefined;
var glGetFenceivNV_impl : PFNGLGETFENCEIVNVPROC = undefined;
var glFinishFenceNV_impl : PFNGLFINISHFENCENVPROC = undefined;
var glSetFenceNV_impl : PFNGLSETFENCENVPROC = undefined;
var glFragmentCoverageColorNV_impl : PFNGLFRAGMENTCOVERAGECOLORNVPROC = undefined;
var glBlitFramebufferNV_impl : PFNGLBLITFRAMEBUFFERNVPROC = undefined;
var glCoverageModulationTableNV_impl : PFNGLCOVERAGEMODULATIONTABLENVPROC = undefined;
var glGetCoverageModulationTableNV_impl : PFNGLGETCOVERAGEMODULATIONTABLENVPROC = undefined;
var glCoverageModulationNV_impl : PFNGLCOVERAGEMODULATIONNVPROC = undefined;
var glRenderbufferStorageMultisampleNV_impl : PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC = undefined;
var glUniform1i64NV_impl : PFNGLUNIFORM1I64NVPROC = undefined;
var glUniform2i64NV_impl : PFNGLUNIFORM2I64NVPROC = undefined;
var glUniform3i64NV_impl : PFNGLUNIFORM3I64NVPROC = undefined;
var glUniform4i64NV_impl : PFNGLUNIFORM4I64NVPROC = undefined;
var glUniform1i64vNV_impl : PFNGLUNIFORM1I64VNVPROC = undefined;
var glUniform2i64vNV_impl : PFNGLUNIFORM2I64VNVPROC = undefined;
var glUniform3i64vNV_impl : PFNGLUNIFORM3I64VNVPROC = undefined;
var glUniform4i64vNV_impl : PFNGLUNIFORM4I64VNVPROC = undefined;
var glUniform1ui64NV_impl : PFNGLUNIFORM1UI64NVPROC = undefined;
var glUniform2ui64NV_impl : PFNGLUNIFORM2UI64NVPROC = undefined;
var glUniform3ui64NV_impl : PFNGLUNIFORM3UI64NVPROC = undefined;
var glUniform4ui64NV_impl : PFNGLUNIFORM4UI64NVPROC = undefined;
var glUniform1ui64vNV_impl : PFNGLUNIFORM1UI64VNVPROC = undefined;
var glUniform2ui64vNV_impl : PFNGLUNIFORM2UI64VNVPROC = undefined;
var glUniform3ui64vNV_impl : PFNGLUNIFORM3UI64VNVPROC = undefined;
var glUniform4ui64vNV_impl : PFNGLUNIFORM4UI64VNVPROC = undefined;
var glGetUniformi64vNV_impl : PFNGLGETUNIFORMI64VNVPROC = undefined;
var glProgramUniform1i64NV_impl : PFNGLPROGRAMUNIFORM1I64NVPROC = undefined;
var glProgramUniform2i64NV_impl : PFNGLPROGRAMUNIFORM2I64NVPROC = undefined;
var glProgramUniform3i64NV_impl : PFNGLPROGRAMUNIFORM3I64NVPROC = undefined;
var glProgramUniform4i64NV_impl : PFNGLPROGRAMUNIFORM4I64NVPROC = undefined;
var glProgramUniform1i64vNV_impl : PFNGLPROGRAMUNIFORM1I64VNVPROC = undefined;
var glProgramUniform2i64vNV_impl : PFNGLPROGRAMUNIFORM2I64VNVPROC = undefined;
var glProgramUniform3i64vNV_impl : PFNGLPROGRAMUNIFORM3I64VNVPROC = undefined;
var glProgramUniform4i64vNV_impl : PFNGLPROGRAMUNIFORM4I64VNVPROC = undefined;
var glProgramUniform1ui64NV_impl : PFNGLPROGRAMUNIFORM1UI64NVPROC = undefined;
var glProgramUniform2ui64NV_impl : PFNGLPROGRAMUNIFORM2UI64NVPROC = undefined;
var glProgramUniform3ui64NV_impl : PFNGLPROGRAMUNIFORM3UI64NVPROC = undefined;
var glProgramUniform4ui64NV_impl : PFNGLPROGRAMUNIFORM4UI64NVPROC = undefined;
var glProgramUniform1ui64vNV_impl : PFNGLPROGRAMUNIFORM1UI64VNVPROC = undefined;
var glProgramUniform2ui64vNV_impl : PFNGLPROGRAMUNIFORM2UI64VNVPROC = undefined;
var glProgramUniform3ui64vNV_impl : PFNGLPROGRAMUNIFORM3UI64VNVPROC = undefined;
var glProgramUniform4ui64vNV_impl : PFNGLPROGRAMUNIFORM4UI64VNVPROC = undefined;
var glVertexAttribDivisorNV_impl : PFNGLVERTEXATTRIBDIVISORNVPROC = undefined;
var glGetInternalformatSampleivNV_impl : PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = undefined;
var glUniformMatrix2x3fvNV_impl : PFNGLUNIFORMMATRIX2X3FVNVPROC = undefined;
var glUniformMatrix3x2fvNV_impl : PFNGLUNIFORMMATRIX3X2FVNVPROC = undefined;
var glUniformMatrix2x4fvNV_impl : PFNGLUNIFORMMATRIX2X4FVNVPROC = undefined;
var glUniformMatrix4x2fvNV_impl : PFNGLUNIFORMMATRIX4X2FVNVPROC = undefined;
var glUniformMatrix3x4fvNV_impl : PFNGLUNIFORMMATRIX3X4FVNVPROC = undefined;
var glUniformMatrix4x3fvNV_impl : PFNGLUNIFORMMATRIX4X3FVNVPROC = undefined;
var glGenPathsNV_impl : PFNGLGENPATHSNVPROC = undefined;
var glDeletePathsNV_impl : PFNGLDELETEPATHSNVPROC = undefined;
var glIsPathNV_impl : PFNGLISPATHNVPROC = undefined;
var glPathCommandsNV_impl : PFNGLPATHCOMMANDSNVPROC = undefined;
var glPathCoordsNV_impl : PFNGLPATHCOORDSNVPROC = undefined;
var glPathSubCommandsNV_impl : PFNGLPATHSUBCOMMANDSNVPROC = undefined;
var glPathSubCoordsNV_impl : PFNGLPATHSUBCOORDSNVPROC = undefined;
var glPathStringNV_impl : PFNGLPATHSTRINGNVPROC = undefined;
var glPathGlyphsNV_impl : PFNGLPATHGLYPHSNVPROC = undefined;
var glPathGlyphRangeNV_impl : PFNGLPATHGLYPHRANGENVPROC = undefined;
var glWeightPathsNV_impl : PFNGLWEIGHTPATHSNVPROC = undefined;
var glCopyPathNV_impl : PFNGLCOPYPATHNVPROC = undefined;
var glInterpolatePathsNV_impl : PFNGLINTERPOLATEPATHSNVPROC = undefined;
var glTransformPathNV_impl : PFNGLTRANSFORMPATHNVPROC = undefined;
var glPathParameterivNV_impl : PFNGLPATHPARAMETERIVNVPROC = undefined;
var glPathParameteriNV_impl : PFNGLPATHPARAMETERINVPROC = undefined;
var glPathParameterfvNV_impl : PFNGLPATHPARAMETERFVNVPROC = undefined;
var glPathParameterfNV_impl : PFNGLPATHPARAMETERFNVPROC = undefined;
var glPathDashArrayNV_impl : PFNGLPATHDASHARRAYNVPROC = undefined;
var glPathStencilFuncNV_impl : PFNGLPATHSTENCILFUNCNVPROC = undefined;
var glPathStencilDepthOffsetNV_impl : PFNGLPATHSTENCILDEPTHOFFSETNVPROC = undefined;
var glStencilFillPathNV_impl : PFNGLSTENCILFILLPATHNVPROC = undefined;
var glStencilStrokePathNV_impl : PFNGLSTENCILSTROKEPATHNVPROC = undefined;
var glStencilFillPathInstancedNV_impl : PFNGLSTENCILFILLPATHINSTANCEDNVPROC = undefined;
var glStencilStrokePathInstancedNV_impl : PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = undefined;
var glPathCoverDepthFuncNV_impl : PFNGLPATHCOVERDEPTHFUNCNVPROC = undefined;
var glCoverFillPathNV_impl : PFNGLCOVERFILLPATHNVPROC = undefined;
var glCoverStrokePathNV_impl : PFNGLCOVERSTROKEPATHNVPROC = undefined;
var glCoverFillPathInstancedNV_impl : PFNGLCOVERFILLPATHINSTANCEDNVPROC = undefined;
var glCoverStrokePathInstancedNV_impl : PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = undefined;
var glGetPathParameterivNV_impl : PFNGLGETPATHPARAMETERIVNVPROC = undefined;
var glGetPathParameterfvNV_impl : PFNGLGETPATHPARAMETERFVNVPROC = undefined;
var glGetPathCommandsNV_impl : PFNGLGETPATHCOMMANDSNVPROC = undefined;
var glGetPathCoordsNV_impl : PFNGLGETPATHCOORDSNVPROC = undefined;
var glGetPathDashArrayNV_impl : PFNGLGETPATHDASHARRAYNVPROC = undefined;
var glGetPathMetricsNV_impl : PFNGLGETPATHMETRICSNVPROC = undefined;
var glGetPathMetricRangeNV_impl : PFNGLGETPATHMETRICRANGENVPROC = undefined;
var glGetPathSpacingNV_impl : PFNGLGETPATHSPACINGNVPROC = undefined;
var glIsPointInFillPathNV_impl : PFNGLISPOINTINFILLPATHNVPROC = undefined;
var glIsPointInStrokePathNV_impl : PFNGLISPOINTINSTROKEPATHNVPROC = undefined;
var glGetPathLengthNV_impl : PFNGLGETPATHLENGTHNVPROC = undefined;
var glPointAlongPathNV_impl : PFNGLPOINTALONGPATHNVPROC = undefined;
var glMatrixLoad3x2fNV_impl : PFNGLMATRIXLOAD3X2FNVPROC = undefined;
var glMatrixLoad3x3fNV_impl : PFNGLMATRIXLOAD3X3FNVPROC = undefined;
var glMatrixLoadTranspose3x3fNV_impl : PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = undefined;
var glMatrixMult3x2fNV_impl : PFNGLMATRIXMULT3X2FNVPROC = undefined;
var glMatrixMult3x3fNV_impl : PFNGLMATRIXMULT3X3FNVPROC = undefined;
var glMatrixMultTranspose3x3fNV_impl : PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = undefined;
var glStencilThenCoverFillPathNV_impl : PFNGLSTENCILTHENCOVERFILLPATHNVPROC = undefined;
var glStencilThenCoverStrokePathNV_impl : PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = undefined;
var glStencilThenCoverFillPathInstancedNV_impl : PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = undefined;
var glStencilThenCoverStrokePathInstancedNV_impl : PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = undefined;
var glPathGlyphIndexRangeNV_impl : PFNGLPATHGLYPHINDEXRANGENVPROC = undefined;
var glPathGlyphIndexArrayNV_impl : PFNGLPATHGLYPHINDEXARRAYNVPROC = undefined;
var glPathMemoryGlyphIndexArrayNV_impl : PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = undefined;
var glProgramPathFragmentInputGenNV_impl : PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = undefined;
var glGetProgramResourcefvNV_impl : PFNGLGETPROGRAMRESOURCEFVNVPROC = undefined;
var glMatrixFrustumEXT_impl : PFNGLMATRIXFRUSTUMEXTPROC = undefined;
var glMatrixLoadIdentityEXT_impl : PFNGLMATRIXLOADIDENTITYEXTPROC = undefined;
var glMatrixLoadTransposefEXT_impl : PFNGLMATRIXLOADTRANSPOSEFEXTPROC = undefined;
var glMatrixLoadTransposedEXT_impl : PFNGLMATRIXLOADTRANSPOSEDEXTPROC = undefined;
var glMatrixLoadfEXT_impl : PFNGLMATRIXLOADFEXTPROC = undefined;
var glMatrixLoaddEXT_impl : PFNGLMATRIXLOADDEXTPROC = undefined;
var glMatrixMultTransposefEXT_impl : PFNGLMATRIXMULTTRANSPOSEFEXTPROC = undefined;
var glMatrixMultTransposedEXT_impl : PFNGLMATRIXMULTTRANSPOSEDEXTPROC = undefined;
var glMatrixMultfEXT_impl : PFNGLMATRIXMULTFEXTPROC = undefined;
var glMatrixMultdEXT_impl : PFNGLMATRIXMULTDEXTPROC = undefined;
var glMatrixOrthoEXT_impl : PFNGLMATRIXORTHOEXTPROC = undefined;
var glMatrixPopEXT_impl : PFNGLMATRIXPOPEXTPROC = undefined;
var glMatrixPushEXT_impl : PFNGLMATRIXPUSHEXTPROC = undefined;
var glMatrixRotatefEXT_impl : PFNGLMATRIXROTATEFEXTPROC = undefined;
var glMatrixRotatedEXT_impl : PFNGLMATRIXROTATEDEXTPROC = undefined;
var glMatrixScalefEXT_impl : PFNGLMATRIXSCALEFEXTPROC = undefined;
var glMatrixScaledEXT_impl : PFNGLMATRIXSCALEDEXTPROC = undefined;
var glMatrixTranslatefEXT_impl : PFNGLMATRIXTRANSLATEFEXTPROC = undefined;
var glMatrixTranslatedEXT_impl : PFNGLMATRIXTRANSLATEDEXTPROC = undefined;
var glPolygonModeNV_impl : PFNGLPOLYGONMODENVPROC = undefined;
var glReadBufferNV_impl : PFNGLREADBUFFERNVPROC = undefined;
var glFramebufferSampleLocationsfvNV_impl : PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = undefined;
var glNamedFramebufferSampleLocationsfvNV_impl : PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = undefined;
var glResolveDepthValuesNV_impl : PFNGLRESOLVEDEPTHVALUESNVPROC = undefined;
var glViewportArrayvNV_impl : PFNGLVIEWPORTARRAYVNVPROC = undefined;
var glViewportIndexedfNV_impl : PFNGLVIEWPORTINDEXEDFNVPROC = undefined;
var glViewportIndexedfvNV_impl : PFNGLVIEWPORTINDEXEDFVNVPROC = undefined;
var glScissorArrayvNV_impl : PFNGLSCISSORARRAYVNVPROC = undefined;
var glScissorIndexedNV_impl : PFNGLSCISSORINDEXEDNVPROC = undefined;
var glScissorIndexedvNV_impl : PFNGLSCISSORINDEXEDVNVPROC = undefined;
var glDepthRangeArrayfvNV_impl : PFNGLDEPTHRANGEARRAYFVNVPROC = undefined;
var glDepthRangeIndexedfNV_impl : PFNGLDEPTHRANGEINDEXEDFNVPROC = undefined;
var glGetFloati_vNV_impl : PFNGLGETFLOATI_VNVPROC = undefined;
var glEnableiNV_impl : PFNGLENABLEINVPROC = undefined;
var glDisableiNV_impl : PFNGLDISABLEINVPROC = undefined;
var glIsEnablediNV_impl : PFNGLISENABLEDINVPROC = undefined;
var glViewportSwizzleNV_impl : PFNGLVIEWPORTSWIZZLENVPROC = undefined;
var glFramebufferTextureMultiviewOVR_impl : PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = undefined;
var glFramebufferTextureMultisampleMultiviewOVR_impl : PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC = undefined;
var glAlphaFuncQCOM_impl : PFNGLALPHAFUNCQCOMPROC = undefined;
var glGetDriverControlsQCOM_impl : PFNGLGETDRIVERCONTROLSQCOMPROC = undefined;
var glGetDriverControlStringQCOM_impl : PFNGLGETDRIVERCONTROLSTRINGQCOMPROC = undefined;
var glEnableDriverControlQCOM_impl : PFNGLENABLEDRIVERCONTROLQCOMPROC = undefined;
var glDisableDriverControlQCOM_impl : PFNGLDISABLEDRIVERCONTROLQCOMPROC = undefined;
var glExtGetTexturesQCOM_impl : PFNGLEXTGETTEXTURESQCOMPROC = undefined;
var glExtGetBuffersQCOM_impl : PFNGLEXTGETBUFFERSQCOMPROC = undefined;
var glExtGetRenderbuffersQCOM_impl : PFNGLEXTGETRENDERBUFFERSQCOMPROC = undefined;
var glExtGetFramebuffersQCOM_impl : PFNGLEXTGETFRAMEBUFFERSQCOMPROC = undefined;
var glExtGetTexLevelParameterivQCOM_impl : PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC = undefined;
var glExtTexObjectStateOverrideiQCOM_impl : PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC = undefined;
var glExtGetTexSubImageQCOM_impl : PFNGLEXTGETTEXSUBIMAGEQCOMPROC = undefined;
var glExtGetBufferPointervQCOM_impl : PFNGLEXTGETBUFFERPOINTERVQCOMPROC = undefined;
var glExtGetShadersQCOM_impl : PFNGLEXTGETSHADERSQCOMPROC = undefined;
var glExtGetProgramsQCOM_impl : PFNGLEXTGETPROGRAMSQCOMPROC = undefined;
var glExtIsProgramBinaryQCOM_impl : PFNGLEXTISPROGRAMBINARYQCOMPROC = undefined;
var glExtGetProgramBinarySourceQCOM_impl : PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC = undefined;
var glFramebufferFoveationConfigQCOM_impl : PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC = undefined;
var glFramebufferFoveationParametersQCOM_impl : PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC = undefined;
var glFramebufferFetchBarrierQCOM_impl : PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC = undefined;
var glTextureFoveationParametersQCOM_impl : PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC = undefined;
var glStartTilingQCOM_impl : PFNGLSTARTTILINGQCOMPROC = undefined;
var glEndTilingQCOM_impl : PFNGLENDTILINGQCOMPROC = undefined;
var glActiveTexture_impl : PFNGLACTIVETEXTUREPROC = undefined;
var glAttachShader_impl : PFNGLATTACHSHADERPROC = undefined;
var glBindAttribLocation_impl : PFNGLBINDATTRIBLOCATIONPROC = undefined;
var glBindBuffer_impl : PFNGLBINDBUFFERPROC = undefined;
var glBindFramebuffer_impl : PFNGLBINDFRAMEBUFFERPROC = undefined;
var glBindRenderbuffer_impl : PFNGLBINDRENDERBUFFERPROC = undefined;
var glBindTexture_impl : PFNGLBINDTEXTUREPROC = undefined;
var glBlendColor_impl : PFNGLBLENDCOLORPROC = undefined;
var glBlendEquation_impl : PFNGLBLENDEQUATIONPROC = undefined;
var glBlendEquationSeparate_impl : PFNGLBLENDEQUATIONSEPARATEPROC = undefined;
var glBlendFunc_impl : PFNGLBLENDFUNCPROC = undefined;
var glBlendFuncSeparate_impl : PFNGLBLENDFUNCSEPARATEPROC = undefined;
var glBufferData_impl : PFNGLBUFFERDATAPROC = undefined;
var glBufferSubData_impl : PFNGLBUFFERSUBDATAPROC = undefined;
var glCheckFramebufferStatus_impl : PFNGLCHECKFRAMEBUFFERSTATUSPROC = undefined;
var glClear_impl : PFNGLCLEARPROC = undefined;
var glClearColor_impl : PFNGLCLEARCOLORPROC = undefined;
var glClearDepthf_impl : PFNGLCLEARDEPTHFPROC = undefined;
var glClearStencil_impl : PFNGLCLEARSTENCILPROC = undefined;
var glColorMask_impl : PFNGLCOLORMASKPROC = undefined;
var glCompileShader_impl : PFNGLCOMPILESHADERPROC = undefined;
var glCompressedTexImage2D_impl : PFNGLCOMPRESSEDTEXIMAGE2DPROC = undefined;
var glCompressedTexSubImage2D_impl : PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = undefined;
var glCopyTexImage2D_impl : PFNGLCOPYTEXIMAGE2DPROC = undefined;
var glCopyTexSubImage2D_impl : PFNGLCOPYTEXSUBIMAGE2DPROC = undefined;
var glCreateProgram_impl : PFNGLCREATEPROGRAMPROC = undefined;
var glCreateShader_impl : PFNGLCREATESHADERPROC = undefined;
var glCullFace_impl : PFNGLCULLFACEPROC = undefined;
var glDeleteBuffers_impl : PFNGLDELETEBUFFERSPROC = undefined;
var glDeleteFramebuffers_impl : PFNGLDELETEFRAMEBUFFERSPROC = undefined;
var glDeleteProgram_impl : PFNGLDELETEPROGRAMPROC = undefined;
var glDeleteRenderbuffers_impl : PFNGLDELETERENDERBUFFERSPROC = undefined;
var glDeleteShader_impl : PFNGLDELETESHADERPROC = undefined;
var glDeleteTextures_impl : PFNGLDELETETEXTURESPROC = undefined;
var glDepthFunc_impl : PFNGLDEPTHFUNCPROC = undefined;
var glDepthMask_impl : PFNGLDEPTHMASKPROC = undefined;
var glDepthRangef_impl : PFNGLDEPTHRANGEFPROC = undefined;
var glDetachShader_impl : PFNGLDETACHSHADERPROC = undefined;
var glDisable_impl : PFNGLDISABLEPROC = undefined;
var glDisableVertexAttribArray_impl : PFNGLDISABLEVERTEXATTRIBARRAYPROC = undefined;
var glDrawArrays_impl : PFNGLDRAWARRAYSPROC = undefined;
var glDrawElements_impl : PFNGLDRAWELEMENTSPROC = undefined;
var glEnable_impl : PFNGLENABLEPROC = undefined;
var glEnableVertexAttribArray_impl : PFNGLENABLEVERTEXATTRIBARRAYPROC = undefined;
var glFinish_impl : PFNGLFINISHPROC = undefined;
var glFlush_impl : PFNGLFLUSHPROC = undefined;
var glFramebufferRenderbuffer_impl : PFNGLFRAMEBUFFERRENDERBUFFERPROC = undefined;
var glFramebufferTexture2D_impl : PFNGLFRAMEBUFFERTEXTURE2DPROC = undefined;
var glFrontFace_impl : PFNGLFRONTFACEPROC = undefined;
var glGenBuffers_impl : PFNGLGENBUFFERSPROC = undefined;
var glGenerateMipmap_impl : PFNGLGENERATEMIPMAPPROC = undefined;
var glGenFramebuffers_impl : PFNGLGENFRAMEBUFFERSPROC = undefined;
var glGenRenderbuffers_impl : PFNGLGENRENDERBUFFERSPROC = undefined;
var glGenTextures_impl : PFNGLGENTEXTURESPROC = undefined;
var glGetActiveAttrib_impl : PFNGLGETACTIVEATTRIBPROC = undefined;
var glGetActiveUniform_impl : PFNGLGETACTIVEUNIFORMPROC = undefined;
var glGetAttachedShaders_impl : PFNGLGETATTACHEDSHADERSPROC = undefined;
var glGetAttribLocation_impl : PFNGLGETATTRIBLOCATIONPROC = undefined;
var glGetBooleanv_impl : PFNGLGETBOOLEANVPROC = undefined;
var glGetBufferParameteriv_impl : PFNGLGETBUFFERPARAMETERIVPROC = undefined;
var glGetError_impl : PFNGLGETERRORPROC = undefined;
var glGetFloatv_impl : PFNGLGETFLOATVPROC = undefined;
var glGetFramebufferAttachmentParameteriv_impl : PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = undefined;
var glGetIntegerv_impl : PFNGLGETINTEGERVPROC = undefined;
var glGetProgramiv_impl : PFNGLGETPROGRAMIVPROC = undefined;
var glGetProgramInfoLog_impl : PFNGLGETPROGRAMINFOLOGPROC = undefined;
var glGetRenderbufferParameteriv_impl : PFNGLGETRENDERBUFFERPARAMETERIVPROC = undefined;
var glGetShaderiv_impl : PFNGLGETSHADERIVPROC = undefined;
var glGetShaderInfoLog_impl : PFNGLGETSHADERINFOLOGPROC = undefined;
var glGetShaderPrecisionFormat_impl : PFNGLGETSHADERPRECISIONFORMATPROC = undefined;
var glGetShaderSource_impl : PFNGLGETSHADERSOURCEPROC = undefined;
var glGetString_impl : PFNGLGETSTRINGPROC = undefined;
var glGetTexParameterfv_impl : PFNGLGETTEXPARAMETERFVPROC = undefined;
var glGetTexParameteriv_impl : PFNGLGETTEXPARAMETERIVPROC = undefined;
var glGetUniformfv_impl : PFNGLGETUNIFORMFVPROC = undefined;
var glGetUniformiv_impl : PFNGLGETUNIFORMIVPROC = undefined;
var glGetUniformLocation_impl : PFNGLGETUNIFORMLOCATIONPROC = undefined;
var glGetVertexAttribfv_impl : PFNGLGETVERTEXATTRIBFVPROC = undefined;
var glGetVertexAttribiv_impl : PFNGLGETVERTEXATTRIBIVPROC = undefined;
var glGetVertexAttribPointerv_impl : PFNGLGETVERTEXATTRIBPOINTERVPROC = undefined;
var glHint_impl : PFNGLHINTPROC = undefined;
var glIsBuffer_impl : PFNGLISBUFFERPROC = undefined;
var glIsEnabled_impl : PFNGLISENABLEDPROC = undefined;
var glIsFramebuffer_impl : PFNGLISFRAMEBUFFERPROC = undefined;
var glIsProgram_impl : PFNGLISPROGRAMPROC = undefined;
var glIsRenderbuffer_impl : PFNGLISRENDERBUFFERPROC = undefined;
var glIsShader_impl : PFNGLISSHADERPROC = undefined;
var glIsTexture_impl : PFNGLISTEXTUREPROC = undefined;
var glLineWidth_impl : PFNGLLINEWIDTHPROC = undefined;
var glLinkProgram_impl : PFNGLLINKPROGRAMPROC = undefined;
var glPixelStorei_impl : PFNGLPIXELSTOREIPROC = undefined;
var glPolygonOffset_impl : PFNGLPOLYGONOFFSETPROC = undefined;
var glReadPixels_impl : PFNGLREADPIXELSPROC = undefined;
var glReleaseShaderCompiler_impl : PFNGLRELEASESHADERCOMPILERPROC = undefined;
var glRenderbufferStorage_impl : PFNGLRENDERBUFFERSTORAGEPROC = undefined;
var glSampleCoverage_impl : PFNGLSAMPLECOVERAGEPROC = undefined;
var glScissor_impl : PFNGLSCISSORPROC = undefined;
var glShaderBinary_impl : PFNGLSHADERBINARYPROC = undefined;
var glShaderSource_impl : PFNGLSHADERSOURCEPROC = undefined;
var glStencilFunc_impl : PFNGLSTENCILFUNCPROC = undefined;
var glStencilFuncSeparate_impl : PFNGLSTENCILFUNCSEPARATEPROC = undefined;
var glStencilMask_impl : PFNGLSTENCILMASKPROC = undefined;
var glStencilMaskSeparate_impl : PFNGLSTENCILMASKSEPARATEPROC = undefined;
var glStencilOp_impl : PFNGLSTENCILOPPROC = undefined;
var glStencilOpSeparate_impl : PFNGLSTENCILOPSEPARATEPROC = undefined;
var glTexImage2D_impl : PFNGLTEXIMAGE2DPROC = undefined;
var glTexParameterf_impl : PFNGLTEXPARAMETERFPROC = undefined;
var glTexParameterfv_impl : PFNGLTEXPARAMETERFVPROC = undefined;
var glTexParameteri_impl : PFNGLTEXPARAMETERIPROC = undefined;
var glTexParameteriv_impl : PFNGLTEXPARAMETERIVPROC = undefined;
var glTexSubImage2D_impl : PFNGLTEXSUBIMAGE2DPROC = undefined;
var glUniform1f_impl : PFNGLUNIFORM1FPROC = undefined;
var glUniform1fv_impl : PFNGLUNIFORM1FVPROC = undefined;
var glUniform1i_impl : PFNGLUNIFORM1IPROC = undefined;
var glUniform1iv_impl : PFNGLUNIFORM1IVPROC = undefined;
var glUniform2f_impl : PFNGLUNIFORM2FPROC = undefined;
var glUniform2fv_impl : PFNGLUNIFORM2FVPROC = undefined;
var glUniform2i_impl : PFNGLUNIFORM2IPROC = undefined;
var glUniform2iv_impl : PFNGLUNIFORM2IVPROC = undefined;
var glUniform3f_impl : PFNGLUNIFORM3FPROC = undefined;
var glUniform3fv_impl : PFNGLUNIFORM3FVPROC = undefined;
var glUniform3i_impl : PFNGLUNIFORM3IPROC = undefined;
var glUniform3iv_impl : PFNGLUNIFORM3IVPROC = undefined;
var glUniform4f_impl : PFNGLUNIFORM4FPROC = undefined;
var glUniform4fv_impl : PFNGLUNIFORM4FVPROC = undefined;
var glUniform4i_impl : PFNGLUNIFORM4IPROC = undefined;
var glUniform4iv_impl : PFNGLUNIFORM4IVPROC = undefined;
var glUniformMatrix2fv_impl : PFNGLUNIFORMMATRIX2FVPROC = undefined;
var glUniformMatrix3fv_impl : PFNGLUNIFORMMATRIX3FVPROC = undefined;
var glUniformMatrix4fv_impl : PFNGLUNIFORMMATRIX4FVPROC = undefined;
var glUseProgram_impl : PFNGLUSEPROGRAMPROC = undefined;
var glValidateProgram_impl : PFNGLVALIDATEPROGRAMPROC = undefined;
var glVertexAttrib1f_impl : PFNGLVERTEXATTRIB1FPROC = undefined;
var glVertexAttrib1fv_impl : PFNGLVERTEXATTRIB1FVPROC = undefined;
var glVertexAttrib2f_impl : PFNGLVERTEXATTRIB2FPROC = undefined;
var glVertexAttrib2fv_impl : PFNGLVERTEXATTRIB2FVPROC = undefined;
var glVertexAttrib3f_impl : PFNGLVERTEXATTRIB3FPROC = undefined;
var glVertexAttrib3fv_impl : PFNGLVERTEXATTRIB3FVPROC = undefined;
var glVertexAttrib4f_impl : PFNGLVERTEXATTRIB4FPROC = undefined;
var glVertexAttrib4fv_impl : PFNGLVERTEXATTRIB4FVPROC = undefined;
var glVertexAttribPointer_impl : PFNGLVERTEXATTRIBPOINTERPROC = undefined;
var glViewport_impl : PFNGLVIEWPORTPROC = undefined;
